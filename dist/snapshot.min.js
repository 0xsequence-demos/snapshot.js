(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.snapshot = factory());
})(this, (function () { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __awaiter$c(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function getDefaultExportFromCjs (x) {
    	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
    }

    function getAugmentedNamespace(n) {
    	if (n.__esModule) return n;
    	var a = Object.defineProperty({}, '__esModule', {value: true});
    	Object.keys(n).forEach(function (k) {
    		var d = Object.getOwnPropertyDescriptor(n, k);
    		Object.defineProperty(a, k, d.get ? d : {
    			enumerable: true,
    			get: function () {
    				return n[k];
    			}
    		});
    	});
    	return a;
    }

    function createCommonjsModule$1(fn) {
      var module = { exports: {} };
    	return fn(module, module.exports), module.exports;
    }

    var browserPonyfill = createCommonjsModule$1(function (module, exports) {
    // Save global object in a variable
    var __global__ =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof self !== 'undefined' && self) ||
    (typeof commonjsGlobal !== 'undefined' && commonjsGlobal);
    // Create an object that extends from __global__ without the fetch function
    var __globalThis__ = (function () {
    function F() {
    this.fetch = false;
    this.DOMException = __global__.DOMException;
    }
    F.prototype = __global__; // Needed for feature detection on whatwg-fetch's code
    return new F();
    })();
    // Wraps whatwg-fetch with a function scope to hijack the global object
    // "globalThis" that's going to be patched
    (function(globalThis) {

    ((function (exports) {

      /* eslint-disable no-prototype-builtins */
      var g =
        (typeof globalThis !== 'undefined' && globalThis) ||
        (typeof self !== 'undefined' && self) ||
        // eslint-disable-next-line no-undef
        (typeof commonjsGlobal !== 'undefined' && commonjsGlobal) ||
        {};

      var support = {
        searchParams: 'URLSearchParams' in g,
        iterable: 'Symbol' in g && 'iterator' in Symbol,
        blob:
          'FileReader' in g &&
          'Blob' in g &&
          (function() {
            try {
              new Blob();
              return true
            } catch (e) {
              return false
            }
          })(),
        formData: 'FormData' in g,
        arrayBuffer: 'ArrayBuffer' in g
      };

      function isDataView(obj) {
        return obj && DataView.prototype.isPrototypeOf(obj)
      }

      if (support.arrayBuffer) {
        var viewClasses = [
          '[object Int8Array]',
          '[object Uint8Array]',
          '[object Uint8ClampedArray]',
          '[object Int16Array]',
          '[object Uint16Array]',
          '[object Int32Array]',
          '[object Uint32Array]',
          '[object Float32Array]',
          '[object Float64Array]'
        ];

        var isArrayBufferView =
          ArrayBuffer.isView ||
          function(obj) {
            return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1
          };
      }

      function normalizeName(name) {
        if (typeof name !== 'string') {
          name = String(name);
        }
        if (/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(name) || name === '') {
          throw new TypeError('Invalid character in header field name: "' + name + '"')
        }
        return name.toLowerCase()
      }

      function normalizeValue(value) {
        if (typeof value !== 'string') {
          value = String(value);
        }
        return value
      }

      // Build a destructive iterator for the value list
      function iteratorFor(items) {
        var iterator = {
          next: function() {
            var value = items.shift();
            return {done: value === undefined, value: value}
          }
        };

        if (support.iterable) {
          iterator[Symbol.iterator] = function() {
            return iterator
          };
        }

        return iterator
      }

      function Headers(headers) {
        this.map = {};

        if (headers instanceof Headers) {
          headers.forEach(function(value, name) {
            this.append(name, value);
          }, this);
        } else if (Array.isArray(headers)) {
          headers.forEach(function(header) {
            if (header.length != 2) {
              throw new TypeError('Headers constructor: expected name/value pair to be length 2, found' + header.length)
            }
            this.append(header[0], header[1]);
          }, this);
        } else if (headers) {
          Object.getOwnPropertyNames(headers).forEach(function(name) {
            this.append(name, headers[name]);
          }, this);
        }
      }

      Headers.prototype.append = function(name, value) {
        name = normalizeName(name);
        value = normalizeValue(value);
        var oldValue = this.map[name];
        this.map[name] = oldValue ? oldValue + ', ' + value : value;
      };

      Headers.prototype['delete'] = function(name) {
        delete this.map[normalizeName(name)];
      };

      Headers.prototype.get = function(name) {
        name = normalizeName(name);
        return this.has(name) ? this.map[name] : null
      };

      Headers.prototype.has = function(name) {
        return this.map.hasOwnProperty(normalizeName(name))
      };

      Headers.prototype.set = function(name, value) {
        this.map[normalizeName(name)] = normalizeValue(value);
      };

      Headers.prototype.forEach = function(callback, thisArg) {
        for (var name in this.map) {
          if (this.map.hasOwnProperty(name)) {
            callback.call(thisArg, this.map[name], name, this);
          }
        }
      };

      Headers.prototype.keys = function() {
        var items = [];
        this.forEach(function(value, name) {
          items.push(name);
        });
        return iteratorFor(items)
      };

      Headers.prototype.values = function() {
        var items = [];
        this.forEach(function(value) {
          items.push(value);
        });
        return iteratorFor(items)
      };

      Headers.prototype.entries = function() {
        var items = [];
        this.forEach(function(value, name) {
          items.push([name, value]);
        });
        return iteratorFor(items)
      };

      if (support.iterable) {
        Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
      }

      function consumed(body) {
        if (body._noBody) return
        if (body.bodyUsed) {
          return Promise.reject(new TypeError('Already read'))
        }
        body.bodyUsed = true;
      }

      function fileReaderReady(reader) {
        return new Promise(function(resolve, reject) {
          reader.onload = function() {
            resolve(reader.result);
          };
          reader.onerror = function() {
            reject(reader.error);
          };
        })
      }

      function readBlobAsArrayBuffer(blob) {
        var reader = new FileReader();
        var promise = fileReaderReady(reader);
        reader.readAsArrayBuffer(blob);
        return promise
      }

      function readBlobAsText(blob) {
        var reader = new FileReader();
        var promise = fileReaderReady(reader);
        var match = /charset=([A-Za-z0-9_-]+)/.exec(blob.type);
        var encoding = match ? match[1] : 'utf-8';
        reader.readAsText(blob, encoding);
        return promise
      }

      function readArrayBufferAsText(buf) {
        var view = new Uint8Array(buf);
        var chars = new Array(view.length);

        for (var i = 0; i < view.length; i++) {
          chars[i] = String.fromCharCode(view[i]);
        }
        return chars.join('')
      }

      function bufferClone(buf) {
        if (buf.slice) {
          return buf.slice(0)
        } else {
          var view = new Uint8Array(buf.byteLength);
          view.set(new Uint8Array(buf));
          return view.buffer
        }
      }

      function Body() {
        this.bodyUsed = false;

        this._initBody = function(body) {
          /*
            fetch-mock wraps the Response object in an ES6 Proxy to
            provide useful test harness features such as flush. However, on
            ES5 browsers without fetch or Proxy support pollyfills must be used;
            the proxy-pollyfill is unable to proxy an attribute unless it exists
            on the object before the Proxy is created. This change ensures
            Response.bodyUsed exists on the instance, while maintaining the
            semantic of setting Request.bodyUsed in the constructor before
            _initBody is called.
          */
          // eslint-disable-next-line no-self-assign
          this.bodyUsed = this.bodyUsed;
          this._bodyInit = body;
          if (!body) {
            this._noBody = true;
            this._bodyText = '';
          } else if (typeof body === 'string') {
            this._bodyText = body;
          } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
            this._bodyBlob = body;
          } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
            this._bodyFormData = body;
          } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
            this._bodyText = body.toString();
          } else if (support.arrayBuffer && support.blob && isDataView(body)) {
            this._bodyArrayBuffer = bufferClone(body.buffer);
            // IE 10-11 can't handle a DataView body.
            this._bodyInit = new Blob([this._bodyArrayBuffer]);
          } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
            this._bodyArrayBuffer = bufferClone(body);
          } else {
            this._bodyText = body = Object.prototype.toString.call(body);
          }

          if (!this.headers.get('content-type')) {
            if (typeof body === 'string') {
              this.headers.set('content-type', 'text/plain;charset=UTF-8');
            } else if (this._bodyBlob && this._bodyBlob.type) {
              this.headers.set('content-type', this._bodyBlob.type);
            } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
              this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
            }
          }
        };

        if (support.blob) {
          this.blob = function() {
            var rejected = consumed(this);
            if (rejected) {
              return rejected
            }

            if (this._bodyBlob) {
              return Promise.resolve(this._bodyBlob)
            } else if (this._bodyArrayBuffer) {
              return Promise.resolve(new Blob([this._bodyArrayBuffer]))
            } else if (this._bodyFormData) {
              throw new Error('could not read FormData body as blob')
            } else {
              return Promise.resolve(new Blob([this._bodyText]))
            }
          };
        }

        this.arrayBuffer = function() {
          if (this._bodyArrayBuffer) {
            var isConsumed = consumed(this);
            if (isConsumed) {
              return isConsumed
            } else if (ArrayBuffer.isView(this._bodyArrayBuffer)) {
              return Promise.resolve(
                this._bodyArrayBuffer.buffer.slice(
                  this._bodyArrayBuffer.byteOffset,
                  this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength
                )
              )
            } else {
              return Promise.resolve(this._bodyArrayBuffer)
            }
          } else if (support.blob) {
            return this.blob().then(readBlobAsArrayBuffer)
          } else {
            throw new Error('could not read as ArrayBuffer')
          }
        };

        this.text = function() {
          var rejected = consumed(this);
          if (rejected) {
            return rejected
          }

          if (this._bodyBlob) {
            return readBlobAsText(this._bodyBlob)
          } else if (this._bodyArrayBuffer) {
            return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))
          } else if (this._bodyFormData) {
            throw new Error('could not read FormData body as text')
          } else {
            return Promise.resolve(this._bodyText)
          }
        };

        if (support.formData) {
          this.formData = function() {
            return this.text().then(decode)
          };
        }

        this.json = function() {
          return this.text().then(JSON.parse)
        };

        return this
      }

      // HTTP methods whose capitalization should be normalized
      var methods = ['CONNECT', 'DELETE', 'GET', 'HEAD', 'OPTIONS', 'PATCH', 'POST', 'PUT', 'TRACE'];

      function normalizeMethod(method) {
        var upcased = method.toUpperCase();
        return methods.indexOf(upcased) > -1 ? upcased : method
      }

      function Request(input, options) {
        if (!(this instanceof Request)) {
          throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.')
        }

        options = options || {};
        var body = options.body;

        if (input instanceof Request) {
          if (input.bodyUsed) {
            throw new TypeError('Already read')
          }
          this.url = input.url;
          this.credentials = input.credentials;
          if (!options.headers) {
            this.headers = new Headers(input.headers);
          }
          this.method = input.method;
          this.mode = input.mode;
          this.signal = input.signal;
          if (!body && input._bodyInit != null) {
            body = input._bodyInit;
            input.bodyUsed = true;
          }
        } else {
          this.url = String(input);
        }

        this.credentials = options.credentials || this.credentials || 'same-origin';
        if (options.headers || !this.headers) {
          this.headers = new Headers(options.headers);
        }
        this.method = normalizeMethod(options.method || this.method || 'GET');
        this.mode = options.mode || this.mode || null;
        this.signal = options.signal || this.signal || (function () {
          if ('AbortController' in g) {
            var ctrl = new AbortController();
            return ctrl.signal;
          }
        }());
        this.referrer = null;

        if ((this.method === 'GET' || this.method === 'HEAD') && body) {
          throw new TypeError('Body not allowed for GET or HEAD requests')
        }
        this._initBody(body);

        if (this.method === 'GET' || this.method === 'HEAD') {
          if (options.cache === 'no-store' || options.cache === 'no-cache') {
            // Search for a '_' parameter in the query string
            var reParamSearch = /([?&])_=[^&]*/;
            if (reParamSearch.test(this.url)) {
              // If it already exists then set the value with the current time
              this.url = this.url.replace(reParamSearch, '$1_=' + new Date().getTime());
            } else {
              // Otherwise add a new '_' parameter to the end with the current time
              var reQueryString = /\?/;
              this.url += (reQueryString.test(this.url) ? '&' : '?') + '_=' + new Date().getTime();
            }
          }
        }
      }

      Request.prototype.clone = function() {
        return new Request(this, {body: this._bodyInit})
      };

      function decode(body) {
        var form = new FormData();
        body
          .trim()
          .split('&')
          .forEach(function(bytes) {
            if (bytes) {
              var split = bytes.split('=');
              var name = split.shift().replace(/\+/g, ' ');
              var value = split.join('=').replace(/\+/g, ' ');
              form.append(decodeURIComponent(name), decodeURIComponent(value));
            }
          });
        return form
      }

      function parseHeaders(rawHeaders) {
        var headers = new Headers();
        // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
        // https://tools.ietf.org/html/rfc7230#section-3.2
        var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ');
        // Avoiding split via regex to work around a common IE11 bug with the core-js 3.6.0 regex polyfill
        // https://github.com/github/fetch/issues/748
        // https://github.com/zloirock/core-js/issues/751
        preProcessedHeaders
          .split('\r')
          .map(function(header) {
            return header.indexOf('\n') === 0 ? header.substr(1, header.length) : header
          })
          .forEach(function(line) {
            var parts = line.split(':');
            var key = parts.shift().trim();
            if (key) {
              var value = parts.join(':').trim();
              try {
                headers.append(key, value);
              } catch (error) {
                console.warn('Response ' + error.message);
              }
            }
          });
        return headers
      }

      Body.call(Request.prototype);

      function Response(bodyInit, options) {
        if (!(this instanceof Response)) {
          throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.')
        }
        if (!options) {
          options = {};
        }

        this.type = 'default';
        this.status = options.status === undefined ? 200 : options.status;
        if (this.status < 200 || this.status > 599) {
          throw new RangeError("Failed to construct 'Response': The status provided (0) is outside the range [200, 599].")
        }
        this.ok = this.status >= 200 && this.status < 300;
        this.statusText = options.statusText === undefined ? '' : '' + options.statusText;
        this.headers = new Headers(options.headers);
        this.url = options.url || '';
        this._initBody(bodyInit);
      }

      Body.call(Response.prototype);

      Response.prototype.clone = function() {
        return new Response(this._bodyInit, {
          status: this.status,
          statusText: this.statusText,
          headers: new Headers(this.headers),
          url: this.url
        })
      };

      Response.error = function() {
        var response = new Response(null, {status: 200, statusText: ''});
        response.ok = false;
        response.status = 0;
        response.type = 'error';
        return response
      };

      var redirectStatuses = [301, 302, 303, 307, 308];

      Response.redirect = function(url, status) {
        if (redirectStatuses.indexOf(status) === -1) {
          throw new RangeError('Invalid status code')
        }

        return new Response(null, {status: status, headers: {location: url}})
      };

      exports.DOMException = g.DOMException;
      try {
        new exports.DOMException();
      } catch (err) {
        exports.DOMException = function(message, name) {
          this.message = message;
          this.name = name;
          var error = Error(message);
          this.stack = error.stack;
        };
        exports.DOMException.prototype = Object.create(Error.prototype);
        exports.DOMException.prototype.constructor = exports.DOMException;
      }

      function fetch(input, init) {
        return new Promise(function(resolve, reject) {
          var request = new Request(input, init);

          if (request.signal && request.signal.aborted) {
            return reject(new exports.DOMException('Aborted', 'AbortError'))
          }

          var xhr = new XMLHttpRequest();

          function abortXhr() {
            xhr.abort();
          }

          xhr.onload = function() {
            var options = {
              statusText: xhr.statusText,
              headers: parseHeaders(xhr.getAllResponseHeaders() || '')
            };
            // This check if specifically for when a user fetches a file locally from the file system
            // Only if the status is out of a normal range
            if (request.url.indexOf('file://') === 0 && (xhr.status < 200 || xhr.status > 599)) {
              options.status = 200;
            } else {
              options.status = xhr.status;
            }
            options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
            var body = 'response' in xhr ? xhr.response : xhr.responseText;
            setTimeout(function() {
              resolve(new Response(body, options));
            }, 0);
          };

          xhr.onerror = function() {
            setTimeout(function() {
              reject(new TypeError('Network request failed'));
            }, 0);
          };

          xhr.ontimeout = function() {
            setTimeout(function() {
              reject(new TypeError('Network request timed out'));
            }, 0);
          };

          xhr.onabort = function() {
            setTimeout(function() {
              reject(new exports.DOMException('Aborted', 'AbortError'));
            }, 0);
          };

          function fixUrl(url) {
            try {
              return url === '' && g.location.href ? g.location.href : url
            } catch (e) {
              return url
            }
          }

          xhr.open(request.method, fixUrl(request.url), true);

          if (request.credentials === 'include') {
            xhr.withCredentials = true;
          } else if (request.credentials === 'omit') {
            xhr.withCredentials = false;
          }

          if ('responseType' in xhr) {
            if (support.blob) {
              xhr.responseType = 'blob';
            } else if (
              support.arrayBuffer
            ) {
              xhr.responseType = 'arraybuffer';
            }
          }

          if (init && typeof init.headers === 'object' && !(init.headers instanceof Headers || (g.Headers && init.headers instanceof g.Headers))) {
            var names = [];
            Object.getOwnPropertyNames(init.headers).forEach(function(name) {
              names.push(normalizeName(name));
              xhr.setRequestHeader(name, normalizeValue(init.headers[name]));
            });
            request.headers.forEach(function(value, name) {
              if (names.indexOf(name) === -1) {
                xhr.setRequestHeader(name, value);
              }
            });
          } else {
            request.headers.forEach(function(value, name) {
              xhr.setRequestHeader(name, value);
            });
          }

          if (request.signal) {
            request.signal.addEventListener('abort', abortXhr);

            xhr.onreadystatechange = function() {
              // DONE (success or failure)
              if (xhr.readyState === 4) {
                request.signal.removeEventListener('abort', abortXhr);
              }
            };
          }

          xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
        })
      }

      fetch.polyfill = true;

      if (!g.fetch) {
        g.fetch = fetch;
        g.Headers = Headers;
        g.Request = Request;
        g.Response = Response;
      }

      exports.Headers = Headers;
      exports.Request = Request;
      exports.Response = Response;
      exports.fetch = fetch;

      Object.defineProperty(exports, '__esModule', { value: true });

      return exports;

    }))({});
    })(__globalThis__);
    // This is a ponyfill, so...
    __globalThis__.fetch.ponyfill = true;
    delete __globalThis__.fetch.polyfill;
    // Choose between native implementation (__global__) or custom implementation (__globalThis__)
    var ctx = __global__.fetch ? __global__ : __globalThis__;
    exports = ctx.fetch; // To enable: import fetch from 'cross-fetch'
    exports.default = ctx.fetch; // For TypeScript consumers without esModuleInterop.
    exports.fetch = ctx.fetch; // To enable: import {fetch} from 'cross-fetch'
    exports.Headers = ctx.Headers;
    exports.Request = ctx.Request;
    exports.Response = ctx.Response;
    module.exports = exports;
    });

    var fetch$2 = /*@__PURE__*/getDefaultExportFromCjs(browserPonyfill);

    const version$n = "logger/5.7.0";

    let _permanentCensorErrors = false;
    let _censorErrors = false;
    const LogLevels = { debug: 1, "default": 2, info: 2, warning: 3, error: 4, off: 5 };
    let _logLevel = LogLevels["default"];
    let _globalLogger = null;
    function _checkNormalize() {
        try {
            const missing = [];
            // Make sure all forms of normalization are supported
            ["NFD", "NFC", "NFKD", "NFKC"].forEach((form) => {
                try {
                    if ("test".normalize(form) !== "test") {
                        throw new Error("bad normalize");
                    }
                    ;
                }
                catch (error) {
                    missing.push(form);
                }
            });
            if (missing.length) {
                throw new Error("missing " + missing.join(", "));
            }
            if (String.fromCharCode(0xe9).normalize("NFD") !== String.fromCharCode(0x65, 0x0301)) {
                throw new Error("broken implementation");
            }
        }
        catch (error) {
            return error.message;
        }
        return null;
    }
    const _normalizeError = _checkNormalize();
    var LogLevel;
    (function (LogLevel) {
        LogLevel["DEBUG"] = "DEBUG";
        LogLevel["INFO"] = "INFO";
        LogLevel["WARNING"] = "WARNING";
        LogLevel["ERROR"] = "ERROR";
        LogLevel["OFF"] = "OFF";
    })(LogLevel || (LogLevel = {}));
    var ErrorCode;
    (function (ErrorCode) {
        ///////////////////
        // Generic Errors
        // Unknown Error
        ErrorCode["UNKNOWN_ERROR"] = "UNKNOWN_ERROR";
        // Not Implemented
        ErrorCode["NOT_IMPLEMENTED"] = "NOT_IMPLEMENTED";
        // Unsupported Operation
        //   - operation
        ErrorCode["UNSUPPORTED_OPERATION"] = "UNSUPPORTED_OPERATION";
        // Network Error (i.e. Ethereum Network, such as an invalid chain ID)
        //   - event ("noNetwork" is not re-thrown in provider.ready; otherwise thrown)
        ErrorCode["NETWORK_ERROR"] = "NETWORK_ERROR";
        // Some sort of bad response from the server
        ErrorCode["SERVER_ERROR"] = "SERVER_ERROR";
        // Timeout
        ErrorCode["TIMEOUT"] = "TIMEOUT";
        ///////////////////
        // Operational  Errors
        // Buffer Overrun
        ErrorCode["BUFFER_OVERRUN"] = "BUFFER_OVERRUN";
        // Numeric Fault
        //   - operation: the operation being executed
        //   - fault: the reason this faulted
        ErrorCode["NUMERIC_FAULT"] = "NUMERIC_FAULT";
        ///////////////////
        // Argument Errors
        // Missing new operator to an object
        //  - name: The name of the class
        ErrorCode["MISSING_NEW"] = "MISSING_NEW";
        // Invalid argument (e.g. value is incompatible with type) to a function:
        //   - argument: The argument name that was invalid
        //   - value: The value of the argument
        ErrorCode["INVALID_ARGUMENT"] = "INVALID_ARGUMENT";
        // Missing argument to a function:
        //   - count: The number of arguments received
        //   - expectedCount: The number of arguments expected
        ErrorCode["MISSING_ARGUMENT"] = "MISSING_ARGUMENT";
        // Too many arguments
        //   - count: The number of arguments received
        //   - expectedCount: The number of arguments expected
        ErrorCode["UNEXPECTED_ARGUMENT"] = "UNEXPECTED_ARGUMENT";
        ///////////////////
        // Blockchain Errors
        // Call exception
        //  - transaction: the transaction
        //  - address?: the contract address
        //  - args?: The arguments passed into the function
        //  - method?: The Solidity method signature
        //  - errorSignature?: The EIP848 error signature
        //  - errorArgs?: The EIP848 error parameters
        //  - reason: The reason (only for EIP848 "Error(string)")
        ErrorCode["CALL_EXCEPTION"] = "CALL_EXCEPTION";
        // Insufficient funds (< value + gasLimit * gasPrice)
        //   - transaction: the transaction attempted
        ErrorCode["INSUFFICIENT_FUNDS"] = "INSUFFICIENT_FUNDS";
        // Nonce has already been used
        //   - transaction: the transaction attempted
        ErrorCode["NONCE_EXPIRED"] = "NONCE_EXPIRED";
        // The replacement fee for the transaction is too low
        //   - transaction: the transaction attempted
        ErrorCode["REPLACEMENT_UNDERPRICED"] = "REPLACEMENT_UNDERPRICED";
        // The gas limit could not be estimated
        //   - transaction: the transaction passed to estimateGas
        ErrorCode["UNPREDICTABLE_GAS_LIMIT"] = "UNPREDICTABLE_GAS_LIMIT";
        // The transaction was replaced by one with a higher gas price
        //   - reason: "cancelled", "replaced" or "repriced"
        //   - cancelled: true if reason == "cancelled" or reason == "replaced")
        //   - hash: original transaction hash
        //   - replacement: the full TransactionsResponse for the replacement
        //   - receipt: the receipt of the replacement
        ErrorCode["TRANSACTION_REPLACED"] = "TRANSACTION_REPLACED";
        ///////////////////
        // Interaction Errors
        // The user rejected the action, such as signing a message or sending
        // a transaction
        ErrorCode["ACTION_REJECTED"] = "ACTION_REJECTED";
    })(ErrorCode || (ErrorCode = {}));
    const HEX = "0123456789abcdef";
    class Logger {
        constructor(version) {
            Object.defineProperty(this, "version", {
                enumerable: true,
                value: version,
                writable: false
            });
        }
        _log(logLevel, args) {
            const level = logLevel.toLowerCase();
            if (LogLevels[level] == null) {
                this.throwArgumentError("invalid log level name", "logLevel", logLevel);
            }
            if (_logLevel > LogLevels[level]) {
                return;
            }
            console.log.apply(console, args);
        }
        debug(...args) {
            this._log(Logger.levels.DEBUG, args);
        }
        info(...args) {
            this._log(Logger.levels.INFO, args);
        }
        warn(...args) {
            this._log(Logger.levels.WARNING, args);
        }
        makeError(message, code, params) {
            // Errors are being censored
            if (_censorErrors) {
                return this.makeError("censored error", code, {});
            }
            if (!code) {
                code = Logger.errors.UNKNOWN_ERROR;
            }
            if (!params) {
                params = {};
            }
            const messageDetails = [];
            Object.keys(params).forEach((key) => {
                const value = params[key];
                try {
                    if (value instanceof Uint8Array) {
                        let hex = "";
                        for (let i = 0; i < value.length; i++) {
                            hex += HEX[value[i] >> 4];
                            hex += HEX[value[i] & 0x0f];
                        }
                        messageDetails.push(key + "=Uint8Array(0x" + hex + ")");
                    }
                    else {
                        messageDetails.push(key + "=" + JSON.stringify(value));
                    }
                }
                catch (error) {
                    messageDetails.push(key + "=" + JSON.stringify(params[key].toString()));
                }
            });
            messageDetails.push(`code=${code}`);
            messageDetails.push(`version=${this.version}`);
            const reason = message;
            let url = "";
            switch (code) {
                case ErrorCode.NUMERIC_FAULT: {
                    url = "NUMERIC_FAULT";
                    const fault = message;
                    switch (fault) {
                        case "overflow":
                        case "underflow":
                        case "division-by-zero":
                            url += "-" + fault;
                            break;
                        case "negative-power":
                        case "negative-width":
                            url += "-unsupported";
                            break;
                        case "unbound-bitwise-result":
                            url += "-unbound-result";
                            break;
                    }
                    break;
                }
                case ErrorCode.CALL_EXCEPTION:
                case ErrorCode.INSUFFICIENT_FUNDS:
                case ErrorCode.MISSING_NEW:
                case ErrorCode.NONCE_EXPIRED:
                case ErrorCode.REPLACEMENT_UNDERPRICED:
                case ErrorCode.TRANSACTION_REPLACED:
                case ErrorCode.UNPREDICTABLE_GAS_LIMIT:
                    url = code;
                    break;
            }
            if (url) {
                message += " [ See: https:/\/links.ethers.org/v5-errors-" + url + " ]";
            }
            if (messageDetails.length) {
                message += " (" + messageDetails.join(", ") + ")";
            }
            // @TODO: Any??
            const error = new Error(message);
            error.reason = reason;
            error.code = code;
            Object.keys(params).forEach(function (key) {
                error[key] = params[key];
            });
            return error;
        }
        throwError(message, code, params) {
            throw this.makeError(message, code, params);
        }
        throwArgumentError(message, name, value) {
            return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {
                argument: name,
                value: value
            });
        }
        assert(condition, message, code, params) {
            if (!!condition) {
                return;
            }
            this.throwError(message, code, params);
        }
        assertArgument(condition, message, name, value) {
            if (!!condition) {
                return;
            }
            this.throwArgumentError(message, name, value);
        }
        checkNormalize(message) {
            if (_normalizeError) {
                this.throwError("platform missing String.prototype.normalize", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "String.prototype.normalize", form: _normalizeError
                });
            }
        }
        checkSafeUint53(value, message) {
            if (typeof (value) !== "number") {
                return;
            }
            if (message == null) {
                message = "value not safe";
            }
            if (value < 0 || value >= 0x1fffffffffffff) {
                this.throwError(message, Logger.errors.NUMERIC_FAULT, {
                    operation: "checkSafeInteger",
                    fault: "out-of-safe-range",
                    value: value
                });
            }
            if (value % 1) {
                this.throwError(message, Logger.errors.NUMERIC_FAULT, {
                    operation: "checkSafeInteger",
                    fault: "non-integer",
                    value: value
                });
            }
        }
        checkArgumentCount(count, expectedCount, message) {
            if (message) {
                message = ": " + message;
            }
            else {
                message = "";
            }
            if (count < expectedCount) {
                this.throwError("missing argument" + message, Logger.errors.MISSING_ARGUMENT, {
                    count: count,
                    expectedCount: expectedCount
                });
            }
            if (count > expectedCount) {
                this.throwError("too many arguments" + message, Logger.errors.UNEXPECTED_ARGUMENT, {
                    count: count,
                    expectedCount: expectedCount
                });
            }
        }
        checkNew(target, kind) {
            if (target === Object || target == null) {
                this.throwError("missing new", Logger.errors.MISSING_NEW, { name: kind.name });
            }
        }
        checkAbstract(target, kind) {
            if (target === kind) {
                this.throwError("cannot instantiate abstract class " + JSON.stringify(kind.name) + " directly; use a sub-class", Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: "new" });
            }
            else if (target === Object || target == null) {
                this.throwError("missing new", Logger.errors.MISSING_NEW, { name: kind.name });
            }
        }
        static globalLogger() {
            if (!_globalLogger) {
                _globalLogger = new Logger(version$n);
            }
            return _globalLogger;
        }
        static setCensorship(censorship, permanent) {
            if (!censorship && permanent) {
                this.globalLogger().throwError("cannot permanently disable censorship", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "setCensorship"
                });
            }
            if (_permanentCensorErrors) {
                if (!censorship) {
                    return;
                }
                this.globalLogger().throwError("error censorship permanent", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "setCensorship"
                });
            }
            _censorErrors = !!censorship;
            _permanentCensorErrors = !!permanent;
        }
        static setLogLevel(logLevel) {
            const level = LogLevels[logLevel.toLowerCase()];
            if (level == null) {
                Logger.globalLogger().warn("invalid log level - " + logLevel);
                return;
            }
            _logLevel = level;
        }
        static from(version) {
            return new Logger(version);
        }
    }
    Logger.errors = ErrorCode;
    Logger.levels = LogLevel;

    const version$m = "bytes/5.7.0";

    const logger$u = new Logger(version$m);
    ///////////////////////////////
    function isHexable(value) {
        return !!(value.toHexString);
    }
    function addSlice(array) {
        if (array.slice) {
            return array;
        }
        array.slice = function () {
            const args = Array.prototype.slice.call(arguments);
            return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));
        };
        return array;
    }
    function isBytesLike(value) {
        return ((isHexString(value) && !(value.length % 2)) || isBytes$4(value));
    }
    function isInteger$1(value) {
        return (typeof (value) === "number" && value == value && (value % 1) === 0);
    }
    function isBytes$4(value) {
        if (value == null) {
            return false;
        }
        if (value.constructor === Uint8Array) {
            return true;
        }
        if (typeof (value) === "string") {
            return false;
        }
        if (!isInteger$1(value.length) || value.length < 0) {
            return false;
        }
        for (let i = 0; i < value.length; i++) {
            const v = value[i];
            if (!isInteger$1(v) || v < 0 || v >= 256) {
                return false;
            }
        }
        return true;
    }
    function arrayify(value, options) {
        if (!options) {
            options = {};
        }
        if (typeof (value) === "number") {
            logger$u.checkSafeUint53(value, "invalid arrayify value");
            const result = [];
            while (value) {
                result.unshift(value & 0xff);
                value = parseInt(String(value / 256));
            }
            if (result.length === 0) {
                result.push(0);
            }
            return addSlice(new Uint8Array(result));
        }
        if (options.allowMissingPrefix && typeof (value) === "string" && value.substring(0, 2) !== "0x") {
            value = "0x" + value;
        }
        if (isHexable(value)) {
            value = value.toHexString();
        }
        if (isHexString(value)) {
            let hex = value.substring(2);
            if (hex.length % 2) {
                if (options.hexPad === "left") {
                    hex = "0" + hex;
                }
                else if (options.hexPad === "right") {
                    hex += "0";
                }
                else {
                    logger$u.throwArgumentError("hex data is odd-length", "value", value);
                }
            }
            const result = [];
            for (let i = 0; i < hex.length; i += 2) {
                result.push(parseInt(hex.substring(i, i + 2), 16));
            }
            return addSlice(new Uint8Array(result));
        }
        if (isBytes$4(value)) {
            return addSlice(new Uint8Array(value));
        }
        return logger$u.throwArgumentError("invalid arrayify value", "value", value);
    }
    function concat(items) {
        const objects = items.map(item => arrayify(item));
        const length = objects.reduce((accum, item) => (accum + item.length), 0);
        const result = new Uint8Array(length);
        objects.reduce((offset, object) => {
            result.set(object, offset);
            return offset + object.length;
        }, 0);
        return addSlice(result);
    }
    function stripZeros(value) {
        let result = arrayify(value);
        if (result.length === 0) {
            return result;
        }
        // Find the first non-zero entry
        let start = 0;
        while (start < result.length && result[start] === 0) {
            start++;
        }
        // If we started with zeros, strip them
        if (start) {
            result = result.slice(start);
        }
        return result;
    }
    function zeroPad(value, length) {
        value = arrayify(value);
        if (value.length > length) {
            logger$u.throwArgumentError("value out of range", "value", arguments[0]);
        }
        const result = new Uint8Array(length);
        result.set(value, length - value.length);
        return addSlice(result);
    }
    function isHexString(value, length) {
        if (typeof (value) !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
            return false;
        }
        if (length && value.length !== 2 + 2 * length) {
            return false;
        }
        return true;
    }
    const HexCharacters = "0123456789abcdef";
    function hexlify(value, options) {
        if (!options) {
            options = {};
        }
        if (typeof (value) === "number") {
            logger$u.checkSafeUint53(value, "invalid hexlify value");
            let hex = "";
            while (value) {
                hex = HexCharacters[value & 0xf] + hex;
                value = Math.floor(value / 16);
            }
            if (hex.length) {
                if (hex.length % 2) {
                    hex = "0" + hex;
                }
                return "0x" + hex;
            }
            return "0x00";
        }
        if (typeof (value) === "bigint") {
            value = value.toString(16);
            if (value.length % 2) {
                return ("0x0" + value);
            }
            return "0x" + value;
        }
        if (options.allowMissingPrefix && typeof (value) === "string" && value.substring(0, 2) !== "0x") {
            value = "0x" + value;
        }
        if (isHexable(value)) {
            return value.toHexString();
        }
        if (isHexString(value)) {
            if (value.length % 2) {
                if (options.hexPad === "left") {
                    value = "0x0" + value.substring(2);
                }
                else if (options.hexPad === "right") {
                    value += "0";
                }
                else {
                    logger$u.throwArgumentError("hex data is odd-length", "value", value);
                }
            }
            return value.toLowerCase();
        }
        if (isBytes$4(value)) {
            let result = "0x";
            for (let i = 0; i < value.length; i++) {
                let v = value[i];
                result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];
            }
            return result;
        }
        return logger$u.throwArgumentError("invalid hexlify value", "value", value);
    }
    /*
    function unoddify(value: BytesLike | Hexable | number): BytesLike | Hexable | number {
        if (typeof(value) === "string" && value.length % 2 && value.substring(0, 2) === "0x") {
            return "0x0" + value.substring(2);
        }
        return value;
    }
    */
    function hexDataLength(data) {
        if (typeof (data) !== "string") {
            data = hexlify(data);
        }
        else if (!isHexString(data) || (data.length % 2)) {
            return null;
        }
        return (data.length - 2) / 2;
    }
    function hexDataSlice(data, offset, endOffset) {
        if (typeof (data) !== "string") {
            data = hexlify(data);
        }
        else if (!isHexString(data) || (data.length % 2)) {
            logger$u.throwArgumentError("invalid hexData", "value", data);
        }
        offset = 2 + 2 * offset;
        if (endOffset != null) {
            return "0x" + data.substring(offset, 2 + 2 * endOffset);
        }
        return "0x" + data.substring(offset);
    }
    function hexConcat(items) {
        let result = "0x";
        items.forEach((item) => {
            result += hexlify(item).substring(2);
        });
        return result;
    }
    function hexValue(value) {
        const trimmed = hexStripZeros(hexlify(value, { hexPad: "left" }));
        if (trimmed === "0x") {
            return "0x0";
        }
        return trimmed;
    }
    function hexStripZeros(value) {
        if (typeof (value) !== "string") {
            value = hexlify(value);
        }
        if (!isHexString(value)) {
            logger$u.throwArgumentError("invalid hex string", "value", value);
        }
        value = value.substring(2);
        let offset = 0;
        while (offset < value.length && value[offset] === "0") {
            offset++;
        }
        return "0x" + value.substring(offset);
    }
    function hexZeroPad(value, length) {
        if (typeof (value) !== "string") {
            value = hexlify(value);
        }
        else if (!isHexString(value)) {
            logger$u.throwArgumentError("invalid hex string", "value", value);
        }
        if (value.length > 2 * length + 2) {
            logger$u.throwArgumentError("value out of range", "value", arguments[1]);
        }
        while (value.length < 2 * length + 2) {
            value = "0x0" + value.substring(2);
        }
        return value;
    }
    function splitSignature(signature) {
        const result = {
            r: "0x",
            s: "0x",
            _vs: "0x",
            recoveryParam: 0,
            v: 0,
            yParityAndS: "0x",
            compact: "0x"
        };
        if (isBytesLike(signature)) {
            let bytes = arrayify(signature);
            // Get the r, s and v
            if (bytes.length === 64) {
                // EIP-2098; pull the v from the top bit of s and clear it
                result.v = 27 + (bytes[32] >> 7);
                bytes[32] &= 0x7f;
                result.r = hexlify(bytes.slice(0, 32));
                result.s = hexlify(bytes.slice(32, 64));
            }
            else if (bytes.length === 65) {
                result.r = hexlify(bytes.slice(0, 32));
                result.s = hexlify(bytes.slice(32, 64));
                result.v = bytes[64];
            }
            else {
                logger$u.throwArgumentError("invalid signature string", "signature", signature);
            }
            // Allow a recid to be used as the v
            if (result.v < 27) {
                if (result.v === 0 || result.v === 1) {
                    result.v += 27;
                }
                else {
                    logger$u.throwArgumentError("signature invalid v byte", "signature", signature);
                }
            }
            // Compute recoveryParam from v
            result.recoveryParam = 1 - (result.v % 2);
            // Compute _vs from recoveryParam and s
            if (result.recoveryParam) {
                bytes[32] |= 0x80;
            }
            result._vs = hexlify(bytes.slice(32, 64));
        }
        else {
            result.r = signature.r;
            result.s = signature.s;
            result.v = signature.v;
            result.recoveryParam = signature.recoveryParam;
            result._vs = signature._vs;
            // If the _vs is available, use it to populate missing s, v and recoveryParam
            // and verify non-missing s, v and recoveryParam
            if (result._vs != null) {
                const vs = zeroPad(arrayify(result._vs), 32);
                result._vs = hexlify(vs);
                // Set or check the recid
                const recoveryParam = ((vs[0] >= 128) ? 1 : 0);
                if (result.recoveryParam == null) {
                    result.recoveryParam = recoveryParam;
                }
                else if (result.recoveryParam !== recoveryParam) {
                    logger$u.throwArgumentError("signature recoveryParam mismatch _vs", "signature", signature);
                }
                // Set or check the s
                vs[0] &= 0x7f;
                const s = hexlify(vs);
                if (result.s == null) {
                    result.s = s;
                }
                else if (result.s !== s) {
                    logger$u.throwArgumentError("signature v mismatch _vs", "signature", signature);
                }
            }
            // Use recid and v to populate each other
            if (result.recoveryParam == null) {
                if (result.v == null) {
                    logger$u.throwArgumentError("signature missing v and recoveryParam", "signature", signature);
                }
                else if (result.v === 0 || result.v === 1) {
                    result.recoveryParam = result.v;
                }
                else {
                    result.recoveryParam = 1 - (result.v % 2);
                }
            }
            else {
                if (result.v == null) {
                    result.v = 27 + result.recoveryParam;
                }
                else {
                    const recId = (result.v === 0 || result.v === 1) ? result.v : (1 - (result.v % 2));
                    if (result.recoveryParam !== recId) {
                        logger$u.throwArgumentError("signature recoveryParam mismatch v", "signature", signature);
                    }
                }
            }
            if (result.r == null || !isHexString(result.r)) {
                logger$u.throwArgumentError("signature missing or invalid r", "signature", signature);
            }
            else {
                result.r = hexZeroPad(result.r, 32);
            }
            if (result.s == null || !isHexString(result.s)) {
                logger$u.throwArgumentError("signature missing or invalid s", "signature", signature);
            }
            else {
                result.s = hexZeroPad(result.s, 32);
            }
            const vs = arrayify(result.s);
            if (vs[0] >= 128) {
                logger$u.throwArgumentError("signature s out of range", "signature", signature);
            }
            if (result.recoveryParam) {
                vs[0] |= 0x80;
            }
            const _vs = hexlify(vs);
            if (result._vs) {
                if (!isHexString(result._vs)) {
                    logger$u.throwArgumentError("signature invalid _vs", "signature", signature);
                }
                result._vs = hexZeroPad(result._vs, 32);
            }
            // Set or check the _vs
            if (result._vs == null) {
                result._vs = _vs;
            }
            else if (result._vs !== _vs) {
                logger$u.throwArgumentError("signature _vs mismatch v and s", "signature", signature);
            }
        }
        result.yParityAndS = result._vs;
        result.compact = result.r + result.yParityAndS.substring(2);
        return result;
    }
    function joinSignature(signature) {
        signature = splitSignature(signature);
        return hexlify(concat([
            signature.r,
            signature.s,
            (signature.recoveryParam ? "0x1c" : "0x1b")
        ]));
    }

    var global$1 = (typeof global !== "undefined" ? global :
                typeof self !== "undefined" ? self :
                typeof window !== "undefined" ? window : {});

    var lookup = [];
    var revLookup = [];
    var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
    var inited = false;
    function init () {
      inited = true;
      var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
      for (var i = 0, len = code.length; i < len; ++i) {
        lookup[i] = code[i];
        revLookup[code.charCodeAt(i)] = i;
      }

      revLookup['-'.charCodeAt(0)] = 62;
      revLookup['_'.charCodeAt(0)] = 63;
    }

    function toByteArray (b64) {
      if (!inited) {
        init();
      }
      var i, j, l, tmp, placeHolders, arr;
      var len = b64.length;

      if (len % 4 > 0) {
        throw new Error('Invalid string. Length must be a multiple of 4')
      }

      // the number of equal signs (place holders)
      // if there are two placeholders, than the two characters before it
      // represent one byte
      // if there is only one, then the three characters before it represent 2 bytes
      // this is just a cheap hack to not do indexOf twice
      placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;

      // base64 is 4/3 + up to two characters of the original data
      arr = new Arr(len * 3 / 4 - placeHolders);

      // if there are placeholders, only get up to the last complete 4 chars
      l = placeHolders > 0 ? len - 4 : len;

      var L = 0;

      for (i = 0, j = 0; i < l; i += 4, j += 3) {
        tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)];
        arr[L++] = (tmp >> 16) & 0xFF;
        arr[L++] = (tmp >> 8) & 0xFF;
        arr[L++] = tmp & 0xFF;
      }

      if (placeHolders === 2) {
        tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4);
        arr[L++] = tmp & 0xFF;
      } else if (placeHolders === 1) {
        tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2);
        arr[L++] = (tmp >> 8) & 0xFF;
        arr[L++] = tmp & 0xFF;
      }

      return arr
    }

    function tripletToBase64 (num) {
      return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
    }

    function encodeChunk (uint8, start, end) {
      var tmp;
      var output = [];
      for (var i = start; i < end; i += 3) {
        tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2]);
        output.push(tripletToBase64(tmp));
      }
      return output.join('')
    }

    function fromByteArray (uint8) {
      if (!inited) {
        init();
      }
      var tmp;
      var len = uint8.length;
      var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
      var output = '';
      var parts = [];
      var maxChunkLength = 16383; // must be multiple of 3

      // go through the array every three bytes, we'll deal with trailing stuff later
      for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
        parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));
      }

      // pad the end with zeros, but make sure to not forget the extra bytes
      if (extraBytes === 1) {
        tmp = uint8[len - 1];
        output += lookup[tmp >> 2];
        output += lookup[(tmp << 4) & 0x3F];
        output += '==';
      } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + (uint8[len - 1]);
        output += lookup[tmp >> 10];
        output += lookup[(tmp >> 4) & 0x3F];
        output += lookup[(tmp << 2) & 0x3F];
        output += '=';
      }

      parts.push(output);

      return parts.join('')
    }

    function read (buffer, offset, isLE, mLen, nBytes) {
      var e, m;
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var nBits = -7;
      var i = isLE ? (nBytes - 1) : 0;
      var d = isLE ? -1 : 1;
      var s = buffer[offset + i];

      i += d;

      e = s & ((1 << (-nBits)) - 1);
      s >>= (-nBits);
      nBits += eLen;
      for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

      m = e & ((1 << (-nBits)) - 1);
      e >>= (-nBits);
      nBits += mLen;
      for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

      if (e === 0) {
        e = 1 - eBias;
      } else if (e === eMax) {
        return m ? NaN : ((s ? -1 : 1) * Infinity)
      } else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
      }
      return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
    }

    function write (buffer, value, offset, isLE, mLen, nBytes) {
      var e, m, c;
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
      var i = isLE ? 0 : (nBytes - 1);
      var d = isLE ? 1 : -1;
      var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

      value = Math.abs(value);

      if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
      } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
          e--;
          c *= 2;
        }
        if (e + eBias >= 1) {
          value += rt / c;
        } else {
          value += rt * Math.pow(2, 1 - eBias);
        }
        if (value * c >= 2) {
          e++;
          c /= 2;
        }

        if (e + eBias >= eMax) {
          m = 0;
          e = eMax;
        } else if (e + eBias >= 1) {
          m = (value * c - 1) * Math.pow(2, mLen);
          e = e + eBias;
        } else {
          m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
          e = 0;
        }
      }

      for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

      e = (e << mLen) | m;
      eLen += mLen;
      for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

      buffer[offset + i - d] |= s * 128;
    }

    var toString$3 = {}.toString;

    var isArray$1 = Array.isArray || function (arr) {
      return toString$3.call(arr) == '[object Array]';
    };

    var INSPECT_MAX_BYTES = 50;

    /**
     * If `Buffer.TYPED_ARRAY_SUPPORT`:
     *   === true    Use Uint8Array implementation (fastest)
     *   === false   Use Object implementation (most compatible, even IE6)
     *
     * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
     * Opera 11.6+, iOS 4.2+.
     *
     * Due to various browser bugs, sometimes the Object implementation will be used even
     * when the browser supports typed arrays.
     *
     * Note:
     *
     *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
     *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
     *
     *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
     *
     *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
     *     incorrect length in some situations.

     * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
     * get the Object implementation, which is slower but behaves correctly.
     */
    Buffer$1.TYPED_ARRAY_SUPPORT = global$1.TYPED_ARRAY_SUPPORT !== undefined
      ? global$1.TYPED_ARRAY_SUPPORT
      : true;

    /*
     * Export kMaxLength after typed array support is determined.
     */
    var _kMaxLength = kMaxLength();

    function kMaxLength () {
      return Buffer$1.TYPED_ARRAY_SUPPORT
        ? 0x7fffffff
        : 0x3fffffff
    }

    function createBuffer (that, length) {
      if (kMaxLength() < length) {
        throw new RangeError('Invalid typed array length')
      }
      if (Buffer$1.TYPED_ARRAY_SUPPORT) {
        // Return an augmented `Uint8Array` instance, for best performance
        that = new Uint8Array(length);
        that.__proto__ = Buffer$1.prototype;
      } else {
        // Fallback: Return an object instance of the Buffer class
        if (that === null) {
          that = new Buffer$1(length);
        }
        that.length = length;
      }

      return that
    }

    /**
     * The Buffer constructor returns instances of `Uint8Array` that have their
     * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
     * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
     * and the `Uint8Array` methods. Square bracket notation works as expected -- it
     * returns a single octet.
     *
     * The `Uint8Array` prototype remains unmodified.
     */

    function Buffer$1 (arg, encodingOrOffset, length) {
      if (!Buffer$1.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer$1)) {
        return new Buffer$1(arg, encodingOrOffset, length)
      }

      // Common case.
      if (typeof arg === 'number') {
        if (typeof encodingOrOffset === 'string') {
          throw new Error(
            'If encoding is specified then the first argument must be a string'
          )
        }
        return allocUnsafe(this, arg)
      }
      return from(this, arg, encodingOrOffset, length)
    }

    Buffer$1.poolSize = 8192; // not used by this implementation

    // TODO: Legacy, not needed anymore. Remove in next major version.
    Buffer$1._augment = function (arr) {
      arr.__proto__ = Buffer$1.prototype;
      return arr
    };

    function from (that, value, encodingOrOffset, length) {
      if (typeof value === 'number') {
        throw new TypeError('"value" argument must not be a number')
      }

      if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
        return fromArrayBuffer(that, value, encodingOrOffset, length)
      }

      if (typeof value === 'string') {
        return fromString(that, value, encodingOrOffset)
      }

      return fromObject(that, value)
    }

    /**
     * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
     * if value is a number.
     * Buffer.from(str[, encoding])
     * Buffer.from(array)
     * Buffer.from(buffer)
     * Buffer.from(arrayBuffer[, byteOffset[, length]])
     **/
    Buffer$1.from = function (value, encodingOrOffset, length) {
      return from(null, value, encodingOrOffset, length)
    };

    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
      Buffer$1.prototype.__proto__ = Uint8Array.prototype;
      Buffer$1.__proto__ = Uint8Array;
      if (typeof Symbol !== 'undefined' && Symbol.species &&
          Buffer$1[Symbol.species] === Buffer$1) ;
    }

    function assertSize (size) {
      if (typeof size !== 'number') {
        throw new TypeError('"size" argument must be a number')
      } else if (size < 0) {
        throw new RangeError('"size" argument must not be negative')
      }
    }

    function alloc (that, size, fill, encoding) {
      assertSize(size);
      if (size <= 0) {
        return createBuffer(that, size)
      }
      if (fill !== undefined) {
        // Only pay attention to encoding if it's a string. This
        // prevents accidentally sending in a number that would
        // be interpretted as a start offset.
        return typeof encoding === 'string'
          ? createBuffer(that, size).fill(fill, encoding)
          : createBuffer(that, size).fill(fill)
      }
      return createBuffer(that, size)
    }

    /**
     * Creates a new filled Buffer instance.
     * alloc(size[, fill[, encoding]])
     **/
    Buffer$1.alloc = function (size, fill, encoding) {
      return alloc(null, size, fill, encoding)
    };

    function allocUnsafe (that, size) {
      assertSize(size);
      that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
      if (!Buffer$1.TYPED_ARRAY_SUPPORT) {
        for (var i = 0; i < size; ++i) {
          that[i] = 0;
        }
      }
      return that
    }

    /**
     * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
     * */
    Buffer$1.allocUnsafe = function (size) {
      return allocUnsafe(null, size)
    };
    /**
     * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
     */
    Buffer$1.allocUnsafeSlow = function (size) {
      return allocUnsafe(null, size)
    };

    function fromString (that, string, encoding) {
      if (typeof encoding !== 'string' || encoding === '') {
        encoding = 'utf8';
      }

      if (!Buffer$1.isEncoding(encoding)) {
        throw new TypeError('"encoding" must be a valid string encoding')
      }

      var length = byteLength(string, encoding) | 0;
      that = createBuffer(that, length);

      var actual = that.write(string, encoding);

      if (actual !== length) {
        // Writing a hex string, for example, that contains invalid characters will
        // cause everything after the first invalid character to be ignored. (e.g.
        // 'abxxcd' will be treated as 'ab')
        that = that.slice(0, actual);
      }

      return that
    }

    function fromArrayLike (that, array) {
      var length = array.length < 0 ? 0 : checked(array.length) | 0;
      that = createBuffer(that, length);
      for (var i = 0; i < length; i += 1) {
        that[i] = array[i] & 255;
      }
      return that
    }

    function fromArrayBuffer (that, array, byteOffset, length) {
      array.byteLength; // this throws if `array` is not a valid ArrayBuffer

      if (byteOffset < 0 || array.byteLength < byteOffset) {
        throw new RangeError('\'offset\' is out of bounds')
      }

      if (array.byteLength < byteOffset + (length || 0)) {
        throw new RangeError('\'length\' is out of bounds')
      }

      if (byteOffset === undefined && length === undefined) {
        array = new Uint8Array(array);
      } else if (length === undefined) {
        array = new Uint8Array(array, byteOffset);
      } else {
        array = new Uint8Array(array, byteOffset, length);
      }

      if (Buffer$1.TYPED_ARRAY_SUPPORT) {
        // Return an augmented `Uint8Array` instance, for best performance
        that = array;
        that.__proto__ = Buffer$1.prototype;
      } else {
        // Fallback: Return an object instance of the Buffer class
        that = fromArrayLike(that, array);
      }
      return that
    }

    function fromObject (that, obj) {
      if (internalIsBuffer(obj)) {
        var len = checked(obj.length) | 0;
        that = createBuffer(that, len);

        if (that.length === 0) {
          return that
        }

        obj.copy(that, 0, 0, len);
        return that
      }

      if (obj) {
        if ((typeof ArrayBuffer !== 'undefined' &&
            obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
          if (typeof obj.length !== 'number' || isnan(obj.length)) {
            return createBuffer(that, 0)
          }
          return fromArrayLike(that, obj)
        }

        if (obj.type === 'Buffer' && isArray$1(obj.data)) {
          return fromArrayLike(that, obj.data)
        }
      }

      throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
    }

    function checked (length) {
      // Note: cannot use `length < kMaxLength()` here because that fails when
      // length is NaN (which is otherwise coerced to zero.)
      if (length >= kMaxLength()) {
        throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                             'size: 0x' + kMaxLength().toString(16) + ' bytes')
      }
      return length | 0
    }

    function SlowBuffer (length) {
      if (+length != length) { // eslint-disable-line eqeqeq
        length = 0;
      }
      return Buffer$1.alloc(+length)
    }
    Buffer$1.isBuffer = isBuffer;
    function internalIsBuffer (b) {
      return !!(b != null && b._isBuffer)
    }

    Buffer$1.compare = function compare (a, b) {
      if (!internalIsBuffer(a) || !internalIsBuffer(b)) {
        throw new TypeError('Arguments must be Buffers')
      }

      if (a === b) return 0

      var x = a.length;
      var y = b.length;

      for (var i = 0, len = Math.min(x, y); i < len; ++i) {
        if (a[i] !== b[i]) {
          x = a[i];
          y = b[i];
          break
        }
      }

      if (x < y) return -1
      if (y < x) return 1
      return 0
    };

    Buffer$1.isEncoding = function isEncoding (encoding) {
      switch (String(encoding).toLowerCase()) {
        case 'hex':
        case 'utf8':
        case 'utf-8':
        case 'ascii':
        case 'latin1':
        case 'binary':
        case 'base64':
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return true
        default:
          return false
      }
    };

    Buffer$1.concat = function concat (list, length) {
      if (!isArray$1(list)) {
        throw new TypeError('"list" argument must be an Array of Buffers')
      }

      if (list.length === 0) {
        return Buffer$1.alloc(0)
      }

      var i;
      if (length === undefined) {
        length = 0;
        for (i = 0; i < list.length; ++i) {
          length += list[i].length;
        }
      }

      var buffer = Buffer$1.allocUnsafe(length);
      var pos = 0;
      for (i = 0; i < list.length; ++i) {
        var buf = list[i];
        if (!internalIsBuffer(buf)) {
          throw new TypeError('"list" argument must be an Array of Buffers')
        }
        buf.copy(buffer, pos);
        pos += buf.length;
      }
      return buffer
    };

    function byteLength (string, encoding) {
      if (internalIsBuffer(string)) {
        return string.length
      }
      if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
          (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
        return string.byteLength
      }
      if (typeof string !== 'string') {
        string = '' + string;
      }

      var len = string.length;
      if (len === 0) return 0

      // Use a for loop to avoid recursion
      var loweredCase = false;
      for (;;) {
        switch (encoding) {
          case 'ascii':
          case 'latin1':
          case 'binary':
            return len
          case 'utf8':
          case 'utf-8':
          case undefined:
            return utf8ToBytes$2(string).length
          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return len * 2
          case 'hex':
            return len >>> 1
          case 'base64':
            return base64ToBytes(string).length
          default:
            if (loweredCase) return utf8ToBytes$2(string).length // assume utf8
            encoding = ('' + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    }
    Buffer$1.byteLength = byteLength;

    function slowToString (encoding, start, end) {
      var loweredCase = false;

      // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
      // property of a typed array.

      // This behaves neither like String nor Uint8Array in that we set start/end
      // to their upper/lower bounds if the value passed is out of range.
      // undefined is handled specially as per ECMA-262 6th Edition,
      // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
      if (start === undefined || start < 0) {
        start = 0;
      }
      // Return early if start > this.length. Done here to prevent potential uint32
      // coercion fail below.
      if (start > this.length) {
        return ''
      }

      if (end === undefined || end > this.length) {
        end = this.length;
      }

      if (end <= 0) {
        return ''
      }

      // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
      end >>>= 0;
      start >>>= 0;

      if (end <= start) {
        return ''
      }

      if (!encoding) encoding = 'utf8';

      while (true) {
        switch (encoding) {
          case 'hex':
            return hexSlice(this, start, end)

          case 'utf8':
          case 'utf-8':
            return utf8Slice(this, start, end)

          case 'ascii':
            return asciiSlice(this, start, end)

          case 'latin1':
          case 'binary':
            return latin1Slice(this, start, end)

          case 'base64':
            return base64Slice(this, start, end)

          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return utf16leSlice(this, start, end)

          default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
            encoding = (encoding + '').toLowerCase();
            loweredCase = true;
        }
      }
    }

    // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
    // Buffer instances.
    Buffer$1.prototype._isBuffer = true;

    function swap (b, n, m) {
      var i = b[n];
      b[n] = b[m];
      b[m] = i;
    }

    Buffer$1.prototype.swap16 = function swap16 () {
      var len = this.length;
      if (len % 2 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 16-bits')
      }
      for (var i = 0; i < len; i += 2) {
        swap(this, i, i + 1);
      }
      return this
    };

    Buffer$1.prototype.swap32 = function swap32 () {
      var len = this.length;
      if (len % 4 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 32-bits')
      }
      for (var i = 0; i < len; i += 4) {
        swap(this, i, i + 3);
        swap(this, i + 1, i + 2);
      }
      return this
    };

    Buffer$1.prototype.swap64 = function swap64 () {
      var len = this.length;
      if (len % 8 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 64-bits')
      }
      for (var i = 0; i < len; i += 8) {
        swap(this, i, i + 7);
        swap(this, i + 1, i + 6);
        swap(this, i + 2, i + 5);
        swap(this, i + 3, i + 4);
      }
      return this
    };

    Buffer$1.prototype.toString = function toString () {
      var length = this.length | 0;
      if (length === 0) return ''
      if (arguments.length === 0) return utf8Slice(this, 0, length)
      return slowToString.apply(this, arguments)
    };

    Buffer$1.prototype.equals = function equals (b) {
      if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer')
      if (this === b) return true
      return Buffer$1.compare(this, b) === 0
    };

    Buffer$1.prototype.inspect = function inspect () {
      var str = '';
      var max = INSPECT_MAX_BYTES;
      if (this.length > 0) {
        str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
        if (this.length > max) str += ' ... ';
      }
      return '<Buffer ' + str + '>'
    };

    Buffer$1.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
      if (!internalIsBuffer(target)) {
        throw new TypeError('Argument must be a Buffer')
      }

      if (start === undefined) {
        start = 0;
      }
      if (end === undefined) {
        end = target ? target.length : 0;
      }
      if (thisStart === undefined) {
        thisStart = 0;
      }
      if (thisEnd === undefined) {
        thisEnd = this.length;
      }

      if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
        throw new RangeError('out of range index')
      }

      if (thisStart >= thisEnd && start >= end) {
        return 0
      }
      if (thisStart >= thisEnd) {
        return -1
      }
      if (start >= end) {
        return 1
      }

      start >>>= 0;
      end >>>= 0;
      thisStart >>>= 0;
      thisEnd >>>= 0;

      if (this === target) return 0

      var x = thisEnd - thisStart;
      var y = end - start;
      var len = Math.min(x, y);

      var thisCopy = this.slice(thisStart, thisEnd);
      var targetCopy = target.slice(start, end);

      for (var i = 0; i < len; ++i) {
        if (thisCopy[i] !== targetCopy[i]) {
          x = thisCopy[i];
          y = targetCopy[i];
          break
        }
      }

      if (x < y) return -1
      if (y < x) return 1
      return 0
    };

    // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
    // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
    //
    // Arguments:
    // - buffer - a Buffer to search
    // - val - a string, Buffer, or number
    // - byteOffset - an index into `buffer`; will be clamped to an int32
    // - encoding - an optional encoding, relevant is val is a string
    // - dir - true for indexOf, false for lastIndexOf
    function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
      // Empty buffer means no match
      if (buffer.length === 0) return -1

      // Normalize byteOffset
      if (typeof byteOffset === 'string') {
        encoding = byteOffset;
        byteOffset = 0;
      } else if (byteOffset > 0x7fffffff) {
        byteOffset = 0x7fffffff;
      } else if (byteOffset < -0x80000000) {
        byteOffset = -0x80000000;
      }
      byteOffset = +byteOffset;  // Coerce to Number.
      if (isNaN(byteOffset)) {
        // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
        byteOffset = dir ? 0 : (buffer.length - 1);
      }

      // Normalize byteOffset: negative offsets start from the end of the buffer
      if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
      if (byteOffset >= buffer.length) {
        if (dir) return -1
        else byteOffset = buffer.length - 1;
      } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;
        else return -1
      }

      // Normalize val
      if (typeof val === 'string') {
        val = Buffer$1.from(val, encoding);
      }

      // Finally, search either indexOf (if dir is true) or lastIndexOf
      if (internalIsBuffer(val)) {
        // Special case: looking for empty string/buffer always fails
        if (val.length === 0) {
          return -1
        }
        return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
      } else if (typeof val === 'number') {
        val = val & 0xFF; // Search for a byte value [0-255]
        if (Buffer$1.TYPED_ARRAY_SUPPORT &&
            typeof Uint8Array.prototype.indexOf === 'function') {
          if (dir) {
            return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
          } else {
            return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
          }
        }
        return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
      }

      throw new TypeError('val must be string, number or Buffer')
    }

    function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
      var indexSize = 1;
      var arrLength = arr.length;
      var valLength = val.length;

      if (encoding !== undefined) {
        encoding = String(encoding).toLowerCase();
        if (encoding === 'ucs2' || encoding === 'ucs-2' ||
            encoding === 'utf16le' || encoding === 'utf-16le') {
          if (arr.length < 2 || val.length < 2) {
            return -1
          }
          indexSize = 2;
          arrLength /= 2;
          valLength /= 2;
          byteOffset /= 2;
        }
      }

      function read (buf, i) {
        if (indexSize === 1) {
          return buf[i]
        } else {
          return buf.readUInt16BE(i * indexSize)
        }
      }

      var i;
      if (dir) {
        var foundIndex = -1;
        for (i = byteOffset; i < arrLength; i++) {
          if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
            if (foundIndex === -1) foundIndex = i;
            if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
          } else {
            if (foundIndex !== -1) i -= i - foundIndex;
            foundIndex = -1;
          }
        }
      } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
        for (i = byteOffset; i >= 0; i--) {
          var found = true;
          for (var j = 0; j < valLength; j++) {
            if (read(arr, i + j) !== read(val, j)) {
              found = false;
              break
            }
          }
          if (found) return i
        }
      }

      return -1
    }

    Buffer$1.prototype.includes = function includes (val, byteOffset, encoding) {
      return this.indexOf(val, byteOffset, encoding) !== -1
    };

    Buffer$1.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
    };

    Buffer$1.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
    };

    function hexWrite (buf, string, offset, length) {
      offset = Number(offset) || 0;
      var remaining = buf.length - offset;
      if (!length) {
        length = remaining;
      } else {
        length = Number(length);
        if (length > remaining) {
          length = remaining;
        }
      }

      // must be an even number of digits
      var strLen = string.length;
      if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

      if (length > strLen / 2) {
        length = strLen / 2;
      }
      for (var i = 0; i < length; ++i) {
        var parsed = parseInt(string.substr(i * 2, 2), 16);
        if (isNaN(parsed)) return i
        buf[offset + i] = parsed;
      }
      return i
    }

    function utf8Write (buf, string, offset, length) {
      return blitBuffer(utf8ToBytes$2(string, buf.length - offset), buf, offset, length)
    }

    function asciiWrite (buf, string, offset, length) {
      return blitBuffer(asciiToBytes(string), buf, offset, length)
    }

    function latin1Write (buf, string, offset, length) {
      return asciiWrite(buf, string, offset, length)
    }

    function base64Write (buf, string, offset, length) {
      return blitBuffer(base64ToBytes(string), buf, offset, length)
    }

    function ucs2Write (buf, string, offset, length) {
      return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
    }

    Buffer$1.prototype.write = function write (string, offset, length, encoding) {
      // Buffer#write(string)
      if (offset === undefined) {
        encoding = 'utf8';
        length = this.length;
        offset = 0;
      // Buffer#write(string, encoding)
      } else if (length === undefined && typeof offset === 'string') {
        encoding = offset;
        length = this.length;
        offset = 0;
      // Buffer#write(string, offset[, length][, encoding])
      } else if (isFinite(offset)) {
        offset = offset | 0;
        if (isFinite(length)) {
          length = length | 0;
          if (encoding === undefined) encoding = 'utf8';
        } else {
          encoding = length;
          length = undefined;
        }
      // legacy write(string, encoding, offset, length) - remove in v0.13
      } else {
        throw new Error(
          'Buffer.write(string, encoding, offset[, length]) is no longer supported'
        )
      }

      var remaining = this.length - offset;
      if (length === undefined || length > remaining) length = remaining;

      if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
        throw new RangeError('Attempt to write outside buffer bounds')
      }

      if (!encoding) encoding = 'utf8';

      var loweredCase = false;
      for (;;) {
        switch (encoding) {
          case 'hex':
            return hexWrite(this, string, offset, length)

          case 'utf8':
          case 'utf-8':
            return utf8Write(this, string, offset, length)

          case 'ascii':
            return asciiWrite(this, string, offset, length)

          case 'latin1':
          case 'binary':
            return latin1Write(this, string, offset, length)

          case 'base64':
            // Warning: maxLength not taken into account in base64Write
            return base64Write(this, string, offset, length)

          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return ucs2Write(this, string, offset, length)

          default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
            encoding = ('' + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    };

    Buffer$1.prototype.toJSON = function toJSON () {
      return {
        type: 'Buffer',
        data: Array.prototype.slice.call(this._arr || this, 0)
      }
    };

    function base64Slice (buf, start, end) {
      if (start === 0 && end === buf.length) {
        return fromByteArray(buf)
      } else {
        return fromByteArray(buf.slice(start, end))
      }
    }

    function utf8Slice (buf, start, end) {
      end = Math.min(buf.length, end);
      var res = [];

      var i = start;
      while (i < end) {
        var firstByte = buf[i];
        var codePoint = null;
        var bytesPerSequence = (firstByte > 0xEF) ? 4
          : (firstByte > 0xDF) ? 3
          : (firstByte > 0xBF) ? 2
          : 1;

        if (i + bytesPerSequence <= end) {
          var secondByte, thirdByte, fourthByte, tempCodePoint;

          switch (bytesPerSequence) {
            case 1:
              if (firstByte < 0x80) {
                codePoint = firstByte;
              }
              break
            case 2:
              secondByte = buf[i + 1];
              if ((secondByte & 0xC0) === 0x80) {
                tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);
                if (tempCodePoint > 0x7F) {
                  codePoint = tempCodePoint;
                }
              }
              break
            case 3:
              secondByte = buf[i + 1];
              thirdByte = buf[i + 2];
              if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);
                if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                  codePoint = tempCodePoint;
                }
              }
              break
            case 4:
              secondByte = buf[i + 1];
              thirdByte = buf[i + 2];
              fourthByte = buf[i + 3];
              if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);
                if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                  codePoint = tempCodePoint;
                }
              }
          }
        }

        if (codePoint === null) {
          // we did not generate a valid codePoint so insert a
          // replacement char (U+FFFD) and advance only 1 byte
          codePoint = 0xFFFD;
          bytesPerSequence = 1;
        } else if (codePoint > 0xFFFF) {
          // encode to utf16 (surrogate pair dance)
          codePoint -= 0x10000;
          res.push(codePoint >>> 10 & 0x3FF | 0xD800);
          codePoint = 0xDC00 | codePoint & 0x3FF;
        }

        res.push(codePoint);
        i += bytesPerSequence;
      }

      return decodeCodePointsArray(res)
    }

    // Based on http://stackoverflow.com/a/22747272/680742, the browser with
    // the lowest limit is Chrome, with 0x10000 args.
    // We go 1 magnitude less, for safety
    var MAX_ARGUMENTS_LENGTH = 0x1000;

    function decodeCodePointsArray (codePoints) {
      var len = codePoints.length;
      if (len <= MAX_ARGUMENTS_LENGTH) {
        return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
      }

      // Decode in chunks to avoid "call stack size exceeded".
      var res = '';
      var i = 0;
      while (i < len) {
        res += String.fromCharCode.apply(
          String,
          codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
        );
      }
      return res
    }

    function asciiSlice (buf, start, end) {
      var ret = '';
      end = Math.min(buf.length, end);

      for (var i = start; i < end; ++i) {
        ret += String.fromCharCode(buf[i] & 0x7F);
      }
      return ret
    }

    function latin1Slice (buf, start, end) {
      var ret = '';
      end = Math.min(buf.length, end);

      for (var i = start; i < end; ++i) {
        ret += String.fromCharCode(buf[i]);
      }
      return ret
    }

    function hexSlice (buf, start, end) {
      var len = buf.length;

      if (!start || start < 0) start = 0;
      if (!end || end < 0 || end > len) end = len;

      var out = '';
      for (var i = start; i < end; ++i) {
        out += toHex$3(buf[i]);
      }
      return out
    }

    function utf16leSlice (buf, start, end) {
      var bytes = buf.slice(start, end);
      var res = '';
      for (var i = 0; i < bytes.length; i += 2) {
        res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
      }
      return res
    }

    Buffer$1.prototype.slice = function slice (start, end) {
      var len = this.length;
      start = ~~start;
      end = end === undefined ? len : ~~end;

      if (start < 0) {
        start += len;
        if (start < 0) start = 0;
      } else if (start > len) {
        start = len;
      }

      if (end < 0) {
        end += len;
        if (end < 0) end = 0;
      } else if (end > len) {
        end = len;
      }

      if (end < start) end = start;

      var newBuf;
      if (Buffer$1.TYPED_ARRAY_SUPPORT) {
        newBuf = this.subarray(start, end);
        newBuf.__proto__ = Buffer$1.prototype;
      } else {
        var sliceLen = end - start;
        newBuf = new Buffer$1(sliceLen, undefined);
        for (var i = 0; i < sliceLen; ++i) {
          newBuf[i] = this[i + start];
        }
      }

      return newBuf
    };

    /*
     * Need to make sure that buffer isn't trying to write out of bounds.
     */
    function checkOffset (offset, ext, length) {
      if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
      if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
    }

    Buffer$1.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) checkOffset(offset, byteLength, this.length);

      var val = this[offset];
      var mul = 1;
      var i = 0;
      while (++i < byteLength && (mul *= 0x100)) {
        val += this[offset + i] * mul;
      }

      return val
    };

    Buffer$1.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) {
        checkOffset(offset, byteLength, this.length);
      }

      var val = this[offset + --byteLength];
      var mul = 1;
      while (byteLength > 0 && (mul *= 0x100)) {
        val += this[offset + --byteLength] * mul;
      }

      return val
    };

    Buffer$1.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 1, this.length);
      return this[offset]
    };

    Buffer$1.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 2, this.length);
      return this[offset] | (this[offset + 1] << 8)
    };

    Buffer$1.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 2, this.length);
      return (this[offset] << 8) | this[offset + 1]
    };

    Buffer$1.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);

      return ((this[offset]) |
          (this[offset + 1] << 8) |
          (this[offset + 2] << 16)) +
          (this[offset + 3] * 0x1000000)
    };

    Buffer$1.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);

      return (this[offset] * 0x1000000) +
        ((this[offset + 1] << 16) |
        (this[offset + 2] << 8) |
        this[offset + 3])
    };

    Buffer$1.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) checkOffset(offset, byteLength, this.length);

      var val = this[offset];
      var mul = 1;
      var i = 0;
      while (++i < byteLength && (mul *= 0x100)) {
        val += this[offset + i] * mul;
      }
      mul *= 0x80;

      if (val >= mul) val -= Math.pow(2, 8 * byteLength);

      return val
    };

    Buffer$1.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) checkOffset(offset, byteLength, this.length);

      var i = byteLength;
      var mul = 1;
      var val = this[offset + --i];
      while (i > 0 && (mul *= 0x100)) {
        val += this[offset + --i] * mul;
      }
      mul *= 0x80;

      if (val >= mul) val -= Math.pow(2, 8 * byteLength);

      return val
    };

    Buffer$1.prototype.readInt8 = function readInt8 (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 1, this.length);
      if (!(this[offset] & 0x80)) return (this[offset])
      return ((0xff - this[offset] + 1) * -1)
    };

    Buffer$1.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 2, this.length);
      var val = this[offset] | (this[offset + 1] << 8);
      return (val & 0x8000) ? val | 0xFFFF0000 : val
    };

    Buffer$1.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 2, this.length);
      var val = this[offset + 1] | (this[offset] << 8);
      return (val & 0x8000) ? val | 0xFFFF0000 : val
    };

    Buffer$1.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);

      return (this[offset]) |
        (this[offset + 1] << 8) |
        (this[offset + 2] << 16) |
        (this[offset + 3] << 24)
    };

    Buffer$1.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);

      return (this[offset] << 24) |
        (this[offset + 1] << 16) |
        (this[offset + 2] << 8) |
        (this[offset + 3])
    };

    Buffer$1.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);
      return read(this, offset, true, 23, 4)
    };

    Buffer$1.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);
      return read(this, offset, false, 23, 4)
    };

    Buffer$1.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 8, this.length);
      return read(this, offset, true, 52, 8)
    };

    Buffer$1.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 8, this.length);
      return read(this, offset, false, 52, 8)
    };

    function checkInt (buf, value, offset, ext, max, min) {
      if (!internalIsBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
      if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
      if (offset + ext > buf.length) throw new RangeError('Index out of range')
    }

    Buffer$1.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
      }

      var mul = 1;
      var i = 0;
      this[offset] = value & 0xFF;
      while (++i < byteLength && (mul *= 0x100)) {
        this[offset + i] = (value / mul) & 0xFF;
      }

      return offset + byteLength
    };

    Buffer$1.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
      }

      var i = byteLength - 1;
      var mul = 1;
      this[offset + i] = value & 0xFF;
      while (--i >= 0 && (mul *= 0x100)) {
        this[offset + i] = (value / mul) & 0xFF;
      }

      return offset + byteLength
    };

    Buffer$1.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
      if (!Buffer$1.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
      this[offset] = (value & 0xff);
      return offset + 1
    };

    function objectWriteUInt16 (buf, value, offset, littleEndian) {
      if (value < 0) value = 0xffff + value + 1;
      for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
        buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
          (littleEndian ? i : 1 - i) * 8;
      }
    }

    Buffer$1.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
      if (Buffer$1.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value & 0xff);
        this[offset + 1] = (value >>> 8);
      } else {
        objectWriteUInt16(this, value, offset, true);
      }
      return offset + 2
    };

    Buffer$1.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
      if (Buffer$1.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value >>> 8);
        this[offset + 1] = (value & 0xff);
      } else {
        objectWriteUInt16(this, value, offset, false);
      }
      return offset + 2
    };

    function objectWriteUInt32 (buf, value, offset, littleEndian) {
      if (value < 0) value = 0xffffffff + value + 1;
      for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
        buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff;
      }
    }

    Buffer$1.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
      if (Buffer$1.TYPED_ARRAY_SUPPORT) {
        this[offset + 3] = (value >>> 24);
        this[offset + 2] = (value >>> 16);
        this[offset + 1] = (value >>> 8);
        this[offset] = (value & 0xff);
      } else {
        objectWriteUInt32(this, value, offset, true);
      }
      return offset + 4
    };

    Buffer$1.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
      if (Buffer$1.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value >>> 24);
        this[offset + 1] = (value >>> 16);
        this[offset + 2] = (value >>> 8);
        this[offset + 3] = (value & 0xff);
      } else {
        objectWriteUInt32(this, value, offset, false);
      }
      return offset + 4
    };

    Buffer$1.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength - 1);

        checkInt(this, value, offset, byteLength, limit - 1, -limit);
      }

      var i = 0;
      var mul = 1;
      var sub = 0;
      this[offset] = value & 0xFF;
      while (++i < byteLength && (mul *= 0x100)) {
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
          sub = 1;
        }
        this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
      }

      return offset + byteLength
    };

    Buffer$1.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength - 1);

        checkInt(this, value, offset, byteLength, limit - 1, -limit);
      }

      var i = byteLength - 1;
      var mul = 1;
      var sub = 0;
      this[offset + i] = value & 0xFF;
      while (--i >= 0 && (mul *= 0x100)) {
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
          sub = 1;
        }
        this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
      }

      return offset + byteLength
    };

    Buffer$1.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
      if (!Buffer$1.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
      if (value < 0) value = 0xff + value + 1;
      this[offset] = (value & 0xff);
      return offset + 1
    };

    Buffer$1.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
      if (Buffer$1.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value & 0xff);
        this[offset + 1] = (value >>> 8);
      } else {
        objectWriteUInt16(this, value, offset, true);
      }
      return offset + 2
    };

    Buffer$1.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
      if (Buffer$1.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value >>> 8);
        this[offset + 1] = (value & 0xff);
      } else {
        objectWriteUInt16(this, value, offset, false);
      }
      return offset + 2
    };

    Buffer$1.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
      if (Buffer$1.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value & 0xff);
        this[offset + 1] = (value >>> 8);
        this[offset + 2] = (value >>> 16);
        this[offset + 3] = (value >>> 24);
      } else {
        objectWriteUInt32(this, value, offset, true);
      }
      return offset + 4
    };

    Buffer$1.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
      if (value < 0) value = 0xffffffff + value + 1;
      if (Buffer$1.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value >>> 24);
        this[offset + 1] = (value >>> 16);
        this[offset + 2] = (value >>> 8);
        this[offset + 3] = (value & 0xff);
      } else {
        objectWriteUInt32(this, value, offset, false);
      }
      return offset + 4
    };

    function checkIEEE754 (buf, value, offset, ext, max, min) {
      if (offset + ext > buf.length) throw new RangeError('Index out of range')
      if (offset < 0) throw new RangeError('Index out of range')
    }

    function writeFloat (buf, value, offset, littleEndian, noAssert) {
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 4);
      }
      write(buf, value, offset, littleEndian, 23, 4);
      return offset + 4
    }

    Buffer$1.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
      return writeFloat(this, value, offset, true, noAssert)
    };

    Buffer$1.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
      return writeFloat(this, value, offset, false, noAssert)
    };

    function writeDouble (buf, value, offset, littleEndian, noAssert) {
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 8);
      }
      write(buf, value, offset, littleEndian, 52, 8);
      return offset + 8
    }

    Buffer$1.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
      return writeDouble(this, value, offset, true, noAssert)
    };

    Buffer$1.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
      return writeDouble(this, value, offset, false, noAssert)
    };

    // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
    Buffer$1.prototype.copy = function copy (target, targetStart, start, end) {
      if (!start) start = 0;
      if (!end && end !== 0) end = this.length;
      if (targetStart >= target.length) targetStart = target.length;
      if (!targetStart) targetStart = 0;
      if (end > 0 && end < start) end = start;

      // Copy 0 bytes; we're done
      if (end === start) return 0
      if (target.length === 0 || this.length === 0) return 0

      // Fatal error conditions
      if (targetStart < 0) {
        throw new RangeError('targetStart out of bounds')
      }
      if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
      if (end < 0) throw new RangeError('sourceEnd out of bounds')

      // Are we oob?
      if (end > this.length) end = this.length;
      if (target.length - targetStart < end - start) {
        end = target.length - targetStart + start;
      }

      var len = end - start;
      var i;

      if (this === target && start < targetStart && targetStart < end) {
        // descending copy from end
        for (i = len - 1; i >= 0; --i) {
          target[i + targetStart] = this[i + start];
        }
      } else if (len < 1000 || !Buffer$1.TYPED_ARRAY_SUPPORT) {
        // ascending copy from start
        for (i = 0; i < len; ++i) {
          target[i + targetStart] = this[i + start];
        }
      } else {
        Uint8Array.prototype.set.call(
          target,
          this.subarray(start, start + len),
          targetStart
        );
      }

      return len
    };

    // Usage:
    //    buffer.fill(number[, offset[, end]])
    //    buffer.fill(buffer[, offset[, end]])
    //    buffer.fill(string[, offset[, end]][, encoding])
    Buffer$1.prototype.fill = function fill (val, start, end, encoding) {
      // Handle string cases:
      if (typeof val === 'string') {
        if (typeof start === 'string') {
          encoding = start;
          start = 0;
          end = this.length;
        } else if (typeof end === 'string') {
          encoding = end;
          end = this.length;
        }
        if (val.length === 1) {
          var code = val.charCodeAt(0);
          if (code < 256) {
            val = code;
          }
        }
        if (encoding !== undefined && typeof encoding !== 'string') {
          throw new TypeError('encoding must be a string')
        }
        if (typeof encoding === 'string' && !Buffer$1.isEncoding(encoding)) {
          throw new TypeError('Unknown encoding: ' + encoding)
        }
      } else if (typeof val === 'number') {
        val = val & 255;
      }

      // Invalid ranges are not set to a default, so can range check early.
      if (start < 0 || this.length < start || this.length < end) {
        throw new RangeError('Out of range index')
      }

      if (end <= start) {
        return this
      }

      start = start >>> 0;
      end = end === undefined ? this.length : end >>> 0;

      if (!val) val = 0;

      var i;
      if (typeof val === 'number') {
        for (i = start; i < end; ++i) {
          this[i] = val;
        }
      } else {
        var bytes = internalIsBuffer(val)
          ? val
          : utf8ToBytes$2(new Buffer$1(val, encoding).toString());
        var len = bytes.length;
        for (i = 0; i < end - start; ++i) {
          this[i + start] = bytes[i % len];
        }
      }

      return this
    };

    // HELPER FUNCTIONS
    // ================

    var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

    function base64clean (str) {
      // Node strips out invalid characters like \n and \t from the string, base64-js does not
      str = stringtrim(str).replace(INVALID_BASE64_RE, '');
      // Node converts strings with length < 2 to ''
      if (str.length < 2) return ''
      // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
      while (str.length % 4 !== 0) {
        str = str + '=';
      }
      return str
    }

    function stringtrim (str) {
      if (str.trim) return str.trim()
      return str.replace(/^\s+|\s+$/g, '')
    }

    function toHex$3 (n) {
      if (n < 16) return '0' + n.toString(16)
      return n.toString(16)
    }

    function utf8ToBytes$2 (string, units) {
      units = units || Infinity;
      var codePoint;
      var length = string.length;
      var leadSurrogate = null;
      var bytes = [];

      for (var i = 0; i < length; ++i) {
        codePoint = string.charCodeAt(i);

        // is surrogate component
        if (codePoint > 0xD7FF && codePoint < 0xE000) {
          // last char was a lead
          if (!leadSurrogate) {
            // no lead yet
            if (codePoint > 0xDBFF) {
              // unexpected trail
              if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
              continue
            } else if (i + 1 === length) {
              // unpaired lead
              if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
              continue
            }

            // valid lead
            leadSurrogate = codePoint;

            continue
          }

          // 2 leads in a row
          if (codePoint < 0xDC00) {
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            leadSurrogate = codePoint;
            continue
          }

          // valid surrogate pair
          codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
        } else if (leadSurrogate) {
          // valid bmp char, but last char was a lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        }

        leadSurrogate = null;

        // encode utf8
        if (codePoint < 0x80) {
          if ((units -= 1) < 0) break
          bytes.push(codePoint);
        } else if (codePoint < 0x800) {
          if ((units -= 2) < 0) break
          bytes.push(
            codePoint >> 0x6 | 0xC0,
            codePoint & 0x3F | 0x80
          );
        } else if (codePoint < 0x10000) {
          if ((units -= 3) < 0) break
          bytes.push(
            codePoint >> 0xC | 0xE0,
            codePoint >> 0x6 & 0x3F | 0x80,
            codePoint & 0x3F | 0x80
          );
        } else if (codePoint < 0x110000) {
          if ((units -= 4) < 0) break
          bytes.push(
            codePoint >> 0x12 | 0xF0,
            codePoint >> 0xC & 0x3F | 0x80,
            codePoint >> 0x6 & 0x3F | 0x80,
            codePoint & 0x3F | 0x80
          );
        } else {
          throw new Error('Invalid code point')
        }
      }

      return bytes
    }

    function asciiToBytes (str) {
      var byteArray = [];
      for (var i = 0; i < str.length; ++i) {
        // Node's code seems to be doing this and not & 0x7F..
        byteArray.push(str.charCodeAt(i) & 0xFF);
      }
      return byteArray
    }

    function utf16leToBytes (str, units) {
      var c, hi, lo;
      var byteArray = [];
      for (var i = 0; i < str.length; ++i) {
        if ((units -= 2) < 0) break

        c = str.charCodeAt(i);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
      }

      return byteArray
    }


    function base64ToBytes (str) {
      return toByteArray(base64clean(str))
    }

    function blitBuffer (src, dst, offset, length) {
      for (var i = 0; i < length; ++i) {
        if ((i + offset >= dst.length) || (i >= src.length)) break
        dst[i + offset] = src[i];
      }
      return i
    }

    function isnan (val) {
      return val !== val // eslint-disable-line no-self-compare
    }


    // the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence
    // The _isBuffer check is for Safari 5-7 support, because it's missing
    // Object.prototype.constructor. Remove this eventually
    function isBuffer(obj) {
      return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj))
    }

    function isFastBuffer (obj) {
      return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
    }

    // For Node v0.10 support. Remove this eventually.
    function isSlowBuffer (obj) {
      return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer(obj.slice(0, 0))
    }

    var bufferEs6 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        INSPECT_MAX_BYTES: INSPECT_MAX_BYTES,
        kMaxLength: _kMaxLength,
        Buffer: Buffer$1,
        SlowBuffer: SlowBuffer,
        isBuffer: isBuffer
    });

    var require$$0 = /*@__PURE__*/getAugmentedNamespace(bufferEs6);

    var bn = createCommonjsModule$1(function (module) {
    (function (module, exports) {

      // Utils
      function assert (val, msg) {
        if (!val) throw new Error(msg || 'Assertion failed');
      }

      // Could use `inherits` module, but don't want to move from single file
      // architecture yet.
      function inherits (ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function () {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }

      // BN

      function BN (number, base, endian) {
        if (BN.isBN(number)) {
          return number;
        }

        this.negative = 0;
        this.words = null;
        this.length = 0;

        // Reduction context
        this.red = null;

        if (number !== null) {
          if (base === 'le' || base === 'be') {
            endian = base;
            base = 10;
          }

          this._init(number || 0, base || 10, endian || 'be');
        }
      }
      if (typeof module === 'object') {
        module.exports = BN;
      } else {
        exports.BN = BN;
      }

      BN.BN = BN;
      BN.wordSize = 26;

      var Buffer;
      try {
        if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') {
          Buffer = window.Buffer;
        } else {
          Buffer = require$$0.Buffer;
        }
      } catch (e) {
      }

      BN.isBN = function isBN (num) {
        if (num instanceof BN) {
          return true;
        }

        return num !== null && typeof num === 'object' &&
          num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
      };

      BN.max = function max (left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
      };

      BN.min = function min (left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
      };

      BN.prototype._init = function init (number, base, endian) {
        if (typeof number === 'number') {
          return this._initNumber(number, base, endian);
        }

        if (typeof number === 'object') {
          return this._initArray(number, base, endian);
        }

        if (base === 'hex') {
          base = 16;
        }
        assert(base === (base | 0) && base >= 2 && base <= 36);

        number = number.toString().replace(/\s+/g, '');
        var start = 0;
        if (number[0] === '-') {
          start++;
          this.negative = 1;
        }

        if (start < number.length) {
          if (base === 16) {
            this._parseHex(number, start, endian);
          } else {
            this._parseBase(number, base, start);
            if (endian === 'le') {
              this._initArray(this.toArray(), base, endian);
            }
          }
        }
      };

      BN.prototype._initNumber = function _initNumber (number, base, endian) {
        if (number < 0) {
          this.negative = 1;
          number = -number;
        }
        if (number < 0x4000000) {
          this.words = [number & 0x3ffffff];
          this.length = 1;
        } else if (number < 0x10000000000000) {
          this.words = [
            number & 0x3ffffff,
            (number / 0x4000000) & 0x3ffffff
          ];
          this.length = 2;
        } else {
          assert(number < 0x20000000000000); // 2 ^ 53 (unsafe)
          this.words = [
            number & 0x3ffffff,
            (number / 0x4000000) & 0x3ffffff,
            1
          ];
          this.length = 3;
        }

        if (endian !== 'le') return;

        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
      };

      BN.prototype._initArray = function _initArray (number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === 'number');
        if (number.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }

        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }

        var j, w;
        var off = 0;
        if (endian === 'be') {
          for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
            w = number[i] | (number[i - 1] << 8) | (number[i - 2] << 16);
            this.words[j] |= (w << off) & 0x3ffffff;
            this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === 'le') {
          for (i = 0, j = 0; i < number.length; i += 3) {
            w = number[i] | (number[i + 1] << 8) | (number[i + 2] << 16);
            this.words[j] |= (w << off) & 0x3ffffff;
            this.words[j + 1] = (w >>> (26 - off)) & 0x3ffffff;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }
        return this._strip();
      };

      function parseHex4Bits (string, index) {
        var c = string.charCodeAt(index);
        // '0' - '9'
        if (c >= 48 && c <= 57) {
          return c - 48;
        // 'A' - 'F'
        } else if (c >= 65 && c <= 70) {
          return c - 55;
        // 'a' - 'f'
        } else if (c >= 97 && c <= 102) {
          return c - 87;
        } else {
          assert(false, 'Invalid character in ' + string);
        }
      }

      function parseHexByte (string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) {
          r |= parseHex4Bits(string, index - 1) << 4;
        }
        return r;
      }

      BN.prototype._parseHex = function _parseHex (number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }

        // 24-bits chunks
        var off = 0;
        var j = 0;

        var w;
        if (endian === 'be') {
          for (i = number.length - 1; i >= start; i -= 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 0x3ffffff;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        } else {
          var parseLength = number.length - start;
          for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 0x3ffffff;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        }

        this._strip();
      };

      function parseBase (str, start, end, mul) {
        var r = 0;
        var b = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;

          r *= mul;

          // 'a'
          if (c >= 49) {
            b = c - 49 + 0xa;

          // 'A'
          } else if (c >= 17) {
            b = c - 17 + 0xa;

          // '0' - '9'
          } else {
            b = c;
          }
          assert(c >= 0 && b < mul, 'Invalid character');
          r += b;
        }
        return r;
      }

      BN.prototype._parseBase = function _parseBase (number, base, start) {
        // Initialize as zero
        this.words = [0];
        this.length = 1;

        // Find length of limb in base
        for (var limbLen = 0, limbPow = 1; limbPow <= 0x3ffffff; limbPow *= base) {
          limbLen++;
        }
        limbLen--;
        limbPow = (limbPow / base) | 0;

        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;

        var word = 0;
        for (var i = start; i < end; i += limbLen) {
          word = parseBase(number, i, i + limbLen, base);

          this.imuln(limbPow);
          if (this.words[0] + word < 0x4000000) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }

        if (mod !== 0) {
          var pow = 1;
          word = parseBase(number, i, number.length, base);

          for (i = 0; i < mod; i++) {
            pow *= base;
          }

          this.imuln(pow);
          if (this.words[0] + word < 0x4000000) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }

        this._strip();
      };

      BN.prototype.copy = function copy (dest) {
        dest.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          dest.words[i] = this.words[i];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };

      function move (dest, src) {
        dest.words = src.words;
        dest.length = src.length;
        dest.negative = src.negative;
        dest.red = src.red;
      }

      BN.prototype._move = function _move (dest) {
        move(dest, this);
      };

      BN.prototype.clone = function clone () {
        var r = new BN(null);
        this.copy(r);
        return r;
      };

      BN.prototype._expand = function _expand (size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };

      // Remove leading `0` from `this`
      BN.prototype._strip = function strip () {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };

      BN.prototype._normSign = function _normSign () {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };

      // Check Symbol.for because not everywhere where Symbol defined
      // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
      if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') {
        try {
          BN.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspect;
        } catch (e) {
          BN.prototype.inspect = inspect;
        }
      } else {
        BN.prototype.inspect = inspect;
      }

      function inspect () {
        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
      }

      /*

      var zeros = [];
      var groupSizes = [];
      var groupBases = [];

      var s = '';
      var i = -1;
      while (++i < BN.wordSize) {
        zeros[i] = s;
        s += '0';
      }
      groupSizes[0] = 0;
      groupSizes[1] = 0;
      groupBases[0] = 0;
      groupBases[1] = 0;
      var base = 2 - 1;
      while (++base < 36 + 1) {
        var groupSize = 0;
        var groupBase = 1;
        while (groupBase < (1 << BN.wordSize) / base) {
          groupBase *= base;
          groupSize += 1;
        }
        groupSizes[base] = groupSize;
        groupBases[base] = groupBase;
      }

      */

      var zeros = [
        '',
        '0',
        '00',
        '000',
        '0000',
        '00000',
        '000000',
        '0000000',
        '00000000',
        '000000000',
        '0000000000',
        '00000000000',
        '000000000000',
        '0000000000000',
        '00000000000000',
        '000000000000000',
        '0000000000000000',
        '00000000000000000',
        '000000000000000000',
        '0000000000000000000',
        '00000000000000000000',
        '000000000000000000000',
        '0000000000000000000000',
        '00000000000000000000000',
        '000000000000000000000000',
        '0000000000000000000000000'
      ];

      var groupSizes = [
        0, 0,
        25, 16, 12, 11, 10, 9, 8,
        8, 7, 7, 7, 7, 6, 6,
        6, 6, 6, 6, 6, 5, 5,
        5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5
      ];

      var groupBases = [
        0, 0,
        33554432, 43046721, 16777216, 48828125, 60466176, 40353607, 16777216,
        43046721, 10000000, 19487171, 35831808, 62748517, 7529536, 11390625,
        16777216, 24137569, 34012224, 47045881, 64000000, 4084101, 5153632,
        6436343, 7962624, 9765625, 11881376, 14348907, 17210368, 20511149,
        24300000, 28629151, 33554432, 39135393, 45435424, 52521875, 60466176
      ];

      BN.prototype.toString = function toString (base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;

        var out;
        if (base === 16 || base === 'hex') {
          out = '';
          var off = 0;
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = this.words[i];
            var word = (((w << off) | carry) & 0xffffff).toString(16);
            carry = (w >>> (24 - off)) & 0xffffff;
            off += 2;
            if (off >= 26) {
              off -= 26;
              i--;
            }
            if (carry !== 0 || i !== this.length - 1) {
              out = zeros[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding !== 0) {
            out = '0' + out;
          }
          if (this.negative !== 0) {
            out = '-' + out;
          }
          return out;
        }

        if (base === (base | 0) && base >= 2 && base <= 36) {
          // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
          var groupSize = groupSizes[base];
          // var groupBase = Math.pow(base, groupSize);
          var groupBase = groupBases[base];
          out = '';
          var c = this.clone();
          c.negative = 0;
          while (!c.isZero()) {
            var r = c.modrn(groupBase).toString(base);
            c = c.idivn(groupBase);

            if (!c.isZero()) {
              out = zeros[groupSize - r.length] + r + out;
            } else {
              out = r + out;
            }
          }
          if (this.isZero()) {
            out = '0' + out;
          }
          while (out.length % padding !== 0) {
            out = '0' + out;
          }
          if (this.negative !== 0) {
            out = '-' + out;
          }
          return out;
        }

        assert(false, 'Base should be between 2 and 36');
      };

      BN.prototype.toNumber = function toNumber () {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 0x4000000;
        } else if (this.length === 3 && this.words[2] === 0x01) {
          // NOTE: at this stage it is known that the top bit is set
          ret += 0x10000000000000 + (this.words[1] * 0x4000000);
        } else if (this.length > 2) {
          assert(false, 'Number can only safely store up to 53 bits');
        }
        return (this.negative !== 0) ? -ret : ret;
      };

      BN.prototype.toJSON = function toJSON () {
        return this.toString(16, 2);
      };

      if (Buffer) {
        BN.prototype.toBuffer = function toBuffer (endian, length) {
          return this.toArrayLike(Buffer, endian, length);
        };
      }

      BN.prototype.toArray = function toArray (endian, length) {
        return this.toArrayLike(Array, endian, length);
      };

      var allocate = function allocate (ArrayType, size) {
        if (ArrayType.allocUnsafe) {
          return ArrayType.allocUnsafe(size);
        }
        return new ArrayType(size);
      };

      BN.prototype.toArrayLike = function toArrayLike (ArrayType, endian, length) {
        this._strip();

        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, 'byte array longer than desired length');
        assert(reqLength > 0, 'Requested array length <= 0');

        var res = allocate(ArrayType, reqLength);
        var postfix = endian === 'le' ? 'LE' : 'BE';
        this['_toArrayLike' + postfix](res, byteLength);
        return res;
      };

      BN.prototype._toArrayLikeLE = function _toArrayLikeLE (res, byteLength) {
        var position = 0;
        var carry = 0;

        for (var i = 0, shift = 0; i < this.length; i++) {
          var word = (this.words[i] << shift) | carry;

          res[position++] = word & 0xff;
          if (position < res.length) {
            res[position++] = (word >> 8) & 0xff;
          }
          if (position < res.length) {
            res[position++] = (word >> 16) & 0xff;
          }

          if (shift === 6) {
            if (position < res.length) {
              res[position++] = (word >> 24) & 0xff;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }

        if (position < res.length) {
          res[position++] = carry;

          while (position < res.length) {
            res[position++] = 0;
          }
        }
      };

      BN.prototype._toArrayLikeBE = function _toArrayLikeBE (res, byteLength) {
        var position = res.length - 1;
        var carry = 0;

        for (var i = 0, shift = 0; i < this.length; i++) {
          var word = (this.words[i] << shift) | carry;

          res[position--] = word & 0xff;
          if (position >= 0) {
            res[position--] = (word >> 8) & 0xff;
          }
          if (position >= 0) {
            res[position--] = (word >> 16) & 0xff;
          }

          if (shift === 6) {
            if (position >= 0) {
              res[position--] = (word >> 24) & 0xff;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }

        if (position >= 0) {
          res[position--] = carry;

          while (position >= 0) {
            res[position--] = 0;
          }
        }
      };

      if (Math.clz32) {
        BN.prototype._countBits = function _countBits (w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN.prototype._countBits = function _countBits (w) {
          var t = w;
          var r = 0;
          if (t >= 0x1000) {
            r += 13;
            t >>>= 13;
          }
          if (t >= 0x40) {
            r += 7;
            t >>>= 7;
          }
          if (t >= 0x8) {
            r += 4;
            t >>>= 4;
          }
          if (t >= 0x02) {
            r += 2;
            t >>>= 2;
          }
          return r + t;
        };
      }

      BN.prototype._zeroBits = function _zeroBits (w) {
        // Short-cut
        if (w === 0) return 26;

        var t = w;
        var r = 0;
        if ((t & 0x1fff) === 0) {
          r += 13;
          t >>>= 13;
        }
        if ((t & 0x7f) === 0) {
          r += 7;
          t >>>= 7;
        }
        if ((t & 0xf) === 0) {
          r += 4;
          t >>>= 4;
        }
        if ((t & 0x3) === 0) {
          r += 2;
          t >>>= 2;
        }
        if ((t & 0x1) === 0) {
          r++;
        }
        return r;
      };

      // Return number of used bits in a BN
      BN.prototype.bitLength = function bitLength () {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
      };

      function toBitArray (num) {
        var w = new Array(num.bitLength());

        for (var bit = 0; bit < w.length; bit++) {
          var off = (bit / 26) | 0;
          var wbit = bit % 26;

          w[bit] = (num.words[off] >>> wbit) & 0x01;
        }

        return w;
      }

      // Number of trailing zero bits
      BN.prototype.zeroBits = function zeroBits () {
        if (this.isZero()) return 0;

        var r = 0;
        for (var i = 0; i < this.length; i++) {
          var b = this._zeroBits(this.words[i]);
          r += b;
          if (b !== 26) break;
        }
        return r;
      };

      BN.prototype.byteLength = function byteLength () {
        return Math.ceil(this.bitLength() / 8);
      };

      BN.prototype.toTwos = function toTwos (width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };

      BN.prototype.fromTwos = function fromTwos (width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };

      BN.prototype.isNeg = function isNeg () {
        return this.negative !== 0;
      };

      // Return negative clone of `this`
      BN.prototype.neg = function neg () {
        return this.clone().ineg();
      };

      BN.prototype.ineg = function ineg () {
        if (!this.isZero()) {
          this.negative ^= 1;
        }

        return this;
      };

      // Or `num` with `this` in-place
      BN.prototype.iuor = function iuor (num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }

        for (var i = 0; i < num.length; i++) {
          this.words[i] = this.words[i] | num.words[i];
        }

        return this._strip();
      };

      BN.prototype.ior = function ior (num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
      };

      // Or `num` with `this`
      BN.prototype.or = function or (num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
      };

      BN.prototype.uor = function uor (num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
      };

      // And `num` with `this` in-place
      BN.prototype.iuand = function iuand (num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) {
          b = num;
        } else {
          b = this;
        }

        for (var i = 0; i < b.length; i++) {
          this.words[i] = this.words[i] & num.words[i];
        }

        this.length = b.length;

        return this._strip();
      };

      BN.prototype.iand = function iand (num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
      };

      // And `num` with `this`
      BN.prototype.and = function and (num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
      };

      BN.prototype.uand = function uand (num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
      };

      // Xor `num` with `this` in-place
      BN.prototype.iuxor = function iuxor (num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }

        for (var i = 0; i < b.length; i++) {
          this.words[i] = a.words[i] ^ b.words[i];
        }

        if (this !== a) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }

        this.length = a.length;

        return this._strip();
      };

      BN.prototype.ixor = function ixor (num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };

      // Xor `num` with `this`
      BN.prototype.xor = function xor (num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
      };

      BN.prototype.uxor = function uxor (num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };

      // Not ``this`` with ``width`` bitwidth
      BN.prototype.inotn = function inotn (width) {
        assert(typeof width === 'number' && width >= 0);

        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;

        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);

        if (bitsLeft > 0) {
          bytesNeeded--;
        }

        // Handle complete words
        for (var i = 0; i < bytesNeeded; i++) {
          this.words[i] = ~this.words[i] & 0x3ffffff;
        }

        // Handle the residue
        if (bitsLeft > 0) {
          this.words[i] = ~this.words[i] & (0x3ffffff >> (26 - bitsLeft));
        }

        // And remove leading zeroes
        return this._strip();
      };

      BN.prototype.notn = function notn (width) {
        return this.clone().inotn(width);
      };

      // Set `bit` of `this`
      BN.prototype.setn = function setn (bit, val) {
        assert(typeof bit === 'number' && bit >= 0);

        var off = (bit / 26) | 0;
        var wbit = bit % 26;

        this._expand(off + 1);

        if (val) {
          this.words[off] = this.words[off] | (1 << wbit);
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }

        return this._strip();
      };

      // Add `num` to `this` in-place
      BN.prototype.iadd = function iadd (num) {
        var r;

        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r = this.isub(num);
          this.negative ^= 1;
          return this._normSign();

        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r = this.isub(num);
          num.negative = 1;
          return r._normSign();
        }

        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }

        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
          this.words[i] = r & 0x3ffffff;
          carry = r >>> 26;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          this.words[i] = r & 0x3ffffff;
          carry = r >>> 26;
        }

        this.length = a.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        // Copy the rest of the words
        } else if (a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }

        return this;
      };

      // Add `num` to `this`
      BN.prototype.add = function add (num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }

        if (this.length > num.length) return this.clone().iadd(num);

        return num.clone().iadd(this);
      };

      // Subtract `num` from `this` in-place
      BN.prototype.isub = function isub (num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
          num.negative = 0;
          var r = this.iadd(num);
          num.negative = 1;
          return r._normSign();

        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }

        // At this point both numbers are positive
        var cmp = this.cmp(num);

        // Optimization - zeroify
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }

        // a > b
        var a, b;
        if (cmp > 0) {
          a = this;
          b = num;
        } else {
          a = num;
          b = this;
        }

        var carry = 0;
        for (var i = 0; i < b.length; i++) {
          r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 0x3ffffff;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r = (a.words[i] | 0) + carry;
          carry = r >> 26;
          this.words[i] = r & 0x3ffffff;
        }

        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }

        this.length = Math.max(this.length, i);

        if (a !== this) {
          this.negative = 1;
        }

        return this._strip();
      };

      // Subtract `num` from `this`
      BN.prototype.sub = function sub (num) {
        return this.clone().isub(num);
      };

      function smallMulTo (self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = (self.length + num.length) | 0;
        out.length = len;
        len = (len - 1) | 0;

        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;

        var lo = r & 0x3ffffff;
        var carry = (r / 0x4000000) | 0;
        out.words[0] = lo;

        for (var k = 1; k < len; k++) {
          // Sum all words with the same `i + j = k` and accumulate `ncarry`,
          // note that ncarry could be >= 0x3ffffff
          var ncarry = carry >>> 26;
          var rword = carry & 0x3ffffff;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
            var i = (k - j) | 0;
            a = self.words[i] | 0;
            b = num.words[j] | 0;
            r = a * b + rword;
            ncarry += (r / 0x4000000) | 0;
            rword = r & 0x3ffffff;
          }
          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }

        return out._strip();
      }

      // TODO(indutny): it may be reasonable to omit it for users who don't need
      // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
      // multiplication (like elliptic secp256k1).
      var comb10MulTo = function comb10MulTo (self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 0x1fff;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 0x1fff;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 0x1fff;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 0x1fff;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 0x1fff;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 0x1fff;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 0x1fff;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 0x1fff;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 0x1fff;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 0x1fff;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 0x1fff;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 0x1fff;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 0x1fff;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 0x1fff;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 0x1fff;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 0x1fff;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 0x1fff;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 0x1fff;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 0x1fff;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 0x1fff;
        var bh9 = b9 >>> 13;

        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = (mid + Math.imul(ah0, bl0)) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w0 >>> 26)) | 0;
        w0 &= 0x3ffffff;
        /* k = 1 */
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = (mid + Math.imul(ah1, bl0)) | 0;
        hi = Math.imul(ah1, bh0);
        lo = (lo + Math.imul(al0, bl1)) | 0;
        mid = (mid + Math.imul(al0, bh1)) | 0;
        mid = (mid + Math.imul(ah0, bl1)) | 0;
        hi = (hi + Math.imul(ah0, bh1)) | 0;
        var w1 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w1 >>> 26)) | 0;
        w1 &= 0x3ffffff;
        /* k = 2 */
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = (mid + Math.imul(ah2, bl0)) | 0;
        hi = Math.imul(ah2, bh0);
        lo = (lo + Math.imul(al1, bl1)) | 0;
        mid = (mid + Math.imul(al1, bh1)) | 0;
        mid = (mid + Math.imul(ah1, bl1)) | 0;
        hi = (hi + Math.imul(ah1, bh1)) | 0;
        lo = (lo + Math.imul(al0, bl2)) | 0;
        mid = (mid + Math.imul(al0, bh2)) | 0;
        mid = (mid + Math.imul(ah0, bl2)) | 0;
        hi = (hi + Math.imul(ah0, bh2)) | 0;
        var w2 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w2 >>> 26)) | 0;
        w2 &= 0x3ffffff;
        /* k = 3 */
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = (mid + Math.imul(ah3, bl0)) | 0;
        hi = Math.imul(ah3, bh0);
        lo = (lo + Math.imul(al2, bl1)) | 0;
        mid = (mid + Math.imul(al2, bh1)) | 0;
        mid = (mid + Math.imul(ah2, bl1)) | 0;
        hi = (hi + Math.imul(ah2, bh1)) | 0;
        lo = (lo + Math.imul(al1, bl2)) | 0;
        mid = (mid + Math.imul(al1, bh2)) | 0;
        mid = (mid + Math.imul(ah1, bl2)) | 0;
        hi = (hi + Math.imul(ah1, bh2)) | 0;
        lo = (lo + Math.imul(al0, bl3)) | 0;
        mid = (mid + Math.imul(al0, bh3)) | 0;
        mid = (mid + Math.imul(ah0, bl3)) | 0;
        hi = (hi + Math.imul(ah0, bh3)) | 0;
        var w3 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w3 >>> 26)) | 0;
        w3 &= 0x3ffffff;
        /* k = 4 */
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = (mid + Math.imul(ah4, bl0)) | 0;
        hi = Math.imul(ah4, bh0);
        lo = (lo + Math.imul(al3, bl1)) | 0;
        mid = (mid + Math.imul(al3, bh1)) | 0;
        mid = (mid + Math.imul(ah3, bl1)) | 0;
        hi = (hi + Math.imul(ah3, bh1)) | 0;
        lo = (lo + Math.imul(al2, bl2)) | 0;
        mid = (mid + Math.imul(al2, bh2)) | 0;
        mid = (mid + Math.imul(ah2, bl2)) | 0;
        hi = (hi + Math.imul(ah2, bh2)) | 0;
        lo = (lo + Math.imul(al1, bl3)) | 0;
        mid = (mid + Math.imul(al1, bh3)) | 0;
        mid = (mid + Math.imul(ah1, bl3)) | 0;
        hi = (hi + Math.imul(ah1, bh3)) | 0;
        lo = (lo + Math.imul(al0, bl4)) | 0;
        mid = (mid + Math.imul(al0, bh4)) | 0;
        mid = (mid + Math.imul(ah0, bl4)) | 0;
        hi = (hi + Math.imul(ah0, bh4)) | 0;
        var w4 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w4 >>> 26)) | 0;
        w4 &= 0x3ffffff;
        /* k = 5 */
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = (mid + Math.imul(ah5, bl0)) | 0;
        hi = Math.imul(ah5, bh0);
        lo = (lo + Math.imul(al4, bl1)) | 0;
        mid = (mid + Math.imul(al4, bh1)) | 0;
        mid = (mid + Math.imul(ah4, bl1)) | 0;
        hi = (hi + Math.imul(ah4, bh1)) | 0;
        lo = (lo + Math.imul(al3, bl2)) | 0;
        mid = (mid + Math.imul(al3, bh2)) | 0;
        mid = (mid + Math.imul(ah3, bl2)) | 0;
        hi = (hi + Math.imul(ah3, bh2)) | 0;
        lo = (lo + Math.imul(al2, bl3)) | 0;
        mid = (mid + Math.imul(al2, bh3)) | 0;
        mid = (mid + Math.imul(ah2, bl3)) | 0;
        hi = (hi + Math.imul(ah2, bh3)) | 0;
        lo = (lo + Math.imul(al1, bl4)) | 0;
        mid = (mid + Math.imul(al1, bh4)) | 0;
        mid = (mid + Math.imul(ah1, bl4)) | 0;
        hi = (hi + Math.imul(ah1, bh4)) | 0;
        lo = (lo + Math.imul(al0, bl5)) | 0;
        mid = (mid + Math.imul(al0, bh5)) | 0;
        mid = (mid + Math.imul(ah0, bl5)) | 0;
        hi = (hi + Math.imul(ah0, bh5)) | 0;
        var w5 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w5 >>> 26)) | 0;
        w5 &= 0x3ffffff;
        /* k = 6 */
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = (mid + Math.imul(ah6, bl0)) | 0;
        hi = Math.imul(ah6, bh0);
        lo = (lo + Math.imul(al5, bl1)) | 0;
        mid = (mid + Math.imul(al5, bh1)) | 0;
        mid = (mid + Math.imul(ah5, bl1)) | 0;
        hi = (hi + Math.imul(ah5, bh1)) | 0;
        lo = (lo + Math.imul(al4, bl2)) | 0;
        mid = (mid + Math.imul(al4, bh2)) | 0;
        mid = (mid + Math.imul(ah4, bl2)) | 0;
        hi = (hi + Math.imul(ah4, bh2)) | 0;
        lo = (lo + Math.imul(al3, bl3)) | 0;
        mid = (mid + Math.imul(al3, bh3)) | 0;
        mid = (mid + Math.imul(ah3, bl3)) | 0;
        hi = (hi + Math.imul(ah3, bh3)) | 0;
        lo = (lo + Math.imul(al2, bl4)) | 0;
        mid = (mid + Math.imul(al2, bh4)) | 0;
        mid = (mid + Math.imul(ah2, bl4)) | 0;
        hi = (hi + Math.imul(ah2, bh4)) | 0;
        lo = (lo + Math.imul(al1, bl5)) | 0;
        mid = (mid + Math.imul(al1, bh5)) | 0;
        mid = (mid + Math.imul(ah1, bl5)) | 0;
        hi = (hi + Math.imul(ah1, bh5)) | 0;
        lo = (lo + Math.imul(al0, bl6)) | 0;
        mid = (mid + Math.imul(al0, bh6)) | 0;
        mid = (mid + Math.imul(ah0, bl6)) | 0;
        hi = (hi + Math.imul(ah0, bh6)) | 0;
        var w6 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w6 >>> 26)) | 0;
        w6 &= 0x3ffffff;
        /* k = 7 */
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = (mid + Math.imul(ah7, bl0)) | 0;
        hi = Math.imul(ah7, bh0);
        lo = (lo + Math.imul(al6, bl1)) | 0;
        mid = (mid + Math.imul(al6, bh1)) | 0;
        mid = (mid + Math.imul(ah6, bl1)) | 0;
        hi = (hi + Math.imul(ah6, bh1)) | 0;
        lo = (lo + Math.imul(al5, bl2)) | 0;
        mid = (mid + Math.imul(al5, bh2)) | 0;
        mid = (mid + Math.imul(ah5, bl2)) | 0;
        hi = (hi + Math.imul(ah5, bh2)) | 0;
        lo = (lo + Math.imul(al4, bl3)) | 0;
        mid = (mid + Math.imul(al4, bh3)) | 0;
        mid = (mid + Math.imul(ah4, bl3)) | 0;
        hi = (hi + Math.imul(ah4, bh3)) | 0;
        lo = (lo + Math.imul(al3, bl4)) | 0;
        mid = (mid + Math.imul(al3, bh4)) | 0;
        mid = (mid + Math.imul(ah3, bl4)) | 0;
        hi = (hi + Math.imul(ah3, bh4)) | 0;
        lo = (lo + Math.imul(al2, bl5)) | 0;
        mid = (mid + Math.imul(al2, bh5)) | 0;
        mid = (mid + Math.imul(ah2, bl5)) | 0;
        hi = (hi + Math.imul(ah2, bh5)) | 0;
        lo = (lo + Math.imul(al1, bl6)) | 0;
        mid = (mid + Math.imul(al1, bh6)) | 0;
        mid = (mid + Math.imul(ah1, bl6)) | 0;
        hi = (hi + Math.imul(ah1, bh6)) | 0;
        lo = (lo + Math.imul(al0, bl7)) | 0;
        mid = (mid + Math.imul(al0, bh7)) | 0;
        mid = (mid + Math.imul(ah0, bl7)) | 0;
        hi = (hi + Math.imul(ah0, bh7)) | 0;
        var w7 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w7 >>> 26)) | 0;
        w7 &= 0x3ffffff;
        /* k = 8 */
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = (mid + Math.imul(ah8, bl0)) | 0;
        hi = Math.imul(ah8, bh0);
        lo = (lo + Math.imul(al7, bl1)) | 0;
        mid = (mid + Math.imul(al7, bh1)) | 0;
        mid = (mid + Math.imul(ah7, bl1)) | 0;
        hi = (hi + Math.imul(ah7, bh1)) | 0;
        lo = (lo + Math.imul(al6, bl2)) | 0;
        mid = (mid + Math.imul(al6, bh2)) | 0;
        mid = (mid + Math.imul(ah6, bl2)) | 0;
        hi = (hi + Math.imul(ah6, bh2)) | 0;
        lo = (lo + Math.imul(al5, bl3)) | 0;
        mid = (mid + Math.imul(al5, bh3)) | 0;
        mid = (mid + Math.imul(ah5, bl3)) | 0;
        hi = (hi + Math.imul(ah5, bh3)) | 0;
        lo = (lo + Math.imul(al4, bl4)) | 0;
        mid = (mid + Math.imul(al4, bh4)) | 0;
        mid = (mid + Math.imul(ah4, bl4)) | 0;
        hi = (hi + Math.imul(ah4, bh4)) | 0;
        lo = (lo + Math.imul(al3, bl5)) | 0;
        mid = (mid + Math.imul(al3, bh5)) | 0;
        mid = (mid + Math.imul(ah3, bl5)) | 0;
        hi = (hi + Math.imul(ah3, bh5)) | 0;
        lo = (lo + Math.imul(al2, bl6)) | 0;
        mid = (mid + Math.imul(al2, bh6)) | 0;
        mid = (mid + Math.imul(ah2, bl6)) | 0;
        hi = (hi + Math.imul(ah2, bh6)) | 0;
        lo = (lo + Math.imul(al1, bl7)) | 0;
        mid = (mid + Math.imul(al1, bh7)) | 0;
        mid = (mid + Math.imul(ah1, bl7)) | 0;
        hi = (hi + Math.imul(ah1, bh7)) | 0;
        lo = (lo + Math.imul(al0, bl8)) | 0;
        mid = (mid + Math.imul(al0, bh8)) | 0;
        mid = (mid + Math.imul(ah0, bl8)) | 0;
        hi = (hi + Math.imul(ah0, bh8)) | 0;
        var w8 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w8 >>> 26)) | 0;
        w8 &= 0x3ffffff;
        /* k = 9 */
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = (mid + Math.imul(ah9, bl0)) | 0;
        hi = Math.imul(ah9, bh0);
        lo = (lo + Math.imul(al8, bl1)) | 0;
        mid = (mid + Math.imul(al8, bh1)) | 0;
        mid = (mid + Math.imul(ah8, bl1)) | 0;
        hi = (hi + Math.imul(ah8, bh1)) | 0;
        lo = (lo + Math.imul(al7, bl2)) | 0;
        mid = (mid + Math.imul(al7, bh2)) | 0;
        mid = (mid + Math.imul(ah7, bl2)) | 0;
        hi = (hi + Math.imul(ah7, bh2)) | 0;
        lo = (lo + Math.imul(al6, bl3)) | 0;
        mid = (mid + Math.imul(al6, bh3)) | 0;
        mid = (mid + Math.imul(ah6, bl3)) | 0;
        hi = (hi + Math.imul(ah6, bh3)) | 0;
        lo = (lo + Math.imul(al5, bl4)) | 0;
        mid = (mid + Math.imul(al5, bh4)) | 0;
        mid = (mid + Math.imul(ah5, bl4)) | 0;
        hi = (hi + Math.imul(ah5, bh4)) | 0;
        lo = (lo + Math.imul(al4, bl5)) | 0;
        mid = (mid + Math.imul(al4, bh5)) | 0;
        mid = (mid + Math.imul(ah4, bl5)) | 0;
        hi = (hi + Math.imul(ah4, bh5)) | 0;
        lo = (lo + Math.imul(al3, bl6)) | 0;
        mid = (mid + Math.imul(al3, bh6)) | 0;
        mid = (mid + Math.imul(ah3, bl6)) | 0;
        hi = (hi + Math.imul(ah3, bh6)) | 0;
        lo = (lo + Math.imul(al2, bl7)) | 0;
        mid = (mid + Math.imul(al2, bh7)) | 0;
        mid = (mid + Math.imul(ah2, bl7)) | 0;
        hi = (hi + Math.imul(ah2, bh7)) | 0;
        lo = (lo + Math.imul(al1, bl8)) | 0;
        mid = (mid + Math.imul(al1, bh8)) | 0;
        mid = (mid + Math.imul(ah1, bl8)) | 0;
        hi = (hi + Math.imul(ah1, bh8)) | 0;
        lo = (lo + Math.imul(al0, bl9)) | 0;
        mid = (mid + Math.imul(al0, bh9)) | 0;
        mid = (mid + Math.imul(ah0, bl9)) | 0;
        hi = (hi + Math.imul(ah0, bh9)) | 0;
        var w9 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w9 >>> 26)) | 0;
        w9 &= 0x3ffffff;
        /* k = 10 */
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = (mid + Math.imul(ah9, bl1)) | 0;
        hi = Math.imul(ah9, bh1);
        lo = (lo + Math.imul(al8, bl2)) | 0;
        mid = (mid + Math.imul(al8, bh2)) | 0;
        mid = (mid + Math.imul(ah8, bl2)) | 0;
        hi = (hi + Math.imul(ah8, bh2)) | 0;
        lo = (lo + Math.imul(al7, bl3)) | 0;
        mid = (mid + Math.imul(al7, bh3)) | 0;
        mid = (mid + Math.imul(ah7, bl3)) | 0;
        hi = (hi + Math.imul(ah7, bh3)) | 0;
        lo = (lo + Math.imul(al6, bl4)) | 0;
        mid = (mid + Math.imul(al6, bh4)) | 0;
        mid = (mid + Math.imul(ah6, bl4)) | 0;
        hi = (hi + Math.imul(ah6, bh4)) | 0;
        lo = (lo + Math.imul(al5, bl5)) | 0;
        mid = (mid + Math.imul(al5, bh5)) | 0;
        mid = (mid + Math.imul(ah5, bl5)) | 0;
        hi = (hi + Math.imul(ah5, bh5)) | 0;
        lo = (lo + Math.imul(al4, bl6)) | 0;
        mid = (mid + Math.imul(al4, bh6)) | 0;
        mid = (mid + Math.imul(ah4, bl6)) | 0;
        hi = (hi + Math.imul(ah4, bh6)) | 0;
        lo = (lo + Math.imul(al3, bl7)) | 0;
        mid = (mid + Math.imul(al3, bh7)) | 0;
        mid = (mid + Math.imul(ah3, bl7)) | 0;
        hi = (hi + Math.imul(ah3, bh7)) | 0;
        lo = (lo + Math.imul(al2, bl8)) | 0;
        mid = (mid + Math.imul(al2, bh8)) | 0;
        mid = (mid + Math.imul(ah2, bl8)) | 0;
        hi = (hi + Math.imul(ah2, bh8)) | 0;
        lo = (lo + Math.imul(al1, bl9)) | 0;
        mid = (mid + Math.imul(al1, bh9)) | 0;
        mid = (mid + Math.imul(ah1, bl9)) | 0;
        hi = (hi + Math.imul(ah1, bh9)) | 0;
        var w10 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w10 >>> 26)) | 0;
        w10 &= 0x3ffffff;
        /* k = 11 */
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = (mid + Math.imul(ah9, bl2)) | 0;
        hi = Math.imul(ah9, bh2);
        lo = (lo + Math.imul(al8, bl3)) | 0;
        mid = (mid + Math.imul(al8, bh3)) | 0;
        mid = (mid + Math.imul(ah8, bl3)) | 0;
        hi = (hi + Math.imul(ah8, bh3)) | 0;
        lo = (lo + Math.imul(al7, bl4)) | 0;
        mid = (mid + Math.imul(al7, bh4)) | 0;
        mid = (mid + Math.imul(ah7, bl4)) | 0;
        hi = (hi + Math.imul(ah7, bh4)) | 0;
        lo = (lo + Math.imul(al6, bl5)) | 0;
        mid = (mid + Math.imul(al6, bh5)) | 0;
        mid = (mid + Math.imul(ah6, bl5)) | 0;
        hi = (hi + Math.imul(ah6, bh5)) | 0;
        lo = (lo + Math.imul(al5, bl6)) | 0;
        mid = (mid + Math.imul(al5, bh6)) | 0;
        mid = (mid + Math.imul(ah5, bl6)) | 0;
        hi = (hi + Math.imul(ah5, bh6)) | 0;
        lo = (lo + Math.imul(al4, bl7)) | 0;
        mid = (mid + Math.imul(al4, bh7)) | 0;
        mid = (mid + Math.imul(ah4, bl7)) | 0;
        hi = (hi + Math.imul(ah4, bh7)) | 0;
        lo = (lo + Math.imul(al3, bl8)) | 0;
        mid = (mid + Math.imul(al3, bh8)) | 0;
        mid = (mid + Math.imul(ah3, bl8)) | 0;
        hi = (hi + Math.imul(ah3, bh8)) | 0;
        lo = (lo + Math.imul(al2, bl9)) | 0;
        mid = (mid + Math.imul(al2, bh9)) | 0;
        mid = (mid + Math.imul(ah2, bl9)) | 0;
        hi = (hi + Math.imul(ah2, bh9)) | 0;
        var w11 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w11 >>> 26)) | 0;
        w11 &= 0x3ffffff;
        /* k = 12 */
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = (mid + Math.imul(ah9, bl3)) | 0;
        hi = Math.imul(ah9, bh3);
        lo = (lo + Math.imul(al8, bl4)) | 0;
        mid = (mid + Math.imul(al8, bh4)) | 0;
        mid = (mid + Math.imul(ah8, bl4)) | 0;
        hi = (hi + Math.imul(ah8, bh4)) | 0;
        lo = (lo + Math.imul(al7, bl5)) | 0;
        mid = (mid + Math.imul(al7, bh5)) | 0;
        mid = (mid + Math.imul(ah7, bl5)) | 0;
        hi = (hi + Math.imul(ah7, bh5)) | 0;
        lo = (lo + Math.imul(al6, bl6)) | 0;
        mid = (mid + Math.imul(al6, bh6)) | 0;
        mid = (mid + Math.imul(ah6, bl6)) | 0;
        hi = (hi + Math.imul(ah6, bh6)) | 0;
        lo = (lo + Math.imul(al5, bl7)) | 0;
        mid = (mid + Math.imul(al5, bh7)) | 0;
        mid = (mid + Math.imul(ah5, bl7)) | 0;
        hi = (hi + Math.imul(ah5, bh7)) | 0;
        lo = (lo + Math.imul(al4, bl8)) | 0;
        mid = (mid + Math.imul(al4, bh8)) | 0;
        mid = (mid + Math.imul(ah4, bl8)) | 0;
        hi = (hi + Math.imul(ah4, bh8)) | 0;
        lo = (lo + Math.imul(al3, bl9)) | 0;
        mid = (mid + Math.imul(al3, bh9)) | 0;
        mid = (mid + Math.imul(ah3, bl9)) | 0;
        hi = (hi + Math.imul(ah3, bh9)) | 0;
        var w12 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w12 >>> 26)) | 0;
        w12 &= 0x3ffffff;
        /* k = 13 */
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = (mid + Math.imul(ah9, bl4)) | 0;
        hi = Math.imul(ah9, bh4);
        lo = (lo + Math.imul(al8, bl5)) | 0;
        mid = (mid + Math.imul(al8, bh5)) | 0;
        mid = (mid + Math.imul(ah8, bl5)) | 0;
        hi = (hi + Math.imul(ah8, bh5)) | 0;
        lo = (lo + Math.imul(al7, bl6)) | 0;
        mid = (mid + Math.imul(al7, bh6)) | 0;
        mid = (mid + Math.imul(ah7, bl6)) | 0;
        hi = (hi + Math.imul(ah7, bh6)) | 0;
        lo = (lo + Math.imul(al6, bl7)) | 0;
        mid = (mid + Math.imul(al6, bh7)) | 0;
        mid = (mid + Math.imul(ah6, bl7)) | 0;
        hi = (hi + Math.imul(ah6, bh7)) | 0;
        lo = (lo + Math.imul(al5, bl8)) | 0;
        mid = (mid + Math.imul(al5, bh8)) | 0;
        mid = (mid + Math.imul(ah5, bl8)) | 0;
        hi = (hi + Math.imul(ah5, bh8)) | 0;
        lo = (lo + Math.imul(al4, bl9)) | 0;
        mid = (mid + Math.imul(al4, bh9)) | 0;
        mid = (mid + Math.imul(ah4, bl9)) | 0;
        hi = (hi + Math.imul(ah4, bh9)) | 0;
        var w13 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w13 >>> 26)) | 0;
        w13 &= 0x3ffffff;
        /* k = 14 */
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = (mid + Math.imul(ah9, bl5)) | 0;
        hi = Math.imul(ah9, bh5);
        lo = (lo + Math.imul(al8, bl6)) | 0;
        mid = (mid + Math.imul(al8, bh6)) | 0;
        mid = (mid + Math.imul(ah8, bl6)) | 0;
        hi = (hi + Math.imul(ah8, bh6)) | 0;
        lo = (lo + Math.imul(al7, bl7)) | 0;
        mid = (mid + Math.imul(al7, bh7)) | 0;
        mid = (mid + Math.imul(ah7, bl7)) | 0;
        hi = (hi + Math.imul(ah7, bh7)) | 0;
        lo = (lo + Math.imul(al6, bl8)) | 0;
        mid = (mid + Math.imul(al6, bh8)) | 0;
        mid = (mid + Math.imul(ah6, bl8)) | 0;
        hi = (hi + Math.imul(ah6, bh8)) | 0;
        lo = (lo + Math.imul(al5, bl9)) | 0;
        mid = (mid + Math.imul(al5, bh9)) | 0;
        mid = (mid + Math.imul(ah5, bl9)) | 0;
        hi = (hi + Math.imul(ah5, bh9)) | 0;
        var w14 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w14 >>> 26)) | 0;
        w14 &= 0x3ffffff;
        /* k = 15 */
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = (mid + Math.imul(ah9, bl6)) | 0;
        hi = Math.imul(ah9, bh6);
        lo = (lo + Math.imul(al8, bl7)) | 0;
        mid = (mid + Math.imul(al8, bh7)) | 0;
        mid = (mid + Math.imul(ah8, bl7)) | 0;
        hi = (hi + Math.imul(ah8, bh7)) | 0;
        lo = (lo + Math.imul(al7, bl8)) | 0;
        mid = (mid + Math.imul(al7, bh8)) | 0;
        mid = (mid + Math.imul(ah7, bl8)) | 0;
        hi = (hi + Math.imul(ah7, bh8)) | 0;
        lo = (lo + Math.imul(al6, bl9)) | 0;
        mid = (mid + Math.imul(al6, bh9)) | 0;
        mid = (mid + Math.imul(ah6, bl9)) | 0;
        hi = (hi + Math.imul(ah6, bh9)) | 0;
        var w15 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w15 >>> 26)) | 0;
        w15 &= 0x3ffffff;
        /* k = 16 */
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = (mid + Math.imul(ah9, bl7)) | 0;
        hi = Math.imul(ah9, bh7);
        lo = (lo + Math.imul(al8, bl8)) | 0;
        mid = (mid + Math.imul(al8, bh8)) | 0;
        mid = (mid + Math.imul(ah8, bl8)) | 0;
        hi = (hi + Math.imul(ah8, bh8)) | 0;
        lo = (lo + Math.imul(al7, bl9)) | 0;
        mid = (mid + Math.imul(al7, bh9)) | 0;
        mid = (mid + Math.imul(ah7, bl9)) | 0;
        hi = (hi + Math.imul(ah7, bh9)) | 0;
        var w16 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w16 >>> 26)) | 0;
        w16 &= 0x3ffffff;
        /* k = 17 */
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = (mid + Math.imul(ah9, bl8)) | 0;
        hi = Math.imul(ah9, bh8);
        lo = (lo + Math.imul(al8, bl9)) | 0;
        mid = (mid + Math.imul(al8, bh9)) | 0;
        mid = (mid + Math.imul(ah8, bl9)) | 0;
        hi = (hi + Math.imul(ah8, bh9)) | 0;
        var w17 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w17 >>> 26)) | 0;
        w17 &= 0x3ffffff;
        /* k = 18 */
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = (mid + Math.imul(ah9, bl9)) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (((c + lo) | 0) + ((mid & 0x1fff) << 13)) | 0;
        c = (((hi + (mid >>> 13)) | 0) + (w18 >>> 26)) | 0;
        w18 &= 0x3ffffff;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
          o[19] = c;
          out.length++;
        }
        return out;
      };

      // Polyfill comb
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }

      function bigMulTo (self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;

        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          // Sum all words with the same `i + j = k` and accumulate `ncarry`,
          // note that ncarry could be >= 0x3ffffff
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 0x3ffffff;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self.length + 1); j <= maxJ; j++) {
            var i = k - j;
            var a = self.words[i] | 0;
            var b = num.words[j] | 0;
            var r = a * b;

            var lo = r & 0x3ffffff;
            ncarry = (ncarry + ((r / 0x4000000) | 0)) | 0;
            lo = (lo + rword) | 0;
            rword = lo & 0x3ffffff;
            ncarry = (ncarry + (lo >>> 26)) | 0;

            hncarry += ncarry >>> 26;
            ncarry &= 0x3ffffff;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }

        return out._strip();
      }

      function jumboMulTo (self, num, out) {
        // Temporary disable, see https://github.com/indutny/bn.js/issues/211
        // var fftm = new FFTM();
        // return fftm.mulp(self, num, out);
        return bigMulTo(self, num, out);
      }

      BN.prototype.mulTo = function mulTo (num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }

        return res;
      };

      // Multiply `this` by `num`
      BN.prototype.mul = function mul (num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };

      // Multiply employing FFT
      BN.prototype.mulf = function mulf (num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };

      // In-place Multiplication
      BN.prototype.imul = function imul (num) {
        return this.clone().mulTo(num, this);
      };

      BN.prototype.imuln = function imuln (num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;

        assert(typeof num === 'number');
        assert(num < 0x4000000);

        // Carry
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = (this.words[i] | 0) * num;
          var lo = (w & 0x3ffffff) + (carry & 0x3ffffff);
          carry >>= 26;
          carry += (w / 0x4000000) | 0;
          // NOTE: lo is 27bit maximum
          carry += lo >>> 26;
          this.words[i] = lo & 0x3ffffff;
        }

        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }

        return isNegNum ? this.ineg() : this;
      };

      BN.prototype.muln = function muln (num) {
        return this.clone().imuln(num);
      };

      // `this` * `this`
      BN.prototype.sqr = function sqr () {
        return this.mul(this);
      };

      // `this` * `this` in-place
      BN.prototype.isqr = function isqr () {
        return this.imul(this.clone());
      };

      // Math.pow(`this`, `num`)
      BN.prototype.pow = function pow (num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);

        // Skip leading zeroes
        var res = this;
        for (var i = 0; i < w.length; i++, res = res.sqr()) {
          if (w[i] !== 0) break;
        }

        if (++i < w.length) {
          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
            if (w[i] === 0) continue;

            res = res.mul(q);
          }
        }

        return res;
      };

      // Shift-left in-place
      BN.prototype.iushln = function iushln (bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = (0x3ffffff >>> (26 - r)) << (26 - r);
        var i;

        if (r !== 0) {
          var carry = 0;

          for (i = 0; i < this.length; i++) {
            var newCarry = this.words[i] & carryMask;
            var c = ((this.words[i] | 0) - newCarry) << r;
            this.words[i] = c | carry;
            carry = newCarry >>> (26 - r);
          }

          if (carry) {
            this.words[i] = carry;
            this.length++;
          }
        }

        if (s !== 0) {
          for (i = this.length - 1; i >= 0; i--) {
            this.words[i + s] = this.words[i];
          }

          for (i = 0; i < s; i++) {
            this.words[i] = 0;
          }

          this.length += s;
        }

        return this._strip();
      };

      BN.prototype.ishln = function ishln (bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
      };

      // Shift-right in-place
      // NOTE: `hint` is a lowest bit before trailing zeroes
      // NOTE: if `extended` is present - it will be filled with destroyed bits
      BN.prototype.iushrn = function iushrn (bits, hint, extended) {
        assert(typeof bits === 'number' && bits >= 0);
        var h;
        if (hint) {
          h = (hint - (hint % 26)) / 26;
        } else {
          h = 0;
        }

        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
        var maskedWords = extended;

        h -= s;
        h = Math.max(0, h);

        // Extended mode, copy masked part
        if (maskedWords) {
          for (var i = 0; i < s; i++) {
            maskedWords.words[i] = this.words[i];
          }
          maskedWords.length = s;
        }

        if (s === 0) ; else if (this.length > s) {
          this.length -= s;
          for (i = 0; i < this.length; i++) {
            this.words[i] = this.words[i + s];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }

        var carry = 0;
        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
          var word = this.words[i] | 0;
          this.words[i] = (carry << (26 - r)) | (word >>> r);
          carry = word & mask;
        }

        // Push carried bits as a mask
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }

        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }

        return this._strip();
      };

      BN.prototype.ishrn = function ishrn (bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };

      // Shift-left
      BN.prototype.shln = function shln (bits) {
        return this.clone().ishln(bits);
      };

      BN.prototype.ushln = function ushln (bits) {
        return this.clone().iushln(bits);
      };

      // Shift-right
      BN.prototype.shrn = function shrn (bits) {
        return this.clone().ishrn(bits);
      };

      BN.prototype.ushrn = function ushrn (bits) {
        return this.clone().iushrn(bits);
      };

      // Test if n bit is set
      BN.prototype.testn = function testn (bit) {
        assert(typeof bit === 'number' && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;

        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;

        // Check bit and return
        var w = this.words[s];

        return !!(w & q);
      };

      // Return only lowers bits of number (in-place)
      BN.prototype.imaskn = function imaskn (bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;

        assert(this.negative === 0, 'imaskn works only with positive numbers');

        if (this.length <= s) {
          return this;
        }

        if (r !== 0) {
          s++;
        }
        this.length = Math.min(s, this.length);

        if (r !== 0) {
          var mask = 0x3ffffff ^ ((0x3ffffff >>> r) << r);
          this.words[this.length - 1] &= mask;
        }

        return this._strip();
      };

      // Return only lowers bits of number
      BN.prototype.maskn = function maskn (bits) {
        return this.clone().imaskn(bits);
      };

      // Add plain number `num` to `this`
      BN.prototype.iaddn = function iaddn (num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.isubn(-num);

        // Possible sign change
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) <= num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }

          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }

        // Add without checks
        return this._iaddn(num);
      };

      BN.prototype._iaddn = function _iaddn (num) {
        this.words[0] += num;

        // Carry
        for (var i = 0; i < this.length && this.words[i] >= 0x4000000; i++) {
          this.words[i] -= 0x4000000;
          if (i === this.length - 1) {
            this.words[i + 1] = 1;
          } else {
            this.words[i + 1]++;
          }
        }
        this.length = Math.max(this.length, i + 1);

        return this;
      };

      // Subtract plain number `num` from `this`
      BN.prototype.isubn = function isubn (num) {
        assert(typeof num === 'number');
        assert(num < 0x4000000);
        if (num < 0) return this.iaddn(-num);

        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }

        this.words[0] -= num;

        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          // Carry
          for (var i = 0; i < this.length && this.words[i] < 0; i++) {
            this.words[i] += 0x4000000;
            this.words[i + 1] -= 1;
          }
        }

        return this._strip();
      };

      BN.prototype.addn = function addn (num) {
        return this.clone().iaddn(num);
      };

      BN.prototype.subn = function subn (num) {
        return this.clone().isubn(num);
      };

      BN.prototype.iabs = function iabs () {
        this.negative = 0;

        return this;
      };

      BN.prototype.abs = function abs () {
        return this.clone().iabs();
      };

      BN.prototype._ishlnsubmul = function _ishlnsubmul (num, mul, shift) {
        var len = num.length + shift;
        var i;

        this._expand(len);

        var w;
        var carry = 0;
        for (i = 0; i < num.length; i++) {
          w = (this.words[i + shift] | 0) + carry;
          var right = (num.words[i] | 0) * mul;
          w -= right & 0x3ffffff;
          carry = (w >> 26) - ((right / 0x4000000) | 0);
          this.words[i + shift] = w & 0x3ffffff;
        }
        for (; i < this.length - shift; i++) {
          w = (this.words[i + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i + shift] = w & 0x3ffffff;
        }

        if (carry === 0) return this._strip();

        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for (i = 0; i < this.length; i++) {
          w = -(this.words[i] | 0) + carry;
          carry = w >> 26;
          this.words[i] = w & 0x3ffffff;
        }
        this.negative = 1;

        return this._strip();
      };

      BN.prototype._wordDiv = function _wordDiv (num, mode) {
        var shift = this.length - num.length;

        var a = this.clone();
        var b = num;

        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b = b.ushln(shift);
          a.iushln(shift);
          bhi = b.words[b.length - 1] | 0;
        }

        // Initialize quotient
        var m = a.length - b.length;
        var q;

        if (mode !== 'mod') {
          q = new BN(null);
          q.length = m + 1;
          q.words = new Array(q.length);
          for (var i = 0; i < q.length; i++) {
            q.words[i] = 0;
          }
        }

        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
          a = diff;
          if (q) {
            q.words[m] = 1;
          }
        }

        for (var j = m - 1; j >= 0; j--) {
          var qj = (a.words[b.length + j] | 0) * 0x4000000 +
            (a.words[b.length + j - 1] | 0);

          // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
          // (0x7ffffff)
          qj = Math.min((qj / bhi) | 0, 0x3ffffff);

          a._ishlnsubmul(b, qj, j);
          while (a.negative !== 0) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b, 1, j);
            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }
          if (q) {
            q.words[j] = qj;
          }
        }
        if (q) {
          q._strip();
        }
        a._strip();

        // Denormalize
        if (mode !== 'div' && shift !== 0) {
          a.iushrn(shift);
        }

        return {
          div: q || null,
          mod: a
        };
      };

      // NOTE: 1) `mode` can be set to `mod` to request mod only,
      //       to `div` to request div only, or be absent to
      //       request both div & mod
      //       2) `positive` is true if unsigned mod is requested
      BN.prototype.divmod = function divmod (num, mode, positive) {
        assert(!num.isZero());

        if (this.isZero()) {
          return {
            div: new BN(0),
            mod: new BN(0)
          };
        }

        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);

          if (mode !== 'mod') {
            div = res.div.neg();
          }

          if (mode !== 'div') {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.iadd(num);
            }
          }

          return {
            div: div,
            mod: mod
          };
        }

        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);

          if (mode !== 'mod') {
            div = res.div.neg();
          }

          return {
            div: div,
            mod: res.mod
          };
        }

        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);

          if (mode !== 'div') {
            mod = res.mod.neg();
            if (positive && mod.negative !== 0) {
              mod.isub(num);
            }
          }

          return {
            div: res.div,
            mod: mod
          };
        }

        // Both numbers are positive at this point

        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN(0),
            mod: this
          };
        }

        // Very short reduction
        if (num.length === 1) {
          if (mode === 'div') {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }

          if (mode === 'mod') {
            return {
              div: null,
              mod: new BN(this.modrn(num.words[0]))
            };
          }

          return {
            div: this.divn(num.words[0]),
            mod: new BN(this.modrn(num.words[0]))
          };
        }

        return this._wordDiv(num, mode);
      };

      // Find `this` / `num`
      BN.prototype.div = function div (num) {
        return this.divmod(num, 'div', false).div;
      };

      // Find `this` % `num`
      BN.prototype.mod = function mod (num) {
        return this.divmod(num, 'mod', false).mod;
      };

      BN.prototype.umod = function umod (num) {
        return this.divmod(num, 'mod', true).mod;
      };

      // Find Round(`this` / `num`)
      BN.prototype.divRound = function divRound (num) {
        var dm = this.divmod(num);

        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;

        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;

        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);

        // Round down
        if (cmp < 0 || (r2 === 1 && cmp === 0)) return dm.div;

        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };

      BN.prototype.modrn = function modrn (num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;

        assert(num <= 0x3ffffff);
        var p = (1 << 26) % num;

        var acc = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          acc = (p * acc + (this.words[i] | 0)) % num;
        }

        return isNegNum ? -acc : acc;
      };

      // WARNING: DEPRECATED
      BN.prototype.modn = function modn (num) {
        return this.modrn(num);
      };

      // In-place division by number
      BN.prototype.idivn = function idivn (num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;

        assert(num <= 0x3ffffff);

        var carry = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var w = (this.words[i] | 0) + carry * 0x4000000;
          this.words[i] = (w / num) | 0;
          carry = w % num;
        }

        this._strip();
        return isNegNum ? this.ineg() : this;
      };

      BN.prototype.divn = function divn (num) {
        return this.clone().idivn(num);
      };

      BN.prototype.egcd = function egcd (p) {
        assert(p.negative === 0);
        assert(!p.isZero());

        var x = this;
        var y = p.clone();

        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        }

        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);

        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);

        var g = 0;

        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }

        var yp = y.clone();
        var xp = x.clone();

        while (!x.isZero()) {
          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
          if (i > 0) {
            x.iushrn(i);
            while (i-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }

              A.iushrn(1);
              B.iushrn(1);
            }
          }

          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
          if (j > 0) {
            y.iushrn(j);
            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }

              C.iushrn(1);
              D.iushrn(1);
            }
          }

          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }

        return {
          a: C,
          b: D,
          gcd: y.iushln(g)
        };
      };

      // This is reduced incarnation of the binary EEA
      // above, designated to invert members of the
      // _prime_ fields F(p) at a maximal speed
      BN.prototype._invmp = function _invmp (p) {
        assert(p.negative === 0);
        assert(!p.isZero());

        var a = this;
        var b = p.clone();

        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }

        var x1 = new BN(1);
        var x2 = new BN(0);

        var delta = b.clone();

        while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
          if (i > 0) {
            a.iushrn(i);
            while (i-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }

              x1.iushrn(1);
            }
          }

          for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
          if (j > 0) {
            b.iushrn(j);
            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }

              x2.iushrn(1);
            }
          }

          if (a.cmp(b) >= 0) {
            a.isub(b);
            x1.isub(x2);
          } else {
            b.isub(a);
            x2.isub(x1);
          }
        }

        var res;
        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }

        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }

        return res;
      };

      BN.prototype.gcd = function gcd (num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();

        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;

        // Remove common factor of two
        for (var shift = 0; a.isEven() && b.isEven(); shift++) {
          a.iushrn(1);
          b.iushrn(1);
        }

        do {
          while (a.isEven()) {
            a.iushrn(1);
          }
          while (b.isEven()) {
            b.iushrn(1);
          }

          var r = a.cmp(b);
          if (r < 0) {
            // Swap `a` and `b` to make `a` always bigger than `b`
            var t = a;
            a = b;
            b = t;
          } else if (r === 0 || b.cmpn(1) === 0) {
            break;
          }

          a.isub(b);
        } while (true);

        return b.iushln(shift);
      };

      // Invert number in the field F(num)
      BN.prototype.invm = function invm (num) {
        return this.egcd(num).a.umod(num);
      };

      BN.prototype.isEven = function isEven () {
        return (this.words[0] & 1) === 0;
      };

      BN.prototype.isOdd = function isOdd () {
        return (this.words[0] & 1) === 1;
      };

      // And first word and num
      BN.prototype.andln = function andln (num) {
        return this.words[0] & num;
      };

      // Increment at the bit position in-line
      BN.prototype.bincn = function bincn (bit) {
        assert(typeof bit === 'number');
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;

        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
          this._expand(s + 1);
          this.words[s] |= q;
          return this;
        }

        // Add bit and propagate, if needed
        var carry = q;
        for (var i = s; carry !== 0 && i < this.length; i++) {
          var w = this.words[i] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 0x3ffffff;
          this.words[i] = w;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };

      BN.prototype.isZero = function isZero () {
        return this.length === 1 && this.words[0] === 0;
      };

      BN.prototype.cmpn = function cmpn (num) {
        var negative = num < 0;

        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;

        this._strip();

        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }

          assert(num <= 0x3ffffff, 'Number is too big');

          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
      };

      // Compare two numbers and return:
      // 1 - if `this` > `num`
      // 0 - if `this` == `num`
      // -1 - if `this` < `num`
      BN.prototype.cmp = function cmp (num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;

        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
      };

      // Unsigned comparison
      BN.prototype.ucmp = function ucmp (num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;

        var res = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var a = this.words[i] | 0;
          var b = num.words[i] | 0;

          if (a === b) continue;
          if (a < b) {
            res = -1;
          } else if (a > b) {
            res = 1;
          }
          break;
        }
        return res;
      };

      BN.prototype.gtn = function gtn (num) {
        return this.cmpn(num) === 1;
      };

      BN.prototype.gt = function gt (num) {
        return this.cmp(num) === 1;
      };

      BN.prototype.gten = function gten (num) {
        return this.cmpn(num) >= 0;
      };

      BN.prototype.gte = function gte (num) {
        return this.cmp(num) >= 0;
      };

      BN.prototype.ltn = function ltn (num) {
        return this.cmpn(num) === -1;
      };

      BN.prototype.lt = function lt (num) {
        return this.cmp(num) === -1;
      };

      BN.prototype.lten = function lten (num) {
        return this.cmpn(num) <= 0;
      };

      BN.prototype.lte = function lte (num) {
        return this.cmp(num) <= 0;
      };

      BN.prototype.eqn = function eqn (num) {
        return this.cmpn(num) === 0;
      };

      BN.prototype.eq = function eq (num) {
        return this.cmp(num) === 0;
      };

      //
      // A reduce context, could be using montgomery or something better, depending
      // on the `m` itself.
      //
      BN.red = function red (num) {
        return new Red(num);
      };

      BN.prototype.toRed = function toRed (ctx) {
        assert(!this.red, 'Already a number in reduction context');
        assert(this.negative === 0, 'red works only with positives');
        return ctx.convertTo(this)._forceRed(ctx);
      };

      BN.prototype.fromRed = function fromRed () {
        assert(this.red, 'fromRed works only with numbers in reduction context');
        return this.red.convertFrom(this);
      };

      BN.prototype._forceRed = function _forceRed (ctx) {
        this.red = ctx;
        return this;
      };

      BN.prototype.forceRed = function forceRed (ctx) {
        assert(!this.red, 'Already a number in reduction context');
        return this._forceRed(ctx);
      };

      BN.prototype.redAdd = function redAdd (num) {
        assert(this.red, 'redAdd works only with red numbers');
        return this.red.add(this, num);
      };

      BN.prototype.redIAdd = function redIAdd (num) {
        assert(this.red, 'redIAdd works only with red numbers');
        return this.red.iadd(this, num);
      };

      BN.prototype.redSub = function redSub (num) {
        assert(this.red, 'redSub works only with red numbers');
        return this.red.sub(this, num);
      };

      BN.prototype.redISub = function redISub (num) {
        assert(this.red, 'redISub works only with red numbers');
        return this.red.isub(this, num);
      };

      BN.prototype.redShl = function redShl (num) {
        assert(this.red, 'redShl works only with red numbers');
        return this.red.shl(this, num);
      };

      BN.prototype.redMul = function redMul (num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };

      BN.prototype.redIMul = function redIMul (num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };

      BN.prototype.redSqr = function redSqr () {
        assert(this.red, 'redSqr works only with red numbers');
        this.red._verify1(this);
        return this.red.sqr(this);
      };

      BN.prototype.redISqr = function redISqr () {
        assert(this.red, 'redISqr works only with red numbers');
        this.red._verify1(this);
        return this.red.isqr(this);
      };

      // Square root over p
      BN.prototype.redSqrt = function redSqrt () {
        assert(this.red, 'redSqrt works only with red numbers');
        this.red._verify1(this);
        return this.red.sqrt(this);
      };

      BN.prototype.redInvm = function redInvm () {
        assert(this.red, 'redInvm works only with red numbers');
        this.red._verify1(this);
        return this.red.invm(this);
      };

      // Return negative clone of `this` % `red modulo`
      BN.prototype.redNeg = function redNeg () {
        assert(this.red, 'redNeg works only with red numbers');
        this.red._verify1(this);
        return this.red.neg(this);
      };

      BN.prototype.redPow = function redPow (num) {
        assert(this.red && !num.red, 'redPow(normalNum)');
        this.red._verify1(this);
        return this.red.pow(this, num);
      };

      // Prime numbers with efficient reduction
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };

      // Pseudo-Mersenne prime
      function MPrime (name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);

        this.tmp = this._tmp();
      }

      MPrime.prototype._tmp = function _tmp () {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };

      MPrime.prototype.ireduce = function ireduce (num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;

        do {
          this.split(r, this.tmp);
          r = this.imulK(r);
          r = r.iadd(this.tmp);
          rlen = r.bitLength();
        } while (rlen > this.n);

        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
          r.words[0] = 0;
          r.length = 1;
        } else if (cmp > 0) {
          r.isub(this.p);
        } else {
          if (r.strip !== undefined) {
            // r is a BN v4 instance
            r.strip();
          } else {
            // r is a BN v5 instance
            r._strip();
          }
        }

        return r;
      };

      MPrime.prototype.split = function split (input, out) {
        input.iushrn(this.n, 0, out);
      };

      MPrime.prototype.imulK = function imulK (num) {
        return num.imul(this.k);
      };

      function K256 () {
        MPrime.call(
          this,
          'k256',
          'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
      }
      inherits(K256, MPrime);

      K256.prototype.split = function split (input, output) {
        // 256 = 9 * 26 + 22
        var mask = 0x3fffff;

        var outLen = Math.min(input.length, 9);
        for (var i = 0; i < outLen; i++) {
          output.words[i] = input.words[i];
        }
        output.length = outLen;

        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }

        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;

        for (i = 10; i < input.length; i++) {
          var next = input.words[i] | 0;
          input.words[i - 10] = ((next & mask) << 4) | (prev >>> 22);
          prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };

      K256.prototype.imulK = function imulK (num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;

        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for (var i = 0; i < num.length; i++) {
          var w = num.words[i] | 0;
          lo += w * 0x3d1;
          num.words[i] = lo & 0x3ffffff;
          lo = w * 0x40 + ((lo / 0x4000000) | 0);
        }

        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };

      function P224 () {
        MPrime.call(
          this,
          'p224',
          'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
      }
      inherits(P224, MPrime);

      function P192 () {
        MPrime.call(
          this,
          'p192',
          'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
      }
      inherits(P192, MPrime);

      function P25519 () {
        // 2 ^ 255 - 19
        MPrime.call(
          this,
          '25519',
          '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
      }
      inherits(P25519, MPrime);

      P25519.prototype.imulK = function imulK (num) {
        // K = 0x13
        var carry = 0;
        for (var i = 0; i < num.length; i++) {
          var hi = (num.words[i] | 0) * 0x13 + carry;
          var lo = hi & 0x3ffffff;
          hi >>>= 26;

          num.words[i] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };

      // Exported mostly for testing purposes, use plain name instead
      BN._prime = function prime (name) {
        // Cached version of prime
        if (primes[name]) return primes[name];

        var prime;
        if (name === 'k256') {
          prime = new K256();
        } else if (name === 'p224') {
          prime = new P224();
        } else if (name === 'p192') {
          prime = new P192();
        } else if (name === 'p25519') {
          prime = new P25519();
        } else {
          throw new Error('Unknown prime ' + name);
        }
        primes[name] = prime;

        return prime;
      };

      //
      // Base reduction engine
      //
      function Red (m) {
        if (typeof m === 'string') {
          var prime = BN._prime(m);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert(m.gtn(1), 'modulus must be greater than 1');
          this.m = m;
          this.prime = null;
        }
      }

      Red.prototype._verify1 = function _verify1 (a) {
        assert(a.negative === 0, 'red works only with positives');
        assert(a.red, 'red works only with red numbers');
      };

      Red.prototype._verify2 = function _verify2 (a, b) {
        assert((a.negative | b.negative) === 0, 'red works only with positives');
        assert(a.red && a.red === b.red,
          'red works only with red numbers');
      };

      Red.prototype.imod = function imod (a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);

        move(a, a.umod(this.m)._forceRed(this));
        return a;
      };

      Red.prototype.neg = function neg (a) {
        if (a.isZero()) {
          return a.clone();
        }

        return this.m.sub(a)._forceRed(this);
      };

      Red.prototype.add = function add (a, b) {
        this._verify2(a, b);

        var res = a.add(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };

      Red.prototype.iadd = function iadd (a, b) {
        this._verify2(a, b);

        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };

      Red.prototype.sub = function sub (a, b) {
        this._verify2(a, b);

        var res = a.sub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };

      Red.prototype.isub = function isub (a, b) {
        this._verify2(a, b);

        var res = a.isub(b);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };

      Red.prototype.shl = function shl (a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
      };

      Red.prototype.imul = function imul (a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
      };

      Red.prototype.mul = function mul (a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
      };

      Red.prototype.isqr = function isqr (a) {
        return this.imul(a, a.clone());
      };

      Red.prototype.sqr = function sqr (a) {
        return this.mul(a, a);
      };

      Red.prototype.sqrt = function sqrt (a) {
        if (a.isZero()) return a.clone();

        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);

        // Fast case
        if (mod3 === 3) {
          var pow = this.m.add(new BN(1)).iushrn(2);
          return this.pow(a, pow);
        }

        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while (!q.isZero() && q.andln(1) === 0) {
          s++;
          q.iushrn(1);
        }
        assert(!q.isZero());

        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();

        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);

        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }

        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while (t.cmp(one) !== 0) {
          var tmp = t;
          for (var i = 0; tmp.cmp(one) !== 0; i++) {
            tmp = tmp.redSqr();
          }
          assert(i < m);
          var b = this.pow(c, new BN(1).iushln(m - i - 1));

          r = r.redMul(b);
          c = b.redSqr();
          t = t.redMul(c);
          m = i;
        }

        return r;
      };

      Red.prototype.invm = function invm (a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };

      Red.prototype.pow = function pow (a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();

        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for (var i = 2; i < wnd.length; i++) {
          wnd[i] = this.mul(wnd[i - 1], a);
        }

        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }

        for (i = num.length - 1; i >= 0; i--) {
          var word = num.words[i];
          for (var j = start - 1; j >= 0; j--) {
            var bit = (word >> j) & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }

            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }

            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;

            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }

        return res;
      };

      Red.prototype.convertTo = function convertTo (num) {
        var r = num.umod(this.m);

        return r === num ? r.clone() : r;
      };

      Red.prototype.convertFrom = function convertFrom (num) {
        var res = num.clone();
        res.red = null;
        return res;
      };

      //
      // Montgomery method engine
      //

      BN.mont = function mont (num) {
        return new Mont(num);
      };

      function Mont (m) {
        Red.call(this, m);

        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - (this.shift % 26);
        }

        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);

        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);

      Mont.prototype.convertTo = function convertTo (num) {
        return this.imod(num.ushln(this.shift));
      };

      Mont.prototype.convertFrom = function convertFrom (num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
      };

      Mont.prototype.imul = function imul (a, b) {
        if (a.isZero() || b.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }

        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;

        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }

        return res._forceRed(this);
      };

      Mont.prototype.mul = function mul (a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);

        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }

        return res._forceRed(this);
      };

      Mont.prototype.invm = function invm (a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(module, commonjsGlobal);
    });

    const version$l = "bignumber/5.7.0";

    var BN = bn.BN;
    const logger$t = new Logger(version$l);
    const _constructorGuard$3 = {};
    const MAX_SAFE = 0x1fffffffffffff;
    // Only warn about passing 10 into radix once
    let _warnedToStringRadix = false;
    class BigNumber {
        constructor(constructorGuard, hex) {
            if (constructorGuard !== _constructorGuard$3) {
                logger$t.throwError("cannot call constructor directly; use BigNumber.from", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "new (BigNumber)"
                });
            }
            this._hex = hex;
            this._isBigNumber = true;
            Object.freeze(this);
        }
        fromTwos(value) {
            return toBigNumber(toBN(this).fromTwos(value));
        }
        toTwos(value) {
            return toBigNumber(toBN(this).toTwos(value));
        }
        abs() {
            if (this._hex[0] === "-") {
                return BigNumber.from(this._hex.substring(1));
            }
            return this;
        }
        add(other) {
            return toBigNumber(toBN(this).add(toBN(other)));
        }
        sub(other) {
            return toBigNumber(toBN(this).sub(toBN(other)));
        }
        div(other) {
            const o = BigNumber.from(other);
            if (o.isZero()) {
                throwFault("division-by-zero", "div");
            }
            return toBigNumber(toBN(this).div(toBN(other)));
        }
        mul(other) {
            return toBigNumber(toBN(this).mul(toBN(other)));
        }
        mod(other) {
            const value = toBN(other);
            if (value.isNeg()) {
                throwFault("division-by-zero", "mod");
            }
            return toBigNumber(toBN(this).umod(value));
        }
        pow(other) {
            const value = toBN(other);
            if (value.isNeg()) {
                throwFault("negative-power", "pow");
            }
            return toBigNumber(toBN(this).pow(value));
        }
        and(other) {
            const value = toBN(other);
            if (this.isNegative() || value.isNeg()) {
                throwFault("unbound-bitwise-result", "and");
            }
            return toBigNumber(toBN(this).and(value));
        }
        or(other) {
            const value = toBN(other);
            if (this.isNegative() || value.isNeg()) {
                throwFault("unbound-bitwise-result", "or");
            }
            return toBigNumber(toBN(this).or(value));
        }
        xor(other) {
            const value = toBN(other);
            if (this.isNegative() || value.isNeg()) {
                throwFault("unbound-bitwise-result", "xor");
            }
            return toBigNumber(toBN(this).xor(value));
        }
        mask(value) {
            if (this.isNegative() || value < 0) {
                throwFault("negative-width", "mask");
            }
            return toBigNumber(toBN(this).maskn(value));
        }
        shl(value) {
            if (this.isNegative() || value < 0) {
                throwFault("negative-width", "shl");
            }
            return toBigNumber(toBN(this).shln(value));
        }
        shr(value) {
            if (this.isNegative() || value < 0) {
                throwFault("negative-width", "shr");
            }
            return toBigNumber(toBN(this).shrn(value));
        }
        eq(other) {
            return toBN(this).eq(toBN(other));
        }
        lt(other) {
            return toBN(this).lt(toBN(other));
        }
        lte(other) {
            return toBN(this).lte(toBN(other));
        }
        gt(other) {
            return toBN(this).gt(toBN(other));
        }
        gte(other) {
            return toBN(this).gte(toBN(other));
        }
        isNegative() {
            return (this._hex[0] === "-");
        }
        isZero() {
            return toBN(this).isZero();
        }
        toNumber() {
            try {
                return toBN(this).toNumber();
            }
            catch (error) {
                throwFault("overflow", "toNumber", this.toString());
            }
            return null;
        }
        toBigInt() {
            try {
                return BigInt(this.toString());
            }
            catch (e) { }
            return logger$t.throwError("this platform does not support BigInt", Logger.errors.UNSUPPORTED_OPERATION, {
                value: this.toString()
            });
        }
        toString() {
            // Lots of people expect this, which we do not support, so check (See: #889)
            if (arguments.length > 0) {
                if (arguments[0] === 10) {
                    if (!_warnedToStringRadix) {
                        _warnedToStringRadix = true;
                        logger$t.warn("BigNumber.toString does not accept any parameters; base-10 is assumed");
                    }
                }
                else if (arguments[0] === 16) {
                    logger$t.throwError("BigNumber.toString does not accept any parameters; use bigNumber.toHexString()", Logger.errors.UNEXPECTED_ARGUMENT, {});
                }
                else {
                    logger$t.throwError("BigNumber.toString does not accept parameters", Logger.errors.UNEXPECTED_ARGUMENT, {});
                }
            }
            return toBN(this).toString(10);
        }
        toHexString() {
            return this._hex;
        }
        toJSON(key) {
            return { type: "BigNumber", hex: this.toHexString() };
        }
        static from(value) {
            if (value instanceof BigNumber) {
                return value;
            }
            if (typeof (value) === "string") {
                if (value.match(/^-?0x[0-9a-f]+$/i)) {
                    return new BigNumber(_constructorGuard$3, toHex$2(value));
                }
                if (value.match(/^-?[0-9]+$/)) {
                    return new BigNumber(_constructorGuard$3, toHex$2(new BN(value)));
                }
                return logger$t.throwArgumentError("invalid BigNumber string", "value", value);
            }
            if (typeof (value) === "number") {
                if (value % 1) {
                    throwFault("underflow", "BigNumber.from", value);
                }
                if (value >= MAX_SAFE || value <= -MAX_SAFE) {
                    throwFault("overflow", "BigNumber.from", value);
                }
                return BigNumber.from(String(value));
            }
            const anyValue = value;
            if (typeof (anyValue) === "bigint") {
                return BigNumber.from(anyValue.toString());
            }
            if (isBytes$4(anyValue)) {
                return BigNumber.from(hexlify(anyValue));
            }
            if (anyValue) {
                // Hexable interface (takes priority)
                if (anyValue.toHexString) {
                    const hex = anyValue.toHexString();
                    if (typeof (hex) === "string") {
                        return BigNumber.from(hex);
                    }
                }
                else {
                    // For now, handle legacy JSON-ified values (goes away in v6)
                    let hex = anyValue._hex;
                    // New-form JSON
                    if (hex == null && anyValue.type === "BigNumber") {
                        hex = anyValue.hex;
                    }
                    if (typeof (hex) === "string") {
                        if (isHexString(hex) || (hex[0] === "-" && isHexString(hex.substring(1)))) {
                            return BigNumber.from(hex);
                        }
                    }
                }
            }
            return logger$t.throwArgumentError("invalid BigNumber value", "value", value);
        }
        static isBigNumber(value) {
            return !!(value && value._isBigNumber);
        }
    }
    // Normalize the hex string
    function toHex$2(value) {
        // For BN, call on the hex string
        if (typeof (value) !== "string") {
            return toHex$2(value.toString(16));
        }
        // If negative, prepend the negative sign to the normalized positive value
        if (value[0] === "-") {
            // Strip off the negative sign
            value = value.substring(1);
            // Cannot have multiple negative signs (e.g. "--0x04")
            if (value[0] === "-") {
                logger$t.throwArgumentError("invalid hex", "value", value);
            }
            // Call toHex on the positive component
            value = toHex$2(value);
            // Do not allow "-0x00"
            if (value === "0x00") {
                return value;
            }
            // Negate the value
            return "-" + value;
        }
        // Add a "0x" prefix if missing
        if (value.substring(0, 2) !== "0x") {
            value = "0x" + value;
        }
        // Normalize zero
        if (value === "0x") {
            return "0x00";
        }
        // Make the string even length
        if (value.length % 2) {
            value = "0x0" + value.substring(2);
        }
        // Trim to smallest even-length string
        while (value.length > 4 && value.substring(0, 4) === "0x00") {
            value = "0x" + value.substring(4);
        }
        return value;
    }
    function toBigNumber(value) {
        return BigNumber.from(toHex$2(value));
    }
    function toBN(value) {
        const hex = BigNumber.from(value).toHexString();
        if (hex[0] === "-") {
            return (new BN("-" + hex.substring(3), 16));
        }
        return new BN(hex.substring(2), 16);
    }
    function throwFault(fault, operation, value) {
        const params = { fault: fault, operation: operation };
        if (value != null) {
            params.value = value;
        }
        return logger$t.throwError(fault, Logger.errors.NUMERIC_FAULT, params);
    }
    // value should have no prefix
    function _base36To16(value) {
        return (new BN(value, 36)).toString(16);
    }

    // shim for using process in browser
    // based off https://github.com/defunctzombie/node-process/blob/master/browser.js

    function defaultSetTimout() {
        throw new Error('setTimeout has not been defined');
    }
    function defaultClearTimeout () {
        throw new Error('clearTimeout has not been defined');
    }
    var cachedSetTimeout = defaultSetTimout;
    var cachedClearTimeout = defaultClearTimeout;
    if (typeof global$1.setTimeout === 'function') {
        cachedSetTimeout = setTimeout;
    }
    if (typeof global$1.clearTimeout === 'function') {
        cachedClearTimeout = clearTimeout;
    }

    function runTimeout(fun) {
        if (cachedSetTimeout === setTimeout) {
            //normal enviroments in sane situations
            return setTimeout(fun, 0);
        }
        // if setTimeout wasn't available but was latter defined
        if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
            cachedSetTimeout = setTimeout;
            return setTimeout(fun, 0);
        }
        try {
            // when when somebody has screwed with setTimeout but no I.E. maddness
            return cachedSetTimeout(fun, 0);
        } catch(e){
            try {
                // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
                return cachedSetTimeout.call(null, fun, 0);
            } catch(e){
                // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
                return cachedSetTimeout.call(this, fun, 0);
            }
        }


    }
    function runClearTimeout(marker) {
        if (cachedClearTimeout === clearTimeout) {
            //normal enviroments in sane situations
            return clearTimeout(marker);
        }
        // if clearTimeout wasn't available but was latter defined
        if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
            cachedClearTimeout = clearTimeout;
            return clearTimeout(marker);
        }
        try {
            // when when somebody has screwed with setTimeout but no I.E. maddness
            return cachedClearTimeout(marker);
        } catch (e){
            try {
                // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
                return cachedClearTimeout.call(null, marker);
            } catch (e){
                // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
                // Some versions of I.E. have different rules for clearTimeout vs setTimeout
                return cachedClearTimeout.call(this, marker);
            }
        }



    }
    var queue = [];
    var draining = false;
    var currentQueue;
    var queueIndex = -1;

    function cleanUpNextTick() {
        if (!draining || !currentQueue) {
            return;
        }
        draining = false;
        if (currentQueue.length) {
            queue = currentQueue.concat(queue);
        } else {
            queueIndex = -1;
        }
        if (queue.length) {
            drainQueue();
        }
    }

    function drainQueue() {
        if (draining) {
            return;
        }
        var timeout = runTimeout(cleanUpNextTick);
        draining = true;

        var len = queue.length;
        while(len) {
            currentQueue = queue;
            queue = [];
            while (++queueIndex < len) {
                if (currentQueue) {
                    currentQueue[queueIndex].run();
                }
            }
            queueIndex = -1;
            len = queue.length;
        }
        currentQueue = null;
        draining = false;
        runClearTimeout(timeout);
    }
    function nextTick(fun) {
        var args = new Array(arguments.length - 1);
        if (arguments.length > 1) {
            for (var i = 1; i < arguments.length; i++) {
                args[i - 1] = arguments[i];
            }
        }
        queue.push(new Item(fun, args));
        if (queue.length === 1 && !draining) {
            runTimeout(drainQueue);
        }
    }
    // v8 likes predictible objects
    function Item(fun, array) {
        this.fun = fun;
        this.array = array;
    }
    Item.prototype.run = function () {
        this.fun.apply(null, this.array);
    };
    var title = 'browser';
    var platform = 'browser';
    var browser = true;
    var env = {};
    var argv = [];
    var version$k = ''; // empty string to avoid regexp issues
    var versions = {};
    var release = {};
    var config = {};

    function noop() {}

    var on = noop;
    var addListener = noop;
    var once = noop;
    var off = noop;
    var removeListener = noop;
    var removeAllListeners = noop;
    var emit = noop;

    function binding(name) {
        throw new Error('process.binding is not supported');
    }

    function cwd () { return '/' }
    function chdir (dir) {
        throw new Error('process.chdir is not supported');
    }function umask() { return 0; }

    // from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js
    var performance = global$1.performance || {};
    var performanceNow =
      performance.now        ||
      performance.mozNow     ||
      performance.msNow      ||
      performance.oNow       ||
      performance.webkitNow  ||
      function(){ return (new Date()).getTime() };

    // generate timestamp or delta
    // see http://nodejs.org/api/process.html#process_process_hrtime
    function hrtime(previousTimestamp){
      var clocktime = performanceNow.call(performance)*1e-3;
      var seconds = Math.floor(clocktime);
      var nanoseconds = Math.floor((clocktime%1)*1e9);
      if (previousTimestamp) {
        seconds = seconds - previousTimestamp[0];
        nanoseconds = nanoseconds - previousTimestamp[1];
        if (nanoseconds<0) {
          seconds--;
          nanoseconds += 1e9;
        }
      }
      return [seconds,nanoseconds]
    }

    var startTime = new Date();
    function uptime() {
      var currentTime = new Date();
      var dif = currentTime - startTime;
      return dif / 1000;
    }

    var process = {
      nextTick: nextTick,
      title: title,
      browser: browser,
      env: env,
      argv: argv,
      version: version$k,
      versions: versions,
      on: on,
      addListener: addListener,
      once: once,
      off: off,
      removeListener: removeListener,
      removeAllListeners: removeAllListeners,
      emit: emit,
      binding: binding,
      cwd: cwd,
      chdir: chdir,
      umask: umask,
      hrtime: hrtime,
      platform: platform,
      release: release,
      config: config,
      uptime: uptime
    };

    var sha3 = createCommonjsModule$1(function (module) {
    /*jslint bitwise: true */
    (function () {

      var INPUT_ERROR = 'input is invalid type';
      var FINALIZE_ERROR = 'finalize already called';
      var WINDOW = typeof window === 'object';
      var root = WINDOW ? window : {};
      if (root.JS_SHA3_NO_WINDOW) {
        WINDOW = false;
      }
      var WEB_WORKER = !WINDOW && typeof self === 'object';
      var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;
      if (NODE_JS) {
        root = commonjsGlobal;
      } else if (WEB_WORKER) {
        root = self;
      }
      var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && 'object' === 'object' && module.exports;
      var ARRAY_BUFFER = !root.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';
      var HEX_CHARS = '0123456789abcdef'.split('');
      var SHAKE_PADDING = [31, 7936, 2031616, 520093696];
      var CSHAKE_PADDING = [4, 1024, 262144, 67108864];
      var KECCAK_PADDING = [1, 256, 65536, 16777216];
      var PADDING = [6, 1536, 393216, 100663296];
      var SHIFT = [0, 8, 16, 24];
      var RC = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649,
        0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0,
        2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771,
        2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648,
        2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648];
      var BITS = [224, 256, 384, 512];
      var SHAKE_BITS = [128, 256];
      var OUTPUT_TYPES = ['hex', 'buffer', 'arrayBuffer', 'array', 'digest'];
      var CSHAKE_BYTEPAD = {
        '128': 168,
        '256': 136
      };

      if (root.JS_SHA3_NO_NODE_JS || !Array.isArray) {
        Array.isArray = function (obj) {
          return Object.prototype.toString.call(obj) === '[object Array]';
        };
      }

      if (ARRAY_BUFFER && (root.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {
        ArrayBuffer.isView = function (obj) {
          return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;
        };
      }

      var createOutputMethod = function (bits, padding, outputType) {
        return function (message) {
          return new Keccak(bits, padding, bits).update(message)[outputType]();
        };
      };

      var createShakeOutputMethod = function (bits, padding, outputType) {
        return function (message, outputBits) {
          return new Keccak(bits, padding, outputBits).update(message)[outputType]();
        };
      };

      var createCshakeOutputMethod = function (bits, padding, outputType) {
        return function (message, outputBits, n, s) {
          return methods['cshake' + bits].update(message, outputBits, n, s)[outputType]();
        };
      };

      var createKmacOutputMethod = function (bits, padding, outputType) {
        return function (key, message, outputBits, s) {
          return methods['kmac' + bits].update(key, message, outputBits, s)[outputType]();
        };
      };

      var createOutputMethods = function (method, createMethod, bits, padding) {
        for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
          var type = OUTPUT_TYPES[i];
          method[type] = createMethod(bits, padding, type);
        }
        return method;
      };

      var createMethod = function (bits, padding) {
        var method = createOutputMethod(bits, padding, 'hex');
        method.create = function () {
          return new Keccak(bits, padding, bits);
        };
        method.update = function (message) {
          return method.create().update(message);
        };
        return createOutputMethods(method, createOutputMethod, bits, padding);
      };

      var createShakeMethod = function (bits, padding) {
        var method = createShakeOutputMethod(bits, padding, 'hex');
        method.create = function (outputBits) {
          return new Keccak(bits, padding, outputBits);
        };
        method.update = function (message, outputBits) {
          return method.create(outputBits).update(message);
        };
        return createOutputMethods(method, createShakeOutputMethod, bits, padding);
      };

      var createCshakeMethod = function (bits, padding) {
        var w = CSHAKE_BYTEPAD[bits];
        var method = createCshakeOutputMethod(bits, padding, 'hex');
        method.create = function (outputBits, n, s) {
          if (!n && !s) {
            return methods['shake' + bits].create(outputBits);
          } else {
            return new Keccak(bits, padding, outputBits).bytepad([n, s], w);
          }
        };
        method.update = function (message, outputBits, n, s) {
          return method.create(outputBits, n, s).update(message);
        };
        return createOutputMethods(method, createCshakeOutputMethod, bits, padding);
      };

      var createKmacMethod = function (bits, padding) {
        var w = CSHAKE_BYTEPAD[bits];
        var method = createKmacOutputMethod(bits, padding, 'hex');
        method.create = function (key, outputBits, s) {
          return new Kmac(bits, padding, outputBits).bytepad(['KMAC', s], w).bytepad([key], w);
        };
        method.update = function (key, message, outputBits, s) {
          return method.create(key, outputBits, s).update(message);
        };
        return createOutputMethods(method, createKmacOutputMethod, bits, padding);
      };

      var algorithms = [
        { name: 'keccak', padding: KECCAK_PADDING, bits: BITS, createMethod: createMethod },
        { name: 'sha3', padding: PADDING, bits: BITS, createMethod: createMethod },
        { name: 'shake', padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod },
        { name: 'cshake', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createCshakeMethod },
        { name: 'kmac', padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createKmacMethod }
      ];

      var methods = {}, methodNames = [];

      for (var i = 0; i < algorithms.length; ++i) {
        var algorithm = algorithms[i];
        var bits = algorithm.bits;
        for (var j = 0; j < bits.length; ++j) {
          var methodName = algorithm.name + '_' + bits[j];
          methodNames.push(methodName);
          methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);
          if (algorithm.name !== 'sha3') {
            var newMethodName = algorithm.name + bits[j];
            methodNames.push(newMethodName);
            methods[newMethodName] = methods[methodName];
          }
        }
      }

      function Keccak(bits, padding, outputBits) {
        this.blocks = [];
        this.s = [];
        this.padding = padding;
        this.outputBits = outputBits;
        this.reset = true;
        this.finalized = false;
        this.block = 0;
        this.start = 0;
        this.blockCount = (1600 - (bits << 1)) >> 5;
        this.byteCount = this.blockCount << 2;
        this.outputBlocks = outputBits >> 5;
        this.extraBytes = (outputBits & 31) >> 3;

        for (var i = 0; i < 50; ++i) {
          this.s[i] = 0;
        }
      }

      Keccak.prototype.update = function (message) {
        if (this.finalized) {
          throw new Error(FINALIZE_ERROR);
        }
        var notString, type = typeof message;
        if (type !== 'string') {
          if (type === 'object') {
            if (message === null) {
              throw new Error(INPUT_ERROR);
            } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {
              message = new Uint8Array(message);
            } else if (!Array.isArray(message)) {
              if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {
                throw new Error(INPUT_ERROR);
              }
            }
          } else {
            throw new Error(INPUT_ERROR);
          }
          notString = true;
        }
        var blocks = this.blocks, byteCount = this.byteCount, length = message.length,
          blockCount = this.blockCount, index = 0, s = this.s, i, code;

        while (index < length) {
          if (this.reset) {
            this.reset = false;
            blocks[0] = this.block;
            for (i = 1; i < blockCount + 1; ++i) {
              blocks[i] = 0;
            }
          }
          if (notString) {
            for (i = this.start; index < length && i < byteCount; ++index) {
              blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
            }
          } else {
            for (i = this.start; index < length && i < byteCount; ++index) {
              code = message.charCodeAt(index);
              if (code < 0x80) {
                blocks[i >> 2] |= code << SHIFT[i++ & 3];
              } else if (code < 0x800) {
                blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
              } else if (code < 0xd800 || code >= 0xe000) {
                blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
              } else {
                code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));
                blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
                blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
              }
            }
          }
          this.lastByteIndex = i;
          if (i >= byteCount) {
            this.start = i - byteCount;
            this.block = blocks[blockCount];
            for (i = 0; i < blockCount; ++i) {
              s[i] ^= blocks[i];
            }
            f(s);
            this.reset = true;
          } else {
            this.start = i;
          }
        }
        return this;
      };

      Keccak.prototype.encode = function (x, right) {
        var o = x & 255, n = 1;
        var bytes = [o];
        x = x >> 8;
        o = x & 255;
        while (o > 0) {
          bytes.unshift(o);
          x = x >> 8;
          o = x & 255;
          ++n;
        }
        if (right) {
          bytes.push(n);
        } else {
          bytes.unshift(n);
        }
        this.update(bytes);
        return bytes.length;
      };

      Keccak.prototype.encodeString = function (str) {
        var notString, type = typeof str;
        if (type !== 'string') {
          if (type === 'object') {
            if (str === null) {
              throw new Error(INPUT_ERROR);
            } else if (ARRAY_BUFFER && str.constructor === ArrayBuffer) {
              str = new Uint8Array(str);
            } else if (!Array.isArray(str)) {
              if (!ARRAY_BUFFER || !ArrayBuffer.isView(str)) {
                throw new Error(INPUT_ERROR);
              }
            }
          } else {
            throw new Error(INPUT_ERROR);
          }
          notString = true;
        }
        var bytes = 0, length = str.length;
        if (notString) {
          bytes = length;
        } else {
          for (var i = 0; i < str.length; ++i) {
            var code = str.charCodeAt(i);
            if (code < 0x80) {
              bytes += 1;
            } else if (code < 0x800) {
              bytes += 2;
            } else if (code < 0xd800 || code >= 0xe000) {
              bytes += 3;
            } else {
              code = 0x10000 + (((code & 0x3ff) << 10) | (str.charCodeAt(++i) & 0x3ff));
              bytes += 4;
            }
          }
        }
        bytes += this.encode(bytes * 8);
        this.update(str);
        return bytes;
      };

      Keccak.prototype.bytepad = function (strs, w) {
        var bytes = this.encode(w);
        for (var i = 0; i < strs.length; ++i) {
          bytes += this.encodeString(strs[i]);
        }
        var paddingBytes = w - bytes % w;
        var zeros = [];
        zeros.length = paddingBytes;
        this.update(zeros);
        return this;
      };

      Keccak.prototype.finalize = function () {
        if (this.finalized) {
          return;
        }
        this.finalized = true;
        var blocks = this.blocks, i = this.lastByteIndex, blockCount = this.blockCount, s = this.s;
        blocks[i >> 2] |= this.padding[i & 3];
        if (this.lastByteIndex === this.byteCount) {
          blocks[0] = blocks[blockCount];
          for (i = 1; i < blockCount + 1; ++i) {
            blocks[i] = 0;
          }
        }
        blocks[blockCount - 1] |= 0x80000000;
        for (i = 0; i < blockCount; ++i) {
          s[i] ^= blocks[i];
        }
        f(s);
      };

      Keccak.prototype.toString = Keccak.prototype.hex = function () {
        this.finalize();

        var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
          extraBytes = this.extraBytes, i = 0, j = 0;
        var hex = '', block;
        while (j < outputBlocks) {
          for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
            block = s[i];
            hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F] +
              HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F] +
              HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F] +
              HEX_CHARS[(block >> 28) & 0x0F] + HEX_CHARS[(block >> 24) & 0x0F];
          }
          if (j % blockCount === 0) {
            f(s);
            i = 0;
          }
        }
        if (extraBytes) {
          block = s[i];
          hex += HEX_CHARS[(block >> 4) & 0x0F] + HEX_CHARS[block & 0x0F];
          if (extraBytes > 1) {
            hex += HEX_CHARS[(block >> 12) & 0x0F] + HEX_CHARS[(block >> 8) & 0x0F];
          }
          if (extraBytes > 2) {
            hex += HEX_CHARS[(block >> 20) & 0x0F] + HEX_CHARS[(block >> 16) & 0x0F];
          }
        }
        return hex;
      };

      Keccak.prototype.arrayBuffer = function () {
        this.finalize();

        var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
          extraBytes = this.extraBytes, i = 0, j = 0;
        var bytes = this.outputBits >> 3;
        var buffer;
        if (extraBytes) {
          buffer = new ArrayBuffer((outputBlocks + 1) << 2);
        } else {
          buffer = new ArrayBuffer(bytes);
        }
        var array = new Uint32Array(buffer);
        while (j < outputBlocks) {
          for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
            array[j] = s[i];
          }
          if (j % blockCount === 0) {
            f(s);
          }
        }
        if (extraBytes) {
          array[i] = s[i];
          buffer = buffer.slice(0, bytes);
        }
        return buffer;
      };

      Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;

      Keccak.prototype.digest = Keccak.prototype.array = function () {
        this.finalize();

        var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks,
          extraBytes = this.extraBytes, i = 0, j = 0;
        var array = [], offset, block;
        while (j < outputBlocks) {
          for (i = 0; i < blockCount && j < outputBlocks; ++i, ++j) {
            offset = j << 2;
            block = s[i];
            array[offset] = block & 0xFF;
            array[offset + 1] = (block >> 8) & 0xFF;
            array[offset + 2] = (block >> 16) & 0xFF;
            array[offset + 3] = (block >> 24) & 0xFF;
          }
          if (j % blockCount === 0) {
            f(s);
          }
        }
        if (extraBytes) {
          offset = j << 2;
          block = s[i];
          array[offset] = block & 0xFF;
          if (extraBytes > 1) {
            array[offset + 1] = (block >> 8) & 0xFF;
          }
          if (extraBytes > 2) {
            array[offset + 2] = (block >> 16) & 0xFF;
          }
        }
        return array;
      };

      function Kmac(bits, padding, outputBits) {
        Keccak.call(this, bits, padding, outputBits);
      }

      Kmac.prototype = new Keccak();

      Kmac.prototype.finalize = function () {
        this.encode(this.outputBits, true);
        return Keccak.prototype.finalize.call(this);
      };

      var f = function (s) {
        var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9,
          b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17,
          b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33,
          b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;
        for (n = 0; n < 48; n += 2) {
          c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
          c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
          c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
          c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
          c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
          c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
          c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
          c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
          c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
          c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];

          h = c8 ^ ((c2 << 1) | (c3 >>> 31));
          l = c9 ^ ((c3 << 1) | (c2 >>> 31));
          s[0] ^= h;
          s[1] ^= l;
          s[10] ^= h;
          s[11] ^= l;
          s[20] ^= h;
          s[21] ^= l;
          s[30] ^= h;
          s[31] ^= l;
          s[40] ^= h;
          s[41] ^= l;
          h = c0 ^ ((c4 << 1) | (c5 >>> 31));
          l = c1 ^ ((c5 << 1) | (c4 >>> 31));
          s[2] ^= h;
          s[3] ^= l;
          s[12] ^= h;
          s[13] ^= l;
          s[22] ^= h;
          s[23] ^= l;
          s[32] ^= h;
          s[33] ^= l;
          s[42] ^= h;
          s[43] ^= l;
          h = c2 ^ ((c6 << 1) | (c7 >>> 31));
          l = c3 ^ ((c7 << 1) | (c6 >>> 31));
          s[4] ^= h;
          s[5] ^= l;
          s[14] ^= h;
          s[15] ^= l;
          s[24] ^= h;
          s[25] ^= l;
          s[34] ^= h;
          s[35] ^= l;
          s[44] ^= h;
          s[45] ^= l;
          h = c4 ^ ((c8 << 1) | (c9 >>> 31));
          l = c5 ^ ((c9 << 1) | (c8 >>> 31));
          s[6] ^= h;
          s[7] ^= l;
          s[16] ^= h;
          s[17] ^= l;
          s[26] ^= h;
          s[27] ^= l;
          s[36] ^= h;
          s[37] ^= l;
          s[46] ^= h;
          s[47] ^= l;
          h = c6 ^ ((c0 << 1) | (c1 >>> 31));
          l = c7 ^ ((c1 << 1) | (c0 >>> 31));
          s[8] ^= h;
          s[9] ^= l;
          s[18] ^= h;
          s[19] ^= l;
          s[28] ^= h;
          s[29] ^= l;
          s[38] ^= h;
          s[39] ^= l;
          s[48] ^= h;
          s[49] ^= l;

          b0 = s[0];
          b1 = s[1];
          b32 = (s[11] << 4) | (s[10] >>> 28);
          b33 = (s[10] << 4) | (s[11] >>> 28);
          b14 = (s[20] << 3) | (s[21] >>> 29);
          b15 = (s[21] << 3) | (s[20] >>> 29);
          b46 = (s[31] << 9) | (s[30] >>> 23);
          b47 = (s[30] << 9) | (s[31] >>> 23);
          b28 = (s[40] << 18) | (s[41] >>> 14);
          b29 = (s[41] << 18) | (s[40] >>> 14);
          b20 = (s[2] << 1) | (s[3] >>> 31);
          b21 = (s[3] << 1) | (s[2] >>> 31);
          b2 = (s[13] << 12) | (s[12] >>> 20);
          b3 = (s[12] << 12) | (s[13] >>> 20);
          b34 = (s[22] << 10) | (s[23] >>> 22);
          b35 = (s[23] << 10) | (s[22] >>> 22);
          b16 = (s[33] << 13) | (s[32] >>> 19);
          b17 = (s[32] << 13) | (s[33] >>> 19);
          b48 = (s[42] << 2) | (s[43] >>> 30);
          b49 = (s[43] << 2) | (s[42] >>> 30);
          b40 = (s[5] << 30) | (s[4] >>> 2);
          b41 = (s[4] << 30) | (s[5] >>> 2);
          b22 = (s[14] << 6) | (s[15] >>> 26);
          b23 = (s[15] << 6) | (s[14] >>> 26);
          b4 = (s[25] << 11) | (s[24] >>> 21);
          b5 = (s[24] << 11) | (s[25] >>> 21);
          b36 = (s[34] << 15) | (s[35] >>> 17);
          b37 = (s[35] << 15) | (s[34] >>> 17);
          b18 = (s[45] << 29) | (s[44] >>> 3);
          b19 = (s[44] << 29) | (s[45] >>> 3);
          b10 = (s[6] << 28) | (s[7] >>> 4);
          b11 = (s[7] << 28) | (s[6] >>> 4);
          b42 = (s[17] << 23) | (s[16] >>> 9);
          b43 = (s[16] << 23) | (s[17] >>> 9);
          b24 = (s[26] << 25) | (s[27] >>> 7);
          b25 = (s[27] << 25) | (s[26] >>> 7);
          b6 = (s[36] << 21) | (s[37] >>> 11);
          b7 = (s[37] << 21) | (s[36] >>> 11);
          b38 = (s[47] << 24) | (s[46] >>> 8);
          b39 = (s[46] << 24) | (s[47] >>> 8);
          b30 = (s[8] << 27) | (s[9] >>> 5);
          b31 = (s[9] << 27) | (s[8] >>> 5);
          b12 = (s[18] << 20) | (s[19] >>> 12);
          b13 = (s[19] << 20) | (s[18] >>> 12);
          b44 = (s[29] << 7) | (s[28] >>> 25);
          b45 = (s[28] << 7) | (s[29] >>> 25);
          b26 = (s[38] << 8) | (s[39] >>> 24);
          b27 = (s[39] << 8) | (s[38] >>> 24);
          b8 = (s[48] << 14) | (s[49] >>> 18);
          b9 = (s[49] << 14) | (s[48] >>> 18);

          s[0] = b0 ^ (~b2 & b4);
          s[1] = b1 ^ (~b3 & b5);
          s[10] = b10 ^ (~b12 & b14);
          s[11] = b11 ^ (~b13 & b15);
          s[20] = b20 ^ (~b22 & b24);
          s[21] = b21 ^ (~b23 & b25);
          s[30] = b30 ^ (~b32 & b34);
          s[31] = b31 ^ (~b33 & b35);
          s[40] = b40 ^ (~b42 & b44);
          s[41] = b41 ^ (~b43 & b45);
          s[2] = b2 ^ (~b4 & b6);
          s[3] = b3 ^ (~b5 & b7);
          s[12] = b12 ^ (~b14 & b16);
          s[13] = b13 ^ (~b15 & b17);
          s[22] = b22 ^ (~b24 & b26);
          s[23] = b23 ^ (~b25 & b27);
          s[32] = b32 ^ (~b34 & b36);
          s[33] = b33 ^ (~b35 & b37);
          s[42] = b42 ^ (~b44 & b46);
          s[43] = b43 ^ (~b45 & b47);
          s[4] = b4 ^ (~b6 & b8);
          s[5] = b5 ^ (~b7 & b9);
          s[14] = b14 ^ (~b16 & b18);
          s[15] = b15 ^ (~b17 & b19);
          s[24] = b24 ^ (~b26 & b28);
          s[25] = b25 ^ (~b27 & b29);
          s[34] = b34 ^ (~b36 & b38);
          s[35] = b35 ^ (~b37 & b39);
          s[44] = b44 ^ (~b46 & b48);
          s[45] = b45 ^ (~b47 & b49);
          s[6] = b6 ^ (~b8 & b0);
          s[7] = b7 ^ (~b9 & b1);
          s[16] = b16 ^ (~b18 & b10);
          s[17] = b17 ^ (~b19 & b11);
          s[26] = b26 ^ (~b28 & b20);
          s[27] = b27 ^ (~b29 & b21);
          s[36] = b36 ^ (~b38 & b30);
          s[37] = b37 ^ (~b39 & b31);
          s[46] = b46 ^ (~b48 & b40);
          s[47] = b47 ^ (~b49 & b41);
          s[8] = b8 ^ (~b0 & b2);
          s[9] = b9 ^ (~b1 & b3);
          s[18] = b18 ^ (~b10 & b12);
          s[19] = b19 ^ (~b11 & b13);
          s[28] = b28 ^ (~b20 & b22);
          s[29] = b29 ^ (~b21 & b23);
          s[38] = b38 ^ (~b30 & b32);
          s[39] = b39 ^ (~b31 & b33);
          s[48] = b48 ^ (~b40 & b42);
          s[49] = b49 ^ (~b41 & b43);

          s[0] ^= RC[n];
          s[1] ^= RC[n + 1];
        }
      };

      if (COMMON_JS) {
        module.exports = methods;
      } else {
        for (i = 0; i < methodNames.length; ++i) {
          root[methodNames[i]] = methods[methodNames[i]];
        }
      }
    })();
    });

    var sha3$1 = sha3;

    function keccak256(data) {
        return '0x' + sha3$1.keccak_256(arrayify(data));
    }

    const version$j = "rlp/5.7.0";

    const logger$s = new Logger(version$j);
    function arrayifyInteger(value) {
        const result = [];
        while (value) {
            result.unshift(value & 0xff);
            value >>= 8;
        }
        return result;
    }
    function unarrayifyInteger(data, offset, length) {
        let result = 0;
        for (let i = 0; i < length; i++) {
            result = (result * 256) + data[offset + i];
        }
        return result;
    }
    function _encode(object) {
        if (Array.isArray(object)) {
            let payload = [];
            object.forEach(function (child) {
                payload = payload.concat(_encode(child));
            });
            if (payload.length <= 55) {
                payload.unshift(0xc0 + payload.length);
                return payload;
            }
            const length = arrayifyInteger(payload.length);
            length.unshift(0xf7 + length.length);
            return length.concat(payload);
        }
        if (!isBytesLike(object)) {
            logger$s.throwArgumentError("RLP object must be BytesLike", "object", object);
        }
        const data = Array.prototype.slice.call(arrayify(object));
        if (data.length === 1 && data[0] <= 0x7f) {
            return data;
        }
        else if (data.length <= 55) {
            data.unshift(0x80 + data.length);
            return data;
        }
        const length = arrayifyInteger(data.length);
        length.unshift(0xb7 + length.length);
        return length.concat(data);
    }
    function encode$2(object) {
        return hexlify(_encode(object));
    }
    function _decodeChildren(data, offset, childOffset, length) {
        const result = [];
        while (childOffset < offset + 1 + length) {
            const decoded = _decode(data, childOffset);
            result.push(decoded.result);
            childOffset += decoded.consumed;
            if (childOffset > offset + 1 + length) {
                logger$s.throwError("child data too short", Logger.errors.BUFFER_OVERRUN, {});
            }
        }
        return { consumed: (1 + length), result: result };
    }
    // returns { consumed: number, result: Object }
    function _decode(data, offset) {
        if (data.length === 0) {
            logger$s.throwError("data too short", Logger.errors.BUFFER_OVERRUN, {});
        }
        // Array with extra length prefix
        if (data[offset] >= 0xf8) {
            const lengthLength = data[offset] - 0xf7;
            if (offset + 1 + lengthLength > data.length) {
                logger$s.throwError("data short segment too short", Logger.errors.BUFFER_OVERRUN, {});
            }
            const length = unarrayifyInteger(data, offset + 1, lengthLength);
            if (offset + 1 + lengthLength + length > data.length) {
                logger$s.throwError("data long segment too short", Logger.errors.BUFFER_OVERRUN, {});
            }
            return _decodeChildren(data, offset, offset + 1 + lengthLength, lengthLength + length);
        }
        else if (data[offset] >= 0xc0) {
            const length = data[offset] - 0xc0;
            if (offset + 1 + length > data.length) {
                logger$s.throwError("data array too short", Logger.errors.BUFFER_OVERRUN, {});
            }
            return _decodeChildren(data, offset, offset + 1, length);
        }
        else if (data[offset] >= 0xb8) {
            const lengthLength = data[offset] - 0xb7;
            if (offset + 1 + lengthLength > data.length) {
                logger$s.throwError("data array too short", Logger.errors.BUFFER_OVERRUN, {});
            }
            const length = unarrayifyInteger(data, offset + 1, lengthLength);
            if (offset + 1 + lengthLength + length > data.length) {
                logger$s.throwError("data array too short", Logger.errors.BUFFER_OVERRUN, {});
            }
            const result = hexlify(data.slice(offset + 1 + lengthLength, offset + 1 + lengthLength + length));
            return { consumed: (1 + lengthLength + length), result: result };
        }
        else if (data[offset] >= 0x80) {
            const length = data[offset] - 0x80;
            if (offset + 1 + length > data.length) {
                logger$s.throwError("data too short", Logger.errors.BUFFER_OVERRUN, {});
            }
            const result = hexlify(data.slice(offset + 1, offset + 1 + length));
            return { consumed: (1 + length), result: result };
        }
        return { consumed: 1, result: hexlify(data[offset]) };
    }
    function decode$3(data) {
        const bytes = arrayify(data);
        const decoded = _decode(bytes, 0);
        if (decoded.consumed !== bytes.length) {
            logger$s.throwArgumentError("invalid rlp data", "data", data);
        }
        return decoded.result;
    }

    const version$i = "address/5.7.0";

    const logger$r = new Logger(version$i);
    function getChecksumAddress(address) {
        if (!isHexString(address, 20)) {
            logger$r.throwArgumentError("invalid address", "address", address);
        }
        address = address.toLowerCase();
        const chars = address.substring(2).split("");
        const expanded = new Uint8Array(40);
        for (let i = 0; i < 40; i++) {
            expanded[i] = chars[i].charCodeAt(0);
        }
        const hashed = arrayify(keccak256(expanded));
        for (let i = 0; i < 40; i += 2) {
            if ((hashed[i >> 1] >> 4) >= 8) {
                chars[i] = chars[i].toUpperCase();
            }
            if ((hashed[i >> 1] & 0x0f) >= 8) {
                chars[i + 1] = chars[i + 1].toUpperCase();
            }
        }
        return "0x" + chars.join("");
    }
    // Shims for environments that are missing some required constants and functions
    const MAX_SAFE_INTEGER$1 = 0x1fffffffffffff;
    function log10(x) {
        if (Math.log10) {
            return Math.log10(x);
        }
        return Math.log(x) / Math.LN10;
    }
    // See: https://en.wikipedia.org/wiki/International_Bank_Account_Number
    // Create lookup table
    const ibanLookup = {};
    for (let i = 0; i < 10; i++) {
        ibanLookup[String(i)] = String(i);
    }
    for (let i = 0; i < 26; i++) {
        ibanLookup[String.fromCharCode(65 + i)] = String(10 + i);
    }
    // How many decimal digits can we process? (for 64-bit float, this is 15)
    const safeDigits = Math.floor(log10(MAX_SAFE_INTEGER$1));
    function ibanChecksum(address) {
        address = address.toUpperCase();
        address = address.substring(4) + address.substring(0, 2) + "00";
        let expanded = address.split("").map((c) => { return ibanLookup[c]; }).join("");
        // Javascript can handle integers safely up to 15 (decimal) digits
        while (expanded.length >= safeDigits) {
            let block = expanded.substring(0, safeDigits);
            expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);
        }
        let checksum = String(98 - (parseInt(expanded, 10) % 97));
        while (checksum.length < 2) {
            checksum = "0" + checksum;
        }
        return checksum;
    }
    function getAddress(address) {
        let result = null;
        if (typeof (address) !== "string") {
            logger$r.throwArgumentError("invalid address", "address", address);
        }
        if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
            // Missing the 0x prefix
            if (address.substring(0, 2) !== "0x") {
                address = "0x" + address;
            }
            result = getChecksumAddress(address);
            // It is a checksummed address with a bad checksum
            if (address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && result !== address) {
                logger$r.throwArgumentError("bad address checksum", "address", address);
            }
            // Maybe ICAP? (we only support direct mode)
        }
        else if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
            // It is an ICAP address with a bad checksum
            if (address.substring(2, 4) !== ibanChecksum(address)) {
                logger$r.throwArgumentError("bad icap checksum", "address", address);
            }
            result = _base36To16(address.substring(4));
            while (result.length < 40) {
                result = "0" + result;
            }
            result = getChecksumAddress("0x" + result);
        }
        else {
            logger$r.throwArgumentError("invalid address", "address", address);
        }
        return result;
    }
    function isAddress(address) {
        try {
            getAddress(address);
            return true;
        }
        catch (error) { }
        return false;
    }
    // http://ethereum.stackexchange.com/questions/760/how-is-the-address-of-an-ethereum-contract-computed
    function getContractAddress(transaction) {
        let from = null;
        try {
            from = getAddress(transaction.from);
        }
        catch (error) {
            logger$r.throwArgumentError("missing from address", "transaction", transaction);
        }
        const nonce = stripZeros(arrayify(BigNumber.from(transaction.nonce).toHexString()));
        return getAddress(hexDataSlice(keccak256(encode$2([from, nonce])), 12));
    }

    const spaceTypes = {
        Space: [
            { name: 'from', type: 'address' },
            { name: 'space', type: 'string' },
            { name: 'timestamp', type: 'uint64' },
            { name: 'settings', type: 'string' }
        ]
    };
    const proposalTypes = {
        Proposal: [
            { name: 'from', type: 'address' },
            { name: 'space', type: 'string' },
            { name: 'timestamp', type: 'uint64' },
            { name: 'type', type: 'string' },
            { name: 'title', type: 'string' },
            { name: 'body', type: 'string' },
            { name: 'discussion', type: 'string' },
            { name: 'choices', type: 'string[]' },
            { name: 'labels', type: 'string[]' },
            { name: 'start', type: 'uint64' },
            { name: 'end', type: 'uint64' },
            { name: 'snapshot', type: 'uint64' },
            { name: 'plugins', type: 'string' },
            { name: 'privacy', type: 'string' },
            { name: 'app', type: 'string' }
        ]
    };
    const updateProposalTypes = {
        UpdateProposal: [
            { name: 'proposal', type: 'string' },
            { name: 'from', type: 'address' },
            { name: 'space', type: 'string' },
            { name: 'timestamp', type: 'uint64' },
            { name: 'type', type: 'string' },
            { name: 'title', type: 'string' },
            { name: 'body', type: 'string' },
            { name: 'discussion', type: 'string' },
            { name: 'choices', type: 'string[]' },
            { name: 'labels', type: 'string[]' },
            { name: 'plugins', type: 'string' },
            { name: 'privacy', type: 'string' }
        ]
    };
    const flagProposalTypes = {
        FlagProposal: [
            { name: 'from', type: 'address' },
            { name: 'space', type: 'string' },
            { name: 'proposal', type: 'string' },
            { name: 'timestamp', type: 'uint64' }
        ]
    };
    const cancelProposalTypes = {
        CancelProposal: [
            { name: 'from', type: 'address' },
            { name: 'space', type: 'string' },
            { name: 'timestamp', type: 'uint64' },
            { name: 'proposal', type: 'string' }
        ]
    };
    const cancelProposal2Types = {
        CancelProposal: [
            { name: 'from', type: 'address' },
            { name: 'space', type: 'string' },
            { name: 'timestamp', type: 'uint64' },
            { name: 'proposal', type: 'bytes32' }
        ]
    };
    const voteTypes = {
        Vote: [
            { name: 'from', type: 'address' },
            { name: 'space', type: 'string' },
            { name: 'timestamp', type: 'uint64' },
            { name: 'proposal', type: 'string' },
            { name: 'choice', type: 'uint32' },
            { name: 'reason', type: 'string' },
            { name: 'app', type: 'string' },
            { name: 'metadata', type: 'string' }
        ]
    };
    const voteArrayTypes = {
        Vote: [
            { name: 'from', type: 'address' },
            { name: 'space', type: 'string' },
            { name: 'timestamp', type: 'uint64' },
            { name: 'proposal', type: 'string' },
            { name: 'choice', type: 'uint32[]' },
            { name: 'reason', type: 'string' },
            { name: 'app', type: 'string' },
            { name: 'metadata', type: 'string' }
        ]
    };
    const voteStringTypes = {
        Vote: [
            { name: 'from', type: 'address' },
            { name: 'space', type: 'string' },
            { name: 'timestamp', type: 'uint64' },
            { name: 'proposal', type: 'string' },
            { name: 'choice', type: 'string' },
            { name: 'reason', type: 'string' },
            { name: 'app', type: 'string' },
            { name: 'metadata', type: 'string' }
        ]
    };
    const vote2Types = {
        Vote: [
            { name: 'from', type: 'address' },
            { name: 'space', type: 'string' },
            { name: 'timestamp', type: 'uint64' },
            { name: 'proposal', type: 'bytes32' },
            { name: 'choice', type: 'uint32' },
            { name: 'reason', type: 'string' },
            { name: 'app', type: 'string' },
            { name: 'metadata', type: 'string' }
        ]
    };
    const voteArray2Types = {
        Vote: [
            { name: 'from', type: 'address' },
            { name: 'space', type: 'string' },
            { name: 'timestamp', type: 'uint64' },
            { name: 'proposal', type: 'bytes32' },
            { name: 'choice', type: 'uint32[]' },
            { name: 'reason', type: 'string' },
            { name: 'app', type: 'string' },
            { name: 'metadata', type: 'string' }
        ]
    };
    const voteString2Types = {
        Vote: [
            { name: 'from', type: 'address' },
            { name: 'space', type: 'string' },
            { name: 'timestamp', type: 'uint64' },
            { name: 'proposal', type: 'bytes32' },
            { name: 'choice', type: 'string' },
            { name: 'reason', type: 'string' },
            { name: 'app', type: 'string' },
            { name: 'metadata', type: 'string' }
        ]
    };
    const followTypes = {
        Follow: [
            { name: 'from', type: 'address' },
            { name: 'network', type: 'string' },
            { name: 'space', type: 'string' },
            { name: 'timestamp', type: 'uint64' }
        ]
    };
    const unfollowTypes = {
        Unfollow: [
            { name: 'from', type: 'address' },
            { name: 'network', type: 'string' },
            { name: 'space', type: 'string' },
            { name: 'timestamp', type: 'uint64' }
        ]
    };
    const subscribeTypes = {
        Subscribe: [
            { name: 'from', type: 'address' },
            { name: 'space', type: 'string' },
            { name: 'timestamp', type: 'uint64' }
        ]
    };
    const unsubscribeTypes = {
        Unsubscribe: [
            { name: 'from', type: 'address' },
            { name: 'space', type: 'string' },
            { name: 'timestamp', type: 'uint64' }
        ]
    };
    const profileTypes = {
        Profile: [
            { name: 'from', type: 'address' },
            { name: 'timestamp', type: 'uint64' },
            { name: 'profile', type: 'string' }
        ]
    };
    const statementTypes = {
        Statement: [
            { name: 'from', type: 'address' },
            { name: 'timestamp', type: 'uint64' },
            { name: 'space', type: 'string' },
            { name: 'about', type: 'string' },
            { name: 'statement', type: 'string' },
            { name: 'discourse', type: 'string' },
            { name: 'status', type: 'string' },
            { name: 'network', type: 'string' }
        ]
    };
    const aliasTypes = {
        Alias: [
            { name: 'from', type: 'address' },
            { name: 'alias', type: 'address' },
            { name: 'timestamp', type: 'uint64' }
        ]
    };
    const deleteSpaceType = {
        DeleteSpace: [
            { name: 'from', type: 'address' },
            { name: 'space', type: 'string' },
            { name: 'timestamp', type: 'uint64' }
        ]
    };

    var mainnet = {
    	hub: "https://hub.snapshot.org",
    	sequencer: "https://seq.snapshot.org"
    };
    var testnet = {
    	hub: "https://testnet.hub.snapshot.org",
    	sequencer: "https://testnet.seq.snapshot.org"
    };
    var local = {
    	hub: "http://localhost:3000",
    	sequencer: "http://localhost:3001"
    };
    var constants$3 = {
    	mainnet: mainnet,
    	testnet: testnet,
    	local: local
    };

    const NAME$1 = 'snapshot';
    const VERSION = '0.1.4';
    const domain = {
        name: NAME$1,
        version: VERSION
        // chainId: 1
    };
    class Client {
        constructor(address = constants$3.mainnet.sequencer, options = {}) {
            address = address.replace(constants$3.mainnet.hub, constants$3.mainnet.sequencer);
            address = address.replace(constants$3.testnet.hub, constants$3.testnet.sequencer);
            address = address.replace(constants$3.local.hub, constants$3.local.sequencer);
            this.address = address;
            this.options = options;
        }
        sign(web3, address, message, types) {
            return __awaiter$c(this, void 0, void 0, function* () {
                var _a;
                // @ts-ignore
                const signer = (web3 === null || web3 === void 0 ? void 0 : web3.getSigner) ? web3.getSigner() : web3;
                const checksumAddress = getAddress(address);
                message.from = message.from ? getAddress(message.from) : checksumAddress;
                if (!message.timestamp)
                    message.timestamp = parseInt((Date.now() / 1e3).toFixed());
                const domainData = Object.assign({}, domain);
                // @ts-ignore
                if (typeof globalThis !== 'undefined' && ((_a = globalThis.ethereum) === null || _a === void 0 ? void 0 : _a.isTrust)) {
                    domainData.chainId = (yield signer.provider.getNetwork()).chainId;
                }
                const data = { domain: domainData, types, message };
                const sig = yield signer._signTypedData(domainData, data.types, message);
                return yield this.send({ address: checksumAddress, sig, data });
            });
        }
        send(envelop) {
            return __awaiter$c(this, void 0, void 0, function* () {
                let address = this.address;
                if (envelop.sig === '0x' && this.options.relayerURL)
                    address = this.options.relayerURL;
                const init = {
                    method: 'POST',
                    headers: {
                        Accept: 'application/json',
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(envelop)
                };
                return new Promise((resolve, reject) => {
                    fetch$2(address, init)
                        .then((res) => {
                        var _a;
                        if (res.ok)
                            return resolve(res.json());
                        if ((_a = res.headers.get('content-type')) === null || _a === void 0 ? void 0 : _a.includes('application/json'))
                            return res.json().then(reject).catch(reject);
                        throw res;
                    })
                        .catch(reject);
                });
            });
        }
        space(web3, address, message) {
            return __awaiter$c(this, void 0, void 0, function* () {
                return yield this.sign(web3, address, message, spaceTypes);
            });
        }
        proposal(web3, address, message) {
            return __awaiter$c(this, void 0, void 0, function* () {
                if (!message.discussion)
                    message.discussion = '';
                if (!message.app)
                    message.app = '';
                if (!message.privacy)
                    message.privacy = '';
                return yield this.sign(web3, address, message, proposalTypes);
            });
        }
        updateProposal(web3, address, message) {
            return __awaiter$c(this, void 0, void 0, function* () {
                if (!message.privacy)
                    message.privacy = '';
                return yield this.sign(web3, address, message, updateProposalTypes);
            });
        }
        flagProposal(web3, address, message) {
            return __awaiter$c(this, void 0, void 0, function* () {
                return yield this.sign(web3, address, message, flagProposalTypes);
            });
        }
        cancelProposal(web3, address, message) {
            return __awaiter$c(this, void 0, void 0, function* () {
                const type2 = message.proposal.startsWith('0x');
                return yield this.sign(web3, address, message, type2 ? cancelProposal2Types : cancelProposalTypes);
            });
        }
        vote(web3, address, message) {
            return __awaiter$c(this, void 0, void 0, function* () {
                const isShutter = (message === null || message === void 0 ? void 0 : message.privacy) === 'shutter';
                if (!message.reason)
                    message.reason = '';
                if (!message.app)
                    message.app = '';
                if (!message.metadata)
                    message.metadata = '{}';
                const type2 = message.proposal.startsWith('0x');
                let type = type2 ? vote2Types : voteTypes;
                if (['approval', 'ranked-choice'].includes(message.type))
                    type = type2 ? voteArray2Types : voteArrayTypes;
                if (!isShutter && ['quadratic', 'weighted'].includes(message.type)) {
                    type = type2 ? voteString2Types : voteStringTypes;
                    message.choice = JSON.stringify(message.choice);
                }
                if (isShutter)
                    type = type2 ? voteString2Types : voteStringTypes;
                delete message.privacy;
                // @ts-ignore
                delete message.type;
                return yield this.sign(web3, address, message, type);
            });
        }
        follow(web3, address, message) {
            return __awaiter$c(this, void 0, void 0, function* () {
                return yield this.sign(web3, address, message, followTypes);
            });
        }
        unfollow(web3, address, message) {
            return __awaiter$c(this, void 0, void 0, function* () {
                return yield this.sign(web3, address, message, unfollowTypes);
            });
        }
        subscribe(web3, address, message) {
            return __awaiter$c(this, void 0, void 0, function* () {
                return yield this.sign(web3, address, message, subscribeTypes);
            });
        }
        unsubscribe(web3, address, message) {
            return __awaiter$c(this, void 0, void 0, function* () {
                return yield this.sign(web3, address, message, unsubscribeTypes);
            });
        }
        profile(web3, address, message) {
            return __awaiter$c(this, void 0, void 0, function* () {
                return yield this.sign(web3, address, message, profileTypes);
            });
        }
        statement(web3, address, message) {
            return __awaiter$c(this, void 0, void 0, function* () {
                return yield this.sign(web3, address, message, statementTypes);
            });
        }
        alias(web3, address, message) {
            return __awaiter$c(this, void 0, void 0, function* () {
                return yield this.sign(web3, address, message, aliasTypes);
            });
        }
        deleteSpace(web3, address, message) {
            return __awaiter$c(this, void 0, void 0, function* () {
                return yield this.sign(web3, address, message, deleteSpaceType);
            });
        }
    }

    var $schema$7 = "http://json-schema.org/draft-07/schema#";
    var $ref$7 = "#/definitions/Space";
    var definitions$7 = {
    	Space: {
    		title: "Space",
    		type: "object",
    		properties: {
    			name: {
    				type: "string",
    				title: "name",
    				minLength: 1,
    				maxLength: 32
    			},
    			"private": {
    				type: "boolean"
    			},
    			about: {
    				type: "string",
    				title: "about",
    				maxLength: 160
    			},
    			guidelines: {
    				type: "string",
    				format: "customUrl",
    				title: "guidelines",
    				maxLength: 256
    			},
    			template: {
    				type: "string",
    				title: "template",
    				maxLength: 1024
    			},
    			terms: {
    				type: "string",
    				title: "terms",
    				format: "customUrl",
    				maxLength: 256
    			},
    			avatar: {
    				type: "string",
    				title: "avatar",
    				format: "customUrl",
    				maxLength: 256
    			},
    			cover: {
    				type: "string",
    				title: "avatar",
    				format: "customUrl",
    				maxLength: 256
    			},
    			location: {
    				type: "string",
    				title: "location",
    				maxLength: 24
    			},
    			website: {
    				type: "string",
    				title: "website",
    				format: "customUrl",
    				maxLength: 256
    			},
    			twitter: {
    				type: "string",
    				title: "twitter",
    				pattern: "^[A-Za-z0-9_]*$",
    				maxLength: 15
    			},
    			coingecko: {
    				type: "string",
    				title: "coingecko",
    				pattern: "^[a-z0-9-]*$",
    				maxLength: 32
    			},
    			github: {
    				type: "string",
    				title: "github",
    				pattern: "^[A-Za-z0-9_-]*$",
    				maxLength: 39
    			},
    			email: {
    				type: "string",
    				title: "email",
    				maxLength: 32
    			},
    			network: {
    				type: "string",
    				snapshotNetwork: true,
    				title: "network",
    				minLength: 1,
    				maxLength: 32
    			},
    			symbol: {
    				type: "string",
    				title: "symbol",
    				minLength: 1,
    				maxLength: 16
    			},
    			skin: {
    				type: "string",
    				title: "skin",
    				maxLength: 32
    			},
    			domain: {
    				type: "string",
    				title: "domain",
    				maxLength: 64,
    				format: "domain"
    			},
    			discussions: {
    				type: "string",
    				format: "uri",
    				title: "Discussions link",
    				maxLength: 256
    			},
    			discourseCategory: {
    				type: "integer",
    				minimum: 1,
    				title: "Discourse category"
    			},
    			strategies: {
    				type: "array",
    				minItems: 1,
    				maxItemsWithSpaceType: {
    					"default": 8,
    					turbo: 10
    				},
    				uniqueItems: true,
    				items: {
    					type: "object",
    					properties: {
    						name: {
    							type: "string",
    							maxLength: 64,
    							title: "name"
    						},
    						network: {
    							type: "string",
    							maxLength: 12,
    							title: "network",
    							snapshotNetwork: true
    						},
    						params: {
    							type: "object",
    							title: "params"
    						}
    					},
    					required: [
    						"name"
    					],
    					additionalProperties: false
    				},
    				title: "strategies"
    			},
    			members: {
    				type: "array",
    				maxItems: 100,
    				items: {
    					type: "string",
    					format: "evmAddress"
    				},
    				title: "members",
    				uniqueItems: true
    			},
    			admins: {
    				type: "array",
    				maxItems: 100,
    				items: {
    					type: "string",
    					format: "evmAddress"
    				},
    				title: "admins",
    				uniqueItems: true
    			},
    			moderators: {
    				type: "array",
    				maxItems: 100,
    				items: {
    					type: "string",
    					format: "evmAddress"
    				},
    				title: "moderators",
    				uniqueItems: true
    			},
    			filters: {
    				type: "object",
    				properties: {
    					defaultTab: {
    						type: "string"
    					},
    					minScore: {
    						type: "number",
    						minimum: 0
    					},
    					onlyMembers: {
    						type: "boolean"
    					},
    					invalids: {
    						type: "array",
    						items: {
    							type: "string",
    							maxLength: 64
    						},
    						title: "invalids"
    					}
    				},
    				additionalProperties: false
    			},
    			validation: {
    				type: "object",
    				properties: {
    					name: {
    						type: "string",
    						maxLength: 64,
    						title: "name"
    					},
    					params: {
    						type: "object",
    						title: "params"
    					}
    				},
    				required: [
    					"name"
    				],
    				additionalProperties: false
    			},
    			voteValidation: {
    				type: "object",
    				properties: {
    					name: {
    						type: "string",
    						maxLength: 32,
    						title: "name"
    					},
    					params: {
    						type: "object",
    						title: "params"
    					}
    				},
    				required: [
    					"name"
    				],
    				additionalProperties: false
    			},
    			followValidation: {
    				type: "object",
    				properties: {
    					name: {
    						type: "string",
    						maxLength: 32,
    						title: "name"
    					},
    					params: {
    						type: "object",
    						title: "params"
    					}
    				},
    				required: [
    					"name"
    				],
    				additionalProperties: false
    			},
    			delegationPortal: {
    				type: "object",
    				properties: {
    					delegationType: {
    						type: "string",
    						title: "Delegation type",
    						description: "Specify the type of delegation that you are using",
    						anyOf: [
    							{
    								"const": "compound-governor",
    								title: "Compound governor"
    							},
    							{
    								"const": "split-delegation",
    								title: "Split Delegation"
    							}
    						]
    					},
    					delegationContract: {
    						type: "string",
    						title: "Contract address",
    						description: "The address of your delegation contract",
    						examples: [
    							"0x3901D0fDe202aF1427216b79f5243f8A022d68cf"
    						],
    						anyOf: [
    							{
    								format: "evmAddress"
    							},
    							{
    								format: "starknetAddress"
    							}
    						],
    						errorMessage: "Must be a valid EVM of Starknet address"
    					},
    					delegationNetwork: {
    						type: "string",
    						title: "Delegation network",
    						description: "The network of your delegation contract",
    						anyOf: [
    							{
    								snapshotNetwork: true
    							},
    							{
    								starknetNetwork: true
    							}
    						],
    						errorMessage: "Must be a valid network"
    					},
    					delegationApi: {
    						type: "string",
    						format: "uri",
    						title: "Delegation API",
    						description: "The URL of your delegation API (e.g a subgraph)",
    						examples: [
    							"https://subgrapher.snapshot.org/subgraph/arbitrum/FTzC6VrZd8JhJgWfTJnwWgH1Z1dS3GxaosKkRbCqkZAZ"
    						]
    					}
    				},
    				required: [
    					"delegationType",
    					"delegationApi",
    					"delegationContract"
    				],
    				additionalProperties: false
    			},
    			allowAlias: {
    				type: "boolean"
    			},
    			plugins: {
    				type: "object"
    			},
    			voting: {
    				type: "object",
    				properties: {
    					delay: {
    						type: "integer",
    						minimum: 0,
    						maximum: 2592000,
    						errorMessage: {
    							maximum: "Delay must be less than 30 days"
    						}
    					},
    					period: {
    						type: "integer",
    						minimum: 0,
    						maximum: 15552000,
    						errorMessage: {
    							maximum: "Delay must be less than 180 days"
    						}
    					},
    					type: {
    						type: "string",
    						title: "type"
    					},
    					quorum: {
    						type: "number",
    						minimum: 0
    					},
    					quorumType: {
    						type: "string",
    						"enum": [
    							"rejection"
    						]
    					},
    					blind: {
    						type: "boolean"
    					},
    					hideAbstain: {
    						type: "boolean"
    					},
    					aliased: {
    						type: "boolean"
    					},
    					privacy: {
    						type: "string",
    						"enum": [
    							"",
    							"shutter",
    							"any"
    						]
    					}
    				},
    				additionalProperties: false
    			},
    			categories: {
    				type: "array",
    				maxItems: 2,
    				items: {
    					type: "string",
    					"enum": [
    						"protocol",
    						"social",
    						"investment",
    						"grant",
    						"service",
    						"media",
    						"creator",
    						"collector",
    						"ai-agent",
    						"gaming",
    						"wallet",
    						"music",
    						"layer-2",
    						"defai",
    						"defi",
    						"rwa",
    						"depin",
    						"meme"
    					]
    				}
    			},
    			treasuries: {
    				type: "array",
    				maxItems: 10,
    				uniqueItems: true,
    				items: {
    					type: "object",
    					properties: {
    						name: {
    							type: "string",
    							title: "Name",
    							examples: [
    								"e.g. Balancer DAO 1"
    							],
    							minLength: 1,
    							maxLength: 64
    						},
    						address: {
    							type: "string",
    							title: "Contract address",
    							examples: [
    								"e.g. 0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984"
    							],
    							anyOf: [
    								{
    									format: "evmAddress"
    								},
    								{
    									format: "starknetAddress"
    								}
    							],
    							errorMessage: "Must be a valid EVM of Starknet address"
    						},
    						network: {
    							type: "string",
    							title: "Network",
    							anyOf: [
    								{
    									snapshotNetwork: true
    								},
    								{
    									starknetNetwork: true
    								}
    							],
    							errorMessage: "Must be a valid network"
    						}
    					},
    					required: [
    						"name",
    						"address",
    						"network"
    					],
    					additionalProperties: false
    				}
    			},
    			labels: {
    				type: "array",
    				maxItems: 10,
    				uniqueItems: true,
    				items: {
    					type: "object",
    					properties: {
    						id: {
    							type: "string",
    							title: "Id",
    							minLength: 1,
    							maxLength: 8
    						},
    						name: {
    							type: "string",
    							title: "Name",
    							minLength: 1,
    							maxLength: 32
    						},
    						description: {
    							type: "string",
    							title: "Description",
    							maxLength: 100
    						},
    						color: {
    							type: "string",
    							title: "Color",
    							format: "color"
    						}
    					},
    					required: [
    						"id",
    						"name",
    						"color"
    					],
    					additionalProperties: false
    				}
    			},
    			parent: {
    				type: "string",
    				title: "parent"
    			},
    			children: {
    				type: "array",
    				maxItems: 16,
    				title: "children",
    				items: {
    					type: "string"
    				},
    				uniqueItems: true
    			},
    			boost: {
    				type: "object",
    				properties: {
    					enabled: {
    						type: "boolean"
    					},
    					bribeEnabled: {
    						type: "boolean"
    					}
    				},
    				required: [
    					"enabled",
    					"bribeEnabled"
    				],
    				additionalProperties: false
    			}
    		},
    		required: [
    			"name",
    			"network",
    			"strategies"
    		],
    		additionalProperties: false
    	}
    };
    var space = {
    	$schema: $schema$7,
    	$ref: $ref$7,
    	definitions: definitions$7
    };

    var $schema$6 = "http://json-schema.org/draft-07/schema#";
    var $ref$6 = "#/definitions/Proposal";
    var definitions$6 = {
    	Proposal: {
    		title: "Proposal",
    		type: "object",
    		properties: {
    			name: {
    				type: "string",
    				title: "name",
    				minLength: 1,
    				maxLength: 256
    			},
    			body: {
    				type: "string",
    				title: "body",
    				minLength: 0,
    				maxLengthWithSpaceType: {
    					"default": 10000,
    					turbo: 40000
    				}
    			},
    			discussion: {
    				type: "string",
    				format: "customUrl",
    				title: "discussion",
    				maxLength: 256
    			},
    			choices: {
    				type: "array",
    				title: "choices",
    				minItems: 1,
    				maxLengthWithSpaceType: {
    					"default": 500,
    					turbo: 1000
    				}
    			},
    			labels: {
    				type: "array",
    				title: "labels",
    				maxItems: 10,
    				uniqueItems: true,
    				items: {
    					type: "string",
    					minLength: 1,
    					maxLength: 8,
    					pattern: "^[a-zA-Z0-9]+$"
    				}
    			},
    			type: {
    				type: "string",
    				"enum": [
    					"single-choice",
    					"approval",
    					"ranked-choice",
    					"quadratic",
    					"weighted",
    					"custom",
    					"basic"
    				]
    			},
    			snapshot: {
    				type: "number",
    				title: "snapshot"
    			},
    			start: {
    				type: "number",
    				title: "start",
    				minimum: 1000000000,
    				maximum: 2000000000
    			},
    			end: {
    				type: "number",
    				title: "end",
    				minimum: 1000000000,
    				maximum: 2000000000
    			},
    			metadata: {
    				type: "object",
    				title: "metadata"
    			},
    			app: {
    				type: "string",
    				title: "app",
    				maxLength: 24
    			},
    			privacy: {
    				type: "string",
    				"enum": [
    					"",
    					"shutter"
    				]
    			}
    		},
    		required: [
    			"name",
    			"body",
    			"choices",
    			"snapshot",
    			"start",
    			"end"
    		],
    		additionalProperties: false
    	}
    };
    var proposal = {
    	$schema: $schema$6,
    	$ref: $ref$6,
    	definitions: definitions$6
    };

    var $schema$5 = "http://json-schema.org/draft-07/schema#";
    var $ref$5 = "#/definitions/UpdateProposal";
    var definitions$5 = {
    	UpdateProposal: {
    		title: "Update Proposal",
    		type: "object",
    		properties: {
    			proposal: {
    				type: "string",
    				title: "proposal id"
    			},
    			name: {
    				type: "string",
    				title: "name",
    				minLength: 1,
    				maxLength: 256
    			},
    			body: {
    				type: "string",
    				title: "body",
    				minLength: 0,
    				maxLengthWithSpaceType: {
    					"default": 10000,
    					turbo: 20000
    				}
    			},
    			discussion: {
    				type: "string",
    				format: "customUrl",
    				title: "discussion",
    				maxLength: 256
    			},
    			choices: {
    				type: "array",
    				title: "choices",
    				minItems: 1,
    				maxLengthWithSpaceType: {
    					"default": 500,
    					turbo: 1000
    				}
    			},
    			labels: {
    				type: "array",
    				title: "labels",
    				maxItems: 10,
    				uniqueItems: true,
    				items: {
    					type: "string",
    					minLength: 1,
    					maxLength: 8,
    					pattern: "^[a-zA-Z0-9]+$"
    				}
    			},
    			type: {
    				"enum": [
    					"single-choice",
    					"approval",
    					"ranked-choice",
    					"quadratic",
    					"weighted",
    					"custom",
    					"basic"
    				]
    			},
    			metadata: {
    				type: "object",
    				title: "metadata"
    			},
    			privacy: {
    				type: "string",
    				"enum": [
    					"",
    					"shutter"
    				]
    			}
    		},
    		required: [
    			"proposal",
    			"name",
    			"body",
    			"discussion",
    			"choices",
    			"type",
    			"metadata"
    		],
    		additionalProperties: false
    	}
    };
    var updateProposal = {
    	$schema: $schema$5,
    	$ref: $ref$5,
    	definitions: definitions$5
    };

    var $schema$4 = "http://json-schema.org/draft-07/schema#";
    var $ref$4 = "#/definitions/Vote";
    var definitions$4 = {
    	Vote: {
    		title: "Vote",
    		type: "object",
    		properties: {
    			proposal: {
    				type: "string",
    				title: "proposal"
    			},
    			choice: {
    				type: [
    					"number",
    					"array",
    					"object",
    					"boolean",
    					"string"
    				],
    				title: "choice"
    			},
    			metadata: {
    				type: "object",
    				title: "metadata"
    			},
    			reason: {
    				type: "string",
    				title: "reason",
    				maxLength: 5000
    			},
    			app: {
    				type: "string",
    				title: "app",
    				maxLength: 24
    			}
    		},
    		required: [
    			"proposal",
    			"choice"
    		],
    		additionalProperties: false
    	}
    };
    var vote = {
    	$schema: $schema$4,
    	$ref: $ref$4,
    	definitions: definitions$4
    };

    var $schema$3 = "http://json-schema.org/draft-07/schema#";
    var $ref$3 = "#/definitions/Profile";
    var definitions$3 = {
    	Profile: {
    		title: "Profile",
    		type: "object",
    		properties: {
    			name: {
    				type: "string",
    				title: "name",
    				maxLength: 32
    			},
    			about: {
    				type: "string",
    				title: "about",
    				maxLength: 256
    			},
    			avatar: {
    				type: "string",
    				title: "avatar",
    				format: "customUrl",
    				maxLength: 256
    			},
    			cover: {
    				type: "string",
    				title: "avatar",
    				format: "customUrl",
    				maxLength: 256
    			},
    			twitter: {
    				type: "string",
    				title: "twitter",
    				pattern: "^[A-Za-z0-9_]*$",
    				maxLength: 15
    			},
    			github: {
    				type: "string",
    				title: "github",
    				pattern: "^[A-Za-z0-9_-]*$",
    				maxLength: 39
    			},
    			lens: {
    				type: "string",
    				title: "lens",
    				pattern: "^[A-Za-z0-9_]*$",
    				maxLength: 26
    			},
    			farcaster: {
    				type: "string",
    				title: "farcaster",
    				pattern: "^[a-z0-9-]*$",
    				maxLength: 17
    			}
    		},
    		required: [
    		],
    		additionalProperties: false
    	}
    };
    var profile = {
    	$schema: $schema$3,
    	$ref: $ref$3,
    	definitions: definitions$3
    };

    var $schema$2 = "http://json-schema.org/draft-07/schema#";
    var $ref$2 = "#/definitions/Statement";
    var definitions$2 = {
    	Statement: {
    		title: "Statement",
    		type: "object",
    		properties: {
    			about: {
    				type: "string",
    				format: "long",
    				title: "About",
    				maxLength: 140
    			},
    			statement: {
    				type: "string",
    				format: "long",
    				title: "Statement",
    				maxLength: 10000
    			},
    			discourse: {
    				type: "string",
    				title: "discourse",
    				pattern: "^[A-Za-z0-9-_.]*$",
    				maxLength: 30
    			},
    			network: {
    				type: "string",
    				title: "network",
    				pattern: "^[a-z0-9-]*$",
    				maxLength: 24
    			},
    			status: {
    				"enum": [
    					"ACTIVE",
    					"INACTIVE"
    				],
    				title: "status"
    			}
    		},
    		required: [
    		],
    		additionalProperties: false
    	}
    };
    var statement = {
    	$schema: $schema$2,
    	$ref: $ref$2,
    	definitions: definitions$2
    };

    var $schema$1 = "http://json-schema.org/draft-07/schema#";
    var $ref$1 = "#/definitions/Zodiac";
    var definitions$1 = {
    	Zodiac: {
    		title: "Zodiac",
    		type: "object",
    		properties: {
    			safes: {
    				title: "Safe(s)",
    				type: "array",
    				maxItems: 8,
    				items: {
    					type: "object",
    					properties: {
    						network: {
    							title: "Network",
    							type: "string",
    							snapshotNetwork: true
    						},
    						multisend: {
    							title: "Multisend contract address",
    							type: "string"
    						},
    						realityAddress: {
    							title: "Reality module address",
    							type: "string"
    						},
    						umaAddress: {
    							title: "UMA module address",
    							type: "string"
    						}
    					},
    					additionalProperties: false
    				}
    			},
    			additionalProperties: false
    		}
    	}
    };
    var zodiac = {
    	$schema: $schema$1,
    	$ref: $ref$1,
    	definitions: definitions$1
    };

    var $schema = "http://json-schema.org/draft-07/schema#";
    var $ref = "#/definitions/Alias";
    var definitions = {
    	Alias: {
    		title: "Alias",
    		type: "object",
    		properties: {
    			alias: {
    				type: "string",
    				format: "address"
    			}
    		},
    		required: [
    			"alias"
    		],
    		additionalProperties: false
    	}
    };
    var alias = {
    	$schema: $schema,
    	$ref: $ref,
    	definitions: definitions
    };

    var schemas = {
        space: space.definitions.Space,
        proposal: proposal.definitions.Proposal,
        updateProposal: updateProposal.definitions.UpdateProposal,
        vote: vote.definitions.Vote,
        profile: profile.definitions.Profile,
        statement: statement.definitions.Statement,
        zodiac: zodiac.definitions.Zodiac,
        alias: alias.definitions.Alias
    };

    const version$h = "properties/5.7.0";

    var __awaiter$b = (window && window.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    const logger$q = new Logger(version$h);
    function defineReadOnly(object, name, value) {
        Object.defineProperty(object, name, {
            enumerable: true,
            value: value,
            writable: false,
        });
    }
    // Crawl up the constructor chain to find a static method
    function getStatic(ctor, key) {
        for (let i = 0; i < 32; i++) {
            if (ctor[key]) {
                return ctor[key];
            }
            if (!ctor.prototype || typeof (ctor.prototype) !== "object") {
                break;
            }
            ctor = Object.getPrototypeOf(ctor.prototype).constructor;
        }
        return null;
    }
    function resolveProperties(object) {
        return __awaiter$b(this, void 0, void 0, function* () {
            const promises = Object.keys(object).map((key) => {
                const value = object[key];
                return Promise.resolve(value).then((v) => ({ key: key, value: v }));
            });
            const results = yield Promise.all(promises);
            return results.reduce((accum, result) => {
                accum[(result.key)] = result.value;
                return accum;
            }, {});
        });
    }
    function checkProperties(object, properties) {
        if (!object || typeof (object) !== "object") {
            logger$q.throwArgumentError("invalid object", "object", object);
        }
        Object.keys(object).forEach((key) => {
            if (!properties[key]) {
                logger$q.throwArgumentError("invalid object key - " + key, "transaction:" + key, object);
            }
        });
    }
    function shallowCopy(object) {
        const result = {};
        for (const key in object) {
            result[key] = object[key];
        }
        return result;
    }
    const opaque = { bigint: true, boolean: true, "function": true, number: true, string: true };
    function _isFrozen(object) {
        // Opaque objects are not mutable, so safe to copy by assignment
        if (object === undefined || object === null || opaque[typeof (object)]) {
            return true;
        }
        if (Array.isArray(object) || typeof (object) === "object") {
            if (!Object.isFrozen(object)) {
                return false;
            }
            const keys = Object.keys(object);
            for (let i = 0; i < keys.length; i++) {
                let value = null;
                try {
                    value = object[keys[i]];
                }
                catch (error) {
                    // If accessing a value triggers an error, it is a getter
                    // designed to do so (e.g. Result) and is therefore "frozen"
                    continue;
                }
                if (!_isFrozen(value)) {
                    return false;
                }
            }
            return true;
        }
        return logger$q.throwArgumentError(`Cannot deepCopy ${typeof (object)}`, "object", object);
    }
    // Returns a new copy of object, such that no properties may be replaced.
    // New properties may be added only to objects.
    function _deepCopy(object) {
        if (_isFrozen(object)) {
            return object;
        }
        // Arrays are mutable, so we need to create a copy
        if (Array.isArray(object)) {
            return Object.freeze(object.map((item) => deepCopy(item)));
        }
        if (typeof (object) === "object") {
            const result = {};
            for (const key in object) {
                const value = object[key];
                if (value === undefined) {
                    continue;
                }
                defineReadOnly(result, key, deepCopy(value));
            }
            return result;
        }
        return logger$q.throwArgumentError(`Cannot deepCopy ${typeof (object)}`, "object", object);
    }
    function deepCopy(object) {
        return _deepCopy(object);
    }
    class Description {
        constructor(info) {
            for (const key in info) {
                this[key] = deepCopy(info[key]);
            }
        }
    }

    const version$g = "abi/5.7.0";

    const logger$p = new Logger(version$g);
    const _constructorGuard$2 = {};
    let ModifiersBytes = { calldata: true, memory: true, storage: true };
    let ModifiersNest = { calldata: true, memory: true };
    function checkModifier(type, name) {
        if (type === "bytes" || type === "string") {
            if (ModifiersBytes[name]) {
                return true;
            }
        }
        else if (type === "address") {
            if (name === "payable") {
                return true;
            }
        }
        else if (type.indexOf("[") >= 0 || type === "tuple") {
            if (ModifiersNest[name]) {
                return true;
            }
        }
        if (ModifiersBytes[name] || name === "payable") {
            logger$p.throwArgumentError("invalid modifier", "name", name);
        }
        return false;
    }
    // @TODO: Make sure that children of an indexed tuple are marked with a null indexed
    function parseParamType(param, allowIndexed) {
        let originalParam = param;
        function throwError(i) {
            logger$p.throwArgumentError(`unexpected character at position ${i}`, "param", param);
        }
        param = param.replace(/\s/g, " ");
        function newNode(parent) {
            let node = { type: "", name: "", parent: parent, state: { allowType: true } };
            if (allowIndexed) {
                node.indexed = false;
            }
            return node;
        }
        let parent = { type: "", name: "", state: { allowType: true } };
        let node = parent;
        for (let i = 0; i < param.length; i++) {
            let c = param[i];
            switch (c) {
                case "(":
                    if (node.state.allowType && node.type === "") {
                        node.type = "tuple";
                    }
                    else if (!node.state.allowParams) {
                        throwError(i);
                    }
                    node.state.allowType = false;
                    node.type = verifyType(node.type);
                    node.components = [newNode(node)];
                    node = node.components[0];
                    break;
                case ")":
                    delete node.state;
                    if (node.name === "indexed") {
                        if (!allowIndexed) {
                            throwError(i);
                        }
                        node.indexed = true;
                        node.name = "";
                    }
                    if (checkModifier(node.type, node.name)) {
                        node.name = "";
                    }
                    node.type = verifyType(node.type);
                    let child = node;
                    node = node.parent;
                    if (!node) {
                        throwError(i);
                    }
                    delete child.parent;
                    node.state.allowParams = false;
                    node.state.allowName = true;
                    node.state.allowArray = true;
                    break;
                case ",":
                    delete node.state;
                    if (node.name === "indexed") {
                        if (!allowIndexed) {
                            throwError(i);
                        }
                        node.indexed = true;
                        node.name = "";
                    }
                    if (checkModifier(node.type, node.name)) {
                        node.name = "";
                    }
                    node.type = verifyType(node.type);
                    let sibling = newNode(node.parent);
                    //{ type: "", name: "", parent: node.parent, state: { allowType: true } };
                    node.parent.components.push(sibling);
                    delete node.parent;
                    node = sibling;
                    break;
                // Hit a space...
                case " ":
                    // If reading type, the type is done and may read a param or name
                    if (node.state.allowType) {
                        if (node.type !== "") {
                            node.type = verifyType(node.type);
                            delete node.state.allowType;
                            node.state.allowName = true;
                            node.state.allowParams = true;
                        }
                    }
                    // If reading name, the name is done
                    if (node.state.allowName) {
                        if (node.name !== "") {
                            if (node.name === "indexed") {
                                if (!allowIndexed) {
                                    throwError(i);
                                }
                                if (node.indexed) {
                                    throwError(i);
                                }
                                node.indexed = true;
                                node.name = "";
                            }
                            else if (checkModifier(node.type, node.name)) {
                                node.name = "";
                            }
                            else {
                                node.state.allowName = false;
                            }
                        }
                    }
                    break;
                case "[":
                    if (!node.state.allowArray) {
                        throwError(i);
                    }
                    node.type += c;
                    node.state.allowArray = false;
                    node.state.allowName = false;
                    node.state.readArray = true;
                    break;
                case "]":
                    if (!node.state.readArray) {
                        throwError(i);
                    }
                    node.type += c;
                    node.state.readArray = false;
                    node.state.allowArray = true;
                    node.state.allowName = true;
                    break;
                default:
                    if (node.state.allowType) {
                        node.type += c;
                        node.state.allowParams = true;
                        node.state.allowArray = true;
                    }
                    else if (node.state.allowName) {
                        node.name += c;
                        delete node.state.allowArray;
                    }
                    else if (node.state.readArray) {
                        node.type += c;
                    }
                    else {
                        throwError(i);
                    }
            }
        }
        if (node.parent) {
            logger$p.throwArgumentError("unexpected eof", "param", param);
        }
        delete parent.state;
        if (node.name === "indexed") {
            if (!allowIndexed) {
                throwError(originalParam.length - 7);
            }
            if (node.indexed) {
                throwError(originalParam.length - 7);
            }
            node.indexed = true;
            node.name = "";
        }
        else if (checkModifier(node.type, node.name)) {
            node.name = "";
        }
        parent.type = verifyType(parent.type);
        return parent;
    }
    function populate(object, params) {
        for (let key in params) {
            defineReadOnly(object, key, params[key]);
        }
    }
    const FormatTypes = Object.freeze({
        // Bare formatting, as is needed for computing a sighash of an event or function
        sighash: "sighash",
        // Human-Readable with Minimal spacing and without names (compact human-readable)
        minimal: "minimal",
        // Human-Readable with nice spacing, including all names
        full: "full",
        // JSON-format a la Solidity
        json: "json"
    });
    const paramTypeArray = new RegExp(/^(.*)\[([0-9]*)\]$/);
    class ParamType {
        constructor(constructorGuard, params) {
            if (constructorGuard !== _constructorGuard$2) {
                logger$p.throwError("use fromString", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "new ParamType()"
                });
            }
            populate(this, params);
            let match = this.type.match(paramTypeArray);
            if (match) {
                populate(this, {
                    arrayLength: parseInt(match[2] || "-1"),
                    arrayChildren: ParamType.fromObject({
                        type: match[1],
                        components: this.components
                    }),
                    baseType: "array"
                });
            }
            else {
                populate(this, {
                    arrayLength: null,
                    arrayChildren: null,
                    baseType: ((this.components != null) ? "tuple" : this.type)
                });
            }
            this._isParamType = true;
            Object.freeze(this);
        }
        // Format the parameter fragment
        //   - sighash: "(uint256,address)"
        //   - minimal: "tuple(uint256,address) indexed"
        //   - full:    "tuple(uint256 foo, address bar) indexed baz"
        format(format) {
            if (!format) {
                format = FormatTypes.sighash;
            }
            if (!FormatTypes[format]) {
                logger$p.throwArgumentError("invalid format type", "format", format);
            }
            if (format === FormatTypes.json) {
                let result = {
                    type: ((this.baseType === "tuple") ? "tuple" : this.type),
                    name: (this.name || undefined)
                };
                if (typeof (this.indexed) === "boolean") {
                    result.indexed = this.indexed;
                }
                if (this.components) {
                    result.components = this.components.map((comp) => JSON.parse(comp.format(format)));
                }
                return JSON.stringify(result);
            }
            let result = "";
            // Array
            if (this.baseType === "array") {
                result += this.arrayChildren.format(format);
                result += "[" + (this.arrayLength < 0 ? "" : String(this.arrayLength)) + "]";
            }
            else {
                if (this.baseType === "tuple") {
                    if (format !== FormatTypes.sighash) {
                        result += this.type;
                    }
                    result += "(" + this.components.map((comp) => comp.format(format)).join((format === FormatTypes.full) ? ", " : ",") + ")";
                }
                else {
                    result += this.type;
                }
            }
            if (format !== FormatTypes.sighash) {
                if (this.indexed === true) {
                    result += " indexed";
                }
                if (format === FormatTypes.full && this.name) {
                    result += " " + this.name;
                }
            }
            return result;
        }
        static from(value, allowIndexed) {
            if (typeof (value) === "string") {
                return ParamType.fromString(value, allowIndexed);
            }
            return ParamType.fromObject(value);
        }
        static fromObject(value) {
            if (ParamType.isParamType(value)) {
                return value;
            }
            return new ParamType(_constructorGuard$2, {
                name: (value.name || null),
                type: verifyType(value.type),
                indexed: ((value.indexed == null) ? null : !!value.indexed),
                components: (value.components ? value.components.map(ParamType.fromObject) : null)
            });
        }
        static fromString(value, allowIndexed) {
            function ParamTypify(node) {
                return ParamType.fromObject({
                    name: node.name,
                    type: node.type,
                    indexed: node.indexed,
                    components: node.components
                });
            }
            return ParamTypify(parseParamType(value, !!allowIndexed));
        }
        static isParamType(value) {
            return !!(value != null && value._isParamType);
        }
    }
    function parseParams(value, allowIndex) {
        return splitNesting(value).map((param) => ParamType.fromString(param, allowIndex));
    }
    class Fragment {
        constructor(constructorGuard, params) {
            if (constructorGuard !== _constructorGuard$2) {
                logger$p.throwError("use a static from method", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "new Fragment()"
                });
            }
            populate(this, params);
            this._isFragment = true;
            Object.freeze(this);
        }
        static from(value) {
            if (Fragment.isFragment(value)) {
                return value;
            }
            if (typeof (value) === "string") {
                return Fragment.fromString(value);
            }
            return Fragment.fromObject(value);
        }
        static fromObject(value) {
            if (Fragment.isFragment(value)) {
                return value;
            }
            switch (value.type) {
                case "function":
                    return FunctionFragment.fromObject(value);
                case "event":
                    return EventFragment.fromObject(value);
                case "constructor":
                    return ConstructorFragment.fromObject(value);
                case "error":
                    return ErrorFragment.fromObject(value);
                case "fallback":
                case "receive":
                    // @TODO: Something? Maybe return a FunctionFragment? A custom DefaultFunctionFragment?
                    return null;
            }
            return logger$p.throwArgumentError("invalid fragment object", "value", value);
        }
        static fromString(value) {
            // Make sure the "returns" is surrounded by a space and all whitespace is exactly one space
            value = value.replace(/\s/g, " ");
            value = value.replace(/\(/g, " (").replace(/\)/g, ") ").replace(/\s+/g, " ");
            value = value.trim();
            if (value.split(" ")[0] === "event") {
                return EventFragment.fromString(value.substring(5).trim());
            }
            else if (value.split(" ")[0] === "function") {
                return FunctionFragment.fromString(value.substring(8).trim());
            }
            else if (value.split("(")[0].trim() === "constructor") {
                return ConstructorFragment.fromString(value.trim());
            }
            else if (value.split(" ")[0] === "error") {
                return ErrorFragment.fromString(value.substring(5).trim());
            }
            return logger$p.throwArgumentError("unsupported fragment", "value", value);
        }
        static isFragment(value) {
            return !!(value && value._isFragment);
        }
    }
    class EventFragment extends Fragment {
        format(format) {
            if (!format) {
                format = FormatTypes.sighash;
            }
            if (!FormatTypes[format]) {
                logger$p.throwArgumentError("invalid format type", "format", format);
            }
            if (format === FormatTypes.json) {
                return JSON.stringify({
                    type: "event",
                    anonymous: this.anonymous,
                    name: this.name,
                    inputs: this.inputs.map((input) => JSON.parse(input.format(format)))
                });
            }
            let result = "";
            if (format !== FormatTypes.sighash) {
                result += "event ";
            }
            result += this.name + "(" + this.inputs.map((input) => input.format(format)).join((format === FormatTypes.full) ? ", " : ",") + ") ";
            if (format !== FormatTypes.sighash) {
                if (this.anonymous) {
                    result += "anonymous ";
                }
            }
            return result.trim();
        }
        static from(value) {
            if (typeof (value) === "string") {
                return EventFragment.fromString(value);
            }
            return EventFragment.fromObject(value);
        }
        static fromObject(value) {
            if (EventFragment.isEventFragment(value)) {
                return value;
            }
            if (value.type !== "event") {
                logger$p.throwArgumentError("invalid event object", "value", value);
            }
            const params = {
                name: verifyIdentifier(value.name),
                anonymous: value.anonymous,
                inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : []),
                type: "event"
            };
            return new EventFragment(_constructorGuard$2, params);
        }
        static fromString(value) {
            let match = value.match(regexParen);
            if (!match) {
                logger$p.throwArgumentError("invalid event string", "value", value);
            }
            let anonymous = false;
            match[3].split(" ").forEach((modifier) => {
                switch (modifier.trim()) {
                    case "anonymous":
                        anonymous = true;
                        break;
                    case "":
                        break;
                    default:
                        logger$p.warn("unknown modifier: " + modifier);
                }
            });
            return EventFragment.fromObject({
                name: match[1].trim(),
                anonymous: anonymous,
                inputs: parseParams(match[2], true),
                type: "event"
            });
        }
        static isEventFragment(value) {
            return (value && value._isFragment && value.type === "event");
        }
    }
    function parseGas(value, params) {
        params.gas = null;
        let comps = value.split("@");
        if (comps.length !== 1) {
            if (comps.length > 2) {
                logger$p.throwArgumentError("invalid human-readable ABI signature", "value", value);
            }
            if (!comps[1].match(/^[0-9]+$/)) {
                logger$p.throwArgumentError("invalid human-readable ABI signature gas", "value", value);
            }
            params.gas = BigNumber.from(comps[1]);
            return comps[0];
        }
        return value;
    }
    function parseModifiers(value, params) {
        params.constant = false;
        params.payable = false;
        params.stateMutability = "nonpayable";
        value.split(" ").forEach((modifier) => {
            switch (modifier.trim()) {
                case "constant":
                    params.constant = true;
                    break;
                case "payable":
                    params.payable = true;
                    params.stateMutability = "payable";
                    break;
                case "nonpayable":
                    params.payable = false;
                    params.stateMutability = "nonpayable";
                    break;
                case "pure":
                    params.constant = true;
                    params.stateMutability = "pure";
                    break;
                case "view":
                    params.constant = true;
                    params.stateMutability = "view";
                    break;
                case "external":
                case "public":
                case "":
                    break;
                default:
                    console.log("unknown modifier: " + modifier);
            }
        });
    }
    function verifyState(value) {
        let result = {
            constant: false,
            payable: true,
            stateMutability: "payable"
        };
        if (value.stateMutability != null) {
            result.stateMutability = value.stateMutability;
            // Set (and check things are consistent) the constant property
            result.constant = (result.stateMutability === "view" || result.stateMutability === "pure");
            if (value.constant != null) {
                if ((!!value.constant) !== result.constant) {
                    logger$p.throwArgumentError("cannot have constant function with mutability " + result.stateMutability, "value", value);
                }
            }
            // Set (and check things are consistent) the payable property
            result.payable = (result.stateMutability === "payable");
            if (value.payable != null) {
                if ((!!value.payable) !== result.payable) {
                    logger$p.throwArgumentError("cannot have payable function with mutability " + result.stateMutability, "value", value);
                }
            }
        }
        else if (value.payable != null) {
            result.payable = !!value.payable;
            // If payable we can assume non-constant; otherwise we can't assume
            if (value.constant == null && !result.payable && value.type !== "constructor") {
                logger$p.throwArgumentError("unable to determine stateMutability", "value", value);
            }
            result.constant = !!value.constant;
            if (result.constant) {
                result.stateMutability = "view";
            }
            else {
                result.stateMutability = (result.payable ? "payable" : "nonpayable");
            }
            if (result.payable && result.constant) {
                logger$p.throwArgumentError("cannot have constant payable function", "value", value);
            }
        }
        else if (value.constant != null) {
            result.constant = !!value.constant;
            result.payable = !result.constant;
            result.stateMutability = (result.constant ? "view" : "payable");
        }
        else if (value.type !== "constructor") {
            logger$p.throwArgumentError("unable to determine stateMutability", "value", value);
        }
        return result;
    }
    class ConstructorFragment extends Fragment {
        format(format) {
            if (!format) {
                format = FormatTypes.sighash;
            }
            if (!FormatTypes[format]) {
                logger$p.throwArgumentError("invalid format type", "format", format);
            }
            if (format === FormatTypes.json) {
                return JSON.stringify({
                    type: "constructor",
                    stateMutability: ((this.stateMutability !== "nonpayable") ? this.stateMutability : undefined),
                    payable: this.payable,
                    gas: (this.gas ? this.gas.toNumber() : undefined),
                    inputs: this.inputs.map((input) => JSON.parse(input.format(format)))
                });
            }
            if (format === FormatTypes.sighash) {
                logger$p.throwError("cannot format a constructor for sighash", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "format(sighash)"
                });
            }
            let result = "constructor(" + this.inputs.map((input) => input.format(format)).join((format === FormatTypes.full) ? ", " : ",") + ") ";
            if (this.stateMutability && this.stateMutability !== "nonpayable") {
                result += this.stateMutability + " ";
            }
            return result.trim();
        }
        static from(value) {
            if (typeof (value) === "string") {
                return ConstructorFragment.fromString(value);
            }
            return ConstructorFragment.fromObject(value);
        }
        static fromObject(value) {
            if (ConstructorFragment.isConstructorFragment(value)) {
                return value;
            }
            if (value.type !== "constructor") {
                logger$p.throwArgumentError("invalid constructor object", "value", value);
            }
            let state = verifyState(value);
            if (state.constant) {
                logger$p.throwArgumentError("constructor cannot be constant", "value", value);
            }
            const params = {
                name: null,
                type: value.type,
                inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : []),
                payable: state.payable,
                stateMutability: state.stateMutability,
                gas: (value.gas ? BigNumber.from(value.gas) : null)
            };
            return new ConstructorFragment(_constructorGuard$2, params);
        }
        static fromString(value) {
            let params = { type: "constructor" };
            value = parseGas(value, params);
            let parens = value.match(regexParen);
            if (!parens || parens[1].trim() !== "constructor") {
                logger$p.throwArgumentError("invalid constructor string", "value", value);
            }
            params.inputs = parseParams(parens[2].trim(), false);
            parseModifiers(parens[3].trim(), params);
            return ConstructorFragment.fromObject(params);
        }
        static isConstructorFragment(value) {
            return (value && value._isFragment && value.type === "constructor");
        }
    }
    class FunctionFragment extends ConstructorFragment {
        format(format) {
            if (!format) {
                format = FormatTypes.sighash;
            }
            if (!FormatTypes[format]) {
                logger$p.throwArgumentError("invalid format type", "format", format);
            }
            if (format === FormatTypes.json) {
                return JSON.stringify({
                    type: "function",
                    name: this.name,
                    constant: this.constant,
                    stateMutability: ((this.stateMutability !== "nonpayable") ? this.stateMutability : undefined),
                    payable: this.payable,
                    gas: (this.gas ? this.gas.toNumber() : undefined),
                    inputs: this.inputs.map((input) => JSON.parse(input.format(format))),
                    outputs: this.outputs.map((output) => JSON.parse(output.format(format))),
                });
            }
            let result = "";
            if (format !== FormatTypes.sighash) {
                result += "function ";
            }
            result += this.name + "(" + this.inputs.map((input) => input.format(format)).join((format === FormatTypes.full) ? ", " : ",") + ") ";
            if (format !== FormatTypes.sighash) {
                if (this.stateMutability) {
                    if (this.stateMutability !== "nonpayable") {
                        result += (this.stateMutability + " ");
                    }
                }
                else if (this.constant) {
                    result += "view ";
                }
                if (this.outputs && this.outputs.length) {
                    result += "returns (" + this.outputs.map((output) => output.format(format)).join(", ") + ") ";
                }
                if (this.gas != null) {
                    result += "@" + this.gas.toString() + " ";
                }
            }
            return result.trim();
        }
        static from(value) {
            if (typeof (value) === "string") {
                return FunctionFragment.fromString(value);
            }
            return FunctionFragment.fromObject(value);
        }
        static fromObject(value) {
            if (FunctionFragment.isFunctionFragment(value)) {
                return value;
            }
            if (value.type !== "function") {
                logger$p.throwArgumentError("invalid function object", "value", value);
            }
            let state = verifyState(value);
            const params = {
                type: value.type,
                name: verifyIdentifier(value.name),
                constant: state.constant,
                inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : []),
                outputs: (value.outputs ? value.outputs.map(ParamType.fromObject) : []),
                payable: state.payable,
                stateMutability: state.stateMutability,
                gas: (value.gas ? BigNumber.from(value.gas) : null)
            };
            return new FunctionFragment(_constructorGuard$2, params);
        }
        static fromString(value) {
            let params = { type: "function" };
            value = parseGas(value, params);
            let comps = value.split(" returns ");
            if (comps.length > 2) {
                logger$p.throwArgumentError("invalid function string", "value", value);
            }
            let parens = comps[0].match(regexParen);
            if (!parens) {
                logger$p.throwArgumentError("invalid function signature", "value", value);
            }
            params.name = parens[1].trim();
            if (params.name) {
                verifyIdentifier(params.name);
            }
            params.inputs = parseParams(parens[2], false);
            parseModifiers(parens[3].trim(), params);
            // We have outputs
            if (comps.length > 1) {
                let returns = comps[1].match(regexParen);
                if (returns[1].trim() != "" || returns[3].trim() != "") {
                    logger$p.throwArgumentError("unexpected tokens", "value", value);
                }
                params.outputs = parseParams(returns[2], false);
            }
            else {
                params.outputs = [];
            }
            return FunctionFragment.fromObject(params);
        }
        static isFunctionFragment(value) {
            return (value && value._isFragment && value.type === "function");
        }
    }
    //export class StructFragment extends Fragment {
    //}
    function checkForbidden(fragment) {
        const sig = fragment.format();
        if (sig === "Error(string)" || sig === "Panic(uint256)") {
            logger$p.throwArgumentError(`cannot specify user defined ${sig} error`, "fragment", fragment);
        }
        return fragment;
    }
    class ErrorFragment extends Fragment {
        format(format) {
            if (!format) {
                format = FormatTypes.sighash;
            }
            if (!FormatTypes[format]) {
                logger$p.throwArgumentError("invalid format type", "format", format);
            }
            if (format === FormatTypes.json) {
                return JSON.stringify({
                    type: "error",
                    name: this.name,
                    inputs: this.inputs.map((input) => JSON.parse(input.format(format))),
                });
            }
            let result = "";
            if (format !== FormatTypes.sighash) {
                result += "error ";
            }
            result += this.name + "(" + this.inputs.map((input) => input.format(format)).join((format === FormatTypes.full) ? ", " : ",") + ") ";
            return result.trim();
        }
        static from(value) {
            if (typeof (value) === "string") {
                return ErrorFragment.fromString(value);
            }
            return ErrorFragment.fromObject(value);
        }
        static fromObject(value) {
            if (ErrorFragment.isErrorFragment(value)) {
                return value;
            }
            if (value.type !== "error") {
                logger$p.throwArgumentError("invalid error object", "value", value);
            }
            const params = {
                type: value.type,
                name: verifyIdentifier(value.name),
                inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : [])
            };
            return checkForbidden(new ErrorFragment(_constructorGuard$2, params));
        }
        static fromString(value) {
            let params = { type: "error" };
            let parens = value.match(regexParen);
            if (!parens) {
                logger$p.throwArgumentError("invalid error signature", "value", value);
            }
            params.name = parens[1].trim();
            if (params.name) {
                verifyIdentifier(params.name);
            }
            params.inputs = parseParams(parens[2], false);
            return checkForbidden(ErrorFragment.fromObject(params));
        }
        static isErrorFragment(value) {
            return (value && value._isFragment && value.type === "error");
        }
    }
    function verifyType(type) {
        // These need to be transformed to their full description
        if (type.match(/^uint($|[^1-9])/)) {
            type = "uint256" + type.substring(4);
        }
        else if (type.match(/^int($|[^1-9])/)) {
            type = "int256" + type.substring(3);
        }
        // @TODO: more verification
        return type;
    }
    // See: https://github.com/ethereum/solidity/blob/1f8f1a3db93a548d0555e3e14cfc55a10e25b60e/docs/grammar/SolidityLexer.g4#L234
    const regexIdentifier = new RegExp("^[a-zA-Z$_][a-zA-Z0-9$_]*$");
    function verifyIdentifier(value) {
        if (!value || !value.match(regexIdentifier)) {
            logger$p.throwArgumentError(`invalid identifier "${value}"`, "value", value);
        }
        return value;
    }
    const regexParen = new RegExp("^([^)(]*)\\((.*)\\)([^)(]*)$");
    function splitNesting(value) {
        value = value.trim();
        let result = [];
        let accum = "";
        let depth = 0;
        for (let offset = 0; offset < value.length; offset++) {
            let c = value[offset];
            if (c === "," && depth === 0) {
                result.push(accum);
                accum = "";
            }
            else {
                accum += c;
                if (c === "(") {
                    depth++;
                }
                else if (c === ")") {
                    depth--;
                    if (depth === -1) {
                        logger$p.throwArgumentError("unbalanced parenthesis", "value", value);
                    }
                }
            }
        }
        if (accum) {
            result.push(accum);
        }
        return result;
    }

    const logger$o = new Logger(version$g);
    function checkResultErrors(result) {
        // Find the first error (if any)
        const errors = [];
        const checkErrors = function (path, object) {
            if (!Array.isArray(object)) {
                return;
            }
            for (let key in object) {
                const childPath = path.slice();
                childPath.push(key);
                try {
                    checkErrors(childPath, object[key]);
                }
                catch (error) {
                    errors.push({ path: childPath, error: error });
                }
            }
        };
        checkErrors([], result);
        return errors;
    }
    class Coder {
        constructor(name, type, localName, dynamic) {
            // @TODO: defineReadOnly these
            this.name = name;
            this.type = type;
            this.localName = localName;
            this.dynamic = dynamic;
        }
        _throwError(message, value) {
            logger$o.throwArgumentError(message, this.localName, value);
        }
    }
    class Writer {
        constructor(wordSize) {
            defineReadOnly(this, "wordSize", wordSize || 32);
            this._data = [];
            this._dataLength = 0;
            this._padding = new Uint8Array(wordSize);
        }
        get data() {
            return hexConcat(this._data);
        }
        get length() { return this._dataLength; }
        _writeData(data) {
            this._data.push(data);
            this._dataLength += data.length;
            return data.length;
        }
        appendWriter(writer) {
            return this._writeData(concat(writer._data));
        }
        // Arrayish items; padded on the right to wordSize
        writeBytes(value) {
            let bytes = arrayify(value);
            const paddingOffset = bytes.length % this.wordSize;
            if (paddingOffset) {
                bytes = concat([bytes, this._padding.slice(paddingOffset)]);
            }
            return this._writeData(bytes);
        }
        _getValue(value) {
            let bytes = arrayify(BigNumber.from(value));
            if (bytes.length > this.wordSize) {
                logger$o.throwError("value out-of-bounds", Logger.errors.BUFFER_OVERRUN, {
                    length: this.wordSize,
                    offset: bytes.length
                });
            }
            if (bytes.length % this.wordSize) {
                bytes = concat([this._padding.slice(bytes.length % this.wordSize), bytes]);
            }
            return bytes;
        }
        // BigNumberish items; padded on the left to wordSize
        writeValue(value) {
            return this._writeData(this._getValue(value));
        }
        writeUpdatableValue() {
            const offset = this._data.length;
            this._data.push(this._padding);
            this._dataLength += this.wordSize;
            return (value) => {
                this._data[offset] = this._getValue(value);
            };
        }
    }
    class Reader {
        constructor(data, wordSize, coerceFunc, allowLoose) {
            defineReadOnly(this, "_data", arrayify(data));
            defineReadOnly(this, "wordSize", wordSize || 32);
            defineReadOnly(this, "_coerceFunc", coerceFunc);
            defineReadOnly(this, "allowLoose", allowLoose);
            this._offset = 0;
        }
        get data() { return hexlify(this._data); }
        get consumed() { return this._offset; }
        // The default Coerce function
        static coerce(name, value) {
            let match = name.match("^u?int([0-9]+)$");
            if (match && parseInt(match[1]) <= 48) {
                value = value.toNumber();
            }
            return value;
        }
        coerce(name, value) {
            if (this._coerceFunc) {
                return this._coerceFunc(name, value);
            }
            return Reader.coerce(name, value);
        }
        _peekBytes(offset, length, loose) {
            let alignedLength = Math.ceil(length / this.wordSize) * this.wordSize;
            if (this._offset + alignedLength > this._data.length) {
                if (this.allowLoose && loose && this._offset + length <= this._data.length) {
                    alignedLength = length;
                }
                else {
                    logger$o.throwError("data out-of-bounds", Logger.errors.BUFFER_OVERRUN, {
                        length: this._data.length,
                        offset: this._offset + alignedLength
                    });
                }
            }
            return this._data.slice(this._offset, this._offset + alignedLength);
        }
        subReader(offset) {
            return new Reader(this._data.slice(this._offset + offset), this.wordSize, this._coerceFunc, this.allowLoose);
        }
        readBytes(length, loose) {
            let bytes = this._peekBytes(0, length, !!loose);
            this._offset += bytes.length;
            // @TODO: Make sure the length..end bytes are all 0?
            return bytes.slice(0, length);
        }
        readValue() {
            return BigNumber.from(this.readBytes(this.wordSize));
        }
    }

    class AddressCoder extends Coder {
        constructor(localName) {
            super("address", "address", localName, false);
        }
        defaultValue() {
            return "0x0000000000000000000000000000000000000000";
        }
        encode(writer, value) {
            try {
                value = getAddress(value);
            }
            catch (error) {
                this._throwError(error.message, value);
            }
            return writer.writeValue(value);
        }
        decode(reader) {
            return getAddress(hexZeroPad(reader.readValue().toHexString(), 20));
        }
    }

    // Clones the functionality of an existing Coder, but without a localName
    class AnonymousCoder extends Coder {
        constructor(coder) {
            super(coder.name, coder.type, undefined, coder.dynamic);
            this.coder = coder;
        }
        defaultValue() {
            return this.coder.defaultValue();
        }
        encode(writer, value) {
            return this.coder.encode(writer, value);
        }
        decode(reader) {
            return this.coder.decode(reader);
        }
    }

    const logger$n = new Logger(version$g);
    function pack(writer, coders, values) {
        let arrayValues = null;
        if (Array.isArray(values)) {
            arrayValues = values;
        }
        else if (values && typeof (values) === "object") {
            let unique = {};
            arrayValues = coders.map((coder) => {
                const name = coder.localName;
                if (!name) {
                    logger$n.throwError("cannot encode object for signature with missing names", Logger.errors.INVALID_ARGUMENT, {
                        argument: "values",
                        coder: coder,
                        value: values
                    });
                }
                if (unique[name]) {
                    logger$n.throwError("cannot encode object for signature with duplicate names", Logger.errors.INVALID_ARGUMENT, {
                        argument: "values",
                        coder: coder,
                        value: values
                    });
                }
                unique[name] = true;
                return values[name];
            });
        }
        else {
            logger$n.throwArgumentError("invalid tuple value", "tuple", values);
        }
        if (coders.length !== arrayValues.length) {
            logger$n.throwArgumentError("types/value length mismatch", "tuple", values);
        }
        let staticWriter = new Writer(writer.wordSize);
        let dynamicWriter = new Writer(writer.wordSize);
        let updateFuncs = [];
        coders.forEach((coder, index) => {
            let value = arrayValues[index];
            if (coder.dynamic) {
                // Get current dynamic offset (for the future pointer)
                let dynamicOffset = dynamicWriter.length;
                // Encode the dynamic value into the dynamicWriter
                coder.encode(dynamicWriter, value);
                // Prepare to populate the correct offset once we are done
                let updateFunc = staticWriter.writeUpdatableValue();
                updateFuncs.push((baseOffset) => {
                    updateFunc(baseOffset + dynamicOffset);
                });
            }
            else {
                coder.encode(staticWriter, value);
            }
        });
        // Backfill all the dynamic offsets, now that we know the static length
        updateFuncs.forEach((func) => { func(staticWriter.length); });
        let length = writer.appendWriter(staticWriter);
        length += writer.appendWriter(dynamicWriter);
        return length;
    }
    function unpack(reader, coders) {
        let values = [];
        // A reader anchored to this base
        let baseReader = reader.subReader(0);
        coders.forEach((coder) => {
            let value = null;
            if (coder.dynamic) {
                let offset = reader.readValue();
                let offsetReader = baseReader.subReader(offset.toNumber());
                try {
                    value = coder.decode(offsetReader);
                }
                catch (error) {
                    // Cannot recover from this
                    if (error.code === Logger.errors.BUFFER_OVERRUN) {
                        throw error;
                    }
                    value = error;
                    value.baseType = coder.name;
                    value.name = coder.localName;
                    value.type = coder.type;
                }
            }
            else {
                try {
                    value = coder.decode(reader);
                }
                catch (error) {
                    // Cannot recover from this
                    if (error.code === Logger.errors.BUFFER_OVERRUN) {
                        throw error;
                    }
                    value = error;
                    value.baseType = coder.name;
                    value.name = coder.localName;
                    value.type = coder.type;
                }
            }
            if (value != undefined) {
                values.push(value);
            }
        });
        // We only output named properties for uniquely named coders
        const uniqueNames = coders.reduce((accum, coder) => {
            const name = coder.localName;
            if (name) {
                if (!accum[name]) {
                    accum[name] = 0;
                }
                accum[name]++;
            }
            return accum;
        }, {});
        // Add any named parameters (i.e. tuples)
        coders.forEach((coder, index) => {
            let name = coder.localName;
            if (!name || uniqueNames[name] !== 1) {
                return;
            }
            if (name === "length") {
                name = "_length";
            }
            if (values[name] != null) {
                return;
            }
            const value = values[index];
            if (value instanceof Error) {
                Object.defineProperty(values, name, {
                    enumerable: true,
                    get: () => { throw value; }
                });
            }
            else {
                values[name] = value;
            }
        });
        for (let i = 0; i < values.length; i++) {
            const value = values[i];
            if (value instanceof Error) {
                Object.defineProperty(values, i, {
                    enumerable: true,
                    get: () => { throw value; }
                });
            }
        }
        return Object.freeze(values);
    }
    class ArrayCoder extends Coder {
        constructor(coder, length, localName) {
            const type = (coder.type + "[" + (length >= 0 ? length : "") + "]");
            const dynamic = (length === -1 || coder.dynamic);
            super("array", type, localName, dynamic);
            this.coder = coder;
            this.length = length;
        }
        defaultValue() {
            // Verifies the child coder is valid (even if the array is dynamic or 0-length)
            const defaultChild = this.coder.defaultValue();
            const result = [];
            for (let i = 0; i < this.length; i++) {
                result.push(defaultChild);
            }
            return result;
        }
        encode(writer, value) {
            if (!Array.isArray(value)) {
                this._throwError("expected array value", value);
            }
            let count = this.length;
            if (count === -1) {
                count = value.length;
                writer.writeValue(value.length);
            }
            logger$n.checkArgumentCount(value.length, count, "coder array" + (this.localName ? (" " + this.localName) : ""));
            let coders = [];
            for (let i = 0; i < value.length; i++) {
                coders.push(this.coder);
            }
            return pack(writer, coders, value);
        }
        decode(reader) {
            let count = this.length;
            if (count === -1) {
                count = reader.readValue().toNumber();
                // Check that there is *roughly* enough data to ensure
                // stray random data is not being read as a length. Each
                // slot requires at least 32 bytes for their value (or 32
                // bytes as a link to the data). This could use a much
                // tighter bound, but we are erroring on the side of safety.
                if (count * 32 > reader._data.length) {
                    logger$n.throwError("insufficient data length", Logger.errors.BUFFER_OVERRUN, {
                        length: reader._data.length,
                        count: count
                    });
                }
            }
            let coders = [];
            for (let i = 0; i < count; i++) {
                coders.push(new AnonymousCoder(this.coder));
            }
            return reader.coerce(this.name, unpack(reader, coders));
        }
    }

    class BooleanCoder extends Coder {
        constructor(localName) {
            super("bool", "bool", localName, false);
        }
        defaultValue() {
            return false;
        }
        encode(writer, value) {
            return writer.writeValue(value ? 1 : 0);
        }
        decode(reader) {
            return reader.coerce(this.type, !reader.readValue().isZero());
        }
    }

    class DynamicBytesCoder extends Coder {
        constructor(type, localName) {
            super(type, type, localName, true);
        }
        defaultValue() {
            return "0x";
        }
        encode(writer, value) {
            value = arrayify(value);
            let length = writer.writeValue(value.length);
            length += writer.writeBytes(value);
            return length;
        }
        decode(reader) {
            return reader.readBytes(reader.readValue().toNumber(), true);
        }
    }
    class BytesCoder extends DynamicBytesCoder {
        constructor(localName) {
            super("bytes", localName);
        }
        decode(reader) {
            return reader.coerce(this.name, hexlify(super.decode(reader)));
        }
    }

    // @TODO: Merge this with bytes
    class FixedBytesCoder extends Coder {
        constructor(size, localName) {
            let name = "bytes" + String(size);
            super(name, name, localName, false);
            this.size = size;
        }
        defaultValue() {
            return ("0x0000000000000000000000000000000000000000000000000000000000000000").substring(0, 2 + this.size * 2);
        }
        encode(writer, value) {
            let data = arrayify(value);
            if (data.length !== this.size) {
                this._throwError("incorrect data length", value);
            }
            return writer.writeBytes(data);
        }
        decode(reader) {
            return reader.coerce(this.name, hexlify(reader.readBytes(this.size)));
        }
    }

    class NullCoder extends Coder {
        constructor(localName) {
            super("null", "", localName, false);
        }
        defaultValue() {
            return null;
        }
        encode(writer, value) {
            if (value != null) {
                this._throwError("not null", value);
            }
            return writer.writeBytes([]);
        }
        decode(reader) {
            reader.readBytes(0);
            return reader.coerce(this.name, null);
        }
    }

    const AddressZero = "0x0000000000000000000000000000000000000000";

    const NegativeOne$1 = ( /*#__PURE__*/BigNumber.from(-1));
    const Zero$1 = ( /*#__PURE__*/BigNumber.from(0));
    const One$1 = ( /*#__PURE__*/BigNumber.from(1));
    const MaxUint256$1 = ( /*#__PURE__*/BigNumber.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"));

    const HashZero = "0x0000000000000000000000000000000000000000000000000000000000000000";

    class NumberCoder extends Coder {
        constructor(size, signed, localName) {
            const name = ((signed ? "int" : "uint") + (size * 8));
            super(name, name, localName, false);
            this.size = size;
            this.signed = signed;
        }
        defaultValue() {
            return 0;
        }
        encode(writer, value) {
            let v = BigNumber.from(value);
            // Check bounds are safe for encoding
            let maxUintValue = MaxUint256$1.mask(writer.wordSize * 8);
            if (this.signed) {
                let bounds = maxUintValue.mask(this.size * 8 - 1);
                if (v.gt(bounds) || v.lt(bounds.add(One$1).mul(NegativeOne$1))) {
                    this._throwError("value out-of-bounds", value);
                }
            }
            else if (v.lt(Zero$1) || v.gt(maxUintValue.mask(this.size * 8))) {
                this._throwError("value out-of-bounds", value);
            }
            v = v.toTwos(this.size * 8).mask(this.size * 8);
            if (this.signed) {
                v = v.fromTwos(this.size * 8).toTwos(8 * writer.wordSize);
            }
            return writer.writeValue(v);
        }
        decode(reader) {
            let value = reader.readValue().mask(this.size * 8);
            if (this.signed) {
                value = value.fromTwos(this.size * 8);
            }
            return reader.coerce(this.name, value);
        }
    }

    const version$f = "strings/5.7.0";

    const logger$m = new Logger(version$f);
    ///////////////////////////////
    var UnicodeNormalizationForm;
    (function (UnicodeNormalizationForm) {
        UnicodeNormalizationForm["current"] = "";
        UnicodeNormalizationForm["NFC"] = "NFC";
        UnicodeNormalizationForm["NFD"] = "NFD";
        UnicodeNormalizationForm["NFKC"] = "NFKC";
        UnicodeNormalizationForm["NFKD"] = "NFKD";
    })(UnicodeNormalizationForm || (UnicodeNormalizationForm = {}));
    var Utf8ErrorReason;
    (function (Utf8ErrorReason) {
        // A continuation byte was present where there was nothing to continue
        // - offset = the index the codepoint began in
        Utf8ErrorReason["UNEXPECTED_CONTINUE"] = "unexpected continuation byte";
        // An invalid (non-continuation) byte to start a UTF-8 codepoint was found
        // - offset = the index the codepoint began in
        Utf8ErrorReason["BAD_PREFIX"] = "bad codepoint prefix";
        // The string is too short to process the expected codepoint
        // - offset = the index the codepoint began in
        Utf8ErrorReason["OVERRUN"] = "string overrun";
        // A missing continuation byte was expected but not found
        // - offset = the index the continuation byte was expected at
        Utf8ErrorReason["MISSING_CONTINUE"] = "missing continuation byte";
        // The computed code point is outside the range for UTF-8
        // - offset       = start of this codepoint
        // - badCodepoint = the computed codepoint; outside the UTF-8 range
        Utf8ErrorReason["OUT_OF_RANGE"] = "out of UTF-8 range";
        // UTF-8 strings may not contain UTF-16 surrogate pairs
        // - offset       = start of this codepoint
        // - badCodepoint = the computed codepoint; inside the UTF-16 surrogate range
        Utf8ErrorReason["UTF16_SURROGATE"] = "UTF-16 surrogate";
        // The string is an overlong representation
        // - offset       = start of this codepoint
        // - badCodepoint = the computed codepoint; already bounds checked
        Utf8ErrorReason["OVERLONG"] = "overlong representation";
    })(Utf8ErrorReason || (Utf8ErrorReason = {}));
    function errorFunc(reason, offset, bytes, output, badCodepoint) {
        return logger$m.throwArgumentError(`invalid codepoint at offset ${offset}; ${reason}`, "bytes", bytes);
    }
    function ignoreFunc(reason, offset, bytes, output, badCodepoint) {
        // If there is an invalid prefix (including stray continuation), skip any additional continuation bytes
        if (reason === Utf8ErrorReason.BAD_PREFIX || reason === Utf8ErrorReason.UNEXPECTED_CONTINUE) {
            let i = 0;
            for (let o = offset + 1; o < bytes.length; o++) {
                if (bytes[o] >> 6 !== 0x02) {
                    break;
                }
                i++;
            }
            return i;
        }
        // This byte runs us past the end of the string, so just jump to the end
        // (but the first byte was read already read and therefore skipped)
        if (reason === Utf8ErrorReason.OVERRUN) {
            return bytes.length - offset - 1;
        }
        // Nothing to skip
        return 0;
    }
    function replaceFunc(reason, offset, bytes, output, badCodepoint) {
        // Overlong representations are otherwise "valid" code points; just non-deistingtished
        if (reason === Utf8ErrorReason.OVERLONG) {
            output.push(badCodepoint);
            return 0;
        }
        // Put the replacement character into the output
        output.push(0xfffd);
        // Otherwise, process as if ignoring errors
        return ignoreFunc(reason, offset, bytes);
    }
    // Common error handing strategies
    const Utf8ErrorFuncs = Object.freeze({
        error: errorFunc,
        ignore: ignoreFunc,
        replace: replaceFunc
    });
    // http://stackoverflow.com/questions/13356493/decode-utf-8-with-javascript#13691499
    function getUtf8CodePoints(bytes, onError) {
        if (onError == null) {
            onError = Utf8ErrorFuncs.error;
        }
        bytes = arrayify(bytes);
        const result = [];
        let i = 0;
        // Invalid bytes are ignored
        while (i < bytes.length) {
            const c = bytes[i++];
            // 0xxx xxxx
            if (c >> 7 === 0) {
                result.push(c);
                continue;
            }
            // Multibyte; how many bytes left for this character?
            let extraLength = null;
            let overlongMask = null;
            // 110x xxxx 10xx xxxx
            if ((c & 0xe0) === 0xc0) {
                extraLength = 1;
                overlongMask = 0x7f;
                // 1110 xxxx 10xx xxxx 10xx xxxx
            }
            else if ((c & 0xf0) === 0xe0) {
                extraLength = 2;
                overlongMask = 0x7ff;
                // 1111 0xxx 10xx xxxx 10xx xxxx 10xx xxxx
            }
            else if ((c & 0xf8) === 0xf0) {
                extraLength = 3;
                overlongMask = 0xffff;
            }
            else {
                if ((c & 0xc0) === 0x80) {
                    i += onError(Utf8ErrorReason.UNEXPECTED_CONTINUE, i - 1, bytes, result);
                }
                else {
                    i += onError(Utf8ErrorReason.BAD_PREFIX, i - 1, bytes, result);
                }
                continue;
            }
            // Do we have enough bytes in our data?
            if (i - 1 + extraLength >= bytes.length) {
                i += onError(Utf8ErrorReason.OVERRUN, i - 1, bytes, result);
                continue;
            }
            // Remove the length prefix from the char
            let res = c & ((1 << (8 - extraLength - 1)) - 1);
            for (let j = 0; j < extraLength; j++) {
                let nextChar = bytes[i];
                // Invalid continuation byte
                if ((nextChar & 0xc0) != 0x80) {
                    i += onError(Utf8ErrorReason.MISSING_CONTINUE, i, bytes, result);
                    res = null;
                    break;
                }
                res = (res << 6) | (nextChar & 0x3f);
                i++;
            }
            // See above loop for invalid continuation byte
            if (res === null) {
                continue;
            }
            // Maximum code point
            if (res > 0x10ffff) {
                i += onError(Utf8ErrorReason.OUT_OF_RANGE, i - 1 - extraLength, bytes, result, res);
                continue;
            }
            // Reserved for UTF-16 surrogate halves
            if (res >= 0xd800 && res <= 0xdfff) {
                i += onError(Utf8ErrorReason.UTF16_SURROGATE, i - 1 - extraLength, bytes, result, res);
                continue;
            }
            // Check for overlong sequences (more bytes than needed)
            if (res <= overlongMask) {
                i += onError(Utf8ErrorReason.OVERLONG, i - 1 - extraLength, bytes, result, res);
                continue;
            }
            result.push(res);
        }
        return result;
    }
    // http://stackoverflow.com/questions/18729405/how-to-convert-utf8-string-to-byte-array
    function toUtf8Bytes(str, form = UnicodeNormalizationForm.current) {
        if (form != UnicodeNormalizationForm.current) {
            logger$m.checkNormalize();
            str = str.normalize(form);
        }
        let result = [];
        for (let i = 0; i < str.length; i++) {
            const c = str.charCodeAt(i);
            if (c < 0x80) {
                result.push(c);
            }
            else if (c < 0x800) {
                result.push((c >> 6) | 0xc0);
                result.push((c & 0x3f) | 0x80);
            }
            else if ((c & 0xfc00) == 0xd800) {
                i++;
                const c2 = str.charCodeAt(i);
                if (i >= str.length || (c2 & 0xfc00) !== 0xdc00) {
                    throw new Error("invalid utf-8 string");
                }
                // Surrogate Pair
                const pair = 0x10000 + ((c & 0x03ff) << 10) + (c2 & 0x03ff);
                result.push((pair >> 18) | 0xf0);
                result.push(((pair >> 12) & 0x3f) | 0x80);
                result.push(((pair >> 6) & 0x3f) | 0x80);
                result.push((pair & 0x3f) | 0x80);
            }
            else {
                result.push((c >> 12) | 0xe0);
                result.push(((c >> 6) & 0x3f) | 0x80);
                result.push((c & 0x3f) | 0x80);
            }
        }
        return arrayify(result);
    }
    function _toUtf8String(codePoints) {
        return codePoints.map((codePoint) => {
            if (codePoint <= 0xffff) {
                return String.fromCharCode(codePoint);
            }
            codePoint -= 0x10000;
            return String.fromCharCode((((codePoint >> 10) & 0x3ff) + 0xd800), ((codePoint & 0x3ff) + 0xdc00));
        }).join("");
    }
    function toUtf8String(bytes, onError) {
        return _toUtf8String(getUtf8CodePoints(bytes, onError));
    }
    function toUtf8CodePoints(str, form = UnicodeNormalizationForm.current) {
        return getUtf8CodePoints(toUtf8Bytes(str, form));
    }

    class StringCoder extends DynamicBytesCoder {
        constructor(localName) {
            super("string", localName);
        }
        defaultValue() {
            return "";
        }
        encode(writer, value) {
            return super.encode(writer, toUtf8Bytes(value));
        }
        decode(reader) {
            return toUtf8String(super.decode(reader));
        }
    }

    class TupleCoder extends Coder {
        constructor(coders, localName) {
            let dynamic = false;
            const types = [];
            coders.forEach((coder) => {
                if (coder.dynamic) {
                    dynamic = true;
                }
                types.push(coder.type);
            });
            const type = ("tuple(" + types.join(",") + ")");
            super("tuple", type, localName, dynamic);
            this.coders = coders;
        }
        defaultValue() {
            const values = [];
            this.coders.forEach((coder) => {
                values.push(coder.defaultValue());
            });
            // We only output named properties for uniquely named coders
            const uniqueNames = this.coders.reduce((accum, coder) => {
                const name = coder.localName;
                if (name) {
                    if (!accum[name]) {
                        accum[name] = 0;
                    }
                    accum[name]++;
                }
                return accum;
            }, {});
            // Add named values
            this.coders.forEach((coder, index) => {
                let name = coder.localName;
                if (!name || uniqueNames[name] !== 1) {
                    return;
                }
                if (name === "length") {
                    name = "_length";
                }
                if (values[name] != null) {
                    return;
                }
                values[name] = values[index];
            });
            return Object.freeze(values);
        }
        encode(writer, value) {
            return pack(writer, this.coders, value);
        }
        decode(reader) {
            return reader.coerce(this.name, unpack(reader, this.coders));
        }
    }

    const logger$l = new Logger(version$g);
    const paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);
    const paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);
    class AbiCoder {
        constructor(coerceFunc) {
            defineReadOnly(this, "coerceFunc", coerceFunc || null);
        }
        _getCoder(param) {
            switch (param.baseType) {
                case "address":
                    return new AddressCoder(param.name);
                case "bool":
                    return new BooleanCoder(param.name);
                case "string":
                    return new StringCoder(param.name);
                case "bytes":
                    return new BytesCoder(param.name);
                case "array":
                    return new ArrayCoder(this._getCoder(param.arrayChildren), param.arrayLength, param.name);
                case "tuple":
                    return new TupleCoder((param.components || []).map((component) => {
                        return this._getCoder(component);
                    }), param.name);
                case "":
                    return new NullCoder(param.name);
            }
            // u?int[0-9]*
            let match = param.type.match(paramTypeNumber);
            if (match) {
                let size = parseInt(match[2] || "256");
                if (size === 0 || size > 256 || (size % 8) !== 0) {
                    logger$l.throwArgumentError("invalid " + match[1] + " bit length", "param", param);
                }
                return new NumberCoder(size / 8, (match[1] === "int"), param.name);
            }
            // bytes[0-9]+
            match = param.type.match(paramTypeBytes);
            if (match) {
                let size = parseInt(match[1]);
                if (size === 0 || size > 32) {
                    logger$l.throwArgumentError("invalid bytes length", "param", param);
                }
                return new FixedBytesCoder(size, param.name);
            }
            return logger$l.throwArgumentError("invalid type", "type", param.type);
        }
        _getWordSize() { return 32; }
        _getReader(data, allowLoose) {
            return new Reader(data, this._getWordSize(), this.coerceFunc, allowLoose);
        }
        _getWriter() {
            return new Writer(this._getWordSize());
        }
        getDefaultValue(types) {
            const coders = types.map((type) => this._getCoder(ParamType.from(type)));
            const coder = new TupleCoder(coders, "_");
            return coder.defaultValue();
        }
        encode(types, values) {
            if (types.length !== values.length) {
                logger$l.throwError("types/values length mismatch", Logger.errors.INVALID_ARGUMENT, {
                    count: { types: types.length, values: values.length },
                    value: { types: types, values: values }
                });
            }
            const coders = types.map((type) => this._getCoder(ParamType.from(type)));
            const coder = (new TupleCoder(coders, "_"));
            const writer = this._getWriter();
            coder.encode(writer, values);
            return writer.data;
        }
        decode(types, data, loose) {
            const coders = types.map((type) => this._getCoder(ParamType.from(type)));
            const coder = new TupleCoder(coders, "_");
            return coder.decode(this._getReader(arrayify(data), loose));
        }
    }
    const defaultAbiCoder = new AbiCoder();

    function id(text) {
        return keccak256(toUtf8Bytes(text));
    }

    const version$e = "hash/5.7.0";

    function decode$2(textData) {
        textData = atob(textData);
        const data = [];
        for (let i = 0; i < textData.length; i++) {
            data.push(textData.charCodeAt(i));
        }
        return arrayify(data);
    }
    function encode$1(data) {
        data = arrayify(data);
        let textData = "";
        for (let i = 0; i < data.length; i++) {
            textData += String.fromCharCode(data[i]);
        }
        return btoa(textData);
    }

    /**
     * MIT License
     *
     * Copyright (c) 2021 Andrew Raffensperger
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in all
     * copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
     * SOFTWARE.
     *
     * This is a near carbon-copy of the original source (link below) with the
     * TypeScript typings added and a few tweaks to make it ES3-compatible.
     *
     * See: https://github.com/adraffy/ens-normalize.js
     */
    // https://github.com/behnammodi/polyfill/blob/master/array.polyfill.js
    function flat(array, depth) {
        if (depth == null) {
            depth = 1;
        }
        const result = [];
        const forEach = result.forEach;
        const flatDeep = function (arr, depth) {
            forEach.call(arr, function (val) {
                if (depth > 0 && Array.isArray(val)) {
                    flatDeep(val, depth - 1);
                }
                else {
                    result.push(val);
                }
            });
        };
        flatDeep(array, depth);
        return result;
    }
    function fromEntries(array) {
        const result = {};
        for (let i = 0; i < array.length; i++) {
            const value = array[i];
            result[value[0]] = value[1];
        }
        return result;
    }
    function decode_arithmetic(bytes) {
        let pos = 0;
        function u16() { return (bytes[pos++] << 8) | bytes[pos++]; }
        // decode the frequency table
        let symbol_count = u16();
        let total = 1;
        let acc = [0, 1]; // first symbol has frequency 1
        for (let i = 1; i < symbol_count; i++) {
            acc.push(total += u16());
        }
        // skip the sized-payload that the last 3 symbols index into
        let skip = u16();
        let pos_payload = pos;
        pos += skip;
        let read_width = 0;
        let read_buffer = 0;
        function read_bit() {
            if (read_width == 0) {
                // this will read beyond end of buffer
                // but (undefined|0) => zero pad
                read_buffer = (read_buffer << 8) | bytes[pos++];
                read_width = 8;
            }
            return (read_buffer >> --read_width) & 1;
        }
        const N = 31;
        const FULL = Math.pow(2, N);
        const HALF = FULL >>> 1;
        const QRTR = HALF >> 1;
        const MASK = FULL - 1;
        // fill register
        let register = 0;
        for (let i = 0; i < N; i++)
            register = (register << 1) | read_bit();
        let symbols = [];
        let low = 0;
        let range = FULL; // treat like a float
        while (true) {
            let value = Math.floor((((register - low + 1) * total) - 1) / range);
            let start = 0;
            let end = symbol_count;
            while (end - start > 1) { // binary search
                let mid = (start + end) >>> 1;
                if (value < acc[mid]) {
                    end = mid;
                }
                else {
                    start = mid;
                }
            }
            if (start == 0)
                break; // first symbol is end mark
            symbols.push(start);
            let a = low + Math.floor(range * acc[start] / total);
            let b = low + Math.floor(range * acc[start + 1] / total) - 1;
            while (((a ^ b) & HALF) == 0) {
                register = (register << 1) & MASK | read_bit();
                a = (a << 1) & MASK;
                b = (b << 1) & MASK | 1;
            }
            while (a & ~b & QRTR) {
                register = (register & HALF) | ((register << 1) & (MASK >>> 1)) | read_bit();
                a = (a << 1) ^ HALF;
                b = ((b ^ HALF) << 1) | HALF | 1;
            }
            low = a;
            range = 1 + b - a;
        }
        let offset = symbol_count - 4;
        return symbols.map(x => {
            switch (x - offset) {
                case 3: return offset + 0x10100 + ((bytes[pos_payload++] << 16) | (bytes[pos_payload++] << 8) | bytes[pos_payload++]);
                case 2: return offset + 0x100 + ((bytes[pos_payload++] << 8) | bytes[pos_payload++]);
                case 1: return offset + bytes[pos_payload++];
                default: return x - 1;
            }
        });
    }
    // returns an iterator which returns the next symbol
    function read_payload(v) {
        let pos = 0;
        return () => v[pos++];
    }
    function read_compressed_payload(bytes) {
        return read_payload(decode_arithmetic(bytes));
    }
    // eg. [0,1,2,3...] => [0,-1,1,-2,...]
    function signed(i) {
        return (i & 1) ? (~i >> 1) : (i >> 1);
    }
    function read_counts(n, next) {
        let v = Array(n);
        for (let i = 0; i < n; i++)
            v[i] = 1 + next();
        return v;
    }
    function read_ascending(n, next) {
        let v = Array(n);
        for (let i = 0, x = -1; i < n; i++)
            v[i] = x += 1 + next();
        return v;
    }
    function read_deltas(n, next) {
        let v = Array(n);
        for (let i = 0, x = 0; i < n; i++)
            v[i] = x += signed(next());
        return v;
    }
    function read_member_array(next, lookup) {
        let v = read_ascending(next(), next);
        let n = next();
        let vX = read_ascending(n, next);
        let vN = read_counts(n, next);
        for (let i = 0; i < n; i++) {
            for (let j = 0; j < vN[i]; j++) {
                v.push(vX[i] + j);
            }
        }
        return lookup ? v.map(x => lookup[x]) : v;
    }
    // returns array of 
    // [x, ys] => single replacement rule
    // [x, ys, n, dx, dx] => linear map
    function read_mapped_map(next) {
        let ret = [];
        while (true) {
            let w = next();
            if (w == 0)
                break;
            ret.push(read_linear_table(w, next));
        }
        while (true) {
            let w = next() - 1;
            if (w < 0)
                break;
            ret.push(read_replacement_table(w, next));
        }
        return fromEntries(flat(ret));
    }
    function read_zero_terminated_array(next) {
        let v = [];
        while (true) {
            let i = next();
            if (i == 0)
                break;
            v.push(i);
        }
        return v;
    }
    function read_transposed(n, w, next) {
        let m = Array(n).fill(undefined).map(() => []);
        for (let i = 0; i < w; i++) {
            read_deltas(n, next).forEach((x, j) => m[j].push(x));
        }
        return m;
    }
    function read_linear_table(w, next) {
        let dx = 1 + next();
        let dy = next();
        let vN = read_zero_terminated_array(next);
        let m = read_transposed(vN.length, 1 + w, next);
        return flat(m.map((v, i) => {
            const x = v[0], ys = v.slice(1);
            //let [x, ...ys] = v;
            //return Array(vN[i]).fill().map((_, j) => {
            return Array(vN[i]).fill(undefined).map((_, j) => {
                let j_dy = j * dy;
                return [x + j * dx, ys.map(y => y + j_dy)];
            });
        }));
    }
    function read_replacement_table(w, next) {
        let n = 1 + next();
        let m = read_transposed(n, 1 + w, next);
        return m.map(v => [v[0], v.slice(1)]);
    }
    function read_emoji_trie(next) {
        let sorted = read_member_array(next).sort((a, b) => a - b);
        return read();
        function read() {
            let branches = [];
            while (true) {
                let keys = read_member_array(next, sorted);
                if (keys.length == 0)
                    break;
                branches.push({ set: new Set(keys), node: read() });
            }
            branches.sort((a, b) => b.set.size - a.set.size); // sort by likelihood
            let temp = next();
            let valid = temp % 3;
            temp = (temp / 3) | 0;
            let fe0f = !!(temp & 1);
            temp >>= 1;
            let save = temp == 1;
            let check = temp == 2;
            return { branches, valid, fe0f, save, check };
        }
    }

    /**
     * MIT License
     *
     * Copyright (c) 2021 Andrew Raffensperger
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in all
     * copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
     * SOFTWARE.
     *
     * This is a near carbon-copy of the original source (link below) with the
     * TypeScript typings added and a few tweaks to make it ES3-compatible.
     *
     * See: https://github.com/adraffy/ens-normalize.js
     */
    function getData() {
        return read_compressed_payload(decode$2(''));
    }

    /**
     * MIT License
     *
     * Copyright (c) 2021 Andrew Raffensperger
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in all
     * copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
     * SOFTWARE.
     *
     * This is a near carbon-copy of the original source (link below) with the
     * TypeScript typings added and a few tweaks to make it ES3-compatible.
     *
     * See: https://github.com/adraffy/ens-normalize.js
     */
    const r$1 = getData();
    // @TODO: This should be lazily loaded
    const VALID = new Set(read_member_array(r$1));
    const IGNORED = new Set(read_member_array(r$1));
    const MAPPED = read_mapped_map(r$1);
    const EMOJI_ROOT = read_emoji_trie(r$1);
    //const NFC_CHECK = new Set(read_member_array(r, Array.from(VALID.values()).sort((a, b) => a - b)));
    //const STOP = 0x2E;
    const HYPHEN = 0x2D;
    const UNDERSCORE = 0x5F;
    function explode_cp(name) {
        return toUtf8CodePoints(name);
    }
    function filter_fe0f(cps) {
        return cps.filter(cp => cp != 0xFE0F);
    }
    function ens_normalize_post_check(name) {
        for (let label of name.split('.')) {
            let cps = explode_cp(label);
            try {
                for (let i = cps.lastIndexOf(UNDERSCORE) - 1; i >= 0; i--) {
                    if (cps[i] !== UNDERSCORE) {
                        throw new Error(`underscore only allowed at start`);
                    }
                }
                if (cps.length >= 4 && cps.every(cp => cp < 0x80) && cps[2] === HYPHEN && cps[3] === HYPHEN) {
                    throw new Error(`invalid label extension`);
                }
            }
            catch (err) {
                throw new Error(`Invalid label "${label}": ${err.message}`);
            }
        }
        return name;
    }
    function ens_normalize(name) {
        return ens_normalize_post_check(normalize$1(name, filter_fe0f));
    }
    function normalize$1(name, emoji_filter) {
        let input = explode_cp(name).reverse(); // flip for pop
        let output = [];
        while (input.length) {
            let emoji = consume_emoji_reversed(input);
            if (emoji) {
                output.push(...emoji_filter(emoji));
                continue;
            }
            let cp = input.pop();
            if (VALID.has(cp)) {
                output.push(cp);
                continue;
            }
            if (IGNORED.has(cp)) {
                continue;
            }
            let cps = MAPPED[cp];
            if (cps) {
                output.push(...cps);
                continue;
            }
            throw new Error(`Disallowed codepoint: 0x${cp.toString(16).toUpperCase()}`);
        }
        return ens_normalize_post_check(nfc(String.fromCodePoint(...output)));
    }
    function nfc(s) {
        return s.normalize('NFC');
    }
    function consume_emoji_reversed(cps, eaten) {
        var _a;
        let node = EMOJI_ROOT;
        let emoji;
        let saved;
        let stack = [];
        let pos = cps.length;
        if (eaten)
            eaten.length = 0; // clear input buffer (if needed)
        while (pos) {
            let cp = cps[--pos];
            node = (_a = node.branches.find(x => x.set.has(cp))) === null || _a === void 0 ? void 0 : _a.node;
            if (!node)
                break;
            if (node.save) { // remember
                saved = cp;
            }
            else if (node.check) { // check exclusion
                if (cp === saved)
                    break;
            }
            stack.push(cp);
            if (node.fe0f) {
                stack.push(0xFE0F);
                if (pos > 0 && cps[pos - 1] == 0xFE0F)
                    pos--; // consume optional FE0F
            }
            if (node.valid) { // this is a valid emoji (so far)
                emoji = stack.slice(); // copy stack
                if (node.valid == 2)
                    emoji.splice(1, 1); // delete FE0F at position 1 (RGI ZWJ don't follow spec!)
                if (eaten)
                    eaten.push(...cps.slice(pos).reverse()); // copy input (if needed)
                cps.length = pos; // truncate
            }
        }
        return emoji;
    }

    const logger$k = new Logger(version$e);
    const Zeros = new Uint8Array(32);
    Zeros.fill(0);
    function checkComponent(comp) {
        if (comp.length === 0) {
            throw new Error("invalid ENS name; empty component");
        }
        return comp;
    }
    function ensNameSplit(name) {
        const bytes = toUtf8Bytes(ens_normalize(name));
        const comps = [];
        if (name.length === 0) {
            return comps;
        }
        let last = 0;
        for (let i = 0; i < bytes.length; i++) {
            const d = bytes[i];
            // A separator (i.e. "."); copy this component
            if (d === 0x2e) {
                comps.push(checkComponent(bytes.slice(last, i)));
                last = i + 1;
            }
        }
        // There was a stray separator at the end of the name
        if (last >= bytes.length) {
            throw new Error("invalid ENS name; empty component");
        }
        comps.push(checkComponent(bytes.slice(last)));
        return comps;
    }
    function ensNormalize(name) {
        return ensNameSplit(name).map((comp) => toUtf8String(comp)).join(".");
    }
    function namehash(name) {
        /* istanbul ignore if */
        if (typeof (name) !== "string") {
            logger$k.throwArgumentError("invalid ENS name; not a string", "name", name);
        }
        let result = Zeros;
        const comps = ensNameSplit(name);
        while (comps.length) {
            result = keccak256(concat([result, keccak256(comps.pop())]));
        }
        return hexlify(result);
    }
    function dnsEncode(name) {
        return hexlify(concat(ensNameSplit(name).map((comp) => {
            // DNS does not allow components over 63 bytes in length
            if (comp.length > 63) {
                throw new Error("invalid DNS encoded entry; length exceeds 63 bytes");
            }
            const bytes = new Uint8Array(comp.length + 1);
            bytes.set(comp, 1);
            bytes[0] = bytes.length - 1;
            return bytes;
        }))) + "00";
    }

    const messagePrefix = "\x19Ethereum Signed Message:\n";
    function hashMessage(message) {
        if (typeof (message) === "string") {
            message = toUtf8Bytes(message);
        }
        return keccak256(concat([
            toUtf8Bytes(messagePrefix),
            toUtf8Bytes(String(message.length)),
            message
        ]));
    }

    var __awaiter$a = (window && window.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    const logger$j = new Logger(version$e);
    const padding$1 = new Uint8Array(32);
    padding$1.fill(0);
    const NegativeOne = BigNumber.from(-1);
    const Zero = BigNumber.from(0);
    const One = BigNumber.from(1);
    const MaxUint256 = BigNumber.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
    function hexPadRight(value) {
        const bytes = arrayify(value);
        const padOffset = bytes.length % 32;
        if (padOffset) {
            return hexConcat([bytes, padding$1.slice(padOffset)]);
        }
        return hexlify(bytes);
    }
    const hexTrue = hexZeroPad(One.toHexString(), 32);
    const hexFalse = hexZeroPad(Zero.toHexString(), 32);
    const domainFieldTypes = {
        name: "string",
        version: "string",
        chainId: "uint256",
        verifyingContract: "address",
        salt: "bytes32"
    };
    const domainFieldNames = [
        "name", "version", "chainId", "verifyingContract", "salt"
    ];
    function checkString(key) {
        return function (value) {
            if (typeof (value) !== "string") {
                logger$j.throwArgumentError(`invalid domain value for ${JSON.stringify(key)}`, `domain.${key}`, value);
            }
            return value;
        };
    }
    const domainChecks = {
        name: checkString("name"),
        version: checkString("version"),
        chainId: function (value) {
            try {
                return BigNumber.from(value).toString();
            }
            catch (error) { }
            return logger$j.throwArgumentError(`invalid domain value for "chainId"`, "domain.chainId", value);
        },
        verifyingContract: function (value) {
            try {
                return getAddress(value).toLowerCase();
            }
            catch (error) { }
            return logger$j.throwArgumentError(`invalid domain value "verifyingContract"`, "domain.verifyingContract", value);
        },
        salt: function (value) {
            try {
                const bytes = arrayify(value);
                if (bytes.length !== 32) {
                    throw new Error("bad length");
                }
                return hexlify(bytes);
            }
            catch (error) { }
            return logger$j.throwArgumentError(`invalid domain value "salt"`, "domain.salt", value);
        }
    };
    function getBaseEncoder(type) {
        // intXX and uintXX
        {
            const match = type.match(/^(u?)int(\d*)$/);
            if (match) {
                const signed = (match[1] === "");
                const width = parseInt(match[2] || "256");
                if (width % 8 !== 0 || width > 256 || (match[2] && match[2] !== String(width))) {
                    logger$j.throwArgumentError("invalid numeric width", "type", type);
                }
                const boundsUpper = MaxUint256.mask(signed ? (width - 1) : width);
                const boundsLower = signed ? boundsUpper.add(One).mul(NegativeOne) : Zero;
                return function (value) {
                    const v = BigNumber.from(value);
                    if (v.lt(boundsLower) || v.gt(boundsUpper)) {
                        logger$j.throwArgumentError(`value out-of-bounds for ${type}`, "value", value);
                    }
                    return hexZeroPad(v.toTwos(256).toHexString(), 32);
                };
            }
        }
        // bytesXX
        {
            const match = type.match(/^bytes(\d+)$/);
            if (match) {
                const width = parseInt(match[1]);
                if (width === 0 || width > 32 || match[1] !== String(width)) {
                    logger$j.throwArgumentError("invalid bytes width", "type", type);
                }
                return function (value) {
                    const bytes = arrayify(value);
                    if (bytes.length !== width) {
                        logger$j.throwArgumentError(`invalid length for ${type}`, "value", value);
                    }
                    return hexPadRight(value);
                };
            }
        }
        switch (type) {
            case "address": return function (value) {
                return hexZeroPad(getAddress(value), 32);
            };
            case "bool": return function (value) {
                return ((!value) ? hexFalse : hexTrue);
            };
            case "bytes": return function (value) {
                return keccak256(value);
            };
            case "string": return function (value) {
                return id(value);
            };
        }
        return null;
    }
    function encodeType$1(name, fields) {
        return `${name}(${fields.map(({ name, type }) => (type + " " + name)).join(",")})`;
    }
    class TypedDataEncoder {
        constructor(types) {
            defineReadOnly(this, "types", Object.freeze(deepCopy(types)));
            defineReadOnly(this, "_encoderCache", {});
            defineReadOnly(this, "_types", {});
            // Link struct types to their direct child structs
            const links = {};
            // Link structs to structs which contain them as a child
            const parents = {};
            // Link all subtypes within a given struct
            const subtypes = {};
            Object.keys(types).forEach((type) => {
                links[type] = {};
                parents[type] = [];
                subtypes[type] = {};
            });
            for (const name in types) {
                const uniqueNames = {};
                types[name].forEach((field) => {
                    // Check each field has a unique name
                    if (uniqueNames[field.name]) {
                        logger$j.throwArgumentError(`duplicate variable name ${JSON.stringify(field.name)} in ${JSON.stringify(name)}`, "types", types);
                    }
                    uniqueNames[field.name] = true;
                    // Get the base type (drop any array specifiers)
                    const baseType = field.type.match(/^([^\x5b]*)(\x5b|$)/)[1];
                    if (baseType === name) {
                        logger$j.throwArgumentError(`circular type reference to ${JSON.stringify(baseType)}`, "types", types);
                    }
                    // Is this a base encoding type?
                    const encoder = getBaseEncoder(baseType);
                    if (encoder) {
                        return;
                    }
                    if (!parents[baseType]) {
                        logger$j.throwArgumentError(`unknown type ${JSON.stringify(baseType)}`, "types", types);
                    }
                    // Add linkage
                    parents[baseType].push(name);
                    links[name][baseType] = true;
                });
            }
            // Deduce the primary type
            const primaryTypes = Object.keys(parents).filter((n) => (parents[n].length === 0));
            if (primaryTypes.length === 0) {
                logger$j.throwArgumentError("missing primary type", "types", types);
            }
            else if (primaryTypes.length > 1) {
                logger$j.throwArgumentError(`ambiguous primary types or unused types: ${primaryTypes.map((t) => (JSON.stringify(t))).join(", ")}`, "types", types);
            }
            defineReadOnly(this, "primaryType", primaryTypes[0]);
            // Check for circular type references
            function checkCircular(type, found) {
                if (found[type]) {
                    logger$j.throwArgumentError(`circular type reference to ${JSON.stringify(type)}`, "types", types);
                }
                found[type] = true;
                Object.keys(links[type]).forEach((child) => {
                    if (!parents[child]) {
                        return;
                    }
                    // Recursively check children
                    checkCircular(child, found);
                    // Mark all ancestors as having this decendant
                    Object.keys(found).forEach((subtype) => {
                        subtypes[subtype][child] = true;
                    });
                });
                delete found[type];
            }
            checkCircular(this.primaryType, {});
            // Compute each fully describe type
            for (const name in subtypes) {
                const st = Object.keys(subtypes[name]);
                st.sort();
                this._types[name] = encodeType$1(name, types[name]) + st.map((t) => encodeType$1(t, types[t])).join("");
            }
        }
        getEncoder(type) {
            let encoder = this._encoderCache[type];
            if (!encoder) {
                encoder = this._encoderCache[type] = this._getEncoder(type);
            }
            return encoder;
        }
        _getEncoder(type) {
            // Basic encoder type (address, bool, uint256, etc)
            {
                const encoder = getBaseEncoder(type);
                if (encoder) {
                    return encoder;
                }
            }
            // Array
            const match = type.match(/^(.*)(\x5b(\d*)\x5d)$/);
            if (match) {
                const subtype = match[1];
                const subEncoder = this.getEncoder(subtype);
                const length = parseInt(match[3]);
                return (value) => {
                    if (length >= 0 && value.length !== length) {
                        logger$j.throwArgumentError("array length mismatch; expected length ${ arrayLength }", "value", value);
                    }
                    let result = value.map(subEncoder);
                    if (this._types[subtype]) {
                        result = result.map(keccak256);
                    }
                    return keccak256(hexConcat(result));
                };
            }
            // Struct
            const fields = this.types[type];
            if (fields) {
                const encodedType = id(this._types[type]);
                return (value) => {
                    const values = fields.map(({ name, type }) => {
                        const result = this.getEncoder(type)(value[name]);
                        if (this._types[type]) {
                            return keccak256(result);
                        }
                        return result;
                    });
                    values.unshift(encodedType);
                    return hexConcat(values);
                };
            }
            return logger$j.throwArgumentError(`unknown type: ${type}`, "type", type);
        }
        encodeType(name) {
            const result = this._types[name];
            if (!result) {
                logger$j.throwArgumentError(`unknown type: ${JSON.stringify(name)}`, "name", name);
            }
            return result;
        }
        encodeData(type, value) {
            return this.getEncoder(type)(value);
        }
        hashStruct(name, value) {
            return keccak256(this.encodeData(name, value));
        }
        encode(value) {
            return this.encodeData(this.primaryType, value);
        }
        hash(value) {
            return this.hashStruct(this.primaryType, value);
        }
        _visit(type, value, callback) {
            // Basic encoder type (address, bool, uint256, etc)
            {
                const encoder = getBaseEncoder(type);
                if (encoder) {
                    return callback(type, value);
                }
            }
            // Array
            const match = type.match(/^(.*)(\x5b(\d*)\x5d)$/);
            if (match) {
                const subtype = match[1];
                const length = parseInt(match[3]);
                if (length >= 0 && value.length !== length) {
                    logger$j.throwArgumentError("array length mismatch; expected length ${ arrayLength }", "value", value);
                }
                return value.map((v) => this._visit(subtype, v, callback));
            }
            // Struct
            const fields = this.types[type];
            if (fields) {
                return fields.reduce((accum, { name, type }) => {
                    accum[name] = this._visit(type, value[name], callback);
                    return accum;
                }, {});
            }
            return logger$j.throwArgumentError(`unknown type: ${type}`, "type", type);
        }
        visit(value, callback) {
            return this._visit(this.primaryType, value, callback);
        }
        static from(types) {
            return new TypedDataEncoder(types);
        }
        static getPrimaryType(types) {
            return TypedDataEncoder.from(types).primaryType;
        }
        static hashStruct(name, types, value) {
            return TypedDataEncoder.from(types).hashStruct(name, value);
        }
        static hashDomain(domain) {
            const domainFields = [];
            for (const name in domain) {
                const type = domainFieldTypes[name];
                if (!type) {
                    logger$j.throwArgumentError(`invalid typed-data domain key: ${JSON.stringify(name)}`, "domain", domain);
                }
                domainFields.push({ name, type });
            }
            domainFields.sort((a, b) => {
                return domainFieldNames.indexOf(a.name) - domainFieldNames.indexOf(b.name);
            });
            return TypedDataEncoder.hashStruct("EIP712Domain", { EIP712Domain: domainFields }, domain);
        }
        static encode(domain, types, value) {
            return hexConcat([
                "0x1901",
                TypedDataEncoder.hashDomain(domain),
                TypedDataEncoder.from(types).hash(value)
            ]);
        }
        static hash(domain, types, value) {
            return keccak256(TypedDataEncoder.encode(domain, types, value));
        }
        // Replaces all address types with ENS names with their looked up address
        static resolveNames(domain, types, value, resolveName) {
            return __awaiter$a(this, void 0, void 0, function* () {
                // Make a copy to isolate it from the object passed in
                domain = shallowCopy(domain);
                // Look up all ENS names
                const ensCache = {};
                // Do we need to look up the domain's verifyingContract?
                if (domain.verifyingContract && !isHexString(domain.verifyingContract, 20)) {
                    ensCache[domain.verifyingContract] = "0x";
                }
                // We are going to use the encoder to visit all the base values
                const encoder = TypedDataEncoder.from(types);
                // Get a list of all the addresses
                encoder.visit(value, (type, value) => {
                    if (type === "address" && !isHexString(value, 20)) {
                        ensCache[value] = "0x";
                    }
                    return value;
                });
                // Lookup each name
                for (const name in ensCache) {
                    ensCache[name] = yield resolveName(name);
                }
                // Replace the domain verifyingContract if needed
                if (domain.verifyingContract && ensCache[domain.verifyingContract]) {
                    domain.verifyingContract = ensCache[domain.verifyingContract];
                }
                // Replace all ENS names with their address
                value = encoder.visit(value, (type, value) => {
                    if (type === "address" && ensCache[value]) {
                        return ensCache[value];
                    }
                    return value;
                });
                return { domain, value };
            });
        }
        static getPayload(domain, types, value) {
            // Validate the domain fields
            TypedDataEncoder.hashDomain(domain);
            // Derive the EIP712Domain Struct reference type
            const domainValues = {};
            const domainTypes = [];
            domainFieldNames.forEach((name) => {
                const value = domain[name];
                if (value == null) {
                    return;
                }
                domainValues[name] = domainChecks[name](value);
                domainTypes.push({ name, type: domainFieldTypes[name] });
            });
            const encoder = TypedDataEncoder.from(types);
            const typesWithDomain = shallowCopy(types);
            if (typesWithDomain.EIP712Domain) {
                logger$j.throwArgumentError("types must not contain EIP712Domain type", "types.EIP712Domain", types);
            }
            else {
                typesWithDomain.EIP712Domain = domainTypes;
            }
            // Validate the data structures and types
            encoder.encode(value);
            return {
                types: typesWithDomain,
                domain: domainValues,
                primaryType: encoder.primaryType,
                message: encoder.visit(value, (type, value) => {
                    // bytes
                    if (type.match(/^bytes(\d*)/)) {
                        return hexlify(arrayify(value));
                    }
                    // uint or int
                    if (type.match(/^u?int/)) {
                        return BigNumber.from(value).toString();
                    }
                    switch (type) {
                        case "address":
                            return value.toLowerCase();
                        case "bool":
                            return !!value;
                        case "string":
                            if (typeof (value) !== "string") {
                                logger$j.throwArgumentError(`invalid string`, "value", value);
                            }
                            return value;
                    }
                    return logger$j.throwArgumentError("unsupported type", "type", type);
                })
            };
        }
    }

    const logger$i = new Logger(version$g);
    class LogDescription extends Description {
    }
    class TransactionDescription extends Description {
    }
    class ErrorDescription extends Description {
    }
    class Indexed extends Description {
        static isIndexed(value) {
            return !!(value && value._isIndexed);
        }
    }
    const BuiltinErrors = {
        "0x08c379a0": { signature: "Error(string)", name: "Error", inputs: ["string"], reason: true },
        "0x4e487b71": { signature: "Panic(uint256)", name: "Panic", inputs: ["uint256"] }
    };
    function wrapAccessError(property, error) {
        const wrap = new Error(`deferred error during ABI decoding triggered accessing ${property}`);
        wrap.error = error;
        return wrap;
    }
    /*
    function checkNames(fragment: Fragment, type: "input" | "output", params: Array<ParamType>): void {
        params.reduce((accum, param) => {
            if (param.name) {
                if (accum[param.name]) {
                    logger.throwArgumentError(`duplicate ${ type } parameter ${ JSON.stringify(param.name) } in ${ fragment.format("full") }`, "fragment", fragment);
                }
                accum[param.name] = true;
            }
            return accum;
        }, <{ [ name: string ]: boolean }>{ });
    }
    */
    class Interface {
        constructor(fragments) {
            let abi = [];
            if (typeof (fragments) === "string") {
                abi = JSON.parse(fragments);
            }
            else {
                abi = fragments;
            }
            defineReadOnly(this, "fragments", abi.map((fragment) => {
                return Fragment.from(fragment);
            }).filter((fragment) => (fragment != null)));
            defineReadOnly(this, "_abiCoder", getStatic(new.target, "getAbiCoder")());
            defineReadOnly(this, "functions", {});
            defineReadOnly(this, "errors", {});
            defineReadOnly(this, "events", {});
            defineReadOnly(this, "structs", {});
            // Add all fragments by their signature
            this.fragments.forEach((fragment) => {
                let bucket = null;
                switch (fragment.type) {
                    case "constructor":
                        if (this.deploy) {
                            logger$i.warn("duplicate definition - constructor");
                            return;
                        }
                        //checkNames(fragment, "input", fragment.inputs);
                        defineReadOnly(this, "deploy", fragment);
                        return;
                    case "function":
                        //checkNames(fragment, "input", fragment.inputs);
                        //checkNames(fragment, "output", (<FunctionFragment>fragment).outputs);
                        bucket = this.functions;
                        break;
                    case "event":
                        //checkNames(fragment, "input", fragment.inputs);
                        bucket = this.events;
                        break;
                    case "error":
                        bucket = this.errors;
                        break;
                    default:
                        return;
                }
                let signature = fragment.format();
                if (bucket[signature]) {
                    logger$i.warn("duplicate definition - " + signature);
                    return;
                }
                bucket[signature] = fragment;
            });
            // If we do not have a constructor add a default
            if (!this.deploy) {
                defineReadOnly(this, "deploy", ConstructorFragment.from({
                    payable: false,
                    type: "constructor"
                }));
            }
            defineReadOnly(this, "_isInterface", true);
        }
        format(format) {
            if (!format) {
                format = FormatTypes.full;
            }
            if (format === FormatTypes.sighash) {
                logger$i.throwArgumentError("interface does not support formatting sighash", "format", format);
            }
            const abi = this.fragments.map((fragment) => fragment.format(format));
            // We need to re-bundle the JSON fragments a bit
            if (format === FormatTypes.json) {
                return JSON.stringify(abi.map((j) => JSON.parse(j)));
            }
            return abi;
        }
        // Sub-classes can override these to handle other blockchains
        static getAbiCoder() {
            return defaultAbiCoder;
        }
        static getAddress(address) {
            return getAddress(address);
        }
        static getSighash(fragment) {
            return hexDataSlice(id(fragment.format()), 0, 4);
        }
        static getEventTopic(eventFragment) {
            return id(eventFragment.format());
        }
        // Find a function definition by any means necessary (unless it is ambiguous)
        getFunction(nameOrSignatureOrSighash) {
            if (isHexString(nameOrSignatureOrSighash)) {
                for (const name in this.functions) {
                    if (nameOrSignatureOrSighash === this.getSighash(name)) {
                        return this.functions[name];
                    }
                }
                logger$i.throwArgumentError("no matching function", "sighash", nameOrSignatureOrSighash);
            }
            // It is a bare name, look up the function (will return null if ambiguous)
            if (nameOrSignatureOrSighash.indexOf("(") === -1) {
                const name = nameOrSignatureOrSighash.trim();
                const matching = Object.keys(this.functions).filter((f) => (f.split("(" /* fix:) */)[0] === name));
                if (matching.length === 0) {
                    logger$i.throwArgumentError("no matching function", "name", name);
                }
                else if (matching.length > 1) {
                    logger$i.throwArgumentError("multiple matching functions", "name", name);
                }
                return this.functions[matching[0]];
            }
            // Normalize the signature and lookup the function
            const result = this.functions[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];
            if (!result) {
                logger$i.throwArgumentError("no matching function", "signature", nameOrSignatureOrSighash);
            }
            return result;
        }
        // Find an event definition by any means necessary (unless it is ambiguous)
        getEvent(nameOrSignatureOrTopic) {
            if (isHexString(nameOrSignatureOrTopic)) {
                const topichash = nameOrSignatureOrTopic.toLowerCase();
                for (const name in this.events) {
                    if (topichash === this.getEventTopic(name)) {
                        return this.events[name];
                    }
                }
                logger$i.throwArgumentError("no matching event", "topichash", topichash);
            }
            // It is a bare name, look up the function (will return null if ambiguous)
            if (nameOrSignatureOrTopic.indexOf("(") === -1) {
                const name = nameOrSignatureOrTopic.trim();
                const matching = Object.keys(this.events).filter((f) => (f.split("(" /* fix:) */)[0] === name));
                if (matching.length === 0) {
                    logger$i.throwArgumentError("no matching event", "name", name);
                }
                else if (matching.length > 1) {
                    logger$i.throwArgumentError("multiple matching events", "name", name);
                }
                return this.events[matching[0]];
            }
            // Normalize the signature and lookup the function
            const result = this.events[EventFragment.fromString(nameOrSignatureOrTopic).format()];
            if (!result) {
                logger$i.throwArgumentError("no matching event", "signature", nameOrSignatureOrTopic);
            }
            return result;
        }
        // Find a function definition by any means necessary (unless it is ambiguous)
        getError(nameOrSignatureOrSighash) {
            if (isHexString(nameOrSignatureOrSighash)) {
                const getSighash = getStatic(this.constructor, "getSighash");
                for (const name in this.errors) {
                    const error = this.errors[name];
                    if (nameOrSignatureOrSighash === getSighash(error)) {
                        return this.errors[name];
                    }
                }
                logger$i.throwArgumentError("no matching error", "sighash", nameOrSignatureOrSighash);
            }
            // It is a bare name, look up the function (will return null if ambiguous)
            if (nameOrSignatureOrSighash.indexOf("(") === -1) {
                const name = nameOrSignatureOrSighash.trim();
                const matching = Object.keys(this.errors).filter((f) => (f.split("(" /* fix:) */)[0] === name));
                if (matching.length === 0) {
                    logger$i.throwArgumentError("no matching error", "name", name);
                }
                else if (matching.length > 1) {
                    logger$i.throwArgumentError("multiple matching errors", "name", name);
                }
                return this.errors[matching[0]];
            }
            // Normalize the signature and lookup the function
            const result = this.errors[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];
            if (!result) {
                logger$i.throwArgumentError("no matching error", "signature", nameOrSignatureOrSighash);
            }
            return result;
        }
        // Get the sighash (the bytes4 selector) used by Solidity to identify a function
        getSighash(fragment) {
            if (typeof (fragment) === "string") {
                try {
                    fragment = this.getFunction(fragment);
                }
                catch (error) {
                    try {
                        fragment = this.getError(fragment);
                    }
                    catch (_) {
                        throw error;
                    }
                }
            }
            return getStatic(this.constructor, "getSighash")(fragment);
        }
        // Get the topic (the bytes32 hash) used by Solidity to identify an event
        getEventTopic(eventFragment) {
            if (typeof (eventFragment) === "string") {
                eventFragment = this.getEvent(eventFragment);
            }
            return getStatic(this.constructor, "getEventTopic")(eventFragment);
        }
        _decodeParams(params, data) {
            return this._abiCoder.decode(params, data);
        }
        _encodeParams(params, values) {
            return this._abiCoder.encode(params, values);
        }
        encodeDeploy(values) {
            return this._encodeParams(this.deploy.inputs, values || []);
        }
        decodeErrorResult(fragment, data) {
            if (typeof (fragment) === "string") {
                fragment = this.getError(fragment);
            }
            const bytes = arrayify(data);
            if (hexlify(bytes.slice(0, 4)) !== this.getSighash(fragment)) {
                logger$i.throwArgumentError(`data signature does not match error ${fragment.name}.`, "data", hexlify(bytes));
            }
            return this._decodeParams(fragment.inputs, bytes.slice(4));
        }
        encodeErrorResult(fragment, values) {
            if (typeof (fragment) === "string") {
                fragment = this.getError(fragment);
            }
            return hexlify(concat([
                this.getSighash(fragment),
                this._encodeParams(fragment.inputs, values || [])
            ]));
        }
        // Decode the data for a function call (e.g. tx.data)
        decodeFunctionData(functionFragment, data) {
            if (typeof (functionFragment) === "string") {
                functionFragment = this.getFunction(functionFragment);
            }
            const bytes = arrayify(data);
            if (hexlify(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {
                logger$i.throwArgumentError(`data signature does not match function ${functionFragment.name}.`, "data", hexlify(bytes));
            }
            return this._decodeParams(functionFragment.inputs, bytes.slice(4));
        }
        // Encode the data for a function call (e.g. tx.data)
        encodeFunctionData(functionFragment, values) {
            if (typeof (functionFragment) === "string") {
                functionFragment = this.getFunction(functionFragment);
            }
            return hexlify(concat([
                this.getSighash(functionFragment),
                this._encodeParams(functionFragment.inputs, values || [])
            ]));
        }
        // Decode the result from a function call (e.g. from eth_call)
        decodeFunctionResult(functionFragment, data) {
            if (typeof (functionFragment) === "string") {
                functionFragment = this.getFunction(functionFragment);
            }
            let bytes = arrayify(data);
            let reason = null;
            let message = "";
            let errorArgs = null;
            let errorName = null;
            let errorSignature = null;
            switch (bytes.length % this._abiCoder._getWordSize()) {
                case 0:
                    try {
                        return this._abiCoder.decode(functionFragment.outputs, bytes);
                    }
                    catch (error) { }
                    break;
                case 4: {
                    const selector = hexlify(bytes.slice(0, 4));
                    const builtin = BuiltinErrors[selector];
                    if (builtin) {
                        errorArgs = this._abiCoder.decode(builtin.inputs, bytes.slice(4));
                        errorName = builtin.name;
                        errorSignature = builtin.signature;
                        if (builtin.reason) {
                            reason = errorArgs[0];
                        }
                        if (errorName === "Error") {
                            message = `; VM Exception while processing transaction: reverted with reason string ${JSON.stringify(errorArgs[0])}`;
                        }
                        else if (errorName === "Panic") {
                            message = `; VM Exception while processing transaction: reverted with panic code ${errorArgs[0]}`;
                        }
                    }
                    else {
                        try {
                            const error = this.getError(selector);
                            errorArgs = this._abiCoder.decode(error.inputs, bytes.slice(4));
                            errorName = error.name;
                            errorSignature = error.format();
                        }
                        catch (error) { }
                    }
                    break;
                }
            }
            return logger$i.throwError("call revert exception" + message, Logger.errors.CALL_EXCEPTION, {
                method: functionFragment.format(),
                data: hexlify(data), errorArgs, errorName, errorSignature, reason
            });
        }
        // Encode the result for a function call (e.g. for eth_call)
        encodeFunctionResult(functionFragment, values) {
            if (typeof (functionFragment) === "string") {
                functionFragment = this.getFunction(functionFragment);
            }
            return hexlify(this._abiCoder.encode(functionFragment.outputs, values || []));
        }
        // Create the filter for the event with search criteria (e.g. for eth_filterLog)
        encodeFilterTopics(eventFragment, values) {
            if (typeof (eventFragment) === "string") {
                eventFragment = this.getEvent(eventFragment);
            }
            if (values.length > eventFragment.inputs.length) {
                logger$i.throwError("too many arguments for " + eventFragment.format(), Logger.errors.UNEXPECTED_ARGUMENT, {
                    argument: "values",
                    value: values
                });
            }
            let topics = [];
            if (!eventFragment.anonymous) {
                topics.push(this.getEventTopic(eventFragment));
            }
            const encodeTopic = (param, value) => {
                if (param.type === "string") {
                    return id(value);
                }
                else if (param.type === "bytes") {
                    return keccak256(hexlify(value));
                }
                if (param.type === "bool" && typeof (value) === "boolean") {
                    value = (value ? "0x01" : "0x00");
                }
                if (param.type.match(/^u?int/)) {
                    value = BigNumber.from(value).toHexString();
                }
                // Check addresses are valid
                if (param.type === "address") {
                    this._abiCoder.encode(["address"], [value]);
                }
                return hexZeroPad(hexlify(value), 32);
            };
            values.forEach((value, index) => {
                let param = eventFragment.inputs[index];
                if (!param.indexed) {
                    if (value != null) {
                        logger$i.throwArgumentError("cannot filter non-indexed parameters; must be null", ("contract." + param.name), value);
                    }
                    return;
                }
                if (value == null) {
                    topics.push(null);
                }
                else if (param.baseType === "array" || param.baseType === "tuple") {
                    logger$i.throwArgumentError("filtering with tuples or arrays not supported", ("contract." + param.name), value);
                }
                else if (Array.isArray(value)) {
                    topics.push(value.map((value) => encodeTopic(param, value)));
                }
                else {
                    topics.push(encodeTopic(param, value));
                }
            });
            // Trim off trailing nulls
            while (topics.length && topics[topics.length - 1] === null) {
                topics.pop();
            }
            return topics;
        }
        encodeEventLog(eventFragment, values) {
            if (typeof (eventFragment) === "string") {
                eventFragment = this.getEvent(eventFragment);
            }
            const topics = [];
            const dataTypes = [];
            const dataValues = [];
            if (!eventFragment.anonymous) {
                topics.push(this.getEventTopic(eventFragment));
            }
            if (values.length !== eventFragment.inputs.length) {
                logger$i.throwArgumentError("event arguments/values mismatch", "values", values);
            }
            eventFragment.inputs.forEach((param, index) => {
                const value = values[index];
                if (param.indexed) {
                    if (param.type === "string") {
                        topics.push(id(value));
                    }
                    else if (param.type === "bytes") {
                        topics.push(keccak256(value));
                    }
                    else if (param.baseType === "tuple" || param.baseType === "array") {
                        // @TODO
                        throw new Error("not implemented");
                    }
                    else {
                        topics.push(this._abiCoder.encode([param.type], [value]));
                    }
                }
                else {
                    dataTypes.push(param);
                    dataValues.push(value);
                }
            });
            return {
                data: this._abiCoder.encode(dataTypes, dataValues),
                topics: topics
            };
        }
        // Decode a filter for the event and the search criteria
        decodeEventLog(eventFragment, data, topics) {
            if (typeof (eventFragment) === "string") {
                eventFragment = this.getEvent(eventFragment);
            }
            if (topics != null && !eventFragment.anonymous) {
                let topicHash = this.getEventTopic(eventFragment);
                if (!isHexString(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {
                    logger$i.throwError("fragment/topic mismatch", Logger.errors.INVALID_ARGUMENT, { argument: "topics[0]", expected: topicHash, value: topics[0] });
                }
                topics = topics.slice(1);
            }
            let indexed = [];
            let nonIndexed = [];
            let dynamic = [];
            eventFragment.inputs.forEach((param, index) => {
                if (param.indexed) {
                    if (param.type === "string" || param.type === "bytes" || param.baseType === "tuple" || param.baseType === "array") {
                        indexed.push(ParamType.fromObject({ type: "bytes32", name: param.name }));
                        dynamic.push(true);
                    }
                    else {
                        indexed.push(param);
                        dynamic.push(false);
                    }
                }
                else {
                    nonIndexed.push(param);
                    dynamic.push(false);
                }
            });
            let resultIndexed = (topics != null) ? this._abiCoder.decode(indexed, concat(topics)) : null;
            let resultNonIndexed = this._abiCoder.decode(nonIndexed, data, true);
            let result = [];
            let nonIndexedIndex = 0, indexedIndex = 0;
            eventFragment.inputs.forEach((param, index) => {
                if (param.indexed) {
                    if (resultIndexed == null) {
                        result[index] = new Indexed({ _isIndexed: true, hash: null });
                    }
                    else if (dynamic[index]) {
                        result[index] = new Indexed({ _isIndexed: true, hash: resultIndexed[indexedIndex++] });
                    }
                    else {
                        try {
                            result[index] = resultIndexed[indexedIndex++];
                        }
                        catch (error) {
                            result[index] = error;
                        }
                    }
                }
                else {
                    try {
                        result[index] = resultNonIndexed[nonIndexedIndex++];
                    }
                    catch (error) {
                        result[index] = error;
                    }
                }
                // Add the keyword argument if named and safe
                if (param.name && result[param.name] == null) {
                    const value = result[index];
                    // Make error named values throw on access
                    if (value instanceof Error) {
                        Object.defineProperty(result, param.name, {
                            enumerable: true,
                            get: () => { throw wrapAccessError(`property ${JSON.stringify(param.name)}`, value); }
                        });
                    }
                    else {
                        result[param.name] = value;
                    }
                }
            });
            // Make all error indexed values throw on access
            for (let i = 0; i < result.length; i++) {
                const value = result[i];
                if (value instanceof Error) {
                    Object.defineProperty(result, i, {
                        enumerable: true,
                        get: () => { throw wrapAccessError(`index ${i}`, value); }
                    });
                }
            }
            return Object.freeze(result);
        }
        // Given a transaction, find the matching function fragment (if any) and
        // determine all its properties and call parameters
        parseTransaction(tx) {
            let fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase());
            if (!fragment) {
                return null;
            }
            return new TransactionDescription({
                args: this._abiCoder.decode(fragment.inputs, "0x" + tx.data.substring(10)),
                functionFragment: fragment,
                name: fragment.name,
                signature: fragment.format(),
                sighash: this.getSighash(fragment),
                value: BigNumber.from(tx.value || "0"),
            });
        }
        // @TODO
        //parseCallResult(data: BytesLike): ??
        // Given an event log, find the matching event fragment (if any) and
        // determine all its properties and values
        parseLog(log) {
            let fragment = this.getEvent(log.topics[0]);
            if (!fragment || fragment.anonymous) {
                return null;
            }
            // @TODO: If anonymous, and the only method, and the input count matches, should we parse?
            //        Probably not, because just because it is the only event in the ABI does
            //        not mean we have the full ABI; maybe just a fragment?
            return new LogDescription({
                eventFragment: fragment,
                name: fragment.name,
                signature: fragment.format(),
                topic: this.getEventTopic(fragment),
                args: this.decodeEventLog(fragment, log.data, log.topics)
            });
        }
        parseError(data) {
            const hexData = hexlify(data);
            let fragment = this.getError(hexData.substring(0, 10).toLowerCase());
            if (!fragment) {
                return null;
            }
            return new ErrorDescription({
                args: this._abiCoder.decode(fragment.inputs, "0x" + hexData.substring(10)),
                errorFragment: fragment,
                name: fragment.name,
                signature: fragment.format(),
                sighash: this.getSighash(fragment),
            });
        }
        /*
        static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {
            if (Interface.isInterface(value)) {
                return value;
            }
            if (typeof(value) === "string") {
                return new Interface(JSON.parse(value));
            }
            return new Interface(value);
        }
        */
        static isInterface(value) {
            return !!(value && value._isInterface);
        }
    }

    const version$d = "abstract-provider/5.7.0";

    var __awaiter$9 = (window && window.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    const logger$h = new Logger(version$d);
    //export type CallTransactionable = {
    //    call(transaction: TransactionRequest): Promise<TransactionResponse>;
    //};
    class ForkEvent extends Description {
        static isForkEvent(value) {
            return !!(value && value._isForkEvent);
        }
    }
    ///////////////////////////////
    // Exported Abstracts
    class Provider$1 {
        constructor() {
            logger$h.checkAbstract(new.target, Provider$1);
            defineReadOnly(this, "_isProvider", true);
        }
        getFeeData() {
            return __awaiter$9(this, void 0, void 0, function* () {
                const { block, gasPrice } = yield resolveProperties({
                    block: this.getBlock("latest"),
                    gasPrice: this.getGasPrice().catch((error) => {
                        // @TODO: Why is this now failing on Calaveras?
                        //console.log(error);
                        return null;
                    })
                });
                let lastBaseFeePerGas = null, maxFeePerGas = null, maxPriorityFeePerGas = null;
                if (block && block.baseFeePerGas) {
                    // We may want to compute this more accurately in the future,
                    // using the formula "check if the base fee is correct".
                    // See: https://eips.ethereum.org/EIPS/eip-1559
                    lastBaseFeePerGas = block.baseFeePerGas;
                    maxPriorityFeePerGas = BigNumber.from("1500000000");
                    maxFeePerGas = block.baseFeePerGas.mul(2).add(maxPriorityFeePerGas);
                }
                return { lastBaseFeePerGas, maxFeePerGas, maxPriorityFeePerGas, gasPrice };
            });
        }
        // Alias for "on"
        addListener(eventName, listener) {
            return this.on(eventName, listener);
        }
        // Alias for "off"
        removeListener(eventName, listener) {
            return this.off(eventName, listener);
        }
        static isProvider(value) {
            return !!(value && value._isProvider);
        }
    }

    const version$c = "abstract-signer/5.7.0";

    var __awaiter$8 = (window && window.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    const logger$g = new Logger(version$c);
    const allowedTransactionKeys$2 = [
        "accessList", "ccipReadEnabled", "chainId", "customData", "data", "from", "gasLimit", "gasPrice", "maxFeePerGas", "maxPriorityFeePerGas", "nonce", "to", "type", "value"
    ];
    const forwardErrors = [
        Logger.errors.INSUFFICIENT_FUNDS,
        Logger.errors.NONCE_EXPIRED,
        Logger.errors.REPLACEMENT_UNDERPRICED,
    ];
    class Signer {
        ///////////////////
        // Sub-classes MUST call super
        constructor() {
            logger$g.checkAbstract(new.target, Signer);
            defineReadOnly(this, "_isSigner", true);
        }
        ///////////////////
        // Sub-classes MAY override these
        getBalance(blockTag) {
            return __awaiter$8(this, void 0, void 0, function* () {
                this._checkProvider("getBalance");
                return yield this.provider.getBalance(this.getAddress(), blockTag);
            });
        }
        getTransactionCount(blockTag) {
            return __awaiter$8(this, void 0, void 0, function* () {
                this._checkProvider("getTransactionCount");
                return yield this.provider.getTransactionCount(this.getAddress(), blockTag);
            });
        }
        // Populates "from" if unspecified, and estimates the gas for the transaction
        estimateGas(transaction) {
            return __awaiter$8(this, void 0, void 0, function* () {
                this._checkProvider("estimateGas");
                const tx = yield resolveProperties(this.checkTransaction(transaction));
                return yield this.provider.estimateGas(tx);
            });
        }
        // Populates "from" if unspecified, and calls with the transaction
        call(transaction, blockTag) {
            return __awaiter$8(this, void 0, void 0, function* () {
                this._checkProvider("call");
                const tx = yield resolveProperties(this.checkTransaction(transaction));
                return yield this.provider.call(tx, blockTag);
            });
        }
        // Populates all fields in a transaction, signs it and sends it to the network
        sendTransaction(transaction) {
            return __awaiter$8(this, void 0, void 0, function* () {
                this._checkProvider("sendTransaction");
                const tx = yield this.populateTransaction(transaction);
                const signedTx = yield this.signTransaction(tx);
                return yield this.provider.sendTransaction(signedTx);
            });
        }
        getChainId() {
            return __awaiter$8(this, void 0, void 0, function* () {
                this._checkProvider("getChainId");
                const network = yield this.provider.getNetwork();
                return network.chainId;
            });
        }
        getGasPrice() {
            return __awaiter$8(this, void 0, void 0, function* () {
                this._checkProvider("getGasPrice");
                return yield this.provider.getGasPrice();
            });
        }
        getFeeData() {
            return __awaiter$8(this, void 0, void 0, function* () {
                this._checkProvider("getFeeData");
                return yield this.provider.getFeeData();
            });
        }
        resolveName(name) {
            return __awaiter$8(this, void 0, void 0, function* () {
                this._checkProvider("resolveName");
                return yield this.provider.resolveName(name);
            });
        }
        // Checks a transaction does not contain invalid keys and if
        // no "from" is provided, populates it.
        // - does NOT require a provider
        // - adds "from" is not present
        // - returns a COPY (safe to mutate the result)
        // By default called from: (overriding these prevents it)
        //   - call
        //   - estimateGas
        //   - populateTransaction (and therefor sendTransaction)
        checkTransaction(transaction) {
            for (const key in transaction) {
                if (allowedTransactionKeys$2.indexOf(key) === -1) {
                    logger$g.throwArgumentError("invalid transaction key: " + key, "transaction", transaction);
                }
            }
            const tx = shallowCopy(transaction);
            if (tx.from == null) {
                tx.from = this.getAddress();
            }
            else {
                // Make sure any provided address matches this signer
                tx.from = Promise.all([
                    Promise.resolve(tx.from),
                    this.getAddress()
                ]).then((result) => {
                    if (result[0].toLowerCase() !== result[1].toLowerCase()) {
                        logger$g.throwArgumentError("from address mismatch", "transaction", transaction);
                    }
                    return result[0];
                });
            }
            return tx;
        }
        // Populates ALL keys for a transaction and checks that "from" matches
        // this Signer. Should be used by sendTransaction but NOT by signTransaction.
        // By default called from: (overriding these prevents it)
        //   - sendTransaction
        //
        // Notes:
        //  - We allow gasPrice for EIP-1559 as long as it matches maxFeePerGas
        populateTransaction(transaction) {
            return __awaiter$8(this, void 0, void 0, function* () {
                const tx = yield resolveProperties(this.checkTransaction(transaction));
                if (tx.to != null) {
                    tx.to = Promise.resolve(tx.to).then((to) => __awaiter$8(this, void 0, void 0, function* () {
                        if (to == null) {
                            return null;
                        }
                        const address = yield this.resolveName(to);
                        if (address == null) {
                            logger$g.throwArgumentError("provided ENS name resolves to null", "tx.to", to);
                        }
                        return address;
                    }));
                    // Prevent this error from causing an UnhandledPromiseException
                    tx.to.catch((error) => { });
                }
                // Do not allow mixing pre-eip-1559 and eip-1559 properties
                const hasEip1559 = (tx.maxFeePerGas != null || tx.maxPriorityFeePerGas != null);
                if (tx.gasPrice != null && (tx.type === 2 || hasEip1559)) {
                    logger$g.throwArgumentError("eip-1559 transaction do not support gasPrice", "transaction", transaction);
                }
                else if ((tx.type === 0 || tx.type === 1) && hasEip1559) {
                    logger$g.throwArgumentError("pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas", "transaction", transaction);
                }
                if ((tx.type === 2 || tx.type == null) && (tx.maxFeePerGas != null && tx.maxPriorityFeePerGas != null)) {
                    // Fully-formed EIP-1559 transaction (skip getFeeData)
                    tx.type = 2;
                }
                else if (tx.type === 0 || tx.type === 1) {
                    // Explicit Legacy or EIP-2930 transaction
                    // Populate missing gasPrice
                    if (tx.gasPrice == null) {
                        tx.gasPrice = this.getGasPrice();
                    }
                }
                else {
                    // We need to get fee data to determine things
                    const feeData = yield this.getFeeData();
                    if (tx.type == null) {
                        // We need to auto-detect the intended type of this transaction...
                        if (feeData.maxFeePerGas != null && feeData.maxPriorityFeePerGas != null) {
                            // The network supports EIP-1559!
                            // Upgrade transaction from null to eip-1559
                            tx.type = 2;
                            if (tx.gasPrice != null) {
                                // Using legacy gasPrice property on an eip-1559 network,
                                // so use gasPrice as both fee properties
                                const gasPrice = tx.gasPrice;
                                delete tx.gasPrice;
                                tx.maxFeePerGas = gasPrice;
                                tx.maxPriorityFeePerGas = gasPrice;
                            }
                            else {
                                // Populate missing fee data
                                if (tx.maxFeePerGas == null) {
                                    tx.maxFeePerGas = feeData.maxFeePerGas;
                                }
                                if (tx.maxPriorityFeePerGas == null) {
                                    tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;
                                }
                            }
                        }
                        else if (feeData.gasPrice != null) {
                            // Network doesn't support EIP-1559...
                            // ...but they are trying to use EIP-1559 properties
                            if (hasEip1559) {
                                logger$g.throwError("network does not support EIP-1559", Logger.errors.UNSUPPORTED_OPERATION, {
                                    operation: "populateTransaction"
                                });
                            }
                            // Populate missing fee data
                            if (tx.gasPrice == null) {
                                tx.gasPrice = feeData.gasPrice;
                            }
                            // Explicitly set untyped transaction to legacy
                            tx.type = 0;
                        }
                        else {
                            // getFeeData has failed us.
                            logger$g.throwError("failed to get consistent fee data", Logger.errors.UNSUPPORTED_OPERATION, {
                                operation: "signer.getFeeData"
                            });
                        }
                    }
                    else if (tx.type === 2) {
                        // Explicitly using EIP-1559
                        // Populate missing fee data
                        if (tx.maxFeePerGas == null) {
                            tx.maxFeePerGas = feeData.maxFeePerGas;
                        }
                        if (tx.maxPriorityFeePerGas == null) {
                            tx.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;
                        }
                    }
                }
                if (tx.nonce == null) {
                    tx.nonce = this.getTransactionCount("pending");
                }
                if (tx.gasLimit == null) {
                    tx.gasLimit = this.estimateGas(tx).catch((error) => {
                        if (forwardErrors.indexOf(error.code) >= 0) {
                            throw error;
                        }
                        return logger$g.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {
                            error: error,
                            tx: tx
                        });
                    });
                }
                if (tx.chainId == null) {
                    tx.chainId = this.getChainId();
                }
                else {
                    tx.chainId = Promise.all([
                        Promise.resolve(tx.chainId),
                        this.getChainId()
                    ]).then((results) => {
                        if (results[1] !== 0 && results[0] !== results[1]) {
                            logger$g.throwArgumentError("chainId address mismatch", "transaction", transaction);
                        }
                        return results[0];
                    });
                }
                return yield resolveProperties(tx);
            });
        }
        ///////////////////
        // Sub-classes SHOULD leave these alone
        _checkProvider(operation) {
            if (!this.provider) {
                logger$g.throwError("missing provider", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: (operation || "_checkProvider")
                });
            }
        }
        static isSigner(value) {
            return !!(value && value._isSigner);
        }
    }
    class VoidSigner extends Signer {
        constructor(address, provider) {
            super();
            defineReadOnly(this, "address", address);
            defineReadOnly(this, "provider", provider || null);
        }
        getAddress() {
            return Promise.resolve(this.address);
        }
        _fail(message, operation) {
            return Promise.resolve().then(() => {
                logger$g.throwError(message, Logger.errors.UNSUPPORTED_OPERATION, { operation: operation });
            });
        }
        signMessage(message) {
            return this._fail("VoidSigner cannot sign messages", "signMessage");
        }
        signTransaction(transaction) {
            return this._fail("VoidSigner cannot sign transactions", "signTransaction");
        }
        _signTypedData(domain, types, value) {
            return this._fail("VoidSigner cannot sign typed data", "signTypedData");
        }
        connect(provider) {
            return new VoidSigner(this.address, provider);
        }
    }

    var minimalisticAssert$1 = assert$6;

    function assert$6(val, msg) {
      if (!val)
        throw new Error(msg || 'Assertion failed');
    }

    assert$6.equal = function assertEqual(l, r, msg) {
      if (l != r)
        throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
    };

    var inherits_browser$1 = createCommonjsModule$1(function (module) {
    if (typeof Object.create === 'function') {
      // implementation from standard node.js 'util' module
      module.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
              value: ctor,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
        }
      };
    } else {
      // old school shim for old browsers
      module.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function () {};
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }
      };
    }
    });

    var inherits_1 = inherits_browser$1;

    function isSurrogatePair(msg, i) {
      if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {
        return false;
      }
      if (i < 0 || i + 1 >= msg.length) {
        return false;
      }
      return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;
    }

    function toArray(msg, enc) {
      if (Array.isArray(msg))
        return msg.slice();
      if (!msg)
        return [];
      var res = [];
      if (typeof msg === 'string') {
        if (!enc) {
          // Inspired by stringToUtf8ByteArray() in closure-library by Google
          // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
          // Apache License 2.0
          // https://github.com/google/closure-library/blob/master/LICENSE
          var p = 0;
          for (var i = 0; i < msg.length; i++) {
            var c = msg.charCodeAt(i);
            if (c < 128) {
              res[p++] = c;
            } else if (c < 2048) {
              res[p++] = (c >> 6) | 192;
              res[p++] = (c & 63) | 128;
            } else if (isSurrogatePair(msg, i)) {
              c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);
              res[p++] = (c >> 18) | 240;
              res[p++] = ((c >> 12) & 63) | 128;
              res[p++] = ((c >> 6) & 63) | 128;
              res[p++] = (c & 63) | 128;
            } else {
              res[p++] = (c >> 12) | 224;
              res[p++] = ((c >> 6) & 63) | 128;
              res[p++] = (c & 63) | 128;
            }
          }
        } else if (enc === 'hex') {
          msg = msg.replace(/[^a-z0-9]+/ig, '');
          if (msg.length % 2 !== 0)
            msg = '0' + msg;
          for (i = 0; i < msg.length; i += 2)
            res.push(parseInt(msg[i] + msg[i + 1], 16));
        }
      } else {
        for (i = 0; i < msg.length; i++)
          res[i] = msg[i] | 0;
      }
      return res;
    }
    var toArray_1 = toArray;

    function toHex$1(msg) {
      var res = '';
      for (var i = 0; i < msg.length; i++)
        res += zero2(msg[i].toString(16));
      return res;
    }
    var toHex_1 = toHex$1;

    function htonl(w) {
      var res = (w >>> 24) |
                ((w >>> 8) & 0xff00) |
                ((w << 8) & 0xff0000) |
                ((w & 0xff) << 24);
      return res >>> 0;
    }
    var htonl_1 = htonl;

    function toHex32(msg, endian) {
      var res = '';
      for (var i = 0; i < msg.length; i++) {
        var w = msg[i];
        if (endian === 'little')
          w = htonl(w);
        res += zero8(w.toString(16));
      }
      return res;
    }
    var toHex32_1 = toHex32;

    function zero2(word) {
      if (word.length === 1)
        return '0' + word;
      else
        return word;
    }
    var zero2_1 = zero2;

    function zero8(word) {
      if (word.length === 7)
        return '0' + word;
      else if (word.length === 6)
        return '00' + word;
      else if (word.length === 5)
        return '000' + word;
      else if (word.length === 4)
        return '0000' + word;
      else if (word.length === 3)
        return '00000' + word;
      else if (word.length === 2)
        return '000000' + word;
      else if (word.length === 1)
        return '0000000' + word;
      else
        return word;
    }
    var zero8_1 = zero8;

    function join32(msg, start, end, endian) {
      var len = end - start;
      minimalisticAssert$1(len % 4 === 0);
      var res = new Array(len / 4);
      for (var i = 0, k = start; i < res.length; i++, k += 4) {
        var w;
        if (endian === 'big')
          w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
        else
          w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
        res[i] = w >>> 0;
      }
      return res;
    }
    var join32_1 = join32;

    function split32(msg, endian) {
      var res = new Array(msg.length * 4);
      for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
        var m = msg[i];
        if (endian === 'big') {
          res[k] = m >>> 24;
          res[k + 1] = (m >>> 16) & 0xff;
          res[k + 2] = (m >>> 8) & 0xff;
          res[k + 3] = m & 0xff;
        } else {
          res[k + 3] = m >>> 24;
          res[k + 2] = (m >>> 16) & 0xff;
          res[k + 1] = (m >>> 8) & 0xff;
          res[k] = m & 0xff;
        }
      }
      return res;
    }
    var split32_1 = split32;

    function rotr32$1(w, b) {
      return (w >>> b) | (w << (32 - b));
    }
    var rotr32_1 = rotr32$1;

    function rotl32$2(w, b) {
      return (w << b) | (w >>> (32 - b));
    }
    var rotl32_1 = rotl32$2;

    function sum32$3(a, b) {
      return (a + b) >>> 0;
    }
    var sum32_1 = sum32$3;

    function sum32_3$1(a, b, c) {
      return (a + b + c) >>> 0;
    }
    var sum32_3_1 = sum32_3$1;

    function sum32_4$2(a, b, c, d) {
      return (a + b + c + d) >>> 0;
    }
    var sum32_4_1 = sum32_4$2;

    function sum32_5$2(a, b, c, d, e) {
      return (a + b + c + d + e) >>> 0;
    }
    var sum32_5_1 = sum32_5$2;

    function sum64$1(buf, pos, ah, al) {
      var bh = buf[pos];
      var bl = buf[pos + 1];

      var lo = (al + bl) >>> 0;
      var hi = (lo < al ? 1 : 0) + ah + bh;
      buf[pos] = hi >>> 0;
      buf[pos + 1] = lo;
    }
    var sum64_1 = sum64$1;

    function sum64_hi$1(ah, al, bh, bl) {
      var lo = (al + bl) >>> 0;
      var hi = (lo < al ? 1 : 0) + ah + bh;
      return hi >>> 0;
    }
    var sum64_hi_1 = sum64_hi$1;

    function sum64_lo$1(ah, al, bh, bl) {
      var lo = al + bl;
      return lo >>> 0;
    }
    var sum64_lo_1 = sum64_lo$1;

    function sum64_4_hi$1(ah, al, bh, bl, ch, cl, dh, dl) {
      var carry = 0;
      var lo = al;
      lo = (lo + bl) >>> 0;
      carry += lo < al ? 1 : 0;
      lo = (lo + cl) >>> 0;
      carry += lo < cl ? 1 : 0;
      lo = (lo + dl) >>> 0;
      carry += lo < dl ? 1 : 0;

      var hi = ah + bh + ch + dh + carry;
      return hi >>> 0;
    }
    var sum64_4_hi_1 = sum64_4_hi$1;

    function sum64_4_lo$1(ah, al, bh, bl, ch, cl, dh, dl) {
      var lo = al + bl + cl + dl;
      return lo >>> 0;
    }
    var sum64_4_lo_1 = sum64_4_lo$1;

    function sum64_5_hi$1(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
      var carry = 0;
      var lo = al;
      lo = (lo + bl) >>> 0;
      carry += lo < al ? 1 : 0;
      lo = (lo + cl) >>> 0;
      carry += lo < cl ? 1 : 0;
      lo = (lo + dl) >>> 0;
      carry += lo < dl ? 1 : 0;
      lo = (lo + el) >>> 0;
      carry += lo < el ? 1 : 0;

      var hi = ah + bh + ch + dh + eh + carry;
      return hi >>> 0;
    }
    var sum64_5_hi_1 = sum64_5_hi$1;

    function sum64_5_lo$1(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
      var lo = al + bl + cl + dl + el;

      return lo >>> 0;
    }
    var sum64_5_lo_1 = sum64_5_lo$1;

    function rotr64_hi$1(ah, al, num) {
      var r = (al << (32 - num)) | (ah >>> num);
      return r >>> 0;
    }
    var rotr64_hi_1 = rotr64_hi$1;

    function rotr64_lo$1(ah, al, num) {
      var r = (ah << (32 - num)) | (al >>> num);
      return r >>> 0;
    }
    var rotr64_lo_1 = rotr64_lo$1;

    function shr64_hi$1(ah, al, num) {
      return ah >>> num;
    }
    var shr64_hi_1 = shr64_hi$1;

    function shr64_lo$1(ah, al, num) {
      var r = (ah << (32 - num)) | (al >>> num);
      return r >>> 0;
    }
    var shr64_lo_1 = shr64_lo$1;

    var utils$2 = {
    	inherits: inherits_1,
    	toArray: toArray_1,
    	toHex: toHex_1,
    	htonl: htonl_1,
    	toHex32: toHex32_1,
    	zero2: zero2_1,
    	zero8: zero8_1,
    	join32: join32_1,
    	split32: split32_1,
    	rotr32: rotr32_1,
    	rotl32: rotl32_1,
    	sum32: sum32_1,
    	sum32_3: sum32_3_1,
    	sum32_4: sum32_4_1,
    	sum32_5: sum32_5_1,
    	sum64: sum64_1,
    	sum64_hi: sum64_hi_1,
    	sum64_lo: sum64_lo_1,
    	sum64_4_hi: sum64_4_hi_1,
    	sum64_4_lo: sum64_4_lo_1,
    	sum64_5_hi: sum64_5_hi_1,
    	sum64_5_lo: sum64_5_lo_1,
    	rotr64_hi: rotr64_hi_1,
    	rotr64_lo: rotr64_lo_1,
    	shr64_hi: shr64_hi_1,
    	shr64_lo: shr64_lo_1
    };

    function BlockHash$4() {
      this.pending = null;
      this.pendingTotal = 0;
      this.blockSize = this.constructor.blockSize;
      this.outSize = this.constructor.outSize;
      this.hmacStrength = this.constructor.hmacStrength;
      this.padLength = this.constructor.padLength / 8;
      this.endian = 'big';

      this._delta8 = this.blockSize / 8;
      this._delta32 = this.blockSize / 32;
    }
    var BlockHash_1 = BlockHash$4;

    BlockHash$4.prototype.update = function update(msg, enc) {
      // Convert message to array, pad it, and join into 32bit blocks
      msg = utils$2.toArray(msg, enc);
      if (!this.pending)
        this.pending = msg;
      else
        this.pending = this.pending.concat(msg);
      this.pendingTotal += msg.length;

      // Enough data, try updating
      if (this.pending.length >= this._delta8) {
        msg = this.pending;

        // Process pending data in blocks
        var r = msg.length % this._delta8;
        this.pending = msg.slice(msg.length - r, msg.length);
        if (this.pending.length === 0)
          this.pending = null;

        msg = utils$2.join32(msg, 0, msg.length - r, this.endian);
        for (var i = 0; i < msg.length; i += this._delta32)
          this._update(msg, i, i + this._delta32);
      }

      return this;
    };

    BlockHash$4.prototype.digest = function digest(enc) {
      this.update(this._pad());
      minimalisticAssert$1(this.pending === null);

      return this._digest(enc);
    };

    BlockHash$4.prototype._pad = function pad() {
      var len = this.pendingTotal;
      var bytes = this._delta8;
      var k = bytes - ((len + this.padLength) % bytes);
      var res = new Array(k + this.padLength);
      res[0] = 0x80;
      for (var i = 1; i < k; i++)
        res[i] = 0;

      // Append length
      len <<= 3;
      if (this.endian === 'big') {
        for (var t = 8; t < this.padLength; t++)
          res[i++] = 0;

        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = (len >>> 24) & 0xff;
        res[i++] = (len >>> 16) & 0xff;
        res[i++] = (len >>> 8) & 0xff;
        res[i++] = len & 0xff;
      } else {
        res[i++] = len & 0xff;
        res[i++] = (len >>> 8) & 0xff;
        res[i++] = (len >>> 16) & 0xff;
        res[i++] = (len >>> 24) & 0xff;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;

        for (t = 8; t < this.padLength; t++)
          res[i++] = 0;
      }

      return res;
    };

    var common$2 = {
    	BlockHash: BlockHash_1
    };

    var rotr32 = utils$2.rotr32;

    function ft_1$1(s, x, y, z) {
      if (s === 0)
        return ch32$1(x, y, z);
      if (s === 1 || s === 3)
        return p32(x, y, z);
      if (s === 2)
        return maj32$1(x, y, z);
    }
    var ft_1_1 = ft_1$1;

    function ch32$1(x, y, z) {
      return (x & y) ^ ((~x) & z);
    }
    var ch32_1 = ch32$1;

    function maj32$1(x, y, z) {
      return (x & y) ^ (x & z) ^ (y & z);
    }
    var maj32_1 = maj32$1;

    function p32(x, y, z) {
      return x ^ y ^ z;
    }
    var p32_1 = p32;

    function s0_256$1(x) {
      return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
    }
    var s0_256_1 = s0_256$1;

    function s1_256$1(x) {
      return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
    }
    var s1_256_1 = s1_256$1;

    function g0_256$1(x) {
      return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
    }
    var g0_256_1 = g0_256$1;

    function g1_256$1(x) {
      return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
    }
    var g1_256_1 = g1_256$1;

    var common$1 = {
    	ft_1: ft_1_1,
    	ch32: ch32_1,
    	maj32: maj32_1,
    	p32: p32_1,
    	s0_256: s0_256_1,
    	s1_256: s1_256_1,
    	g0_256: g0_256_1,
    	g1_256: g1_256_1
    };

    var rotl32$1 = utils$2.rotl32;
    var sum32$2 = utils$2.sum32;
    var sum32_5$1 = utils$2.sum32_5;
    var ft_1 = common$1.ft_1;
    var BlockHash$3 = common$2.BlockHash;

    var sha1_K = [
      0x5A827999, 0x6ED9EBA1,
      0x8F1BBCDC, 0xCA62C1D6
    ];

    function SHA1() {
      if (!(this instanceof SHA1))
        return new SHA1();

      BlockHash$3.call(this);
      this.h = [
        0x67452301, 0xefcdab89, 0x98badcfe,
        0x10325476, 0xc3d2e1f0 ];
      this.W = new Array(80);
    }

    utils$2.inherits(SHA1, BlockHash$3);
    var _1 = SHA1;

    SHA1.blockSize = 512;
    SHA1.outSize = 160;
    SHA1.hmacStrength = 80;
    SHA1.padLength = 64;

    SHA1.prototype._update = function _update(msg, start) {
      var W = this.W;

      for (var i = 0; i < 16; i++)
        W[i] = msg[start + i];

      for(; i < W.length; i++)
        W[i] = rotl32$1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);

      var a = this.h[0];
      var b = this.h[1];
      var c = this.h[2];
      var d = this.h[3];
      var e = this.h[4];

      for (i = 0; i < W.length; i++) {
        var s = ~~(i / 20);
        var t = sum32_5$1(rotl32$1(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
        e = d;
        d = c;
        c = rotl32$1(b, 30);
        b = a;
        a = t;
      }

      this.h[0] = sum32$2(this.h[0], a);
      this.h[1] = sum32$2(this.h[1], b);
      this.h[2] = sum32$2(this.h[2], c);
      this.h[3] = sum32$2(this.h[3], d);
      this.h[4] = sum32$2(this.h[4], e);
    };

    SHA1.prototype._digest = function digest(enc) {
      if (enc === 'hex')
        return utils$2.toHex32(this.h, 'big');
      else
        return utils$2.split32(this.h, 'big');
    };

    var sum32$1 = utils$2.sum32;
    var sum32_4$1 = utils$2.sum32_4;
    var sum32_5 = utils$2.sum32_5;
    var ch32 = common$1.ch32;
    var maj32 = common$1.maj32;
    var s0_256 = common$1.s0_256;
    var s1_256 = common$1.s1_256;
    var g0_256 = common$1.g0_256;
    var g1_256 = common$1.g1_256;

    var BlockHash$2 = common$2.BlockHash;

    var sha256_K = [
      0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
      0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
      0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
      0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
      0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
      0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
      0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
      0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
      0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
      0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
      0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
      0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
      0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
      0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
      0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
      0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
    ];

    function SHA256$1() {
      if (!(this instanceof SHA256$1))
        return new SHA256$1();

      BlockHash$2.call(this);
      this.h = [
        0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
        0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
      ];
      this.k = sha256_K;
      this.W = new Array(64);
    }
    utils$2.inherits(SHA256$1, BlockHash$2);
    var _256 = SHA256$1;

    SHA256$1.blockSize = 512;
    SHA256$1.outSize = 256;
    SHA256$1.hmacStrength = 192;
    SHA256$1.padLength = 64;

    SHA256$1.prototype._update = function _update(msg, start) {
      var W = this.W;

      for (var i = 0; i < 16; i++)
        W[i] = msg[start + i];
      for (; i < W.length; i++)
        W[i] = sum32_4$1(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);

      var a = this.h[0];
      var b = this.h[1];
      var c = this.h[2];
      var d = this.h[3];
      var e = this.h[4];
      var f = this.h[5];
      var g = this.h[6];
      var h = this.h[7];

      minimalisticAssert$1(this.k.length === W.length);
      for (i = 0; i < W.length; i++) {
        var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
        var T2 = sum32$1(s0_256(a), maj32(a, b, c));
        h = g;
        g = f;
        f = e;
        e = sum32$1(d, T1);
        d = c;
        c = b;
        b = a;
        a = sum32$1(T1, T2);
      }

      this.h[0] = sum32$1(this.h[0], a);
      this.h[1] = sum32$1(this.h[1], b);
      this.h[2] = sum32$1(this.h[2], c);
      this.h[3] = sum32$1(this.h[3], d);
      this.h[4] = sum32$1(this.h[4], e);
      this.h[5] = sum32$1(this.h[5], f);
      this.h[6] = sum32$1(this.h[6], g);
      this.h[7] = sum32$1(this.h[7], h);
    };

    SHA256$1.prototype._digest = function digest(enc) {
      if (enc === 'hex')
        return utils$2.toHex32(this.h, 'big');
      else
        return utils$2.split32(this.h, 'big');
    };

    function SHA224() {
      if (!(this instanceof SHA224))
        return new SHA224();

      _256.call(this);
      this.h = [
        0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,
        0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];
    }
    utils$2.inherits(SHA224, _256);
    var _224 = SHA224;

    SHA224.blockSize = 512;
    SHA224.outSize = 224;
    SHA224.hmacStrength = 192;
    SHA224.padLength = 64;

    SHA224.prototype._digest = function digest(enc) {
      // Just truncate output
      if (enc === 'hex')
        return utils$2.toHex32(this.h.slice(0, 7), 'big');
      else
        return utils$2.split32(this.h.slice(0, 7), 'big');
    };

    var rotr64_hi = utils$2.rotr64_hi;
    var rotr64_lo = utils$2.rotr64_lo;
    var shr64_hi = utils$2.shr64_hi;
    var shr64_lo = utils$2.shr64_lo;
    var sum64 = utils$2.sum64;
    var sum64_hi = utils$2.sum64_hi;
    var sum64_lo = utils$2.sum64_lo;
    var sum64_4_hi = utils$2.sum64_4_hi;
    var sum64_4_lo = utils$2.sum64_4_lo;
    var sum64_5_hi = utils$2.sum64_5_hi;
    var sum64_5_lo = utils$2.sum64_5_lo;

    var BlockHash$1 = common$2.BlockHash;

    var sha512_K = [
      0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
      0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
      0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
      0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
      0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
      0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
      0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
      0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
      0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
      0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
      0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
      0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
      0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
      0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
      0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
      0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
      0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
      0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
      0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
      0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
      0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
      0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
      0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
      0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
      0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
      0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
      0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
      0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
      0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
      0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
      0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
      0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
      0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
      0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
      0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
      0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
      0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
      0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
      0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
      0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
    ];

    function SHA512() {
      if (!(this instanceof SHA512))
        return new SHA512();

      BlockHash$1.call(this);
      this.h = [
        0x6a09e667, 0xf3bcc908,
        0xbb67ae85, 0x84caa73b,
        0x3c6ef372, 0xfe94f82b,
        0xa54ff53a, 0x5f1d36f1,
        0x510e527f, 0xade682d1,
        0x9b05688c, 0x2b3e6c1f,
        0x1f83d9ab, 0xfb41bd6b,
        0x5be0cd19, 0x137e2179 ];
      this.k = sha512_K;
      this.W = new Array(160);
    }
    utils$2.inherits(SHA512, BlockHash$1);
    var _512 = SHA512;

    SHA512.blockSize = 1024;
    SHA512.outSize = 512;
    SHA512.hmacStrength = 192;
    SHA512.padLength = 128;

    SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
      var W = this.W;

      // 32 x 32bit words
      for (var i = 0; i < 32; i++)
        W[i] = msg[start + i];
      for (; i < W.length; i += 2) {
        var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2
        var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
        var c1_hi = W[i - 14];  // i - 7
        var c1_lo = W[i - 13];
        var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15
        var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
        var c3_hi = W[i - 32];  // i - 16
        var c3_lo = W[i - 31];

        W[i] = sum64_4_hi(
          c0_hi, c0_lo,
          c1_hi, c1_lo,
          c2_hi, c2_lo,
          c3_hi, c3_lo);
        W[i + 1] = sum64_4_lo(
          c0_hi, c0_lo,
          c1_hi, c1_lo,
          c2_hi, c2_lo,
          c3_hi, c3_lo);
      }
    };

    SHA512.prototype._update = function _update(msg, start) {
      this._prepareBlock(msg, start);

      var W = this.W;

      var ah = this.h[0];
      var al = this.h[1];
      var bh = this.h[2];
      var bl = this.h[3];
      var ch = this.h[4];
      var cl = this.h[5];
      var dh = this.h[6];
      var dl = this.h[7];
      var eh = this.h[8];
      var el = this.h[9];
      var fh = this.h[10];
      var fl = this.h[11];
      var gh = this.h[12];
      var gl = this.h[13];
      var hh = this.h[14];
      var hl = this.h[15];

      minimalisticAssert$1(this.k.length === W.length);
      for (var i = 0; i < W.length; i += 2) {
        var c0_hi = hh;
        var c0_lo = hl;
        var c1_hi = s1_512_hi(eh, el);
        var c1_lo = s1_512_lo(eh, el);
        var c2_hi = ch64_hi(eh, el, fh, fl, gh);
        var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
        var c3_hi = this.k[i];
        var c3_lo = this.k[i + 1];
        var c4_hi = W[i];
        var c4_lo = W[i + 1];

        var T1_hi = sum64_5_hi(
          c0_hi, c0_lo,
          c1_hi, c1_lo,
          c2_hi, c2_lo,
          c3_hi, c3_lo,
          c4_hi, c4_lo);
        var T1_lo = sum64_5_lo(
          c0_hi, c0_lo,
          c1_hi, c1_lo,
          c2_hi, c2_lo,
          c3_hi, c3_lo,
          c4_hi, c4_lo);

        c0_hi = s0_512_hi(ah, al);
        c0_lo = s0_512_lo(ah, al);
        c1_hi = maj64_hi(ah, al, bh, bl, ch);
        c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);

        var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
        var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);

        hh = gh;
        hl = gl;

        gh = fh;
        gl = fl;

        fh = eh;
        fl = el;

        eh = sum64_hi(dh, dl, T1_hi, T1_lo);
        el = sum64_lo(dl, dl, T1_hi, T1_lo);

        dh = ch;
        dl = cl;

        ch = bh;
        cl = bl;

        bh = ah;
        bl = al;

        ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
        al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
      }

      sum64(this.h, 0, ah, al);
      sum64(this.h, 2, bh, bl);
      sum64(this.h, 4, ch, cl);
      sum64(this.h, 6, dh, dl);
      sum64(this.h, 8, eh, el);
      sum64(this.h, 10, fh, fl);
      sum64(this.h, 12, gh, gl);
      sum64(this.h, 14, hh, hl);
    };

    SHA512.prototype._digest = function digest(enc) {
      if (enc === 'hex')
        return utils$2.toHex32(this.h, 'big');
      else
        return utils$2.split32(this.h, 'big');
    };

    function ch64_hi(xh, xl, yh, yl, zh) {
      var r = (xh & yh) ^ ((~xh) & zh);
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function ch64_lo(xh, xl, yh, yl, zh, zl) {
      var r = (xl & yl) ^ ((~xl) & zl);
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function maj64_hi(xh, xl, yh, yl, zh) {
      var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function maj64_lo(xh, xl, yh, yl, zh, zl) {
      var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function s0_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 28);
      var c1_hi = rotr64_hi(xl, xh, 2);  // 34
      var c2_hi = rotr64_hi(xl, xh, 7);  // 39

      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function s0_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 28);
      var c1_lo = rotr64_lo(xl, xh, 2);  // 34
      var c2_lo = rotr64_lo(xl, xh, 7);  // 39

      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function s1_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 14);
      var c1_hi = rotr64_hi(xh, xl, 18);
      var c2_hi = rotr64_hi(xl, xh, 9);  // 41

      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function s1_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 14);
      var c1_lo = rotr64_lo(xh, xl, 18);
      var c2_lo = rotr64_lo(xl, xh, 9);  // 41

      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function g0_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 1);
      var c1_hi = rotr64_hi(xh, xl, 8);
      var c2_hi = shr64_hi(xh, xl, 7);

      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function g0_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 1);
      var c1_lo = rotr64_lo(xh, xl, 8);
      var c2_lo = shr64_lo(xh, xl, 7);

      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function g1_512_hi(xh, xl) {
      var c0_hi = rotr64_hi(xh, xl, 19);
      var c1_hi = rotr64_hi(xl, xh, 29);  // 61
      var c2_hi = shr64_hi(xh, xl, 6);

      var r = c0_hi ^ c1_hi ^ c2_hi;
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function g1_512_lo(xh, xl) {
      var c0_lo = rotr64_lo(xh, xl, 19);
      var c1_lo = rotr64_lo(xl, xh, 29);  // 61
      var c2_lo = shr64_lo(xh, xl, 6);

      var r = c0_lo ^ c1_lo ^ c2_lo;
      if (r < 0)
        r += 0x100000000;
      return r;
    }

    function SHA384() {
      if (!(this instanceof SHA384))
        return new SHA384();

      _512.call(this);
      this.h = [
        0xcbbb9d5d, 0xc1059ed8,
        0x629a292a, 0x367cd507,
        0x9159015a, 0x3070dd17,
        0x152fecd8, 0xf70e5939,
        0x67332667, 0xffc00b31,
        0x8eb44a87, 0x68581511,
        0xdb0c2e0d, 0x64f98fa7,
        0x47b5481d, 0xbefa4fa4 ];
    }
    utils$2.inherits(SHA384, _512);
    var _384 = SHA384;

    SHA384.blockSize = 1024;
    SHA384.outSize = 384;
    SHA384.hmacStrength = 192;
    SHA384.padLength = 128;

    SHA384.prototype._digest = function digest(enc) {
      if (enc === 'hex')
        return utils$2.toHex32(this.h.slice(0, 12), 'big');
      else
        return utils$2.split32(this.h.slice(0, 12), 'big');
    };

    var sha1 = _1;
    var sha224 = _224;
    var sha256$2 = _256;
    var sha384 = _384;
    var sha512 = _512;

    var sha = {
    	sha1: sha1,
    	sha224: sha224,
    	sha256: sha256$2,
    	sha384: sha384,
    	sha512: sha512
    };

    var rotl32 = utils$2.rotl32;
    var sum32 = utils$2.sum32;
    var sum32_3 = utils$2.sum32_3;
    var sum32_4 = utils$2.sum32_4;
    var BlockHash = common$2.BlockHash;

    function RIPEMD160() {
      if (!(this instanceof RIPEMD160))
        return new RIPEMD160();

      BlockHash.call(this);

      this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];
      this.endian = 'little';
    }
    utils$2.inherits(RIPEMD160, BlockHash);
    var ripemd160$1 = RIPEMD160;

    RIPEMD160.blockSize = 512;
    RIPEMD160.outSize = 160;
    RIPEMD160.hmacStrength = 192;
    RIPEMD160.padLength = 64;

    RIPEMD160.prototype._update = function update(msg, start) {
      var A = this.h[0];
      var B = this.h[1];
      var C = this.h[2];
      var D = this.h[3];
      var E = this.h[4];
      var Ah = A;
      var Bh = B;
      var Ch = C;
      var Dh = D;
      var Eh = E;
      for (var j = 0; j < 80; j++) {
        var T = sum32(
          rotl32(
            sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),
            s[j]),
          E);
        A = E;
        E = D;
        D = rotl32(C, 10);
        C = B;
        B = T;
        T = sum32(
          rotl32(
            sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),
            sh[j]),
          Eh);
        Ah = Eh;
        Eh = Dh;
        Dh = rotl32(Ch, 10);
        Ch = Bh;
        Bh = T;
      }
      T = sum32_3(this.h[1], C, Dh);
      this.h[1] = sum32_3(this.h[2], D, Eh);
      this.h[2] = sum32_3(this.h[3], E, Ah);
      this.h[3] = sum32_3(this.h[4], A, Bh);
      this.h[4] = sum32_3(this.h[0], B, Ch);
      this.h[0] = T;
    };

    RIPEMD160.prototype._digest = function digest(enc) {
      if (enc === 'hex')
        return utils$2.toHex32(this.h, 'little');
      else
        return utils$2.split32(this.h, 'little');
    };

    function f(j, x, y, z) {
      if (j <= 15)
        return x ^ y ^ z;
      else if (j <= 31)
        return (x & y) | ((~x) & z);
      else if (j <= 47)
        return (x | (~y)) ^ z;
      else if (j <= 63)
        return (x & z) | (y & (~z));
      else
        return x ^ (y | (~z));
    }

    function K(j) {
      if (j <= 15)
        return 0x00000000;
      else if (j <= 31)
        return 0x5a827999;
      else if (j <= 47)
        return 0x6ed9eba1;
      else if (j <= 63)
        return 0x8f1bbcdc;
      else
        return 0xa953fd4e;
    }

    function Kh(j) {
      if (j <= 15)
        return 0x50a28be6;
      else if (j <= 31)
        return 0x5c4dd124;
      else if (j <= 47)
        return 0x6d703ef3;
      else if (j <= 63)
        return 0x7a6d76e9;
      else
        return 0x00000000;
    }

    var r = [
      0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,
      7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
      3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,
      1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
      4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13
    ];

    var rh = [
      5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,
      6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
      15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,
      8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
      12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11
    ];

    var s = [
      11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,
      7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,
      11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,
      11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,
      9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6
    ];

    var sh = [
      8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,
      9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,
      9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,
      15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,
      8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11
    ];

    var ripemd = {
    	ripemd160: ripemd160$1
    };

    function Hmac(hash, key, enc) {
      if (!(this instanceof Hmac))
        return new Hmac(hash, key, enc);
      this.Hash = hash;
      this.blockSize = hash.blockSize / 8;
      this.outSize = hash.outSize / 8;
      this.inner = null;
      this.outer = null;

      this._init(utils$2.toArray(key, enc));
    }
    var hmac$1 = Hmac;

    Hmac.prototype._init = function init(key) {
      // Shorten key, if needed
      if (key.length > this.blockSize)
        key = new this.Hash().update(key).digest();
      minimalisticAssert$1(key.length <= this.blockSize);

      // Add padding to key
      for (var i = key.length; i < this.blockSize; i++)
        key.push(0);

      for (i = 0; i < key.length; i++)
        key[i] ^= 0x36;
      this.inner = new this.Hash().update(key);

      // 0x36 ^ 0x5c = 0x6a
      for (i = 0; i < key.length; i++)
        key[i] ^= 0x6a;
      this.outer = new this.Hash().update(key);
    };

    Hmac.prototype.update = function update(msg, enc) {
      this.inner.update(msg, enc);
      return this;
    };

    Hmac.prototype.digest = function digest(enc) {
      this.outer.update(this.inner.digest());
      return this.outer.digest(enc);
    };

    var hash_1 = createCommonjsModule$1(function (module, exports) {
    var hash = exports;

    hash.utils = utils$2;
    hash.common = common$2;
    hash.sha = sha;
    hash.ripemd = ripemd;
    hash.hmac = hmac$1;

    // Proxy hash functions to the main object
    hash.sha1 = hash.sha.sha1;
    hash.sha256 = hash.sha.sha256;
    hash.sha224 = hash.sha.sha224;
    hash.sha384 = hash.sha.sha384;
    hash.sha512 = hash.sha.sha512;
    hash.ripemd160 = hash.ripemd.ripemd160;
    });

    var hash$1 = hash_1;

    function createCommonjsModule(fn, basedir, module) {
    	return module = {
    		path: basedir,
    		exports: {},
    		require: function (path, base) {
    			return commonjsRequire(path, (base === undefined || base === null) ? module.path : base);
    		}
    	}, fn(module, module.exports), module.exports;
    }

    function commonjsRequire () {
    	throw new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');
    }

    var minimalisticAssert = assert$1;

    function assert$1(val, msg) {
      if (!val)
        throw new Error(msg || 'Assertion failed');
    }

    assert$1.equal = function assertEqual(l, r, msg) {
      if (l != r)
        throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));
    };

    var utils_1 = createCommonjsModule(function (module, exports) {

    var utils = exports;

    function toArray(msg, enc) {
      if (Array.isArray(msg))
        return msg.slice();
      if (!msg)
        return [];
      var res = [];
      if (typeof msg !== 'string') {
        for (var i = 0; i < msg.length; i++)
          res[i] = msg[i] | 0;
        return res;
      }
      if (enc === 'hex') {
        msg = msg.replace(/[^a-z0-9]+/ig, '');
        if (msg.length % 2 !== 0)
          msg = '0' + msg;
        for (var i = 0; i < msg.length; i += 2)
          res.push(parseInt(msg[i] + msg[i + 1], 16));
      } else {
        for (var i = 0; i < msg.length; i++) {
          var c = msg.charCodeAt(i);
          var hi = c >> 8;
          var lo = c & 0xff;
          if (hi)
            res.push(hi, lo);
          else
            res.push(lo);
        }
      }
      return res;
    }
    utils.toArray = toArray;

    function zero2(word) {
      if (word.length === 1)
        return '0' + word;
      else
        return word;
    }
    utils.zero2 = zero2;

    function toHex(msg) {
      var res = '';
      for (var i = 0; i < msg.length; i++)
        res += zero2(msg[i].toString(16));
      return res;
    }
    utils.toHex = toHex;

    utils.encode = function encode(arr, enc) {
      if (enc === 'hex')
        return toHex(arr);
      else
        return arr;
    };
    });

    var utils_1$1 = createCommonjsModule(function (module, exports) {

    var utils = exports;




    utils.assert = minimalisticAssert;
    utils.toArray = utils_1.toArray;
    utils.zero2 = utils_1.zero2;
    utils.toHex = utils_1.toHex;
    utils.encode = utils_1.encode;

    // Represent num in a w-NAF form
    function getNAF(num, w, bits) {
      var naf = new Array(Math.max(num.bitLength(), bits) + 1);
      naf.fill(0);

      var ws = 1 << (w + 1);
      var k = num.clone();

      for (var i = 0; i < naf.length; i++) {
        var z;
        var mod = k.andln(ws - 1);
        if (k.isOdd()) {
          if (mod > (ws >> 1) - 1)
            z = (ws >> 1) - mod;
          else
            z = mod;
          k.isubn(z);
        } else {
          z = 0;
        }

        naf[i] = z;
        k.iushrn(1);
      }

      return naf;
    }
    utils.getNAF = getNAF;

    // Represent k1, k2 in a Joint Sparse Form
    function getJSF(k1, k2) {
      var jsf = [
        [],
        [],
      ];

      k1 = k1.clone();
      k2 = k2.clone();
      var d1 = 0;
      var d2 = 0;
      var m8;
      while (k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0) {
        // First phase
        var m14 = (k1.andln(3) + d1) & 3;
        var m24 = (k2.andln(3) + d2) & 3;
        if (m14 === 3)
          m14 = -1;
        if (m24 === 3)
          m24 = -1;
        var u1;
        if ((m14 & 1) === 0) {
          u1 = 0;
        } else {
          m8 = (k1.andln(7) + d1) & 7;
          if ((m8 === 3 || m8 === 5) && m24 === 2)
            u1 = -m14;
          else
            u1 = m14;
        }
        jsf[0].push(u1);

        var u2;
        if ((m24 & 1) === 0) {
          u2 = 0;
        } else {
          m8 = (k2.andln(7) + d2) & 7;
          if ((m8 === 3 || m8 === 5) && m14 === 2)
            u2 = -m24;
          else
            u2 = m24;
        }
        jsf[1].push(u2);

        // Second phase
        if (2 * d1 === u1 + 1)
          d1 = 1 - d1;
        if (2 * d2 === u2 + 1)
          d2 = 1 - d2;
        k1.iushrn(1);
        k2.iushrn(1);
      }

      return jsf;
    }
    utils.getJSF = getJSF;

    function cachedProperty(obj, name, computer) {
      var key = '_' + name;
      obj.prototype[name] = function cachedProperty() {
        return this[key] !== undefined ? this[key] :
          this[key] = computer.call(this);
      };
    }
    utils.cachedProperty = cachedProperty;

    function parseBytes(bytes) {
      return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') :
        bytes;
    }
    utils.parseBytes = parseBytes;

    function intFromLE(bytes) {
      return new bn(bytes, 'hex', 'le');
    }
    utils.intFromLE = intFromLE;
    });



    var getNAF = utils_1$1.getNAF;
    var getJSF = utils_1$1.getJSF;
    var assert$1$1 = utils_1$1.assert;

    function BaseCurve(type, conf) {
      this.type = type;
      this.p = new bn(conf.p, 16);

      // Use Montgomery, when there is no fast reduction for the prime
      this.red = conf.prime ? bn.red(conf.prime) : bn.mont(this.p);

      // Useful for many curves
      this.zero = new bn(0).toRed(this.red);
      this.one = new bn(1).toRed(this.red);
      this.two = new bn(2).toRed(this.red);

      // Curve configuration, optional
      this.n = conf.n && new bn(conf.n, 16);
      this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);

      // Temporary arrays
      this._wnafT1 = new Array(4);
      this._wnafT2 = new Array(4);
      this._wnafT3 = new Array(4);
      this._wnafT4 = new Array(4);

      this._bitLength = this.n ? this.n.bitLength() : 0;

      // Generalized Greg Maxwell's trick
      var adjustCount = this.n && this.p.div(this.n);
      if (!adjustCount || adjustCount.cmpn(100) > 0) {
        this.redN = null;
      } else {
        this._maxwellTrick = true;
        this.redN = this.n.toRed(this.red);
      }
    }
    var base = BaseCurve;

    BaseCurve.prototype.point = function point() {
      throw new Error('Not implemented');
    };

    BaseCurve.prototype.validate = function validate() {
      throw new Error('Not implemented');
    };

    BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
      assert$1$1(p.precomputed);
      var doubles = p._getDoubles();

      var naf = getNAF(k, 1, this._bitLength);
      var I = (1 << (doubles.step + 1)) - (doubles.step % 2 === 0 ? 2 : 1);
      I /= 3;

      // Translate into more windowed form
      var repr = [];
      var j;
      var nafW;
      for (j = 0; j < naf.length; j += doubles.step) {
        nafW = 0;
        for (var l = j + doubles.step - 1; l >= j; l--)
          nafW = (nafW << 1) + naf[l];
        repr.push(nafW);
      }

      var a = this.jpoint(null, null, null);
      var b = this.jpoint(null, null, null);
      for (var i = I; i > 0; i--) {
        for (j = 0; j < repr.length; j++) {
          nafW = repr[j];
          if (nafW === i)
            b = b.mixedAdd(doubles.points[j]);
          else if (nafW === -i)
            b = b.mixedAdd(doubles.points[j].neg());
        }
        a = a.add(b);
      }
      return a.toP();
    };

    BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
      var w = 4;

      // Precompute window
      var nafPoints = p._getNAFPoints(w);
      w = nafPoints.wnd;
      var wnd = nafPoints.points;

      // Get NAF form
      var naf = getNAF(k, w, this._bitLength);

      // Add `this`*(N+1) for every w-NAF index
      var acc = this.jpoint(null, null, null);
      for (var i = naf.length - 1; i >= 0; i--) {
        // Count zeroes
        for (var l = 0; i >= 0 && naf[i] === 0; i--)
          l++;
        if (i >= 0)
          l++;
        acc = acc.dblp(l);

        if (i < 0)
          break;
        var z = naf[i];
        assert$1$1(z !== 0);
        if (p.type === 'affine') {
          // J +- P
          if (z > 0)
            acc = acc.mixedAdd(wnd[(z - 1) >> 1]);
          else
            acc = acc.mixedAdd(wnd[(-z - 1) >> 1].neg());
        } else {
          // J +- J
          if (z > 0)
            acc = acc.add(wnd[(z - 1) >> 1]);
          else
            acc = acc.add(wnd[(-z - 1) >> 1].neg());
        }
      }
      return p.type === 'affine' ? acc.toP() : acc;
    };

    BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW,
      points,
      coeffs,
      len,
      jacobianResult) {
      var wndWidth = this._wnafT1;
      var wnd = this._wnafT2;
      var naf = this._wnafT3;

      // Fill all arrays
      var max = 0;
      var i;
      var j;
      var p;
      for (i = 0; i < len; i++) {
        p = points[i];
        var nafPoints = p._getNAFPoints(defW);
        wndWidth[i] = nafPoints.wnd;
        wnd[i] = nafPoints.points;
      }

      // Comb small window NAFs
      for (i = len - 1; i >= 1; i -= 2) {
        var a = i - 1;
        var b = i;
        if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
          naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
          naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
          max = Math.max(naf[a].length, max);
          max = Math.max(naf[b].length, max);
          continue;
        }

        var comb = [
          points[a], /* 1 */
          null, /* 3 */
          null, /* 5 */
          points[b], /* 7 */
        ];

        // Try to avoid Projective points, if possible
        if (points[a].y.cmp(points[b].y) === 0) {
          comb[1] = points[a].add(points[b]);
          comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
          comb[1] = points[a].toJ().mixedAdd(points[b]);
          comb[2] = points[a].add(points[b].neg());
        } else {
          comb[1] = points[a].toJ().mixedAdd(points[b]);
          comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        }

        var index = [
          -3, /* -1 -1 */
          -1, /* -1 0 */
          -5, /* -1 1 */
          -7, /* 0 -1 */
          0, /* 0 0 */
          7, /* 0 1 */
          5, /* 1 -1 */
          1, /* 1 0 */
          3,  /* 1 1 */
        ];

        var jsf = getJSF(coeffs[a], coeffs[b]);
        max = Math.max(jsf[0].length, max);
        naf[a] = new Array(max);
        naf[b] = new Array(max);
        for (j = 0; j < max; j++) {
          var ja = jsf[0][j] | 0;
          var jb = jsf[1][j] | 0;

          naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
          naf[b][j] = 0;
          wnd[a] = comb;
        }
      }

      var acc = this.jpoint(null, null, null);
      var tmp = this._wnafT4;
      for (i = max; i >= 0; i--) {
        var k = 0;

        while (i >= 0) {
          var zero = true;
          for (j = 0; j < len; j++) {
            tmp[j] = naf[j][i] | 0;
            if (tmp[j] !== 0)
              zero = false;
          }
          if (!zero)
            break;
          k++;
          i--;
        }
        if (i >= 0)
          k++;
        acc = acc.dblp(k);
        if (i < 0)
          break;

        for (j = 0; j < len; j++) {
          var z = tmp[j];
          if (z === 0)
            continue;
          else if (z > 0)
            p = wnd[j][(z - 1) >> 1];
          else if (z < 0)
            p = wnd[j][(-z - 1) >> 1].neg();

          if (p.type === 'affine')
            acc = acc.mixedAdd(p);
          else
            acc = acc.add(p);
        }
      }
      // Zeroify references
      for (i = 0; i < len; i++)
        wnd[i] = null;

      if (jacobianResult)
        return acc;
      else
        return acc.toP();
    };

    function BasePoint(curve, type) {
      this.curve = curve;
      this.type = type;
      this.precomputed = null;
    }
    BaseCurve.BasePoint = BasePoint;

    BasePoint.prototype.eq = function eq(/*other*/) {
      throw new Error('Not implemented');
    };

    BasePoint.prototype.validate = function validate() {
      return this.curve.validate(this);
    };

    BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
      bytes = utils_1$1.toArray(bytes, enc);

      var len = this.p.byteLength();

      // uncompressed, hybrid-odd, hybrid-even
      if ((bytes[0] === 0x04 || bytes[0] === 0x06 || bytes[0] === 0x07) &&
          bytes.length - 1 === 2 * len) {
        if (bytes[0] === 0x06)
          assert$1$1(bytes[bytes.length - 1] % 2 === 0);
        else if (bytes[0] === 0x07)
          assert$1$1(bytes[bytes.length - 1] % 2 === 1);

        var res =  this.point(bytes.slice(1, 1 + len),
          bytes.slice(1 + len, 1 + 2 * len));

        return res;
      } else if ((bytes[0] === 0x02 || bytes[0] === 0x03) &&
                  bytes.length - 1 === len) {
        return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 0x03);
      }
      throw new Error('Unknown point format');
    };

    BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
      return this.encode(enc, true);
    };

    BasePoint.prototype._encode = function _encode(compact) {
      var len = this.curve.p.byteLength();
      var x = this.getX().toArray('be', len);

      if (compact)
        return [ this.getY().isEven() ? 0x02 : 0x03 ].concat(x);

      return [ 0x04 ].concat(x, this.getY().toArray('be', len));
    };

    BasePoint.prototype.encode = function encode(enc, compact) {
      return utils_1$1.encode(this._encode(compact), enc);
    };

    BasePoint.prototype.precompute = function precompute(power) {
      if (this.precomputed)
        return this;

      var precomputed = {
        doubles: null,
        naf: null,
        beta: null,
      };
      precomputed.naf = this._getNAFPoints(8);
      precomputed.doubles = this._getDoubles(4, power);
      precomputed.beta = this._getBeta();
      this.precomputed = precomputed;

      return this;
    };

    BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
      if (!this.precomputed)
        return false;

      var doubles = this.precomputed.doubles;
      if (!doubles)
        return false;

      return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
    };

    BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
      if (this.precomputed && this.precomputed.doubles)
        return this.precomputed.doubles;

      var doubles = [ this ];
      var acc = this;
      for (var i = 0; i < power; i += step) {
        for (var j = 0; j < step; j++)
          acc = acc.dbl();
        doubles.push(acc);
      }
      return {
        step: step,
        points: doubles,
      };
    };

    BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
      if (this.precomputed && this.precomputed.naf)
        return this.precomputed.naf;

      var res = [ this ];
      var max = (1 << wnd) - 1;
      var dbl = max === 1 ? null : this.dbl();
      for (var i = 1; i < max; i++)
        res[i] = res[i - 1].add(dbl);
      return {
        wnd: wnd,
        points: res,
      };
    };

    BasePoint.prototype._getBeta = function _getBeta() {
      return null;
    };

    BasePoint.prototype.dblp = function dblp(k) {
      var r = this;
      for (var i = 0; i < k; i++)
        r = r.dbl();
      return r;
    };

    var inherits_browser = createCommonjsModule(function (module) {
    if (typeof Object.create === 'function') {
      // implementation from standard node.js 'util' module
      module.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
              value: ctor,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
        }
      };
    } else {
      // old school shim for old browsers
      module.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function () {};
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }
      };
    }
    });






    var assert$2 = utils_1$1.assert;

    function ShortCurve(conf) {
      base.call(this, 'short', conf);

      this.a = new bn(conf.a, 16).toRed(this.red);
      this.b = new bn(conf.b, 16).toRed(this.red);
      this.tinv = this.two.redInvm();

      this.zeroA = this.a.fromRed().cmpn(0) === 0;
      this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;

      // If the curve is endomorphic, precalculate beta and lambda
      this.endo = this._getEndomorphism(conf);
      this._endoWnafT1 = new Array(4);
      this._endoWnafT2 = new Array(4);
    }
    inherits_browser(ShortCurve, base);
    var short_1 = ShortCurve;

    ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
      // No efficient endomorphism
      if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1)
        return;

      // Compute beta and lambda, that lambda * P = (beta * Px; Py)
      var beta;
      var lambda;
      if (conf.beta) {
        beta = new bn(conf.beta, 16).toRed(this.red);
      } else {
        var betas = this._getEndoRoots(this.p);
        // Choose the smallest beta
        beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
        beta = beta.toRed(this.red);
      }
      if (conf.lambda) {
        lambda = new bn(conf.lambda, 16);
      } else {
        // Choose the lambda that is matching selected beta
        var lambdas = this._getEndoRoots(this.n);
        if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) {
          lambda = lambdas[0];
        } else {
          lambda = lambdas[1];
          assert$2(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
        }
      }

      // Get basis vectors, used for balanced length-two representation
      var basis;
      if (conf.basis) {
        basis = conf.basis.map(function(vec) {
          return {
            a: new bn(vec.a, 16),
            b: new bn(vec.b, 16),
          };
        });
      } else {
        basis = this._getEndoBasis(lambda);
      }

      return {
        beta: beta,
        lambda: lambda,
        basis: basis,
      };
    };

    ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
      // Find roots of for x^2 + x + 1 in F
      // Root = (-1 +- Sqrt(-3)) / 2
      //
      var red = num === this.p ? this.red : bn.mont(num);
      var tinv = new bn(2).toRed(red).redInvm();
      var ntinv = tinv.redNeg();

      var s = new bn(3).toRed(red).redNeg().redSqrt().redMul(tinv);

      var l1 = ntinv.redAdd(s).fromRed();
      var l2 = ntinv.redSub(s).fromRed();
      return [ l1, l2 ];
    };

    ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
      // aprxSqrt >= sqrt(this.n)
      var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));

      // 3.74
      // Run EGCD, until r(L + 1) < aprxSqrt
      var u = lambda;
      var v = this.n.clone();
      var x1 = new bn(1);
      var y1 = new bn(0);
      var x2 = new bn(0);
      var y2 = new bn(1);

      // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
      var a0;
      var b0;
      // First vector
      var a1;
      var b1;
      // Second vector
      var a2;
      var b2;

      var prevR;
      var i = 0;
      var r;
      var x;
      while (u.cmpn(0) !== 0) {
        var q = v.div(u);
        r = v.sub(q.mul(u));
        x = x2.sub(q.mul(x1));
        var y = y2.sub(q.mul(y1));

        if (!a1 && r.cmp(aprxSqrt) < 0) {
          a0 = prevR.neg();
          b0 = x1;
          a1 = r.neg();
          b1 = x;
        } else if (a1 && ++i === 2) {
          break;
        }
        prevR = r;

        v = u;
        u = r;
        x2 = x1;
        x1 = x;
        y2 = y1;
        y1 = y;
      }
      a2 = r.neg();
      b2 = x;

      var len1 = a1.sqr().add(b1.sqr());
      var len2 = a2.sqr().add(b2.sqr());
      if (len2.cmp(len1) >= 0) {
        a2 = a0;
        b2 = b0;
      }

      // Normalize signs
      if (a1.negative) {
        a1 = a1.neg();
        b1 = b1.neg();
      }
      if (a2.negative) {
        a2 = a2.neg();
        b2 = b2.neg();
      }

      return [
        { a: a1, b: b1 },
        { a: a2, b: b2 },
      ];
    };

    ShortCurve.prototype._endoSplit = function _endoSplit(k) {
      var basis = this.endo.basis;
      var v1 = basis[0];
      var v2 = basis[1];

      var c1 = v2.b.mul(k).divRound(this.n);
      var c2 = v1.b.neg().mul(k).divRound(this.n);

      var p1 = c1.mul(v1.a);
      var p2 = c2.mul(v2.a);
      var q1 = c1.mul(v1.b);
      var q2 = c2.mul(v2.b);

      // Calculate answer
      var k1 = k.sub(p1).sub(p2);
      var k2 = q1.add(q2).neg();
      return { k1: k1, k2: k2 };
    };

    ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
      x = new bn(x, 16);
      if (!x.red)
        x = x.toRed(this.red);

      var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
      var y = y2.redSqrt();
      if (y.redSqr().redSub(y2).cmp(this.zero) !== 0)
        throw new Error('invalid point');

      // XXX Is there any way to tell if the number is odd without converting it
      // to non-red form?
      var isOdd = y.fromRed().isOdd();
      if (odd && !isOdd || !odd && isOdd)
        y = y.redNeg();

      return this.point(x, y);
    };

    ShortCurve.prototype.validate = function validate(point) {
      if (point.inf)
        return true;

      var x = point.x;
      var y = point.y;

      var ax = this.a.redMul(x);
      var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
      return y.redSqr().redISub(rhs).cmpn(0) === 0;
    };

    ShortCurve.prototype._endoWnafMulAdd =
        function _endoWnafMulAdd(points, coeffs, jacobianResult) {
          var npoints = this._endoWnafT1;
          var ncoeffs = this._endoWnafT2;
          for (var i = 0; i < points.length; i++) {
            var split = this._endoSplit(coeffs[i]);
            var p = points[i];
            var beta = p._getBeta();

            if (split.k1.negative) {
              split.k1.ineg();
              p = p.neg(true);
            }
            if (split.k2.negative) {
              split.k2.ineg();
              beta = beta.neg(true);
            }

            npoints[i * 2] = p;
            npoints[i * 2 + 1] = beta;
            ncoeffs[i * 2] = split.k1;
            ncoeffs[i * 2 + 1] = split.k2;
          }
          var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);

          // Clean-up references to points and coefficients
          for (var j = 0; j < i * 2; j++) {
            npoints[j] = null;
            ncoeffs[j] = null;
          }
          return res;
        };

    function Point(curve, x, y, isRed) {
      base.BasePoint.call(this, curve, 'affine');
      if (x === null && y === null) {
        this.x = null;
        this.y = null;
        this.inf = true;
      } else {
        this.x = new bn(x, 16);
        this.y = new bn(y, 16);
        // Force redgomery representation when loading from JSON
        if (isRed) {
          this.x.forceRed(this.curve.red);
          this.y.forceRed(this.curve.red);
        }
        if (!this.x.red)
          this.x = this.x.toRed(this.curve.red);
        if (!this.y.red)
          this.y = this.y.toRed(this.curve.red);
        this.inf = false;
      }
    }
    inherits_browser(Point, base.BasePoint);

    ShortCurve.prototype.point = function point(x, y, isRed) {
      return new Point(this, x, y, isRed);
    };

    ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
      return Point.fromJSON(this, obj, red);
    };

    Point.prototype._getBeta = function _getBeta() {
      if (!this.curve.endo)
        return;

      var pre = this.precomputed;
      if (pre && pre.beta)
        return pre.beta;

      var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
      if (pre) {
        var curve = this.curve;
        var endoMul = function(p) {
          return curve.point(p.x.redMul(curve.endo.beta), p.y);
        };
        pre.beta = beta;
        beta.precomputed = {
          beta: null,
          naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: pre.naf.points.map(endoMul),
          },
          doubles: pre.doubles && {
            step: pre.doubles.step,
            points: pre.doubles.points.map(endoMul),
          },
        };
      }
      return beta;
    };

    Point.prototype.toJSON = function toJSON() {
      if (!this.precomputed)
        return [ this.x, this.y ];

      return [ this.x, this.y, this.precomputed && {
        doubles: this.precomputed.doubles && {
          step: this.precomputed.doubles.step,
          points: this.precomputed.doubles.points.slice(1),
        },
        naf: this.precomputed.naf && {
          wnd: this.precomputed.naf.wnd,
          points: this.precomputed.naf.points.slice(1),
        },
      } ];
    };

    Point.fromJSON = function fromJSON(curve, obj, red) {
      if (typeof obj === 'string')
        obj = JSON.parse(obj);
      var res = curve.point(obj[0], obj[1], red);
      if (!obj[2])
        return res;

      function obj2point(obj) {
        return curve.point(obj[0], obj[1], red);
      }

      var pre = obj[2];
      res.precomputed = {
        beta: null,
        doubles: pre.doubles && {
          step: pre.doubles.step,
          points: [ res ].concat(pre.doubles.points.map(obj2point)),
        },
        naf: pre.naf && {
          wnd: pre.naf.wnd,
          points: [ res ].concat(pre.naf.points.map(obj2point)),
        },
      };
      return res;
    };

    Point.prototype.inspect = function inspect() {
      if (this.isInfinity())
        return '<EC Point Infinity>';
      return '<EC Point x: ' + this.x.fromRed().toString(16, 2) +
          ' y: ' + this.y.fromRed().toString(16, 2) + '>';
    };

    Point.prototype.isInfinity = function isInfinity() {
      return this.inf;
    };

    Point.prototype.add = function add(p) {
      // O + P = P
      if (this.inf)
        return p;

      // P + O = P
      if (p.inf)
        return this;

      // P + P = 2P
      if (this.eq(p))
        return this.dbl();

      // P + (-P) = O
      if (this.neg().eq(p))
        return this.curve.point(null, null);

      // P + Q = O
      if (this.x.cmp(p.x) === 0)
        return this.curve.point(null, null);

      var c = this.y.redSub(p.y);
      if (c.cmpn(0) !== 0)
        c = c.redMul(this.x.redSub(p.x).redInvm());
      var nx = c.redSqr().redISub(this.x).redISub(p.x);
      var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
      return this.curve.point(nx, ny);
    };

    Point.prototype.dbl = function dbl() {
      if (this.inf)
        return this;

      // 2P = O
      var ys1 = this.y.redAdd(this.y);
      if (ys1.cmpn(0) === 0)
        return this.curve.point(null, null);

      var a = this.curve.a;

      var x2 = this.x.redSqr();
      var dyinv = ys1.redInvm();
      var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);

      var nx = c.redSqr().redISub(this.x.redAdd(this.x));
      var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
      return this.curve.point(nx, ny);
    };

    Point.prototype.getX = function getX() {
      return this.x.fromRed();
    };

    Point.prototype.getY = function getY() {
      return this.y.fromRed();
    };

    Point.prototype.mul = function mul(k) {
      k = new bn(k, 16);
      if (this.isInfinity())
        return this;
      else if (this._hasDoubles(k))
        return this.curve._fixedNafMul(this, k);
      else if (this.curve.endo)
        return this.curve._endoWnafMulAdd([ this ], [ k ]);
      else
        return this.curve._wnafMul(this, k);
    };

    Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
      var points = [ this, p2 ];
      var coeffs = [ k1, k2 ];
      if (this.curve.endo)
        return this.curve._endoWnafMulAdd(points, coeffs);
      else
        return this.curve._wnafMulAdd(1, points, coeffs, 2);
    };

    Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
      var points = [ this, p2 ];
      var coeffs = [ k1, k2 ];
      if (this.curve.endo)
        return this.curve._endoWnafMulAdd(points, coeffs, true);
      else
        return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
    };

    Point.prototype.eq = function eq(p) {
      return this === p ||
             this.inf === p.inf &&
                 (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
    };

    Point.prototype.neg = function neg(_precompute) {
      if (this.inf)
        return this;

      var res = this.curve.point(this.x, this.y.redNeg());
      if (_precompute && this.precomputed) {
        var pre = this.precomputed;
        var negate = function(p) {
          return p.neg();
        };
        res.precomputed = {
          naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: pre.naf.points.map(negate),
          },
          doubles: pre.doubles && {
            step: pre.doubles.step,
            points: pre.doubles.points.map(negate),
          },
        };
      }
      return res;
    };

    Point.prototype.toJ = function toJ() {
      if (this.inf)
        return this.curve.jpoint(null, null, null);

      var res = this.curve.jpoint(this.x, this.y, this.curve.one);
      return res;
    };

    function JPoint(curve, x, y, z) {
      base.BasePoint.call(this, curve, 'jacobian');
      if (x === null && y === null && z === null) {
        this.x = this.curve.one;
        this.y = this.curve.one;
        this.z = new bn(0);
      } else {
        this.x = new bn(x, 16);
        this.y = new bn(y, 16);
        this.z = new bn(z, 16);
      }
      if (!this.x.red)
        this.x = this.x.toRed(this.curve.red);
      if (!this.y.red)
        this.y = this.y.toRed(this.curve.red);
      if (!this.z.red)
        this.z = this.z.toRed(this.curve.red);

      this.zOne = this.z === this.curve.one;
    }
    inherits_browser(JPoint, base.BasePoint);

    ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
      return new JPoint(this, x, y, z);
    };

    JPoint.prototype.toP = function toP() {
      if (this.isInfinity())
        return this.curve.point(null, null);

      var zinv = this.z.redInvm();
      var zinv2 = zinv.redSqr();
      var ax = this.x.redMul(zinv2);
      var ay = this.y.redMul(zinv2).redMul(zinv);

      return this.curve.point(ax, ay);
    };

    JPoint.prototype.neg = function neg() {
      return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
    };

    JPoint.prototype.add = function add(p) {
      // O + P = P
      if (this.isInfinity())
        return p;

      // P + O = P
      if (p.isInfinity())
        return this;

      // 12M + 4S + 7A
      var pz2 = p.z.redSqr();
      var z2 = this.z.redSqr();
      var u1 = this.x.redMul(pz2);
      var u2 = p.x.redMul(z2);
      var s1 = this.y.redMul(pz2.redMul(p.z));
      var s2 = p.y.redMul(z2.redMul(this.z));

      var h = u1.redSub(u2);
      var r = s1.redSub(s2);
      if (h.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0)
          return this.curve.jpoint(null, null, null);
        else
          return this.dbl();
      }

      var h2 = h.redSqr();
      var h3 = h2.redMul(h);
      var v = u1.redMul(h2);

      var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
      var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
      var nz = this.z.redMul(p.z).redMul(h);

      return this.curve.jpoint(nx, ny, nz);
    };

    JPoint.prototype.mixedAdd = function mixedAdd(p) {
      // O + P = P
      if (this.isInfinity())
        return p.toJ();

      // P + O = P
      if (p.isInfinity())
        return this;

      // 8M + 3S + 7A
      var z2 = this.z.redSqr();
      var u1 = this.x;
      var u2 = p.x.redMul(z2);
      var s1 = this.y;
      var s2 = p.y.redMul(z2).redMul(this.z);

      var h = u1.redSub(u2);
      var r = s1.redSub(s2);
      if (h.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0)
          return this.curve.jpoint(null, null, null);
        else
          return this.dbl();
      }

      var h2 = h.redSqr();
      var h3 = h2.redMul(h);
      var v = u1.redMul(h2);

      var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
      var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
      var nz = this.z.redMul(h);

      return this.curve.jpoint(nx, ny, nz);
    };

    JPoint.prototype.dblp = function dblp(pow) {
      if (pow === 0)
        return this;
      if (this.isInfinity())
        return this;
      if (!pow)
        return this.dbl();

      var i;
      if (this.curve.zeroA || this.curve.threeA) {
        var r = this;
        for (i = 0; i < pow; i++)
          r = r.dbl();
        return r;
      }

      // 1M + 2S + 1A + N * (4S + 5M + 8A)
      // N = 1 => 6M + 6S + 9A
      var a = this.curve.a;
      var tinv = this.curve.tinv;

      var jx = this.x;
      var jy = this.y;
      var jz = this.z;
      var jz4 = jz.redSqr().redSqr();

      // Reuse results
      var jyd = jy.redAdd(jy);
      for (i = 0; i < pow; i++) {
        var jx2 = jx.redSqr();
        var jyd2 = jyd.redSqr();
        var jyd4 = jyd2.redSqr();
        var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

        var t1 = jx.redMul(jyd2);
        var nx = c.redSqr().redISub(t1.redAdd(t1));
        var t2 = t1.redISub(nx);
        var dny = c.redMul(t2);
        dny = dny.redIAdd(dny).redISub(jyd4);
        var nz = jyd.redMul(jz);
        if (i + 1 < pow)
          jz4 = jz4.redMul(jyd4);

        jx = nx;
        jz = nz;
        jyd = dny;
      }

      return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
    };

    JPoint.prototype.dbl = function dbl() {
      if (this.isInfinity())
        return this;

      if (this.curve.zeroA)
        return this._zeroDbl();
      else if (this.curve.threeA)
        return this._threeDbl();
      else
        return this._dbl();
    };

    JPoint.prototype._zeroDbl = function _zeroDbl() {
      var nx;
      var ny;
      var nz;
      // Z = 1
      if (this.zOne) {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
        //     #doubling-mdbl-2007-bl
        // 1M + 5S + 14A

        // XX = X1^2
        var xx = this.x.redSqr();
        // YY = Y1^2
        var yy = this.y.redSqr();
        // YYYY = YY^2
        var yyyy = yy.redSqr();
        // S = 2 * ((X1 + YY)^2 - XX - YYYY)
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        // M = 3 * XX + a; a = 0
        var m = xx.redAdd(xx).redIAdd(xx);
        // T = M ^ 2 - 2*S
        var t = m.redSqr().redISub(s).redISub(s);

        // 8 * YYYY
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);

        // X3 = T
        nx = t;
        // Y3 = M * (S - T) - 8 * YYYY
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        // Z3 = 2*Y1
        nz = this.y.redAdd(this.y);
      } else {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
        //     #doubling-dbl-2009-l
        // 2M + 5S + 13A

        // A = X1^2
        var a = this.x.redSqr();
        // B = Y1^2
        var b = this.y.redSqr();
        // C = B^2
        var c = b.redSqr();
        // D = 2 * ((X1 + B)^2 - A - C)
        var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
        d = d.redIAdd(d);
        // E = 3 * A
        var e = a.redAdd(a).redIAdd(a);
        // F = E^2
        var f = e.redSqr();

        // 8 * C
        var c8 = c.redIAdd(c);
        c8 = c8.redIAdd(c8);
        c8 = c8.redIAdd(c8);

        // X3 = F - 2 * D
        nx = f.redISub(d).redISub(d);
        // Y3 = E * (D - X3) - 8 * C
        ny = e.redMul(d.redISub(nx)).redISub(c8);
        // Z3 = 2 * Y1 * Z1
        nz = this.y.redMul(this.z);
        nz = nz.redIAdd(nz);
      }

      return this.curve.jpoint(nx, ny, nz);
    };

    JPoint.prototype._threeDbl = function _threeDbl() {
      var nx;
      var ny;
      var nz;
      // Z = 1
      if (this.zOne) {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
        //     #doubling-mdbl-2007-bl
        // 1M + 5S + 15A

        // XX = X1^2
        var xx = this.x.redSqr();
        // YY = Y1^2
        var yy = this.y.redSqr();
        // YYYY = YY^2
        var yyyy = yy.redSqr();
        // S = 2 * ((X1 + YY)^2 - XX - YYYY)
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        // M = 3 * XX + a
        var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
        // T = M^2 - 2 * S
        var t = m.redSqr().redISub(s).redISub(s);
        // X3 = T
        nx = t;
        // Y3 = M * (S - T) - 8 * YYYY
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        // Z3 = 2 * Y1
        nz = this.y.redAdd(this.y);
      } else {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
        // 3M + 5S

        // delta = Z1^2
        var delta = this.z.redSqr();
        // gamma = Y1^2
        var gamma = this.y.redSqr();
        // beta = X1 * gamma
        var beta = this.x.redMul(gamma);
        // alpha = 3 * (X1 - delta) * (X1 + delta)
        var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
        alpha = alpha.redAdd(alpha).redIAdd(alpha);
        // X3 = alpha^2 - 8 * beta
        var beta4 = beta.redIAdd(beta);
        beta4 = beta4.redIAdd(beta4);
        var beta8 = beta4.redAdd(beta4);
        nx = alpha.redSqr().redISub(beta8);
        // Z3 = (Y1 + Z1)^2 - gamma - delta
        nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
        // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
        var ggamma8 = gamma.redSqr();
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
      }

      return this.curve.jpoint(nx, ny, nz);
    };

    JPoint.prototype._dbl = function _dbl() {
      var a = this.curve.a;

      // 4M + 6S + 10A
      var jx = this.x;
      var jy = this.y;
      var jz = this.z;
      var jz4 = jz.redSqr().redSqr();

      var jx2 = jx.redSqr();
      var jy2 = jy.redSqr();

      var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));

      var jxd4 = jx.redAdd(jx);
      jxd4 = jxd4.redIAdd(jxd4);
      var t1 = jxd4.redMul(jy2);
      var nx = c.redSqr().redISub(t1.redAdd(t1));
      var t2 = t1.redISub(nx);

      var jyd8 = jy2.redSqr();
      jyd8 = jyd8.redIAdd(jyd8);
      jyd8 = jyd8.redIAdd(jyd8);
      jyd8 = jyd8.redIAdd(jyd8);
      var ny = c.redMul(t2).redISub(jyd8);
      var nz = jy.redAdd(jy).redMul(jz);

      return this.curve.jpoint(nx, ny, nz);
    };

    JPoint.prototype.trpl = function trpl() {
      if (!this.curve.zeroA)
        return this.dbl().add(this);

      // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
      // 5M + 10S + ...

      // XX = X1^2
      var xx = this.x.redSqr();
      // YY = Y1^2
      var yy = this.y.redSqr();
      // ZZ = Z1^2
      var zz = this.z.redSqr();
      // YYYY = YY^2
      var yyyy = yy.redSqr();
      // M = 3 * XX + a * ZZ2; a = 0
      var m = xx.redAdd(xx).redIAdd(xx);
      // MM = M^2
      var mm = m.redSqr();
      // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
      var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
      e = e.redIAdd(e);
      e = e.redAdd(e).redIAdd(e);
      e = e.redISub(mm);
      // EE = E^2
      var ee = e.redSqr();
      // T = 16*YYYY
      var t = yyyy.redIAdd(yyyy);
      t = t.redIAdd(t);
      t = t.redIAdd(t);
      t = t.redIAdd(t);
      // U = (M + E)^2 - MM - EE - T
      var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
      // X3 = 4 * (X1 * EE - 4 * YY * U)
      var yyu4 = yy.redMul(u);
      yyu4 = yyu4.redIAdd(yyu4);
      yyu4 = yyu4.redIAdd(yyu4);
      var nx = this.x.redMul(ee).redISub(yyu4);
      nx = nx.redIAdd(nx);
      nx = nx.redIAdd(nx);
      // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
      var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
      ny = ny.redIAdd(ny);
      ny = ny.redIAdd(ny);
      ny = ny.redIAdd(ny);
      // Z3 = (Z1 + E)^2 - ZZ - EE
      var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);

      return this.curve.jpoint(nx, ny, nz);
    };

    JPoint.prototype.mul = function mul(k, kbase) {
      k = new bn(k, kbase);

      return this.curve._wnafMul(this, k);
    };

    JPoint.prototype.eq = function eq(p) {
      if (p.type === 'affine')
        return this.eq(p.toJ());

      if (this === p)
        return true;

      // x1 * z2^2 == x2 * z1^2
      var z2 = this.z.redSqr();
      var pz2 = p.z.redSqr();
      if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0)
        return false;

      // y1 * z2^3 == y2 * z1^3
      var z3 = z2.redMul(this.z);
      var pz3 = pz2.redMul(p.z);
      return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
    };

    JPoint.prototype.eqXToP = function eqXToP(x) {
      var zs = this.z.redSqr();
      var rx = x.toRed(this.curve.red).redMul(zs);
      if (this.x.cmp(rx) === 0)
        return true;

      var xc = x.clone();
      var t = this.curve.redN.redMul(zs);
      for (;;) {
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0)
          return false;

        rx.redIAdd(t);
        if (this.x.cmp(rx) === 0)
          return true;
      }
    };

    JPoint.prototype.inspect = function inspect() {
      if (this.isInfinity())
        return '<EC JPoint Infinity>';
      return '<EC JPoint x: ' + this.x.toString(16, 2) +
          ' y: ' + this.y.toString(16, 2) +
          ' z: ' + this.z.toString(16, 2) + '>';
    };

    JPoint.prototype.isInfinity = function isInfinity() {
      // XXX This code assumes that zero is always zero in red
      return this.z.cmpn(0) === 0;
    };

    var curve_1 = createCommonjsModule(function (module, exports) {

    var curve = exports;

    curve.base = base;
    curve.short = short_1;
    curve.mont = /*RicMoo:ethers:require(./mont)*/(null);
    curve.edwards = /*RicMoo:ethers:require(./edwards)*/(null);
    });

    var curves_1 = createCommonjsModule(function (module, exports) {

    var curves = exports;





    var assert = utils_1$1.assert;

    function PresetCurve(options) {
      if (options.type === 'short')
        this.curve = new curve_1.short(options);
      else if (options.type === 'edwards')
        this.curve = new curve_1.edwards(options);
      else
        this.curve = new curve_1.mont(options);
      this.g = this.curve.g;
      this.n = this.curve.n;
      this.hash = options.hash;

      assert(this.g.validate(), 'Invalid curve');
      assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
    }
    curves.PresetCurve = PresetCurve;

    function defineCurve(name, options) {
      Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        get: function() {
          var curve = new PresetCurve(options);
          Object.defineProperty(curves, name, {
            configurable: true,
            enumerable: true,
            value: curve,
          });
          return curve;
        },
      });
    }

    defineCurve('p192', {
      type: 'short',
      prime: 'p192',
      p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
      a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
      b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
      n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
      hash: hash$1.sha256,
      gRed: false,
      g: [
        '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
        '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811',
      ],
    });

    defineCurve('p224', {
      type: 'short',
      prime: 'p224',
      p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
      a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
      b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
      n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
      hash: hash$1.sha256,
      gRed: false,
      g: [
        'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
        'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34',
      ],
    });

    defineCurve('p256', {
      type: 'short',
      prime: null,
      p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
      a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
      b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
      n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
      hash: hash$1.sha256,
      gRed: false,
      g: [
        '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
        '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5',
      ],
    });

    defineCurve('p384', {
      type: 'short',
      prime: null,
      p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
         'fffffffe ffffffff 00000000 00000000 ffffffff',
      a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
         'fffffffe ffffffff 00000000 00000000 fffffffc',
      b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +
         '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',
      n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +
         'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',
      hash: hash$1.sha384,
      gRed: false,
      g: [
        'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +
        '5502f25d bf55296c 3a545e38 72760ab7',
        '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +
        '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f',
      ],
    });

    defineCurve('p521', {
      type: 'short',
      prime: null,
      p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
         'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
         'ffffffff ffffffff ffffffff ffffffff ffffffff',
      a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
         'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
         'ffffffff ffffffff ffffffff ffffffff fffffffc',
      b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +
         '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +
         '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',
      n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +
         'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +
         'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',
      hash: hash$1.sha512,
      gRed: false,
      g: [
        '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +
        '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +
        'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',
        '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +
        '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +
        '3fad0761 353c7086 a272c240 88be9476 9fd16650',
      ],
    });

    defineCurve('curve25519', {
      type: 'mont',
      prime: 'p25519',
      p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
      a: '76d06',
      b: '1',
      n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
      hash: hash$1.sha256,
      gRed: false,
      g: [
        '9',
      ],
    });

    defineCurve('ed25519', {
      type: 'edwards',
      prime: 'p25519',
      p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
      a: '-1',
      c: '1',
      // -121665 * (121666^(-1)) (mod P)
      d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
      n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
      hash: hash$1.sha256,
      gRed: false,
      g: [
        '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',

        // 4/5
        '6666666666666666666666666666666666666666666666666666666666666658',
      ],
    });

    var pre;
    try {
      pre = /*RicMoo:ethers:require(./precomputed/secp256k1)*/(null).crash();
    } catch (e) {
      pre = undefined;
    }

    defineCurve('secp256k1', {
      type: 'short',
      prime: 'k256',
      p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
      a: '0',
      b: '7',
      n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
      h: '1',
      hash: hash$1.sha256,

      // Precomputed endomorphism
      beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
      lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
      basis: [
        {
          a: '3086d221a7d46bcde86c90e49284eb15',
          b: '-e4437ed6010e88286f547fa90abfe4c3',
        },
        {
          a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
          b: '3086d221a7d46bcde86c90e49284eb15',
        },
      ],

      gRed: false,
      g: [
        '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
        '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
        pre,
      ],
    });
    });





    function HmacDRBG(options) {
      if (!(this instanceof HmacDRBG))
        return new HmacDRBG(options);
      this.hash = options.hash;
      this.predResist = !!options.predResist;

      this.outLen = this.hash.outSize;
      this.minEntropy = options.minEntropy || this.hash.hmacStrength;

      this._reseed = null;
      this.reseedInterval = null;
      this.K = null;
      this.V = null;

      var entropy = utils_1.toArray(options.entropy, options.entropyEnc || 'hex');
      var nonce = utils_1.toArray(options.nonce, options.nonceEnc || 'hex');
      var pers = utils_1.toArray(options.pers, options.persEnc || 'hex');
      minimalisticAssert(entropy.length >= (this.minEntropy / 8),
             'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
      this._init(entropy, nonce, pers);
    }
    var hmacDrbg = HmacDRBG;

    HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
      var seed = entropy.concat(nonce).concat(pers);

      this.K = new Array(this.outLen / 8);
      this.V = new Array(this.outLen / 8);
      for (var i = 0; i < this.V.length; i++) {
        this.K[i] = 0x00;
        this.V[i] = 0x01;
      }

      this._update(seed);
      this._reseed = 1;
      this.reseedInterval = 0x1000000000000;  // 2^48
    };

    HmacDRBG.prototype._hmac = function hmac() {
      return new hash$1.hmac(this.hash, this.K);
    };

    HmacDRBG.prototype._update = function update(seed) {
      var kmac = this._hmac()
                     .update(this.V)
                     .update([ 0x00 ]);
      if (seed)
        kmac = kmac.update(seed);
      this.K = kmac.digest();
      this.V = this._hmac().update(this.V).digest();
      if (!seed)
        return;

      this.K = this._hmac()
                   .update(this.V)
                   .update([ 0x01 ])
                   .update(seed)
                   .digest();
      this.V = this._hmac().update(this.V).digest();
    };

    HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
      // Optional entropy enc
      if (typeof entropyEnc !== 'string') {
        addEnc = add;
        add = entropyEnc;
        entropyEnc = null;
      }

      entropy = utils_1.toArray(entropy, entropyEnc);
      add = utils_1.toArray(add, addEnc);

      minimalisticAssert(entropy.length >= (this.minEntropy / 8),
             'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');

      this._update(entropy.concat(add || []));
      this._reseed = 1;
    };

    HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
      if (this._reseed > this.reseedInterval)
        throw new Error('Reseed is required');

      // Optional encoding
      if (typeof enc !== 'string') {
        addEnc = add;
        add = enc;
        enc = null;
      }

      // Optional additional data
      if (add) {
        add = utils_1.toArray(add, addEnc || 'hex');
        this._update(add);
      }

      var temp = [];
      while (temp.length < len) {
        this.V = this._hmac().update(this.V).digest();
        temp = temp.concat(this.V);
      }

      var res = temp.slice(0, len);
      this._update(add);
      this._reseed++;
      return utils_1.encode(res, enc);
    };



    var assert$3 = utils_1$1.assert;

    function KeyPair(ec, options) {
      this.ec = ec;
      this.priv = null;
      this.pub = null;

      // KeyPair(ec, { priv: ..., pub: ... })
      if (options.priv)
        this._importPrivate(options.priv, options.privEnc);
      if (options.pub)
        this._importPublic(options.pub, options.pubEnc);
    }
    var key = KeyPair;

    KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
      if (pub instanceof KeyPair)
        return pub;

      return new KeyPair(ec, {
        pub: pub,
        pubEnc: enc,
      });
    };

    KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
      if (priv instanceof KeyPair)
        return priv;

      return new KeyPair(ec, {
        priv: priv,
        privEnc: enc,
      });
    };

    KeyPair.prototype.validate = function validate() {
      var pub = this.getPublic();

      if (pub.isInfinity())
        return { result: false, reason: 'Invalid public key' };
      if (!pub.validate())
        return { result: false, reason: 'Public key is not a point' };
      if (!pub.mul(this.ec.curve.n).isInfinity())
        return { result: false, reason: 'Public key * N != O' };

      return { result: true, reason: null };
    };

    KeyPair.prototype.getPublic = function getPublic(compact, enc) {
      // compact is optional argument
      if (typeof compact === 'string') {
        enc = compact;
        compact = null;
      }

      if (!this.pub)
        this.pub = this.ec.g.mul(this.priv);

      if (!enc)
        return this.pub;

      return this.pub.encode(enc, compact);
    };

    KeyPair.prototype.getPrivate = function getPrivate(enc) {
      if (enc === 'hex')
        return this.priv.toString(16, 2);
      else
        return this.priv;
    };

    KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
      this.priv = new bn(key, enc || 16);

      // Ensure that the priv won't be bigger than n, otherwise we may fail
      // in fixed multiplication method
      this.priv = this.priv.umod(this.ec.curve.n);
    };

    KeyPair.prototype._importPublic = function _importPublic(key, enc) {
      if (key.x || key.y) {
        // Montgomery points only have an `x` coordinate.
        // Weierstrass/Edwards points on the other hand have both `x` and
        // `y` coordinates.
        if (this.ec.curve.type === 'mont') {
          assert$3(key.x, 'Need x coordinate');
        } else if (this.ec.curve.type === 'short' ||
                   this.ec.curve.type === 'edwards') {
          assert$3(key.x && key.y, 'Need both x and y coordinate');
        }
        this.pub = this.ec.curve.point(key.x, key.y);
        return;
      }
      this.pub = this.ec.curve.decodePoint(key, enc);
    };

    // ECDH
    KeyPair.prototype.derive = function derive(pub) {
      if(!pub.validate()) {
        assert$3(pub.validate(), 'public point not validated');
      }
      return pub.mul(this.priv).getX();
    };

    // ECDSA
    KeyPair.prototype.sign = function sign(msg, enc, options) {
      return this.ec.sign(msg, this, enc, options);
    };

    KeyPair.prototype.verify = function verify(msg, signature) {
      return this.ec.verify(msg, signature, this);
    };

    KeyPair.prototype.inspect = function inspect() {
      return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) +
             ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
    };




    var assert$4 = utils_1$1.assert;

    function Signature$1(options, enc) {
      if (options instanceof Signature$1)
        return options;

      if (this._importDER(options, enc))
        return;

      assert$4(options.r && options.s, 'Signature without r or s');
      this.r = new bn(options.r, 16);
      this.s = new bn(options.s, 16);
      if (options.recoveryParam === undefined)
        this.recoveryParam = null;
      else
        this.recoveryParam = options.recoveryParam;
    }
    var signature = Signature$1;

    function Position() {
      this.place = 0;
    }

    function getLength(buf, p) {
      var initial = buf[p.place++];
      if (!(initial & 0x80)) {
        return initial;
      }
      var octetLen = initial & 0xf;

      // Indefinite length or overflow
      if (octetLen === 0 || octetLen > 4) {
        return false;
      }

      var val = 0;
      for (var i = 0, off = p.place; i < octetLen; i++, off++) {
        val <<= 8;
        val |= buf[off];
        val >>>= 0;
      }

      // Leading zeroes
      if (val <= 0x7f) {
        return false;
      }

      p.place = off;
      return val;
    }

    function rmPadding(buf) {
      var i = 0;
      var len = buf.length - 1;
      while (!buf[i] && !(buf[i + 1] & 0x80) && i < len) {
        i++;
      }
      if (i === 0) {
        return buf;
      }
      return buf.slice(i);
    }

    Signature$1.prototype._importDER = function _importDER(data, enc) {
      data = utils_1$1.toArray(data, enc);
      var p = new Position();
      if (data[p.place++] !== 0x30) {
        return false;
      }
      var len = getLength(data, p);
      if (len === false) {
        return false;
      }
      if ((len + p.place) !== data.length) {
        return false;
      }
      if (data[p.place++] !== 0x02) {
        return false;
      }
      var rlen = getLength(data, p);
      if (rlen === false) {
        return false;
      }
      var r = data.slice(p.place, rlen + p.place);
      p.place += rlen;
      if (data[p.place++] !== 0x02) {
        return false;
      }
      var slen = getLength(data, p);
      if (slen === false) {
        return false;
      }
      if (data.length !== slen + p.place) {
        return false;
      }
      var s = data.slice(p.place, slen + p.place);
      if (r[0] === 0) {
        if (r[1] & 0x80) {
          r = r.slice(1);
        } else {
          // Leading zeroes
          return false;
        }
      }
      if (s[0] === 0) {
        if (s[1] & 0x80) {
          s = s.slice(1);
        } else {
          // Leading zeroes
          return false;
        }
      }

      this.r = new bn(r);
      this.s = new bn(s);
      this.recoveryParam = null;

      return true;
    };

    function constructLength(arr, len) {
      if (len < 0x80) {
        arr.push(len);
        return;
      }
      var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
      arr.push(octets | 0x80);
      while (--octets) {
        arr.push((len >>> (octets << 3)) & 0xff);
      }
      arr.push(len);
    }

    Signature$1.prototype.toDER = function toDER(enc) {
      var r = this.r.toArray();
      var s = this.s.toArray();

      // Pad values
      if (r[0] & 0x80)
        r = [ 0 ].concat(r);
      // Pad values
      if (s[0] & 0x80)
        s = [ 0 ].concat(s);

      r = rmPadding(r);
      s = rmPadding(s);

      while (!s[0] && !(s[1] & 0x80)) {
        s = s.slice(1);
      }
      var arr = [ 0x02 ];
      constructLength(arr, r.length);
      arr = arr.concat(r);
      arr.push(0x02);
      constructLength(arr, s.length);
      var backHalf = arr.concat(s);
      var res = [ 0x30 ];
      constructLength(res, backHalf.length);
      res = res.concat(backHalf);
      return utils_1$1.encode(res, enc);
    };





    var rand = /*RicMoo:ethers:require(brorand)*/(function() { throw new Error('unsupported'); });
    var assert$5 = utils_1$1.assert;




    function EC(options) {
      if (!(this instanceof EC))
        return new EC(options);

      // Shortcut `elliptic.ec(curve-name)`
      if (typeof options === 'string') {
        assert$5(Object.prototype.hasOwnProperty.call(curves_1, options),
          'Unknown curve ' + options);

        options = curves_1[options];
      }

      // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
      if (options instanceof curves_1.PresetCurve)
        options = { curve: options };

      this.curve = options.curve.curve;
      this.n = this.curve.n;
      this.nh = this.n.ushrn(1);
      this.g = this.curve.g;

      // Point on curve
      this.g = options.curve.g;
      this.g.precompute(options.curve.n.bitLength() + 1);

      // Hash for function for DRBG
      this.hash = options.hash || options.curve.hash;
    }
    var ec = EC;

    EC.prototype.keyPair = function keyPair(options) {
      return new key(this, options);
    };

    EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
      return key.fromPrivate(this, priv, enc);
    };

    EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
      return key.fromPublic(this, pub, enc);
    };

    EC.prototype.genKeyPair = function genKeyPair(options) {
      if (!options)
        options = {};

      // Instantiate Hmac_DRBG
      var drbg = new hmacDrbg({
        hash: this.hash,
        pers: options.pers,
        persEnc: options.persEnc || 'utf8',
        entropy: options.entropy || rand(this.hash.hmacStrength),
        entropyEnc: options.entropy && options.entropyEnc || 'utf8',
        nonce: this.n.toArray(),
      });

      var bytes = this.n.byteLength();
      var ns2 = this.n.sub(new bn(2));
      for (;;) {
        var priv = new bn(drbg.generate(bytes));
        if (priv.cmp(ns2) > 0)
          continue;

        priv.iaddn(1);
        return this.keyFromPrivate(priv);
      }
    };

    EC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
      var delta = msg.byteLength() * 8 - this.n.bitLength();
      if (delta > 0)
        msg = msg.ushrn(delta);
      if (!truncOnly && msg.cmp(this.n) >= 0)
        return msg.sub(this.n);
      else
        return msg;
    };

    EC.prototype.sign = function sign(msg, key, enc, options) {
      if (typeof enc === 'object') {
        options = enc;
        enc = null;
      }
      if (!options)
        options = {};

      key = this.keyFromPrivate(key, enc);
      msg = this._truncateToN(new bn(msg, 16));

      // Zero-extend key to provide enough entropy
      var bytes = this.n.byteLength();
      var bkey = key.getPrivate().toArray('be', bytes);

      // Zero-extend nonce to have the same byte size as N
      var nonce = msg.toArray('be', bytes);

      // Instantiate Hmac_DRBG
      var drbg = new hmacDrbg({
        hash: this.hash,
        entropy: bkey,
        nonce: nonce,
        pers: options.pers,
        persEnc: options.persEnc || 'utf8',
      });

      // Number of bytes to generate
      var ns1 = this.n.sub(new bn(1));

      for (var iter = 0; ; iter++) {
        var k = options.k ?
          options.k(iter) :
          new bn(drbg.generate(this.n.byteLength()));
        k = this._truncateToN(k, true);
        if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0)
          continue;

        var kp = this.g.mul(k);
        if (kp.isInfinity())
          continue;

        var kpX = kp.getX();
        var r = kpX.umod(this.n);
        if (r.cmpn(0) === 0)
          continue;

        var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
        s = s.umod(this.n);
        if (s.cmpn(0) === 0)
          continue;

        var recoveryParam = (kp.getY().isOdd() ? 1 : 0) |
                            (kpX.cmp(r) !== 0 ? 2 : 0);

        // Use complement of `s`, if it is > `n / 2`
        if (options.canonical && s.cmp(this.nh) > 0) {
          s = this.n.sub(s);
          recoveryParam ^= 1;
        }

        return new signature({ r: r, s: s, recoveryParam: recoveryParam });
      }
    };

    EC.prototype.verify = function verify(msg, signature$1, key, enc) {
      msg = this._truncateToN(new bn(msg, 16));
      key = this.keyFromPublic(key, enc);
      signature$1 = new signature(signature$1, 'hex');

      // Perform primitive values validation
      var r = signature$1.r;
      var s = signature$1.s;
      if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0)
        return false;
      if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0)
        return false;

      // Validate signature
      var sinv = s.invm(this.n);
      var u1 = sinv.mul(msg).umod(this.n);
      var u2 = sinv.mul(r).umod(this.n);
      var p;

      if (!this.curve._maxwellTrick) {
        p = this.g.mulAdd(u1, key.getPublic(), u2);
        if (p.isInfinity())
          return false;

        return p.getX().umod(this.n).cmp(r) === 0;
      }

      // NOTE: Greg Maxwell's trick, inspired by:
      // https://git.io/vad3K

      p = this.g.jmulAdd(u1, key.getPublic(), u2);
      if (p.isInfinity())
        return false;

      // Compare `p.x` of Jacobian point with `r`,
      // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
      // inverse of `p.z^2`
      return p.eqXToP(r);
    };

    EC.prototype.recoverPubKey = function(msg, signature$1, j, enc) {
      assert$5((3 & j) === j, 'The recovery param is more than two bits');
      signature$1 = new signature(signature$1, enc);

      var n = this.n;
      var e = new bn(msg);
      var r = signature$1.r;
      var s = signature$1.s;

      // A set LSB signifies that the y-coordinate is odd
      var isYOdd = j & 1;
      var isSecondKey = j >> 1;
      if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey)
        throw new Error('Unable to find sencond key candinate');

      // 1.1. Let x = r + jn.
      if (isSecondKey)
        r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
      else
        r = this.curve.pointFromX(r, isYOdd);

      var rInv = signature$1.r.invm(n);
      var s1 = n.sub(e).mul(rInv).umod(n);
      var s2 = s.mul(rInv).umod(n);

      // 1.6.1 Compute Q = r^-1 (sR -  eG)
      //               Q = r^-1 (sR + -eG)
      return this.g.mulAdd(s1, r, s2);
    };

    EC.prototype.getKeyRecoveryParam = function(e, signature$1, Q, enc) {
      signature$1 = new signature(signature$1, enc);
      if (signature$1.recoveryParam !== null)
        return signature$1.recoveryParam;

      for (var i = 0; i < 4; i++) {
        var Qprime;
        try {
          Qprime = this.recoverPubKey(e, signature$1, i);
        } catch (e) {
          continue;
        }

        if (Qprime.eq(Q))
          return i;
      }
      throw new Error('Unable to find valid recovery factor');
    };

    var elliptic_1 = createCommonjsModule(function (module, exports) {

    var elliptic = exports;

    elliptic.version = /*RicMoo:ethers*/{ version: "6.5.4" }.version;
    elliptic.utils = utils_1$1;
    elliptic.rand = /*RicMoo:ethers:require(brorand)*/(function() { throw new Error('unsupported'); });
    elliptic.curve = curve_1;
    elliptic.curves = curves_1;

    // Protocols
    elliptic.ec = ec;
    elliptic.eddsa = /*RicMoo:ethers:require(./elliptic/eddsa)*/(null);
    });

    var EC$1 = elliptic_1.ec;

    const version$b = "signing-key/5.7.0";

    const logger$f = new Logger(version$b);
    let _curve = null;
    function getCurve() {
        if (!_curve) {
            _curve = new EC$1("secp256k1");
        }
        return _curve;
    }
    class SigningKey {
        constructor(privateKey) {
            defineReadOnly(this, "curve", "secp256k1");
            defineReadOnly(this, "privateKey", hexlify(privateKey));
            if (hexDataLength(this.privateKey) !== 32) {
                logger$f.throwArgumentError("invalid private key", "privateKey", "[[ REDACTED ]]");
            }
            const keyPair = getCurve().keyFromPrivate(arrayify(this.privateKey));
            defineReadOnly(this, "publicKey", "0x" + keyPair.getPublic(false, "hex"));
            defineReadOnly(this, "compressedPublicKey", "0x" + keyPair.getPublic(true, "hex"));
            defineReadOnly(this, "_isSigningKey", true);
        }
        _addPoint(other) {
            const p0 = getCurve().keyFromPublic(arrayify(this.publicKey));
            const p1 = getCurve().keyFromPublic(arrayify(other));
            return "0x" + p0.pub.add(p1.pub).encodeCompressed("hex");
        }
        signDigest(digest) {
            const keyPair = getCurve().keyFromPrivate(arrayify(this.privateKey));
            const digestBytes = arrayify(digest);
            if (digestBytes.length !== 32) {
                logger$f.throwArgumentError("bad digest length", "digest", digest);
            }
            const signature = keyPair.sign(digestBytes, { canonical: true });
            return splitSignature({
                recoveryParam: signature.recoveryParam,
                r: hexZeroPad("0x" + signature.r.toString(16), 32),
                s: hexZeroPad("0x" + signature.s.toString(16), 32),
            });
        }
        computeSharedSecret(otherKey) {
            const keyPair = getCurve().keyFromPrivate(arrayify(this.privateKey));
            const otherKeyPair = getCurve().keyFromPublic(arrayify(computePublicKey(otherKey)));
            return hexZeroPad("0x" + keyPair.derive(otherKeyPair.getPublic()).toString(16), 32);
        }
        static isSigningKey(value) {
            return !!(value && value._isSigningKey);
        }
    }
    function recoverPublicKey(digest, signature) {
        const sig = splitSignature(signature);
        const rs = { r: arrayify(sig.r), s: arrayify(sig.s) };
        return "0x" + getCurve().recoverPubKey(arrayify(digest), rs, sig.recoveryParam).encode("hex", false);
    }
    function computePublicKey(key, compressed) {
        const bytes = arrayify(key);
        if (bytes.length === 32) {
            const signingKey = new SigningKey(bytes);
            if (compressed) {
                return "0x" + getCurve().keyFromPrivate(bytes).getPublic(true, "hex");
            }
            return signingKey.publicKey;
        }
        else if (bytes.length === 33) {
            if (compressed) {
                return hexlify(bytes);
            }
            return "0x" + getCurve().keyFromPublic(bytes).getPublic(false, "hex");
        }
        else if (bytes.length === 65) {
            if (!compressed) {
                return hexlify(bytes);
            }
            return "0x" + getCurve().keyFromPublic(bytes).getPublic(true, "hex");
        }
        return logger$f.throwArgumentError("invalid public or private key", "key", "[REDACTED]");
    }

    const version$a = "transactions/5.7.0";

    const logger$e = new Logger(version$a);
    var TransactionTypes;
    (function (TransactionTypes) {
        TransactionTypes[TransactionTypes["legacy"] = 0] = "legacy";
        TransactionTypes[TransactionTypes["eip2930"] = 1] = "eip2930";
        TransactionTypes[TransactionTypes["eip1559"] = 2] = "eip1559";
    })(TransactionTypes || (TransactionTypes = {}));
    ///////////////////////////////
    function handleAddress(value) {
        if (value === "0x") {
            return null;
        }
        return getAddress(value);
    }
    function handleNumber(value) {
        if (value === "0x") {
            return Zero$1;
        }
        return BigNumber.from(value);
    }
    // Legacy Transaction Fields
    const transactionFields = [
        { name: "nonce", maxLength: 32, numeric: true },
        { name: "gasPrice", maxLength: 32, numeric: true },
        { name: "gasLimit", maxLength: 32, numeric: true },
        { name: "to", length: 20 },
        { name: "value", maxLength: 32, numeric: true },
        { name: "data" },
    ];
    const allowedTransactionKeys$1 = {
        chainId: true, data: true, gasLimit: true, gasPrice: true, nonce: true, to: true, type: true, value: true
    };
    function computeAddress(key) {
        const publicKey = computePublicKey(key);
        return getAddress(hexDataSlice(keccak256(hexDataSlice(publicKey, 1)), 12));
    }
    function recoverAddress(digest, signature) {
        return computeAddress(recoverPublicKey(arrayify(digest), signature));
    }
    function formatNumber(value, name) {
        const result = stripZeros(BigNumber.from(value).toHexString());
        if (result.length > 32) {
            logger$e.throwArgumentError("invalid length for " + name, ("transaction:" + name), value);
        }
        return result;
    }
    function accessSetify(addr, storageKeys) {
        return {
            address: getAddress(addr),
            storageKeys: (storageKeys || []).map((storageKey, index) => {
                if (hexDataLength(storageKey) !== 32) {
                    logger$e.throwArgumentError("invalid access list storageKey", `accessList[${addr}:${index}]`, storageKey);
                }
                return storageKey.toLowerCase();
            })
        };
    }
    function accessListify(value) {
        if (Array.isArray(value)) {
            return value.map((set, index) => {
                if (Array.isArray(set)) {
                    if (set.length > 2) {
                        logger$e.throwArgumentError("access list expected to be [ address, storageKeys[] ]", `value[${index}]`, set);
                    }
                    return accessSetify(set[0], set[1]);
                }
                return accessSetify(set.address, set.storageKeys);
            });
        }
        const result = Object.keys(value).map((addr) => {
            const storageKeys = value[addr].reduce((accum, storageKey) => {
                accum[storageKey] = true;
                return accum;
            }, {});
            return accessSetify(addr, Object.keys(storageKeys).sort());
        });
        result.sort((a, b) => (a.address.localeCompare(b.address)));
        return result;
    }
    function formatAccessList(value) {
        return accessListify(value).map((set) => [set.address, set.storageKeys]);
    }
    function _serializeEip1559(transaction, signature) {
        // If there is an explicit gasPrice, make sure it matches the
        // EIP-1559 fees; otherwise they may not understand what they
        // think they are setting in terms of fee.
        if (transaction.gasPrice != null) {
            const gasPrice = BigNumber.from(transaction.gasPrice);
            const maxFeePerGas = BigNumber.from(transaction.maxFeePerGas || 0);
            if (!gasPrice.eq(maxFeePerGas)) {
                logger$e.throwArgumentError("mismatch EIP-1559 gasPrice != maxFeePerGas", "tx", {
                    gasPrice, maxFeePerGas
                });
            }
        }
        const fields = [
            formatNumber(transaction.chainId || 0, "chainId"),
            formatNumber(transaction.nonce || 0, "nonce"),
            formatNumber(transaction.maxPriorityFeePerGas || 0, "maxPriorityFeePerGas"),
            formatNumber(transaction.maxFeePerGas || 0, "maxFeePerGas"),
            formatNumber(transaction.gasLimit || 0, "gasLimit"),
            ((transaction.to != null) ? getAddress(transaction.to) : "0x"),
            formatNumber(transaction.value || 0, "value"),
            (transaction.data || "0x"),
            (formatAccessList(transaction.accessList || []))
        ];
        if (signature) {
            const sig = splitSignature(signature);
            fields.push(formatNumber(sig.recoveryParam, "recoveryParam"));
            fields.push(stripZeros(sig.r));
            fields.push(stripZeros(sig.s));
        }
        return hexConcat(["0x02", encode$2(fields)]);
    }
    function _serializeEip2930(transaction, signature) {
        const fields = [
            formatNumber(transaction.chainId || 0, "chainId"),
            formatNumber(transaction.nonce || 0, "nonce"),
            formatNumber(transaction.gasPrice || 0, "gasPrice"),
            formatNumber(transaction.gasLimit || 0, "gasLimit"),
            ((transaction.to != null) ? getAddress(transaction.to) : "0x"),
            formatNumber(transaction.value || 0, "value"),
            (transaction.data || "0x"),
            (formatAccessList(transaction.accessList || []))
        ];
        if (signature) {
            const sig = splitSignature(signature);
            fields.push(formatNumber(sig.recoveryParam, "recoveryParam"));
            fields.push(stripZeros(sig.r));
            fields.push(stripZeros(sig.s));
        }
        return hexConcat(["0x01", encode$2(fields)]);
    }
    // Legacy Transactions and EIP-155
    function _serialize(transaction, signature) {
        checkProperties(transaction, allowedTransactionKeys$1);
        const raw = [];
        transactionFields.forEach(function (fieldInfo) {
            let value = transaction[fieldInfo.name] || ([]);
            const options = {};
            if (fieldInfo.numeric) {
                options.hexPad = "left";
            }
            value = arrayify(hexlify(value, options));
            // Fixed-width field
            if (fieldInfo.length && value.length !== fieldInfo.length && value.length > 0) {
                logger$e.throwArgumentError("invalid length for " + fieldInfo.name, ("transaction:" + fieldInfo.name), value);
            }
            // Variable-width (with a maximum)
            if (fieldInfo.maxLength) {
                value = stripZeros(value);
                if (value.length > fieldInfo.maxLength) {
                    logger$e.throwArgumentError("invalid length for " + fieldInfo.name, ("transaction:" + fieldInfo.name), value);
                }
            }
            raw.push(hexlify(value));
        });
        let chainId = 0;
        if (transaction.chainId != null) {
            // A chainId was provided; if non-zero we'll use EIP-155
            chainId = transaction.chainId;
            if (typeof (chainId) !== "number") {
                logger$e.throwArgumentError("invalid transaction.chainId", "transaction", transaction);
            }
        }
        else if (signature && !isBytesLike(signature) && signature.v > 28) {
            // No chainId provided, but the signature is signing with EIP-155; derive chainId
            chainId = Math.floor((signature.v - 35) / 2);
        }
        // We have an EIP-155 transaction (chainId was specified and non-zero)
        if (chainId !== 0) {
            raw.push(hexlify(chainId)); // @TODO: hexValue?
            raw.push("0x");
            raw.push("0x");
        }
        // Requesting an unsigned transaction
        if (!signature) {
            return encode$2(raw);
        }
        // The splitSignature will ensure the transaction has a recoveryParam in the
        // case that the signTransaction function only adds a v.
        const sig = splitSignature(signature);
        // We pushed a chainId and null r, s on for hashing only; remove those
        let v = 27 + sig.recoveryParam;
        if (chainId !== 0) {
            raw.pop();
            raw.pop();
            raw.pop();
            v += chainId * 2 + 8;
            // If an EIP-155 v (directly or indirectly; maybe _vs) was provided, check it!
            if (sig.v > 28 && sig.v !== v) {
                logger$e.throwArgumentError("transaction.chainId/signature.v mismatch", "signature", signature);
            }
        }
        else if (sig.v !== v) {
            logger$e.throwArgumentError("transaction.chainId/signature.v mismatch", "signature", signature);
        }
        raw.push(hexlify(v));
        raw.push(stripZeros(arrayify(sig.r)));
        raw.push(stripZeros(arrayify(sig.s)));
        return encode$2(raw);
    }
    function serialize(transaction, signature) {
        // Legacy and EIP-155 Transactions
        if (transaction.type == null || transaction.type === 0) {
            if (transaction.accessList != null) {
                logger$e.throwArgumentError("untyped transactions do not support accessList; include type: 1", "transaction", transaction);
            }
            return _serialize(transaction, signature);
        }
        // Typed Transactions (EIP-2718)
        switch (transaction.type) {
            case 1:
                return _serializeEip2930(transaction, signature);
            case 2:
                return _serializeEip1559(transaction, signature);
        }
        return logger$e.throwError(`unsupported transaction type: ${transaction.type}`, Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "serializeTransaction",
            transactionType: transaction.type
        });
    }
    function _parseEipSignature(tx, fields, serialize) {
        try {
            const recid = handleNumber(fields[0]).toNumber();
            if (recid !== 0 && recid !== 1) {
                throw new Error("bad recid");
            }
            tx.v = recid;
        }
        catch (error) {
            logger$e.throwArgumentError("invalid v for transaction type: 1", "v", fields[0]);
        }
        tx.r = hexZeroPad(fields[1], 32);
        tx.s = hexZeroPad(fields[2], 32);
        try {
            const digest = keccak256(serialize(tx));
            tx.from = recoverAddress(digest, { r: tx.r, s: tx.s, recoveryParam: tx.v });
        }
        catch (error) { }
    }
    function _parseEip1559(payload) {
        const transaction = decode$3(payload.slice(1));
        if (transaction.length !== 9 && transaction.length !== 12) {
            logger$e.throwArgumentError("invalid component count for transaction type: 2", "payload", hexlify(payload));
        }
        const maxPriorityFeePerGas = handleNumber(transaction[2]);
        const maxFeePerGas = handleNumber(transaction[3]);
        const tx = {
            type: 2,
            chainId: handleNumber(transaction[0]).toNumber(),
            nonce: handleNumber(transaction[1]).toNumber(),
            maxPriorityFeePerGas: maxPriorityFeePerGas,
            maxFeePerGas: maxFeePerGas,
            gasPrice: null,
            gasLimit: handleNumber(transaction[4]),
            to: handleAddress(transaction[5]),
            value: handleNumber(transaction[6]),
            data: transaction[7],
            accessList: accessListify(transaction[8]),
        };
        // Unsigned EIP-1559 Transaction
        if (transaction.length === 9) {
            return tx;
        }
        tx.hash = keccak256(payload);
        _parseEipSignature(tx, transaction.slice(9), _serializeEip1559);
        return tx;
    }
    function _parseEip2930(payload) {
        const transaction = decode$3(payload.slice(1));
        if (transaction.length !== 8 && transaction.length !== 11) {
            logger$e.throwArgumentError("invalid component count for transaction type: 1", "payload", hexlify(payload));
        }
        const tx = {
            type: 1,
            chainId: handleNumber(transaction[0]).toNumber(),
            nonce: handleNumber(transaction[1]).toNumber(),
            gasPrice: handleNumber(transaction[2]),
            gasLimit: handleNumber(transaction[3]),
            to: handleAddress(transaction[4]),
            value: handleNumber(transaction[5]),
            data: transaction[6],
            accessList: accessListify(transaction[7])
        };
        // Unsigned EIP-2930 Transaction
        if (transaction.length === 8) {
            return tx;
        }
        tx.hash = keccak256(payload);
        _parseEipSignature(tx, transaction.slice(8), _serializeEip2930);
        return tx;
    }
    // Legacy Transactions and EIP-155
    function _parse(rawTransaction) {
        const transaction = decode$3(rawTransaction);
        if (transaction.length !== 9 && transaction.length !== 6) {
            logger$e.throwArgumentError("invalid raw transaction", "rawTransaction", rawTransaction);
        }
        const tx = {
            nonce: handleNumber(transaction[0]).toNumber(),
            gasPrice: handleNumber(transaction[1]),
            gasLimit: handleNumber(transaction[2]),
            to: handleAddress(transaction[3]),
            value: handleNumber(transaction[4]),
            data: transaction[5],
            chainId: 0
        };
        // Legacy unsigned transaction
        if (transaction.length === 6) {
            return tx;
        }
        try {
            tx.v = BigNumber.from(transaction[6]).toNumber();
        }
        catch (error) {
            // @TODO: What makes snese to do? The v is too big
            return tx;
        }
        tx.r = hexZeroPad(transaction[7], 32);
        tx.s = hexZeroPad(transaction[8], 32);
        if (BigNumber.from(tx.r).isZero() && BigNumber.from(tx.s).isZero()) {
            // EIP-155 unsigned transaction
            tx.chainId = tx.v;
            tx.v = 0;
        }
        else {
            // Signed Transaction
            tx.chainId = Math.floor((tx.v - 35) / 2);
            if (tx.chainId < 0) {
                tx.chainId = 0;
            }
            let recoveryParam = tx.v - 27;
            const raw = transaction.slice(0, 6);
            if (tx.chainId !== 0) {
                raw.push(hexlify(tx.chainId));
                raw.push("0x");
                raw.push("0x");
                recoveryParam -= tx.chainId * 2 + 8;
            }
            const digest = keccak256(encode$2(raw));
            try {
                tx.from = recoverAddress(digest, { r: hexlify(tx.r), s: hexlify(tx.s), recoveryParam: recoveryParam });
            }
            catch (error) { }
            tx.hash = keccak256(rawTransaction);
        }
        tx.type = null;
        return tx;
    }
    function parse$1(rawTransaction) {
        const payload = arrayify(rawTransaction);
        // Legacy and EIP-155 Transactions
        if (payload[0] > 0x7f) {
            return _parse(payload);
        }
        // Typed Transaction (EIP-2718)
        switch (payload[0]) {
            case 1:
                return _parseEip2930(payload);
            case 2:
                return _parseEip1559(payload);
        }
        return logger$e.throwError(`unsupported transaction type: ${payload[0]}`, Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "parseTransaction",
            transactionType: payload[0]
        });
    }

    const version$9 = "contracts/5.7.0";

    var __awaiter$7 = (window && window.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    const logger$d = new Logger(version$9);
    function resolveName(resolver, nameOrPromise) {
        return __awaiter$7(this, void 0, void 0, function* () {
            const name = yield nameOrPromise;
            if (typeof (name) !== "string") {
                logger$d.throwArgumentError("invalid address or ENS name", "name", name);
            }
            // If it is already an address, just use it (after adding checksum)
            try {
                return getAddress(name);
            }
            catch (error) { }
            if (!resolver) {
                logger$d.throwError("a provider or signer is needed to resolve ENS names", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "resolveName"
                });
            }
            const address = yield resolver.resolveName(name);
            if (address == null) {
                logger$d.throwArgumentError("resolver or addr is not configured for ENS name", "name", name);
            }
            return address;
        });
    }
    // Recursively replaces ENS names with promises to resolve the name and resolves all properties
    function resolveAddresses(resolver, value, paramType) {
        return __awaiter$7(this, void 0, void 0, function* () {
            if (Array.isArray(paramType)) {
                return yield Promise.all(paramType.map((paramType, index) => {
                    return resolveAddresses(resolver, ((Array.isArray(value)) ? value[index] : value[paramType.name]), paramType);
                }));
            }
            if (paramType.type === "address") {
                return yield resolveName(resolver, value);
            }
            if (paramType.type === "tuple") {
                return yield resolveAddresses(resolver, value, paramType.components);
            }
            if (paramType.baseType === "array") {
                if (!Array.isArray(value)) {
                    return Promise.reject(logger$d.makeError("invalid value for array", Logger.errors.INVALID_ARGUMENT, {
                        argument: "value",
                        value
                    }));
                }
                return yield Promise.all(value.map((v) => resolveAddresses(resolver, v, paramType.arrayChildren)));
            }
            return value;
        });
    }
    function populateTransaction(contract, fragment, args) {
        return __awaiter$7(this, void 0, void 0, function* () {
            // If an extra argument is given, it is overrides
            let overrides = {};
            if (args.length === fragment.inputs.length + 1 && typeof (args[args.length - 1]) === "object") {
                overrides = shallowCopy(args.pop());
            }
            // Make sure the parameter count matches
            logger$d.checkArgumentCount(args.length, fragment.inputs.length, "passed to contract");
            // Populate "from" override (allow promises)
            if (contract.signer) {
                if (overrides.from) {
                    // Contracts with a Signer are from the Signer's frame-of-reference;
                    // but we allow overriding "from" if it matches the signer
                    overrides.from = resolveProperties({
                        override: resolveName(contract.signer, overrides.from),
                        signer: contract.signer.getAddress()
                    }).then((check) => __awaiter$7(this, void 0, void 0, function* () {
                        if (getAddress(check.signer) !== check.override) {
                            logger$d.throwError("Contract with a Signer cannot override from", Logger.errors.UNSUPPORTED_OPERATION, {
                                operation: "overrides.from"
                            });
                        }
                        return check.override;
                    }));
                }
                else {
                    overrides.from = contract.signer.getAddress();
                }
            }
            else if (overrides.from) {
                overrides.from = resolveName(contract.provider, overrides.from);
                //} else {
                // Contracts without a signer can override "from", and if
                // unspecified the zero address is used
                //overrides.from = AddressZero;
            }
            // Wait for all dependencies to be resolved (prefer the signer over the provider)
            const resolved = yield resolveProperties({
                args: resolveAddresses(contract.signer || contract.provider, args, fragment.inputs),
                address: contract.resolvedAddress,
                overrides: (resolveProperties(overrides) || {})
            });
            // The ABI coded transaction
            const data = contract.interface.encodeFunctionData(fragment, resolved.args);
            const tx = {
                data: data,
                to: resolved.address
            };
            // Resolved Overrides
            const ro = resolved.overrides;
            // Populate simple overrides
            if (ro.nonce != null) {
                tx.nonce = BigNumber.from(ro.nonce).toNumber();
            }
            if (ro.gasLimit != null) {
                tx.gasLimit = BigNumber.from(ro.gasLimit);
            }
            if (ro.gasPrice != null) {
                tx.gasPrice = BigNumber.from(ro.gasPrice);
            }
            if (ro.maxFeePerGas != null) {
                tx.maxFeePerGas = BigNumber.from(ro.maxFeePerGas);
            }
            if (ro.maxPriorityFeePerGas != null) {
                tx.maxPriorityFeePerGas = BigNumber.from(ro.maxPriorityFeePerGas);
            }
            if (ro.from != null) {
                tx.from = ro.from;
            }
            if (ro.type != null) {
                tx.type = ro.type;
            }
            if (ro.accessList != null) {
                tx.accessList = accessListify(ro.accessList);
            }
            // If there was no "gasLimit" override, but the ABI specifies a default, use it
            if (tx.gasLimit == null && fragment.gas != null) {
                // Compute the intrinsic gas cost for this transaction
                // @TODO: This is based on the yellow paper as of Petersburg; this is something
                // we may wish to parameterize in v6 as part of the Network object. Since this
                // is always a non-nil to address, we can ignore G_create, but may wish to add
                // similar logic to the ContractFactory.
                let intrinsic = 21000;
                const bytes = arrayify(data);
                for (let i = 0; i < bytes.length; i++) {
                    intrinsic += 4;
                    if (bytes[i]) {
                        intrinsic += 64;
                    }
                }
                tx.gasLimit = BigNumber.from(fragment.gas).add(intrinsic);
            }
            // Populate "value" override
            if (ro.value) {
                const roValue = BigNumber.from(ro.value);
                if (!roValue.isZero() && !fragment.payable) {
                    logger$d.throwError("non-payable method cannot override value", Logger.errors.UNSUPPORTED_OPERATION, {
                        operation: "overrides.value",
                        value: overrides.value
                    });
                }
                tx.value = roValue;
            }
            if (ro.customData) {
                tx.customData = shallowCopy(ro.customData);
            }
            if (ro.ccipReadEnabled) {
                tx.ccipReadEnabled = !!ro.ccipReadEnabled;
            }
            // Remove the overrides
            delete overrides.nonce;
            delete overrides.gasLimit;
            delete overrides.gasPrice;
            delete overrides.from;
            delete overrides.value;
            delete overrides.type;
            delete overrides.accessList;
            delete overrides.maxFeePerGas;
            delete overrides.maxPriorityFeePerGas;
            delete overrides.customData;
            delete overrides.ccipReadEnabled;
            // Make sure there are no stray overrides, which may indicate a
            // typo or using an unsupported key.
            const leftovers = Object.keys(overrides).filter((key) => (overrides[key] != null));
            if (leftovers.length) {
                logger$d.throwError(`cannot override ${leftovers.map((l) => JSON.stringify(l)).join(",")}`, Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "overrides",
                    overrides: leftovers
                });
            }
            return tx;
        });
    }
    function buildPopulate$1(contract, fragment) {
        return function (...args) {
            return populateTransaction(contract, fragment, args);
        };
    }
    function buildEstimate$1(contract, fragment) {
        const signerOrProvider = (contract.signer || contract.provider);
        return function (...args) {
            return __awaiter$7(this, void 0, void 0, function* () {
                if (!signerOrProvider) {
                    logger$d.throwError("estimate require a provider or signer", Logger.errors.UNSUPPORTED_OPERATION, {
                        operation: "estimateGas"
                    });
                }
                const tx = yield populateTransaction(contract, fragment, args);
                return yield signerOrProvider.estimateGas(tx);
            });
        };
    }
    function addContractWait(contract, tx) {
        const wait = tx.wait.bind(tx);
        tx.wait = (confirmations) => {
            return wait(confirmations).then((receipt) => {
                receipt.events = receipt.logs.map((log) => {
                    let event = deepCopy(log);
                    let parsed = null;
                    try {
                        parsed = contract.interface.parseLog(log);
                    }
                    catch (e) { }
                    // Successfully parsed the event log; include it
                    if (parsed) {
                        event.args = parsed.args;
                        event.decode = (data, topics) => {
                            return contract.interface.decodeEventLog(parsed.eventFragment, data, topics);
                        };
                        event.event = parsed.name;
                        event.eventSignature = parsed.signature;
                    }
                    // Useful operations
                    event.removeListener = () => { return contract.provider; };
                    event.getBlock = () => {
                        return contract.provider.getBlock(receipt.blockHash);
                    };
                    event.getTransaction = () => {
                        return contract.provider.getTransaction(receipt.transactionHash);
                    };
                    event.getTransactionReceipt = () => {
                        return Promise.resolve(receipt);
                    };
                    return event;
                });
                return receipt;
            });
        };
    }
    function buildCall$1(contract, fragment, collapseSimple) {
        const signerOrProvider = (contract.signer || contract.provider);
        return function (...args) {
            return __awaiter$7(this, void 0, void 0, function* () {
                // Extract the "blockTag" override if present
                let blockTag = undefined;
                if (args.length === fragment.inputs.length + 1 && typeof (args[args.length - 1]) === "object") {
                    const overrides = shallowCopy(args.pop());
                    if (overrides.blockTag != null) {
                        blockTag = yield overrides.blockTag;
                    }
                    delete overrides.blockTag;
                    args.push(overrides);
                }
                // If the contract was just deployed, wait until it is mined
                if (contract.deployTransaction != null) {
                    yield contract._deployed(blockTag);
                }
                // Call a node and get the result
                const tx = yield populateTransaction(contract, fragment, args);
                const result = yield signerOrProvider.call(tx, blockTag);
                try {
                    let value = contract.interface.decodeFunctionResult(fragment, result);
                    if (collapseSimple && fragment.outputs.length === 1) {
                        value = value[0];
                    }
                    return value;
                }
                catch (error) {
                    if (error.code === Logger.errors.CALL_EXCEPTION) {
                        error.address = contract.address;
                        error.args = args;
                        error.transaction = tx;
                    }
                    throw error;
                }
            });
        };
    }
    function buildSend(contract, fragment) {
        return function (...args) {
            return __awaiter$7(this, void 0, void 0, function* () {
                if (!contract.signer) {
                    logger$d.throwError("sending a transaction requires a signer", Logger.errors.UNSUPPORTED_OPERATION, {
                        operation: "sendTransaction"
                    });
                }
                // If the contract was just deployed, wait until it is mined
                if (contract.deployTransaction != null) {
                    yield contract._deployed();
                }
                const txRequest = yield populateTransaction(contract, fragment, args);
                const tx = yield contract.signer.sendTransaction(txRequest);
                // Tweak the tx.wait so the receipt has extra properties
                addContractWait(contract, tx);
                return tx;
            });
        };
    }
    function buildDefault$1(contract, fragment, collapseSimple) {
        if (fragment.constant) {
            return buildCall$1(contract, fragment, collapseSimple);
        }
        return buildSend(contract, fragment);
    }
    function getEventTag$1(filter) {
        if (filter.address && (filter.topics == null || filter.topics.length === 0)) {
            return "*";
        }
        return (filter.address || "*") + "@" + (filter.topics ? filter.topics.map((topic) => {
            if (Array.isArray(topic)) {
                return topic.join("|");
            }
            return topic;
        }).join(":") : "");
    }
    class RunningEvent {
        constructor(tag, filter) {
            defineReadOnly(this, "tag", tag);
            defineReadOnly(this, "filter", filter);
            this._listeners = [];
        }
        addListener(listener, once) {
            this._listeners.push({ listener: listener, once: once });
        }
        removeListener(listener) {
            let done = false;
            this._listeners = this._listeners.filter((item) => {
                if (done || item.listener !== listener) {
                    return true;
                }
                done = true;
                return false;
            });
        }
        removeAllListeners() {
            this._listeners = [];
        }
        listeners() {
            return this._listeners.map((i) => i.listener);
        }
        listenerCount() {
            return this._listeners.length;
        }
        run(args) {
            const listenerCount = this.listenerCount();
            this._listeners = this._listeners.filter((item) => {
                const argsCopy = args.slice();
                // Call the callback in the next event loop
                setTimeout(() => {
                    item.listener.apply(this, argsCopy);
                }, 0);
                // Reschedule it if it not "once"
                return !(item.once);
            });
            return listenerCount;
        }
        prepareEvent(event) {
        }
        // Returns the array that will be applied to an emit
        getEmit(event) {
            return [event];
        }
    }
    class ErrorRunningEvent extends RunningEvent {
        constructor() {
            super("error", null);
        }
    }
    // @TODO Fragment should inherit Wildcard? and just override getEmit?
    //       or have a common abstract super class, with enough constructor
    //       options to configure both.
    // A Fragment Event will populate all the properties that Wildcard
    // will, and additionally dereference the arguments when emitting
    class FragmentRunningEvent extends RunningEvent {
        constructor(address, contractInterface, fragment, topics) {
            const filter = {
                address: address
            };
            let topic = contractInterface.getEventTopic(fragment);
            if (topics) {
                if (topic !== topics[0]) {
                    logger$d.throwArgumentError("topic mismatch", "topics", topics);
                }
                filter.topics = topics.slice();
            }
            else {
                filter.topics = [topic];
            }
            super(getEventTag$1(filter), filter);
            defineReadOnly(this, "address", address);
            defineReadOnly(this, "interface", contractInterface);
            defineReadOnly(this, "fragment", fragment);
        }
        prepareEvent(event) {
            super.prepareEvent(event);
            event.event = this.fragment.name;
            event.eventSignature = this.fragment.format();
            event.decode = (data, topics) => {
                return this.interface.decodeEventLog(this.fragment, data, topics);
            };
            try {
                event.args = this.interface.decodeEventLog(this.fragment, event.data, event.topics);
            }
            catch (error) {
                event.args = null;
                event.decodeError = error;
            }
        }
        getEmit(event) {
            const errors = checkResultErrors(event.args);
            if (errors.length) {
                throw errors[0].error;
            }
            const args = (event.args || []).slice();
            args.push(event);
            return args;
        }
    }
    // A Wildcard Event will attempt to populate:
    //  - event            The name of the event name
    //  - eventSignature   The full signature of the event
    //  - decode           A function to decode data and topics
    //  - args             The decoded data and topics
    class WildcardRunningEvent extends RunningEvent {
        constructor(address, contractInterface) {
            super("*", { address: address });
            defineReadOnly(this, "address", address);
            defineReadOnly(this, "interface", contractInterface);
        }
        prepareEvent(event) {
            super.prepareEvent(event);
            try {
                const parsed = this.interface.parseLog(event);
                event.event = parsed.name;
                event.eventSignature = parsed.signature;
                event.decode = (data, topics) => {
                    return this.interface.decodeEventLog(parsed.eventFragment, data, topics);
                };
                event.args = parsed.args;
            }
            catch (error) {
                // No matching event
            }
        }
    }
    class BaseContract {
        constructor(addressOrName, contractInterface, signerOrProvider) {
            // @TODO: Maybe still check the addressOrName looks like a valid address or name?
            //address = getAddress(address);
            defineReadOnly(this, "interface", getStatic(new.target, "getInterface")(contractInterface));
            if (signerOrProvider == null) {
                defineReadOnly(this, "provider", null);
                defineReadOnly(this, "signer", null);
            }
            else if (Signer.isSigner(signerOrProvider)) {
                defineReadOnly(this, "provider", signerOrProvider.provider || null);
                defineReadOnly(this, "signer", signerOrProvider);
            }
            else if (Provider$1.isProvider(signerOrProvider)) {
                defineReadOnly(this, "provider", signerOrProvider);
                defineReadOnly(this, "signer", null);
            }
            else {
                logger$d.throwArgumentError("invalid signer or provider", "signerOrProvider", signerOrProvider);
            }
            defineReadOnly(this, "callStatic", {});
            defineReadOnly(this, "estimateGas", {});
            defineReadOnly(this, "functions", {});
            defineReadOnly(this, "populateTransaction", {});
            defineReadOnly(this, "filters", {});
            {
                const uniqueFilters = {};
                Object.keys(this.interface.events).forEach((eventSignature) => {
                    const event = this.interface.events[eventSignature];
                    defineReadOnly(this.filters, eventSignature, (...args) => {
                        return {
                            address: this.address,
                            topics: this.interface.encodeFilterTopics(event, args)
                        };
                    });
                    if (!uniqueFilters[event.name]) {
                        uniqueFilters[event.name] = [];
                    }
                    uniqueFilters[event.name].push(eventSignature);
                });
                Object.keys(uniqueFilters).forEach((name) => {
                    const filters = uniqueFilters[name];
                    if (filters.length === 1) {
                        defineReadOnly(this.filters, name, this.filters[filters[0]]);
                    }
                    else {
                        logger$d.warn(`Duplicate definition of ${name} (${filters.join(", ")})`);
                    }
                });
            }
            defineReadOnly(this, "_runningEvents", {});
            defineReadOnly(this, "_wrappedEmits", {});
            if (addressOrName == null) {
                logger$d.throwArgumentError("invalid contract address or ENS name", "addressOrName", addressOrName);
            }
            defineReadOnly(this, "address", addressOrName);
            if (this.provider) {
                defineReadOnly(this, "resolvedAddress", resolveName(this.provider, addressOrName));
            }
            else {
                try {
                    defineReadOnly(this, "resolvedAddress", Promise.resolve(getAddress(addressOrName)));
                }
                catch (error) {
                    // Without a provider, we cannot use ENS names
                    logger$d.throwError("provider is required to use ENS name as contract address", Logger.errors.UNSUPPORTED_OPERATION, {
                        operation: "new Contract"
                    });
                }
            }
            // Swallow bad ENS names to prevent Unhandled Exceptions
            this.resolvedAddress.catch((e) => { });
            const uniqueNames = {};
            const uniqueSignatures = {};
            Object.keys(this.interface.functions).forEach((signature) => {
                const fragment = this.interface.functions[signature];
                // Check that the signature is unique; if not the ABI generation has
                // not been cleaned or may be incorrectly generated
                if (uniqueSignatures[signature]) {
                    logger$d.warn(`Duplicate ABI entry for ${JSON.stringify(signature)}`);
                    return;
                }
                uniqueSignatures[signature] = true;
                // Track unique names; we only expose bare named functions if they
                // are ambiguous
                {
                    const name = fragment.name;
                    if (!uniqueNames[`%${name}`]) {
                        uniqueNames[`%${name}`] = [];
                    }
                    uniqueNames[`%${name}`].push(signature);
                }
                if (this[signature] == null) {
                    defineReadOnly(this, signature, buildDefault$1(this, fragment, true));
                }
                // We do not collapse simple calls on this bucket, which allows
                // frameworks to safely use this without introspection as well as
                // allows decoding error recovery.
                if (this.functions[signature] == null) {
                    defineReadOnly(this.functions, signature, buildDefault$1(this, fragment, false));
                }
                if (this.callStatic[signature] == null) {
                    defineReadOnly(this.callStatic, signature, buildCall$1(this, fragment, true));
                }
                if (this.populateTransaction[signature] == null) {
                    defineReadOnly(this.populateTransaction, signature, buildPopulate$1(this, fragment));
                }
                if (this.estimateGas[signature] == null) {
                    defineReadOnly(this.estimateGas, signature, buildEstimate$1(this, fragment));
                }
            });
            Object.keys(uniqueNames).forEach((name) => {
                // Ambiguous names to not get attached as bare names
                const signatures = uniqueNames[name];
                if (signatures.length > 1) {
                    return;
                }
                // Strip off the leading "%" used for prototype protection
                name = name.substring(1);
                const signature = signatures[0];
                // If overwriting a member property that is null, swallow the error
                try {
                    if (this[name] == null) {
                        defineReadOnly(this, name, this[signature]);
                    }
                }
                catch (e) { }
                if (this.functions[name] == null) {
                    defineReadOnly(this.functions, name, this.functions[signature]);
                }
                if (this.callStatic[name] == null) {
                    defineReadOnly(this.callStatic, name, this.callStatic[signature]);
                }
                if (this.populateTransaction[name] == null) {
                    defineReadOnly(this.populateTransaction, name, this.populateTransaction[signature]);
                }
                if (this.estimateGas[name] == null) {
                    defineReadOnly(this.estimateGas, name, this.estimateGas[signature]);
                }
            });
        }
        static getContractAddress(transaction) {
            return getContractAddress(transaction);
        }
        static getInterface(contractInterface) {
            if (Interface.isInterface(contractInterface)) {
                return contractInterface;
            }
            return new Interface(contractInterface);
        }
        // @TODO: Allow timeout?
        deployed() {
            return this._deployed();
        }
        _deployed(blockTag) {
            if (!this._deployedPromise) {
                // If we were just deployed, we know the transaction we should occur in
                if (this.deployTransaction) {
                    this._deployedPromise = this.deployTransaction.wait().then(() => {
                        return this;
                    });
                }
                else {
                    // @TODO: Once we allow a timeout to be passed in, we will wait
                    // up to that many blocks for getCode
                    // Otherwise, poll for our code to be deployed
                    this._deployedPromise = this.provider.getCode(this.address, blockTag).then((code) => {
                        if (code === "0x") {
                            logger$d.throwError("contract not deployed", Logger.errors.UNSUPPORTED_OPERATION, {
                                contractAddress: this.address,
                                operation: "getDeployed"
                            });
                        }
                        return this;
                    });
                }
            }
            return this._deployedPromise;
        }
        // @TODO:
        // estimateFallback(overrides?: TransactionRequest): Promise<BigNumber>
        // @TODO:
        // estimateDeploy(bytecode: string, ...args): Promise<BigNumber>
        fallback(overrides) {
            if (!this.signer) {
                logger$d.throwError("sending a transactions require a signer", Logger.errors.UNSUPPORTED_OPERATION, { operation: "sendTransaction(fallback)" });
            }
            const tx = shallowCopy(overrides || {});
            ["from", "to"].forEach(function (key) {
                if (tx[key] == null) {
                    return;
                }
                logger$d.throwError("cannot override " + key, Logger.errors.UNSUPPORTED_OPERATION, { operation: key });
            });
            tx.to = this.resolvedAddress;
            return this.deployed().then(() => {
                return this.signer.sendTransaction(tx);
            });
        }
        // Reconnect to a different signer or provider
        connect(signerOrProvider) {
            if (typeof (signerOrProvider) === "string") {
                signerOrProvider = new VoidSigner(signerOrProvider, this.provider);
            }
            const contract = new (this.constructor)(this.address, this.interface, signerOrProvider);
            if (this.deployTransaction) {
                defineReadOnly(contract, "deployTransaction", this.deployTransaction);
            }
            return contract;
        }
        // Re-attach to a different on-chain instance of this contract
        attach(addressOrName) {
            return new (this.constructor)(addressOrName, this.interface, this.signer || this.provider);
        }
        static isIndexed(value) {
            return Indexed.isIndexed(value);
        }
        _normalizeRunningEvent(runningEvent) {
            // Already have an instance of this event running; we can re-use it
            if (this._runningEvents[runningEvent.tag]) {
                return this._runningEvents[runningEvent.tag];
            }
            return runningEvent;
        }
        _getRunningEvent(eventName) {
            if (typeof (eventName) === "string") {
                // Listen for "error" events (if your contract has an error event, include
                // the full signature to bypass this special event keyword)
                if (eventName === "error") {
                    return this._normalizeRunningEvent(new ErrorRunningEvent());
                }
                // Listen for any event that is registered
                if (eventName === "event") {
                    return this._normalizeRunningEvent(new RunningEvent("event", null));
                }
                // Listen for any event
                if (eventName === "*") {
                    return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));
                }
                // Get the event Fragment (throws if ambiguous/unknown event)
                const fragment = this.interface.getEvent(eventName);
                return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment));
            }
            // We have topics to filter by...
            if (eventName.topics && eventName.topics.length > 0) {
                // Is it a known topichash? (throws if no matching topichash)
                try {
                    const topic = eventName.topics[0];
                    if (typeof (topic) !== "string") {
                        throw new Error("invalid topic"); // @TODO: May happen for anonymous events
                    }
                    const fragment = this.interface.getEvent(topic);
                    return this._normalizeRunningEvent(new FragmentRunningEvent(this.address, this.interface, fragment, eventName.topics));
                }
                catch (error) { }
                // Filter by the unknown topichash
                const filter = {
                    address: this.address,
                    topics: eventName.topics
                };
                return this._normalizeRunningEvent(new RunningEvent(getEventTag$1(filter), filter));
            }
            return this._normalizeRunningEvent(new WildcardRunningEvent(this.address, this.interface));
        }
        _checkRunningEvents(runningEvent) {
            if (runningEvent.listenerCount() === 0) {
                delete this._runningEvents[runningEvent.tag];
                // If we have a poller for this, remove it
                const emit = this._wrappedEmits[runningEvent.tag];
                if (emit && runningEvent.filter) {
                    this.provider.off(runningEvent.filter, emit);
                    delete this._wrappedEmits[runningEvent.tag];
                }
            }
        }
        // Subclasses can override this to gracefully recover
        // from parse errors if they wish
        _wrapEvent(runningEvent, log, listener) {
            const event = deepCopy(log);
            event.removeListener = () => {
                if (!listener) {
                    return;
                }
                runningEvent.removeListener(listener);
                this._checkRunningEvents(runningEvent);
            };
            event.getBlock = () => { return this.provider.getBlock(log.blockHash); };
            event.getTransaction = () => { return this.provider.getTransaction(log.transactionHash); };
            event.getTransactionReceipt = () => { return this.provider.getTransactionReceipt(log.transactionHash); };
            // This may throw if the topics and data mismatch the signature
            runningEvent.prepareEvent(event);
            return event;
        }
        _addEventListener(runningEvent, listener, once) {
            if (!this.provider) {
                logger$d.throwError("events require a provider or a signer with a provider", Logger.errors.UNSUPPORTED_OPERATION, { operation: "once" });
            }
            runningEvent.addListener(listener, once);
            // Track this running event and its listeners (may already be there; but no hard in updating)
            this._runningEvents[runningEvent.tag] = runningEvent;
            // If we are not polling the provider, start polling
            if (!this._wrappedEmits[runningEvent.tag]) {
                const wrappedEmit = (log) => {
                    let event = this._wrapEvent(runningEvent, log, listener);
                    // Try to emit the result for the parameterized event...
                    if (event.decodeError == null) {
                        try {
                            const args = runningEvent.getEmit(event);
                            this.emit(runningEvent.filter, ...args);
                        }
                        catch (error) {
                            event.decodeError = error.error;
                        }
                    }
                    // Always emit "event" for fragment-base events
                    if (runningEvent.filter != null) {
                        this.emit("event", event);
                    }
                    // Emit "error" if there was an error
                    if (event.decodeError != null) {
                        this.emit("error", event.decodeError, event);
                    }
                };
                this._wrappedEmits[runningEvent.tag] = wrappedEmit;
                // Special events, like "error" do not have a filter
                if (runningEvent.filter != null) {
                    this.provider.on(runningEvent.filter, wrappedEmit);
                }
            }
        }
        queryFilter(event, fromBlockOrBlockhash, toBlock) {
            const runningEvent = this._getRunningEvent(event);
            const filter = shallowCopy(runningEvent.filter);
            if (typeof (fromBlockOrBlockhash) === "string" && isHexString(fromBlockOrBlockhash, 32)) {
                if (toBlock != null) {
                    logger$d.throwArgumentError("cannot specify toBlock with blockhash", "toBlock", toBlock);
                }
                filter.blockHash = fromBlockOrBlockhash;
            }
            else {
                filter.fromBlock = ((fromBlockOrBlockhash != null) ? fromBlockOrBlockhash : 0);
                filter.toBlock = ((toBlock != null) ? toBlock : "latest");
            }
            return this.provider.getLogs(filter).then((logs) => {
                return logs.map((log) => this._wrapEvent(runningEvent, log, null));
            });
        }
        on(event, listener) {
            this._addEventListener(this._getRunningEvent(event), listener, false);
            return this;
        }
        once(event, listener) {
            this._addEventListener(this._getRunningEvent(event), listener, true);
            return this;
        }
        emit(eventName, ...args) {
            if (!this.provider) {
                return false;
            }
            const runningEvent = this._getRunningEvent(eventName);
            const result = (runningEvent.run(args) > 0);
            // May have drained all the "once" events; check for living events
            this._checkRunningEvents(runningEvent);
            return result;
        }
        listenerCount(eventName) {
            if (!this.provider) {
                return 0;
            }
            if (eventName == null) {
                return Object.keys(this._runningEvents).reduce((accum, key) => {
                    return accum + this._runningEvents[key].listenerCount();
                }, 0);
            }
            return this._getRunningEvent(eventName).listenerCount();
        }
        listeners(eventName) {
            if (!this.provider) {
                return [];
            }
            if (eventName == null) {
                const result = [];
                for (let tag in this._runningEvents) {
                    this._runningEvents[tag].listeners().forEach((listener) => {
                        result.push(listener);
                    });
                }
                return result;
            }
            return this._getRunningEvent(eventName).listeners();
        }
        removeAllListeners(eventName) {
            if (!this.provider) {
                return this;
            }
            if (eventName == null) {
                for (const tag in this._runningEvents) {
                    const runningEvent = this._runningEvents[tag];
                    runningEvent.removeAllListeners();
                    this._checkRunningEvents(runningEvent);
                }
                return this;
            }
            // Delete any listeners
            const runningEvent = this._getRunningEvent(eventName);
            runningEvent.removeAllListeners();
            this._checkRunningEvents(runningEvent);
            return this;
        }
        off(eventName, listener) {
            if (!this.provider) {
                return this;
            }
            const runningEvent = this._getRunningEvent(eventName);
            runningEvent.removeListener(listener);
            this._checkRunningEvents(runningEvent);
            return this;
        }
        removeListener(eventName, listener) {
            return this.off(eventName, listener);
        }
    }
    class Contract$1 extends BaseContract {
    }

    var EnumType_1 = createCommonjsModule$1(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EnumType = void 0;
    var EnumType = (function () {
        function EnumType(value) {
            this.value = value;
        }
        return EnumType;
    }());
    exports.EnumType = EnumType;

    });

    var VariableType_1 = createCommonjsModule$1(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.VariableType = void 0;
    var VariableType = (function () {
        function VariableType(value) {
            this.value = value;
        }
        VariableType.prototype.toJSON = function () {
            return "$".concat(this.value);
        };
        return VariableType;
    }());
    exports.VariableType = VariableType;

    });

    var jsonToGraphQLQuery_1 = createCommonjsModule$1(function (module, exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.jsonToGraphQLQuery = exports.configFields = void 0;


    exports.configFields = [
        '__args',
        '__alias',
        '__aliasFor',
        '__variables',
        '__directives',
        '__on',
        '__all_on',
        '__typeName',
        '__name',
    ];
    function stringify(obj_from_json) {
        if (obj_from_json instanceof EnumType_1.EnumType) {
            return obj_from_json.value;
        }
        else if (obj_from_json instanceof VariableType_1.VariableType) {
            return "$".concat(obj_from_json.value);
        }
        else if (typeof obj_from_json !== 'object' || obj_from_json === null) {
            return JSON.stringify(obj_from_json);
        }
        else if (Array.isArray(obj_from_json)) {
            return "[".concat(obj_from_json.map(function (item) { return stringify(item); }).join(', '), "]");
        }
        var props = Object.keys(obj_from_json)
            .map(function (key) { return "".concat(key, ": ").concat(stringify(obj_from_json[key])); })
            .join(', ');
        return "{".concat(props, "}");
    }
    function buildArgs(argsObj) {
        var args = [];
        for (var argName in argsObj) {
            args.push("".concat(argName, ": ").concat(stringify(argsObj[argName])));
        }
        return args.join(', ');
    }
    function buildVariables(varsObj) {
        var args = [];
        for (var varName in varsObj) {
            args.push("$".concat(varName, ": ").concat(varsObj[varName]));
        }
        return args.join(', ');
    }
    function buildDirectives(dirsObj) {
        var directiveName = Object.keys(dirsObj)[0];
        var directiveValue = dirsObj[directiveName];
        if (typeof directiveValue === 'boolean' ||
            (typeof directiveValue === 'object' &&
                Object.keys(directiveValue).length === 0)) {
            return directiveName;
        }
        else if (typeof directiveValue === 'object') {
            var args = [];
            for (var argName in directiveValue) {
                var argVal = stringify(directiveValue[argName]).replace(/"/g, '');
                args.push("".concat(argName, ": ").concat(argVal));
            }
            return "".concat(directiveName, "(").concat(args.join(', '), ")");
        }
        else {
            throw new Error("Unsupported type for directive: ".concat(typeof directiveValue, ". Types allowed: object, boolean.\n") +
                "Offending object: ".concat(JSON.stringify(dirsObj)));
        }
    }
    function getIndent(level) {
        return Array(level * 4 + 1).join(' ');
    }
    function filterNonConfigFields(fieldName, ignoreFields) {
        return (exports.configFields.indexOf(fieldName) == -1 &&
            ignoreFields.indexOf(fieldName) == -1);
    }
    function convertQuery(node, level, output, options) {
        Object.keys(node)
            .filter(function (key) { return filterNonConfigFields(key, options.ignoreFields); })
            .forEach(function (key) {
            var value = node[key];
            if (typeof value === 'object') {
                if (Array.isArray(value)) {
                    value = value.find(function (item) { return item && typeof item === 'object'; });
                    if (!value) {
                        output.push(["".concat(key), level]);
                        return;
                    }
                }
                if (value &&
                    Object.keys(value).filter(function (k) { return value[k] !== false || options.includeFalsyKeys; }).length === 0) {
                    return;
                }
                var fieldCount = Object.keys(value).filter(function (keyCount) {
                    return filterNonConfigFields(keyCount, options.ignoreFields);
                }).length;
                var subFields = fieldCount > 0;
                var argsExist = typeof value.__args === 'object' &&
                    Object.keys(value.__args).length > 0;
                var directivesExist = typeof value.__directives === 'object';
                var fullFragmentsExist = value.__all_on instanceof Array;
                var partialFragmentsExist = typeof value.__on === 'object';
                var token = "".concat(key);
                if (typeof value.__name === 'string') {
                    token = "".concat(token, " ").concat(value.__name);
                }
                if (typeof value.__aliasFor === 'string') {
                    token = "".concat(token, ": ").concat(value.__aliasFor);
                }
                if (typeof value.__variables === 'object' &&
                    Object.keys(value.__variables).length > 0) {
                    token = "".concat(token, " (").concat(buildVariables(value.__variables), ")");
                }
                else if (argsExist || directivesExist) {
                    var argsStr = '';
                    var dirsStr = '';
                    if (directivesExist) {
                        dirsStr = Object.entries(value.__directives)
                            .map(function (item) {
                            var _a;
                            return "@".concat(buildDirectives((_a = {}, _a[item[0]] = item[1], _a)));
                        })
                            .join(' ');
                    }
                    if (argsExist) {
                        argsStr = "(".concat(buildArgs(value.__args), ")");
                    }
                    var spacer = directivesExist && argsExist ? ' ' : '';
                    token = "".concat(token, " ").concat(argsStr).concat(spacer).concat(dirsStr);
                }
                output.push([
                    token +
                        (subFields ||
                            partialFragmentsExist ||
                            fullFragmentsExist
                            ? ' {'
                            : ''),
                    level,
                ]);
                convertQuery(value, level + 1, output, options);
                if (fullFragmentsExist) {
                    value.__all_on.forEach(function (fullFragment) {
                        output.push(["...".concat(fullFragment), level + 1]);
                    });
                }
                if (partialFragmentsExist) {
                    var inlineFragments = value.__on instanceof Array ? value.__on : [value.__on];
                    inlineFragments.forEach(function (inlineFragment) {
                        var name = inlineFragment.__typeName;
                        output.push(["... on ".concat(name, " {"), level + 1]);
                        convertQuery(inlineFragment, level + 2, output, options);
                        output.push(['}', level + 1]);
                    });
                }
                if (subFields || partialFragmentsExist || fullFragmentsExist) {
                    output.push(['}', level]);
                }
            }
            else if (options.includeFalsyKeys === true || value) {
                output.push(["".concat(key), level]);
            }
        });
    }
    function jsonToGraphQLQuery(query, options) {
        if (options === void 0) { options = {}; }
        if (!query || typeof query != 'object') {
            throw new Error('query object not specified');
        }
        if (Object.keys(query).length == 0) {
            throw new Error('query object has no data');
        }
        if (!(options.ignoreFields instanceof Array)) {
            options.ignoreFields = [];
        }
        var queryLines = [];
        convertQuery(query, 0, queryLines, options);
        queryLines = dropEmptyObjects(queryLines);
        var output = '';
        queryLines.forEach(function (_a) {
            var line = _a[0], level = _a[1];
            if (options.pretty) {
                if (output) {
                    output += '\n';
                }
                output += getIndent(level) + line;
            }
            else {
                if (output) {
                    output += ' ';
                }
                output += line;
            }
        });
        return output;
    }
    exports.jsonToGraphQLQuery = jsonToGraphQLQuery;
    function dropEmptyObjects(inputList) {
        var rootContext = {
            indent: -1,
            text: null,
            isEmpty: true,
            contents: [],
        };
        var stack = [rootContext];
        for (var _i = 0, inputList_1 = inputList; _i < inputList_1.length; _i++) {
            var _a = inputList_1[_i], text = _a[0], indent = _a[1];
            text = text.trim();
            if (text.endsWith('{')) {
                var context_1 = {
                    indent: indent,
                    text: text,
                    isEmpty: true,
                    contents: [],
                };
                stack[stack.length - 1].contents.push(context_1);
                stack.push(context_1);
            }
            else if (text === '}') {
                var context_2 = stack.pop();
                if (context_2.isEmpty) {
                    stack[stack.length - 1].contents.pop();
                }
                else {
                    stack[stack.length - 1].isEmpty = false;
                }
            }
            else {
                stack[stack.length - 1].contents.push(text);
                stack[stack.length - 1].isEmpty = false;
            }
        }
        var output = [];
        function traverse(context) {
            for (var _i = 0, _a = context.contents; _i < _a.length; _i++) {
                var item = _a[_i];
                if (typeof item === 'object') {
                    output.push([item.text, item.indent]);
                    traverse(item);
                    output.push(['}', item.indent]);
                }
                else {
                    output.push([item, context.indent + 1]);
                }
            }
        }
        traverse(rootContext);
        return output;
    }

    });

    var lib = createCommonjsModule$1(function (module, exports) {
    var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = { enumerable: true, get: function() { return m[k]; } };
        }
        Object.defineProperty(o, k2, desc);
    }) : (function(o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
    }));
    var __exportStar = (commonjsGlobal && commonjsGlobal.__exportStar) || function(m, exports) {
        for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.VariableType = exports.EnumType = void 0;
    __exportStar(jsonToGraphQLQuery_1, exports);

    Object.defineProperty(exports, "EnumType", { enumerable: true, get: function () { return EnumType_1.EnumType; } });

    Object.defineProperty(exports, "VariableType", { enumerable: true, get: function () { return VariableType_1.VariableType; } });

    });

    /**
     * lodash (Custom Build) <https://lodash.com/>
     * Build: `lodash modularize exports="npm" -o ./`
     * Copyright jQuery Foundation and other contributors <https://jquery.org/>
     * Released under MIT license <https://lodash.com/license>
     * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
     * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
     */

    /** Used as the `TypeError` message for "Functions" methods. */
    var FUNC_ERROR_TEXT = 'Expected a function';

    /** Used to stand-in for `undefined` hash values. */
    var HASH_UNDEFINED = '__lodash_hash_undefined__';

    /** Used as references for various `Number` constants. */
    var INFINITY = 1 / 0,
        MAX_SAFE_INTEGER = 9007199254740991;

    /** `Object#toString` result references. */
    var funcTag = '[object Function]',
        genTag = '[object GeneratorFunction]',
        symbolTag = '[object Symbol]';

    /** Used to match property names within property paths. */
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
        reIsPlainProp = /^\w*$/,
        reLeadingDot = /^\./,
        rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

    /**
     * Used to match `RegExp`
     * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
     */
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

    /** Used to match backslashes in property paths. */
    var reEscapeChar = /\\(\\)?/g;

    /** Used to detect host constructors (Safari). */
    var reIsHostCtor = /^\[object .+?Constructor\]$/;

    /** Used to detect unsigned integer values. */
    var reIsUint = /^(?:0|[1-9]\d*)$/;

    /** Detect free variable `global` from Node.js. */
    var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

    /** Detect free variable `self`. */
    var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

    /** Used as a reference to the global object. */
    var root = freeGlobal || freeSelf || Function('return this')();

    /**
     * Gets the value at `key` of `object`.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */
    function getValue(object, key) {
      return object == null ? undefined : object[key];
    }

    /**
     * Checks if `value` is a host object in IE < 9.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
     */
    function isHostObject(value) {
      // Many host objects are `Object` objects that can coerce to strings
      // despite having improperly defined `toString` methods.
      var result = false;
      if (value != null && typeof value.toString != 'function') {
        try {
          result = !!(value + '');
        } catch (e) {}
      }
      return result;
    }

    /** Used for built-in method references. */
    var arrayProto = Array.prototype,
        funcProto = Function.prototype,
        objectProto = Object.prototype;

    /** Used to detect overreaching core-js shims. */
    var coreJsData = root['__core-js_shared__'];

    /** Used to detect methods masquerading as native. */
    var maskSrcKey = (function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
      return uid ? ('Symbol(src)_1.' + uid) : '';
    }());

    /** Used to resolve the decompiled source of functions. */
    var funcToString = funcProto.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var objectToString = objectProto.toString;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Built-in value references. */
    var Symbol$1 = root.Symbol,
        splice = arrayProto.splice;

    /* Built-in method references that are verified to be native. */
    var Map$1 = getNative(root, 'Map'),
        nativeCreate = getNative(Object, 'create');

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol$1 ? Symbol$1.prototype : undefined,
        symbolToString = symbolProto ? symbolProto.toString : undefined;

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash$1(entries) {
      var index = -1,
          length = entries ? entries.length : 0;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
    }

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(key) {
      return this.has(key) && delete this.__data__[key];
    }

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : undefined;
    }

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
    }

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet(key, value) {
      var data = this.__data__;
      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
      return this;
    }

    // Add methods to `Hash`.
    Hash$1.prototype.clear = hashClear;
    Hash$1.prototype['delete'] = hashDelete;
    Hash$1.prototype.get = hashGet;
    Hash$1.prototype.has = hashHas;
    Hash$1.prototype.set = hashSet;

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache(entries) {
      var index = -1,
          length = entries ? entries.length : 0;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */
    function listCacheClear() {
      this.__data__ = [];
    }

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      return true;
    }

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      return index < 0 ? undefined : data[index][1];
    }

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet(key, value) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }

    // Add methods to `ListCache`.
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache(entries) {
      var index = -1,
          length = entries ? entries.length : 0;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear() {
      this.__data__ = {
        'hash': new Hash$1,
        'map': new (Map$1 || ListCache),
        'string': new Hash$1
      };
    }

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete(key) {
      return getMapData(this, key)['delete'](key);
    }

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet(key, value) {
      getMapData(this, key).set(key, value);
      return this;
    }

    // Add methods to `MapCache`.
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
          (value === undefined && !(key in object))) {
        object[key] = value;
      }
    }

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative(value) {
      if (!isObject$1(value) || isMasked(value)) {
        return false;
      }
      var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }

    /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseSet(object, path, value, customizer) {
      if (!isObject$1(object)) {
        return object;
      }
      path = isKey(path, object) ? [path] : castPath(path);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = toKey(path[index]),
            newValue = value;

        if (index != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : undefined;
          if (newValue === undefined) {
            newValue = isObject$1(objValue)
              ? objValue
              : (isIndex(path[index + 1]) ? [] : {});
          }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }

    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast property path array.
     */
    function castPath(value) {
      return isArray(value) ? value : stringToPath(value);
    }

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key)
        ? data[typeof key == 'string' ? 'string' : 'hash']
        : data.map;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : undefined;
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length &&
        (typeof value == 'number' || reIsUint.test(value)) &&
        (value > -1 && value % 1 == 0 && value < length);
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
          value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
        (object != null && value in Object(object));
    }

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
      var type = typeof value;
      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
        ? (value !== '__proto__')
        : (value === null);
    }

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked(func) {
      return !!maskSrcKey && (maskSrcKey in func);
    }

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    var stringToPath = memoize(function(string) {
      string = toString$2(string);

      var result = [];
      if (reLeadingDot.test(string)) {
        result.push('');
      }
      string.replace(rePropName, function(match, number, quote, string) {
        result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    });

    /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */
    function toKey(value) {
      if (typeof value == 'string' || isSymbol(value)) {
        return value;
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to process.
     * @returns {string} Returns the source code.
     */
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {}
        try {
          return (func + '');
        } catch (e) {}
      }
      return '';
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result);
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache);
      return memoized;
    }

    // Assign cache to `_.memoize`.
    memoize.Cache = MapCache;

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 8-9 which returns 'object' for typed array and other constructors.
      var tag = isObject$1(value) ? objectToString.call(value) : '';
      return tag == funcTag || tag == genTag;
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject$1(value) {
      var type = typeof value;
      return !!value && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return !!value && typeof value == 'object';
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' ||
        (isObjectLike(value) && objectToString.call(value) == symbolTag);
    }

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString$2(value) {
      return value == null ? '' : baseToString(value);
    }

    /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }

    var lodash_set = set;

    class Multicaller {
        constructor(network, provider, abi, options) {
            this.options = {};
            this.calls = [];
            this.paths = [];
            this.network = network;
            this.provider = provider;
            this.abi = abi;
            this.options = options || {};
        }
        call(path, address, fn, params) {
            this.calls.push([address, fn, params]);
            this.paths.push(path);
            return this;
        }
        execute(from) {
            return __awaiter$c(this, void 0, void 0, function* () {
                const obj = from || {};
                const result = yield multicall(this.network, this.provider, this.abi, this.calls, this.options);
                result.forEach((r, i) => lodash_set(obj, this.paths[i], r.length > 1 ? r : r[0]));
                this.calls = [];
                this.paths = [];
                return obj;
            });
        }
    }

    let cache = {};
    let expirationTime = 0;
    function getSnapshots(network_1, snapshot_1, provider_1, networks_1) {
        return __awaiter$c(this, arguments, void 0, function* (network, snapshot, provider, networks, options = {}) {
            // If snapshot is latest, return all latest
            const snapshots = {};
            networks.forEach((n) => (snapshots[n] = 'latest'));
            if (snapshot === 'latest')
                return snapshots;
            // Check if cache is valid
            const cacheKey = `${network}-${snapshot}-${networks.join('-')}`;
            const cachedEntry = cache[cacheKey];
            const now = Date.now();
            if (cachedEntry && expirationTime > now) {
                return cachedEntry;
            }
            // Reset cache every hour
            if (expirationTime < now) {
                cache = {};
                // Set expiration time to next hour
                expirationTime = now + 60 * 60 * 1000 - (now % (60 * 60 * 1000));
            }
            snapshots[network] = snapshot;
            const networkIn = Object.keys(snapshots).filter((s) => network !== s);
            if (networkIn.length === 0)
                return snapshots;
            const block = yield provider.getBlock(snapshot);
            const query = {
                blocks: {
                    __args: {
                        where: {
                            ts: block.timestamp,
                            network_in: networkIn
                        }
                    },
                    network: true,
                    number: true
                }
            };
            const url = options.blockFinderUrl || 'https://blockfinder.snapshot.org';
            const data = yield subgraphRequest(url, query);
            data.blocks.forEach((block) => (snapshots[block.network] = block.number));
            cache[cacheKey] = snapshots;
            return snapshots;
        });
    }

    const version$8 = "networks/5.7.1";

    const logger$c = new Logger(version$8);
    function isRenetworkable(value) {
        return (value && typeof (value.renetwork) === "function");
    }
    function ethDefaultProvider(network) {
        const func = function (providers, options) {
            if (options == null) {
                options = {};
            }
            const providerList = [];
            if (providers.InfuraProvider && options.infura !== "-") {
                try {
                    providerList.push(new providers.InfuraProvider(network, options.infura));
                }
                catch (error) { }
            }
            if (providers.EtherscanProvider && options.etherscan !== "-") {
                try {
                    providerList.push(new providers.EtherscanProvider(network, options.etherscan));
                }
                catch (error) { }
            }
            if (providers.AlchemyProvider && options.alchemy !== "-") {
                try {
                    providerList.push(new providers.AlchemyProvider(network, options.alchemy));
                }
                catch (error) { }
            }
            if (providers.PocketProvider && options.pocket !== "-") {
                // These networks are currently faulty on Pocket as their
                // network does not handle the Berlin hardfork, which is
                // live on these ones.
                // @TODO: This goes away once Pocket has upgraded their nodes
                const skip = ["goerli", "ropsten", "rinkeby", "sepolia"];
                try {
                    const provider = new providers.PocketProvider(network, options.pocket);
                    if (provider.network && skip.indexOf(provider.network.name) === -1) {
                        providerList.push(provider);
                    }
                }
                catch (error) { }
            }
            if (providers.CloudflareProvider && options.cloudflare !== "-") {
                try {
                    providerList.push(new providers.CloudflareProvider(network));
                }
                catch (error) { }
            }
            if (providers.AnkrProvider && options.ankr !== "-") {
                try {
                    const skip = ["ropsten"];
                    const provider = new providers.AnkrProvider(network, options.ankr);
                    if (provider.network && skip.indexOf(provider.network.name) === -1) {
                        providerList.push(provider);
                    }
                }
                catch (error) { }
            }
            if (providerList.length === 0) {
                return null;
            }
            if (providers.FallbackProvider) {
                let quorum = 1;
                if (options.quorum != null) {
                    quorum = options.quorum;
                }
                else if (network === "homestead") {
                    quorum = 2;
                }
                return new providers.FallbackProvider(providerList, quorum);
            }
            return providerList[0];
        };
        func.renetwork = function (network) {
            return ethDefaultProvider(network);
        };
        return func;
    }
    function etcDefaultProvider(url, network) {
        const func = function (providers, options) {
            if (providers.JsonRpcProvider) {
                return new providers.JsonRpcProvider(url, network);
            }
            return null;
        };
        func.renetwork = function (network) {
            return etcDefaultProvider(url, network);
        };
        return func;
    }
    const homestead = {
        chainId: 1,
        ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
        name: "homestead",
        _defaultProvider: ethDefaultProvider("homestead")
    };
    const ropsten = {
        chainId: 3,
        ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
        name: "ropsten",
        _defaultProvider: ethDefaultProvider("ropsten")
    };
    const classicMordor = {
        chainId: 63,
        name: "classicMordor",
        _defaultProvider: etcDefaultProvider("https://www.ethercluster.com/mordor", "classicMordor")
    };
    // See: https://chainlist.org
    const networks$1 = {
        unspecified: { chainId: 0, name: "unspecified" },
        homestead: homestead,
        mainnet: homestead,
        morden: { chainId: 2, name: "morden" },
        ropsten: ropsten,
        testnet: ropsten,
        rinkeby: {
            chainId: 4,
            ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
            name: "rinkeby",
            _defaultProvider: ethDefaultProvider("rinkeby")
        },
        kovan: {
            chainId: 42,
            name: "kovan",
            _defaultProvider: ethDefaultProvider("kovan")
        },
        goerli: {
            chainId: 5,
            ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
            name: "goerli",
            _defaultProvider: ethDefaultProvider("goerli")
        },
        kintsugi: { chainId: 1337702, name: "kintsugi" },
        sepolia: {
            chainId: 11155111,
            name: "sepolia",
            _defaultProvider: ethDefaultProvider("sepolia")
        },
        // ETC (See: #351)
        classic: {
            chainId: 61,
            name: "classic",
            _defaultProvider: etcDefaultProvider("https:/\/www.ethercluster.com/etc", "classic")
        },
        classicMorden: { chainId: 62, name: "classicMorden" },
        classicMordor: classicMordor,
        classicTestnet: classicMordor,
        classicKotti: {
            chainId: 6,
            name: "classicKotti",
            _defaultProvider: etcDefaultProvider("https:/\/www.ethercluster.com/kotti", "classicKotti")
        },
        xdai: { chainId: 100, name: "xdai" },
        matic: {
            chainId: 137,
            name: "matic",
            _defaultProvider: ethDefaultProvider("matic")
        },
        maticmum: { chainId: 80001, name: "maticmum" },
        optimism: {
            chainId: 10,
            name: "optimism",
            _defaultProvider: ethDefaultProvider("optimism")
        },
        "optimism-kovan": { chainId: 69, name: "optimism-kovan" },
        "optimism-goerli": { chainId: 420, name: "optimism-goerli" },
        arbitrum: { chainId: 42161, name: "arbitrum" },
        "arbitrum-rinkeby": { chainId: 421611, name: "arbitrum-rinkeby" },
        "arbitrum-goerli": { chainId: 421613, name: "arbitrum-goerli" },
        bnb: { chainId: 56, name: "bnb" },
        bnbt: { chainId: 97, name: "bnbt" },
    };
    /**
     *  getNetwork
     *
     *  Converts a named common networks or chain ID (network ID) to a Network
     *  and verifies a network is a valid Network..
     */
    function getNetwork(network) {
        // No network (null)
        if (network == null) {
            return null;
        }
        if (typeof (network) === "number") {
            for (const name in networks$1) {
                const standard = networks$1[name];
                if (standard.chainId === network) {
                    return {
                        name: standard.name,
                        chainId: standard.chainId,
                        ensAddress: (standard.ensAddress || null),
                        _defaultProvider: (standard._defaultProvider || null)
                    };
                }
            }
            return {
                chainId: network,
                name: "unknown"
            };
        }
        if (typeof (network) === "string") {
            const standard = networks$1[network];
            if (standard == null) {
                return null;
            }
            return {
                name: standard.name,
                chainId: standard.chainId,
                ensAddress: standard.ensAddress,
                _defaultProvider: (standard._defaultProvider || null)
            };
        }
        const standard = networks$1[network.name];
        // Not a standard network; check that it is a valid network in general
        if (!standard) {
            if (typeof (network.chainId) !== "number") {
                logger$c.throwArgumentError("invalid network chainId", "network", network);
            }
            return network;
        }
        // Make sure the chainId matches the expected network chainId (or is 0; disable EIP-155)
        if (network.chainId !== 0 && network.chainId !== standard.chainId) {
            logger$c.throwArgumentError("network chainId mismatch", "network", network);
        }
        // @TODO: In the next major version add an attach function to a defaultProvider
        // class and move the _defaultProvider internal to this file (extend Network)
        let defaultProvider = network._defaultProvider || null;
        if (defaultProvider == null && standard._defaultProvider) {
            if (isRenetworkable(standard._defaultProvider)) {
                defaultProvider = standard._defaultProvider.renetwork(network);
            }
            else {
                defaultProvider = standard._defaultProvider;
            }
        }
        // Standard Network (allow overriding the ENS address)
        return {
            name: network.name,
            chainId: standard.chainId,
            ensAddress: (network.ensAddress || standard.ensAddress || null),
            _defaultProvider: defaultProvider
        };
    }

    /**
     * var basex = require("base-x");
     *
     * This implementation is heavily based on base-x. The main reason to
     * deviate was to prevent the dependency of Buffer.
     *
     * Contributors:
     *
     * base-x encoding
     * Forked from https://github.com/cryptocoinjs/bs58
     * Originally written by Mike Hearn for BitcoinJ
     * Copyright (c) 2011 Google Inc
     * Ported to JavaScript by Stefan Thomas
     * Merged Buffer refactorings from base58-native by Stephen Pair
     * Copyright (c) 2013 BitPay Inc
     *
     * The MIT License (MIT)
     *
     * Copyright base-x contributors (c) 2016
     *
     * Permission is hereby granted, free of charge, to any person obtaining a
     * copy of this software and associated documentation files (the "Software"),
     * to deal in the Software without restriction, including without limitation
     * the rights to use, copy, modify, merge, publish, distribute, sublicense,
     * and/or sell copies of the Software, and to permit persons to whom the
     * Software is furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in
     * all copies or substantial portions of the Software.

     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
     * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
     * IN THE SOFTWARE.
     *
     */
    class BaseX {
        constructor(alphabet) {
            defineReadOnly(this, "alphabet", alphabet);
            defineReadOnly(this, "base", alphabet.length);
            defineReadOnly(this, "_alphabetMap", {});
            defineReadOnly(this, "_leader", alphabet.charAt(0));
            // pre-compute lookup table
            for (let i = 0; i < alphabet.length; i++) {
                this._alphabetMap[alphabet.charAt(i)] = i;
            }
        }
        encode(value) {
            let source = arrayify(value);
            if (source.length === 0) {
                return "";
            }
            let digits = [0];
            for (let i = 0; i < source.length; ++i) {
                let carry = source[i];
                for (let j = 0; j < digits.length; ++j) {
                    carry += digits[j] << 8;
                    digits[j] = carry % this.base;
                    carry = (carry / this.base) | 0;
                }
                while (carry > 0) {
                    digits.push(carry % this.base);
                    carry = (carry / this.base) | 0;
                }
            }
            let string = "";
            // deal with leading zeros
            for (let k = 0; source[k] === 0 && k < source.length - 1; ++k) {
                string += this._leader;
            }
            // convert digits to a string
            for (let q = digits.length - 1; q >= 0; --q) {
                string += this.alphabet[digits[q]];
            }
            return string;
        }
        decode(value) {
            if (typeof (value) !== "string") {
                throw new TypeError("Expected String");
            }
            let bytes = [];
            if (value.length === 0) {
                return new Uint8Array(bytes);
            }
            bytes.push(0);
            for (let i = 0; i < value.length; i++) {
                let byte = this._alphabetMap[value[i]];
                if (byte === undefined) {
                    throw new Error("Non-base" + this.base + " character");
                }
                let carry = byte;
                for (let j = 0; j < bytes.length; ++j) {
                    carry += bytes[j] * this.base;
                    bytes[j] = carry & 0xff;
                    carry >>= 8;
                }
                while (carry > 0) {
                    bytes.push(carry & 0xff);
                    carry >>= 8;
                }
            }
            // deal with leading zeros
            for (let k = 0; value[k] === this._leader && k < value.length - 1; ++k) {
                bytes.push(0);
            }
            return arrayify(new Uint8Array(bytes.reverse()));
        }
    }
    new BaseX("abcdefghijklmnopqrstuvwxyz234567");
    const Base58 = new BaseX("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");
    //console.log(Base58.decode("Qmd2V777o5XvJbYMeMb8k2nU5f8d3ciUQ5YpYuWhzv8iDj"))
    //console.log(Base58.encode(Base58.decode("Qmd2V777o5XvJbYMeMb8k2nU5f8d3ciUQ5YpYuWhzv8iDj")))

    var SupportedAlgorithm;
    (function (SupportedAlgorithm) {
        SupportedAlgorithm["sha256"] = "sha256";
        SupportedAlgorithm["sha512"] = "sha512";
    })(SupportedAlgorithm || (SupportedAlgorithm = {}));

    const version$7 = "sha2/5.7.0";

    const logger$b = new Logger(version$7);
    function ripemd160(data) {
        return "0x" + (hash$1.ripemd160().update(arrayify(data)).digest("hex"));
    }
    function sha256$1(data) {
        return "0x" + (hash$1.sha256().update(arrayify(data)).digest("hex"));
    }
    function computeHmac(algorithm, key, data) {
        if (!SupportedAlgorithm[algorithm]) {
            logger$b.throwError("unsupported algorithm " + algorithm, Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "hmac",
                algorithm: algorithm
            });
        }
        return "0x" + hash$1.hmac(hash$1[algorithm], arrayify(key)).update(arrayify(data)).digest("hex");
    }

    const version$6 = "web/5.7.1";

    var __awaiter$6 = (window && window.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    function getUrl$1(href, options) {
        return __awaiter$6(this, void 0, void 0, function* () {
            if (options == null) {
                options = {};
            }
            const request = {
                method: (options.method || "GET"),
                headers: (options.headers || {}),
                body: (options.body || undefined),
            };
            if (options.skipFetchSetup !== true) {
                request.mode = "cors"; // no-cors, cors, *same-origin
                request.cache = "no-cache"; // *default, no-cache, reload, force-cache, only-if-cached
                request.credentials = "same-origin"; // include, *same-origin, omit
                request.redirect = "follow"; // manual, *follow, error
                request.referrer = "client"; // no-referrer, *client
            }
            if (options.fetchOptions != null) {
                const opts = options.fetchOptions;
                if (opts.mode) {
                    request.mode = (opts.mode);
                }
                if (opts.cache) {
                    request.cache = (opts.cache);
                }
                if (opts.credentials) {
                    request.credentials = (opts.credentials);
                }
                if (opts.redirect) {
                    request.redirect = (opts.redirect);
                }
                if (opts.referrer) {
                    request.referrer = opts.referrer;
                }
            }
            const response = yield fetch(href, request);
            const body = yield response.arrayBuffer();
            const headers = {};
            if (response.headers.forEach) {
                response.headers.forEach((value, key) => {
                    headers[key.toLowerCase()] = value;
                });
            }
            else {
                ((response.headers).keys)().forEach((key) => {
                    headers[key.toLowerCase()] = response.headers.get(key);
                });
            }
            return {
                headers: headers,
                statusCode: response.status,
                statusMessage: response.statusText,
                body: arrayify(new Uint8Array(body)),
            };
        });
    }

    var __awaiter$5 = (window && window.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    const logger$a = new Logger(version$6);
    function staller(duration) {
        return new Promise((resolve) => {
            setTimeout(resolve, duration);
        });
    }
    function bodyify(value, type) {
        if (value == null) {
            return null;
        }
        if (typeof (value) === "string") {
            return value;
        }
        if (isBytesLike(value)) {
            if (type && (type.split("/")[0] === "text" || type.split(";")[0].trim() === "application/json")) {
                try {
                    return toUtf8String(value);
                }
                catch (error) { }
            }
            return hexlify(value);
        }
        return value;
    }
    function unpercent(value) {
        return toUtf8Bytes(value.replace(/%([0-9a-f][0-9a-f])/gi, (all, code) => {
            return String.fromCharCode(parseInt(code, 16));
        }));
    }
    // This API is still a work in progress; the future changes will likely be:
    // - ConnectionInfo => FetchDataRequest<T = any>
    // - FetchDataRequest.body? = string | Uint8Array | { contentType: string, data: string | Uint8Array }
    //   - If string => text/plain, Uint8Array => application/octet-stream (if content-type unspecified)
    // - FetchDataRequest.processFunc = (body: Uint8Array, response: FetchDataResponse) => T
    // For this reason, it should be considered internal until the API is finalized
    function _fetchData(connection, body, processFunc) {
        // How many times to retry in the event of a throttle
        const attemptLimit = (typeof (connection) === "object" && connection.throttleLimit != null) ? connection.throttleLimit : 12;
        logger$a.assertArgument((attemptLimit > 0 && (attemptLimit % 1) === 0), "invalid connection throttle limit", "connection.throttleLimit", attemptLimit);
        const throttleCallback = ((typeof (connection) === "object") ? connection.throttleCallback : null);
        const throttleSlotInterval = ((typeof (connection) === "object" && typeof (connection.throttleSlotInterval) === "number") ? connection.throttleSlotInterval : 100);
        logger$a.assertArgument((throttleSlotInterval > 0 && (throttleSlotInterval % 1) === 0), "invalid connection throttle slot interval", "connection.throttleSlotInterval", throttleSlotInterval);
        const errorPassThrough = ((typeof (connection) === "object") ? !!(connection.errorPassThrough) : false);
        const headers = {};
        let url = null;
        // @TODO: Allow ConnectionInfo to override some of these values
        const options = {
            method: "GET",
        };
        let allow304 = false;
        let timeout = 2 * 60 * 1000;
        if (typeof (connection) === "string") {
            url = connection;
        }
        else if (typeof (connection) === "object") {
            if (connection == null || connection.url == null) {
                logger$a.throwArgumentError("missing URL", "connection.url", connection);
            }
            url = connection.url;
            if (typeof (connection.timeout) === "number" && connection.timeout > 0) {
                timeout = connection.timeout;
            }
            if (connection.headers) {
                for (const key in connection.headers) {
                    headers[key.toLowerCase()] = { key: key, value: String(connection.headers[key]) };
                    if (["if-none-match", "if-modified-since"].indexOf(key.toLowerCase()) >= 0) {
                        allow304 = true;
                    }
                }
            }
            options.allowGzip = !!connection.allowGzip;
            if (connection.user != null && connection.password != null) {
                if (url.substring(0, 6) !== "https:" && connection.allowInsecureAuthentication !== true) {
                    logger$a.throwError("basic authentication requires a secure https url", Logger.errors.INVALID_ARGUMENT, { argument: "url", url: url, user: connection.user, password: "[REDACTED]" });
                }
                const authorization = connection.user + ":" + connection.password;
                headers["authorization"] = {
                    key: "Authorization",
                    value: "Basic " + encode$1(toUtf8Bytes(authorization))
                };
            }
            if (connection.skipFetchSetup != null) {
                options.skipFetchSetup = !!connection.skipFetchSetup;
            }
            if (connection.fetchOptions != null) {
                options.fetchOptions = shallowCopy(connection.fetchOptions);
            }
        }
        const reData = new RegExp("^data:([^;:]*)?(;base64)?,(.*)$", "i");
        const dataMatch = ((url) ? url.match(reData) : null);
        if (dataMatch) {
            try {
                const response = {
                    statusCode: 200,
                    statusMessage: "OK",
                    headers: { "content-type": (dataMatch[1] || "text/plain") },
                    body: (dataMatch[2] ? decode$2(dataMatch[3]) : unpercent(dataMatch[3]))
                };
                let result = response.body;
                if (processFunc) {
                    result = processFunc(response.body, response);
                }
                return Promise.resolve(result);
            }
            catch (error) {
                logger$a.throwError("processing response error", Logger.errors.SERVER_ERROR, {
                    body: bodyify(dataMatch[1], dataMatch[2]),
                    error: error,
                    requestBody: null,
                    requestMethod: "GET",
                    url: url
                });
            }
        }
        if (body) {
            options.method = "POST";
            options.body = body;
            if (headers["content-type"] == null) {
                headers["content-type"] = { key: "Content-Type", value: "application/octet-stream" };
            }
            if (headers["content-length"] == null) {
                headers["content-length"] = { key: "Content-Length", value: String(body.length) };
            }
        }
        const flatHeaders = {};
        Object.keys(headers).forEach((key) => {
            const header = headers[key];
            flatHeaders[header.key] = header.value;
        });
        options.headers = flatHeaders;
        const runningTimeout = (function () {
            let timer = null;
            const promise = new Promise(function (resolve, reject) {
                if (timeout) {
                    timer = setTimeout(() => {
                        if (timer == null) {
                            return;
                        }
                        timer = null;
                        reject(logger$a.makeError("timeout", Logger.errors.TIMEOUT, {
                            requestBody: bodyify(options.body, flatHeaders["content-type"]),
                            requestMethod: options.method,
                            timeout: timeout,
                            url: url
                        }));
                    }, timeout);
                }
            });
            const cancel = function () {
                if (timer == null) {
                    return;
                }
                clearTimeout(timer);
                timer = null;
            };
            return { promise, cancel };
        })();
        const runningFetch = (function () {
            return __awaiter$5(this, void 0, void 0, function* () {
                for (let attempt = 0; attempt < attemptLimit; attempt++) {
                    let response = null;
                    try {
                        response = yield getUrl$1(url, options);
                        if (attempt < attemptLimit) {
                            if (response.statusCode === 301 || response.statusCode === 302) {
                                // Redirection; for now we only support absolute locataions
                                const location = response.headers.location || "";
                                if (options.method === "GET" && location.match(/^https:/)) {
                                    url = response.headers.location;
                                    continue;
                                }
                            }
                            else if (response.statusCode === 429) {
                                // Exponential back-off throttling
                                let tryAgain = true;
                                if (throttleCallback) {
                                    tryAgain = yield throttleCallback(attempt, url);
                                }
                                if (tryAgain) {
                                    let stall = 0;
                                    const retryAfter = response.headers["retry-after"];
                                    if (typeof (retryAfter) === "string" && retryAfter.match(/^[1-9][0-9]*$/)) {
                                        stall = parseInt(retryAfter) * 1000;
                                    }
                                    else {
                                        stall = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));
                                    }
                                    //console.log("Stalling 429");
                                    yield staller(stall);
                                    continue;
                                }
                            }
                        }
                    }
                    catch (error) {
                        response = error.response;
                        if (response == null) {
                            runningTimeout.cancel();
                            logger$a.throwError("missing response", Logger.errors.SERVER_ERROR, {
                                requestBody: bodyify(options.body, flatHeaders["content-type"]),
                                requestMethod: options.method,
                                serverError: error,
                                url: url
                            });
                        }
                    }
                    let body = response.body;
                    if (allow304 && response.statusCode === 304) {
                        body = null;
                    }
                    else if (!errorPassThrough && (response.statusCode < 200 || response.statusCode >= 300)) {
                        runningTimeout.cancel();
                        logger$a.throwError("bad response", Logger.errors.SERVER_ERROR, {
                            status: response.statusCode,
                            headers: response.headers,
                            body: bodyify(body, ((response.headers) ? response.headers["content-type"] : null)),
                            requestBody: bodyify(options.body, flatHeaders["content-type"]),
                            requestMethod: options.method,
                            url: url
                        });
                    }
                    if (processFunc) {
                        try {
                            const result = yield processFunc(body, response);
                            runningTimeout.cancel();
                            return result;
                        }
                        catch (error) {
                            // Allow the processFunc to trigger a throttle
                            if (error.throttleRetry && attempt < attemptLimit) {
                                let tryAgain = true;
                                if (throttleCallback) {
                                    tryAgain = yield throttleCallback(attempt, url);
                                }
                                if (tryAgain) {
                                    const timeout = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));
                                    //console.log("Stalling callback");
                                    yield staller(timeout);
                                    continue;
                                }
                            }
                            runningTimeout.cancel();
                            logger$a.throwError("processing response error", Logger.errors.SERVER_ERROR, {
                                body: bodyify(body, ((response.headers) ? response.headers["content-type"] : null)),
                                error: error,
                                requestBody: bodyify(options.body, flatHeaders["content-type"]),
                                requestMethod: options.method,
                                url: url
                            });
                        }
                    }
                    runningTimeout.cancel();
                    // If we had a processFunc, it either returned a T or threw above.
                    // The "body" is now a Uint8Array.
                    return body;
                }
                return logger$a.throwError("failed response", Logger.errors.SERVER_ERROR, {
                    requestBody: bodyify(options.body, flatHeaders["content-type"]),
                    requestMethod: options.method,
                    url: url
                });
            });
        })();
        return Promise.race([runningTimeout.promise, runningFetch]);
    }
    function fetchJson(connection, json, processFunc) {
        let processJsonFunc = (value, response) => {
            let result = null;
            if (value != null) {
                try {
                    result = JSON.parse(toUtf8String(value));
                }
                catch (error) {
                    logger$a.throwError("invalid JSON", Logger.errors.SERVER_ERROR, {
                        body: value,
                        error: error
                    });
                }
            }
            if (processFunc) {
                result = processFunc(result, response);
            }
            return result;
        };
        // If we have json to send, we must
        // - add content-type of application/json (unless already overridden)
        // - convert the json to bytes
        let body = null;
        if (json != null) {
            body = toUtf8Bytes(json);
            // Create a connection with the content-type set for JSON
            const updated = (typeof (connection) === "string") ? ({ url: connection }) : shallowCopy(connection);
            if (updated.headers) {
                const hasContentType = (Object.keys(updated.headers).filter((k) => (k.toLowerCase() === "content-type")).length) !== 0;
                if (!hasContentType) {
                    updated.headers = shallowCopy(updated.headers);
                    updated.headers["content-type"] = "application/json";
                }
            }
            else {
                updated.headers = { "content-type": "application/json" };
            }
            connection = updated;
        }
        return _fetchData(connection, body, processJsonFunc);
    }
    function poll(func, options) {
        if (!options) {
            options = {};
        }
        options = shallowCopy(options);
        if (options.floor == null) {
            options.floor = 0;
        }
        if (options.ceiling == null) {
            options.ceiling = 10000;
        }
        if (options.interval == null) {
            options.interval = 250;
        }
        return new Promise(function (resolve, reject) {
            let timer = null;
            let done = false;
            // Returns true if cancel was successful. Unsuccessful cancel means we're already done.
            const cancel = () => {
                if (done) {
                    return false;
                }
                done = true;
                if (timer) {
                    clearTimeout(timer);
                }
                return true;
            };
            if (options.timeout) {
                timer = setTimeout(() => {
                    if (cancel()) {
                        reject(new Error("timeout"));
                    }
                }, options.timeout);
            }
            const retryLimit = options.retryLimit;
            let attempt = 0;
            function check() {
                return func().then(function (result) {
                    // If we have a result, or are allowed null then we're done
                    if (result !== undefined) {
                        if (cancel()) {
                            resolve(result);
                        }
                    }
                    else if (options.oncePoll) {
                        options.oncePoll.once("poll", check);
                    }
                    else if (options.onceBlock) {
                        options.onceBlock.once("block", check);
                        // Otherwise, exponential back-off (up to 10s) our next request
                    }
                    else if (!done) {
                        attempt++;
                        if (attempt > retryLimit) {
                            if (cancel()) {
                                reject(new Error("retry limit reached"));
                            }
                            return;
                        }
                        let timeout = options.interval * parseInt(String(Math.random() * Math.pow(2, attempt)));
                        if (timeout < options.floor) {
                            timeout = options.floor;
                        }
                        if (timeout > options.ceiling) {
                            timeout = options.ceiling;
                        }
                        setTimeout(check, timeout);
                    }
                    return null;
                }, function (error) {
                    if (cancel()) {
                        reject(error);
                    }
                });
            }
            check();
        });
    }

    var ALPHABET = 'qpzry9x8gf2tvdw0s3jn54khce6mua7l';

    // pre-compute lookup table
    var ALPHABET_MAP = {};
    for (var z = 0; z < ALPHABET.length; z++) {
      var x = ALPHABET.charAt(z);

      if (ALPHABET_MAP[x] !== undefined) throw new TypeError(x + ' is ambiguous')
      ALPHABET_MAP[x] = z;
    }

    function polymodStep (pre) {
      var b = pre >> 25;
      return ((pre & 0x1FFFFFF) << 5) ^
        (-((b >> 0) & 1) & 0x3b6a57b2) ^
        (-((b >> 1) & 1) & 0x26508e6d) ^
        (-((b >> 2) & 1) & 0x1ea119fa) ^
        (-((b >> 3) & 1) & 0x3d4233dd) ^
        (-((b >> 4) & 1) & 0x2a1462b3)
    }

    function prefixChk (prefix) {
      var chk = 1;
      for (var i = 0; i < prefix.length; ++i) {
        var c = prefix.charCodeAt(i);
        if (c < 33 || c > 126) return 'Invalid prefix (' + prefix + ')'

        chk = polymodStep(chk) ^ (c >> 5);
      }
      chk = polymodStep(chk);

      for (i = 0; i < prefix.length; ++i) {
        var v = prefix.charCodeAt(i);
        chk = polymodStep(chk) ^ (v & 0x1f);
      }
      return chk
    }

    function encode (prefix, words, LIMIT) {
      LIMIT = LIMIT || 90;
      if ((prefix.length + 7 + words.length) > LIMIT) throw new TypeError('Exceeds length limit')

      prefix = prefix.toLowerCase();

      // determine chk mod
      var chk = prefixChk(prefix);
      if (typeof chk === 'string') throw new Error(chk)

      var result = prefix + '1';
      for (var i = 0; i < words.length; ++i) {
        var x = words[i];
        if ((x >> 5) !== 0) throw new Error('Non 5-bit word')

        chk = polymodStep(chk) ^ x;
        result += ALPHABET.charAt(x);
      }

      for (i = 0; i < 6; ++i) {
        chk = polymodStep(chk);
      }
      chk ^= 1;

      for (i = 0; i < 6; ++i) {
        var v = (chk >> ((5 - i) * 5)) & 0x1f;
        result += ALPHABET.charAt(v);
      }

      return result
    }

    function __decode (str, LIMIT) {
      LIMIT = LIMIT || 90;
      if (str.length < 8) return str + ' too short'
      if (str.length > LIMIT) return 'Exceeds length limit'

      // don't allow mixed case
      var lowered = str.toLowerCase();
      var uppered = str.toUpperCase();
      if (str !== lowered && str !== uppered) return 'Mixed-case string ' + str
      str = lowered;

      var split = str.lastIndexOf('1');
      if (split === -1) return 'No separator character for ' + str
      if (split === 0) return 'Missing prefix for ' + str

      var prefix = str.slice(0, split);
      var wordChars = str.slice(split + 1);
      if (wordChars.length < 6) return 'Data too short'

      var chk = prefixChk(prefix);
      if (typeof chk === 'string') return chk

      var words = [];
      for (var i = 0; i < wordChars.length; ++i) {
        var c = wordChars.charAt(i);
        var v = ALPHABET_MAP[c];
        if (v === undefined) return 'Unknown character ' + c
        chk = polymodStep(chk) ^ v;

        // not in the checksum?
        if (i + 6 >= wordChars.length) continue
        words.push(v);
      }

      if (chk !== 1) return 'Invalid checksum for ' + str
      return { prefix: prefix, words: words }
    }

    function decodeUnsafe () {
      var res = __decode.apply(null, arguments);
      if (typeof res === 'object') return res
    }

    function decode$1 (str) {
      var res = __decode.apply(null, arguments);
      if (typeof res === 'object') return res

      throw new Error(res)
    }

    function convert (data, inBits, outBits, pad) {
      var value = 0;
      var bits = 0;
      var maxV = (1 << outBits) - 1;

      var result = [];
      for (var i = 0; i < data.length; ++i) {
        value = (value << inBits) | data[i];
        bits += inBits;

        while (bits >= outBits) {
          bits -= outBits;
          result.push((value >> bits) & maxV);
        }
      }

      if (pad) {
        if (bits > 0) {
          result.push((value << (outBits - bits)) & maxV);
        }
      } else {
        if (bits >= inBits) return 'Excess padding'
        if ((value << (outBits - bits)) & maxV) return 'Non-zero padding'
      }

      return result
    }

    function toWordsUnsafe (bytes) {
      var res = convert(bytes, 8, 5, true);
      if (Array.isArray(res)) return res
    }

    function toWords (bytes) {
      var res = convert(bytes, 8, 5, true);
      if (Array.isArray(res)) return res

      throw new Error(res)
    }

    function fromWordsUnsafe (words) {
      var res = convert(words, 5, 8, false);
      if (Array.isArray(res)) return res
    }

    function fromWords (words) {
      var res = convert(words, 5, 8, false);
      if (Array.isArray(res)) return res

      throw new Error(res)
    }

    var bech32 = {
      decodeUnsafe: decodeUnsafe,
      decode: decode$1,
      encode: encode,
      toWordsUnsafe: toWordsUnsafe,
      toWords: toWords,
      fromWordsUnsafe: fromWordsUnsafe,
      fromWords: fromWords
    };

    const version$5 = "providers/5.7.2";

    const logger$9 = new Logger(version$5);
    class Formatter {
        constructor() {
            this.formats = this.getDefaultFormats();
        }
        getDefaultFormats() {
            const formats = ({});
            const address = this.address.bind(this);
            const bigNumber = this.bigNumber.bind(this);
            const blockTag = this.blockTag.bind(this);
            const data = this.data.bind(this);
            const hash = this.hash.bind(this);
            const hex = this.hex.bind(this);
            const number = this.number.bind(this);
            const type = this.type.bind(this);
            const strictData = (v) => { return this.data(v, true); };
            formats.transaction = {
                hash: hash,
                type: type,
                accessList: Formatter.allowNull(this.accessList.bind(this), null),
                blockHash: Formatter.allowNull(hash, null),
                blockNumber: Formatter.allowNull(number, null),
                transactionIndex: Formatter.allowNull(number, null),
                confirmations: Formatter.allowNull(number, null),
                from: address,
                // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas)
                // must be set
                gasPrice: Formatter.allowNull(bigNumber),
                maxPriorityFeePerGas: Formatter.allowNull(bigNumber),
                maxFeePerGas: Formatter.allowNull(bigNumber),
                gasLimit: bigNumber,
                to: Formatter.allowNull(address, null),
                value: bigNumber,
                nonce: number,
                data: data,
                r: Formatter.allowNull(this.uint256),
                s: Formatter.allowNull(this.uint256),
                v: Formatter.allowNull(number),
                creates: Formatter.allowNull(address, null),
                raw: Formatter.allowNull(data),
            };
            formats.transactionRequest = {
                from: Formatter.allowNull(address),
                nonce: Formatter.allowNull(number),
                gasLimit: Formatter.allowNull(bigNumber),
                gasPrice: Formatter.allowNull(bigNumber),
                maxPriorityFeePerGas: Formatter.allowNull(bigNumber),
                maxFeePerGas: Formatter.allowNull(bigNumber),
                to: Formatter.allowNull(address),
                value: Formatter.allowNull(bigNumber),
                data: Formatter.allowNull(strictData),
                type: Formatter.allowNull(number),
                accessList: Formatter.allowNull(this.accessList.bind(this), null),
            };
            formats.receiptLog = {
                transactionIndex: number,
                blockNumber: number,
                transactionHash: hash,
                address: address,
                topics: Formatter.arrayOf(hash),
                data: data,
                logIndex: number,
                blockHash: hash,
            };
            formats.receipt = {
                to: Formatter.allowNull(this.address, null),
                from: Formatter.allowNull(this.address, null),
                contractAddress: Formatter.allowNull(address, null),
                transactionIndex: number,
                // should be allowNull(hash), but broken-EIP-658 support is handled in receipt
                root: Formatter.allowNull(hex),
                gasUsed: bigNumber,
                logsBloom: Formatter.allowNull(data),
                blockHash: hash,
                transactionHash: hash,
                logs: Formatter.arrayOf(this.receiptLog.bind(this)),
                blockNumber: number,
                confirmations: Formatter.allowNull(number, null),
                cumulativeGasUsed: bigNumber,
                effectiveGasPrice: Formatter.allowNull(bigNumber),
                status: Formatter.allowNull(number),
                type: type
            };
            formats.block = {
                hash: Formatter.allowNull(hash),
                parentHash: hash,
                number: number,
                timestamp: number,
                nonce: Formatter.allowNull(hex),
                difficulty: this.difficulty.bind(this),
                gasLimit: bigNumber,
                gasUsed: bigNumber,
                miner: Formatter.allowNull(address),
                extraData: data,
                transactions: Formatter.allowNull(Formatter.arrayOf(hash)),
                baseFeePerGas: Formatter.allowNull(bigNumber)
            };
            formats.blockWithTransactions = shallowCopy(formats.block);
            formats.blockWithTransactions.transactions = Formatter.allowNull(Formatter.arrayOf(this.transactionResponse.bind(this)));
            formats.filter = {
                fromBlock: Formatter.allowNull(blockTag, undefined),
                toBlock: Formatter.allowNull(blockTag, undefined),
                blockHash: Formatter.allowNull(hash, undefined),
                address: Formatter.allowNull(address, undefined),
                topics: Formatter.allowNull(this.topics.bind(this), undefined),
            };
            formats.filterLog = {
                blockNumber: Formatter.allowNull(number),
                blockHash: Formatter.allowNull(hash),
                transactionIndex: number,
                removed: Formatter.allowNull(this.boolean.bind(this)),
                address: address,
                data: Formatter.allowFalsish(data, "0x"),
                topics: Formatter.arrayOf(hash),
                transactionHash: hash,
                logIndex: number,
            };
            return formats;
        }
        accessList(accessList) {
            return accessListify(accessList || []);
        }
        // Requires a BigNumberish that is within the IEEE754 safe integer range; returns a number
        // Strict! Used on input.
        number(number) {
            if (number === "0x") {
                return 0;
            }
            return BigNumber.from(number).toNumber();
        }
        type(number) {
            if (number === "0x" || number == null) {
                return 0;
            }
            return BigNumber.from(number).toNumber();
        }
        // Strict! Used on input.
        bigNumber(value) {
            return BigNumber.from(value);
        }
        // Requires a boolean, "true" or  "false"; returns a boolean
        boolean(value) {
            if (typeof (value) === "boolean") {
                return value;
            }
            if (typeof (value) === "string") {
                value = value.toLowerCase();
                if (value === "true") {
                    return true;
                }
                if (value === "false") {
                    return false;
                }
            }
            throw new Error("invalid boolean - " + value);
        }
        hex(value, strict) {
            if (typeof (value) === "string") {
                if (!strict && value.substring(0, 2) !== "0x") {
                    value = "0x" + value;
                }
                if (isHexString(value)) {
                    return value.toLowerCase();
                }
            }
            return logger$9.throwArgumentError("invalid hash", "value", value);
        }
        data(value, strict) {
            const result = this.hex(value, strict);
            if ((result.length % 2) !== 0) {
                throw new Error("invalid data; odd-length - " + value);
            }
            return result;
        }
        // Requires an address
        // Strict! Used on input.
        address(value) {
            return getAddress(value);
        }
        callAddress(value) {
            if (!isHexString(value, 32)) {
                return null;
            }
            const address = getAddress(hexDataSlice(value, 12));
            return (address === AddressZero) ? null : address;
        }
        contractAddress(value) {
            return getContractAddress(value);
        }
        // Strict! Used on input.
        blockTag(blockTag) {
            if (blockTag == null) {
                return "latest";
            }
            if (blockTag === "earliest") {
                return "0x0";
            }
            switch (blockTag) {
                case "earliest": return "0x0";
                case "latest":
                case "pending":
                case "safe":
                case "finalized":
                    return blockTag;
            }
            if (typeof (blockTag) === "number" || isHexString(blockTag)) {
                return hexValue(blockTag);
            }
            throw new Error("invalid blockTag");
        }
        // Requires a hash, optionally requires 0x prefix; returns prefixed lowercase hash.
        hash(value, strict) {
            const result = this.hex(value, strict);
            if (hexDataLength(result) !== 32) {
                return logger$9.throwArgumentError("invalid hash", "value", value);
            }
            return result;
        }
        // Returns the difficulty as a number, or if too large (i.e. PoA network) null
        difficulty(value) {
            if (value == null) {
                return null;
            }
            const v = BigNumber.from(value);
            try {
                return v.toNumber();
            }
            catch (error) { }
            return null;
        }
        uint256(value) {
            if (!isHexString(value)) {
                throw new Error("invalid uint256");
            }
            return hexZeroPad(value, 32);
        }
        _block(value, format) {
            if (value.author != null && value.miner == null) {
                value.miner = value.author;
            }
            // The difficulty may need to come from _difficulty in recursed blocks
            const difficulty = (value._difficulty != null) ? value._difficulty : value.difficulty;
            const result = Formatter.check(format, value);
            result._difficulty = ((difficulty == null) ? null : BigNumber.from(difficulty));
            return result;
        }
        block(value) {
            return this._block(value, this.formats.block);
        }
        blockWithTransactions(value) {
            return this._block(value, this.formats.blockWithTransactions);
        }
        // Strict! Used on input.
        transactionRequest(value) {
            return Formatter.check(this.formats.transactionRequest, value);
        }
        transactionResponse(transaction) {
            // Rename gas to gasLimit
            if (transaction.gas != null && transaction.gasLimit == null) {
                transaction.gasLimit = transaction.gas;
            }
            // Some clients (TestRPC) do strange things like return 0x0 for the
            // 0 address; correct this to be a real address
            if (transaction.to && BigNumber.from(transaction.to).isZero()) {
                transaction.to = "0x0000000000000000000000000000000000000000";
            }
            // Rename input to data
            if (transaction.input != null && transaction.data == null) {
                transaction.data = transaction.input;
            }
            // If to and creates are empty, populate the creates from the transaction
            if (transaction.to == null && transaction.creates == null) {
                transaction.creates = this.contractAddress(transaction);
            }
            if ((transaction.type === 1 || transaction.type === 2) && transaction.accessList == null) {
                transaction.accessList = [];
            }
            const result = Formatter.check(this.formats.transaction, transaction);
            if (transaction.chainId != null) {
                let chainId = transaction.chainId;
                if (isHexString(chainId)) {
                    chainId = BigNumber.from(chainId).toNumber();
                }
                result.chainId = chainId;
            }
            else {
                let chainId = transaction.networkId;
                // geth-etc returns chainId
                if (chainId == null && result.v == null) {
                    chainId = transaction.chainId;
                }
                if (isHexString(chainId)) {
                    chainId = BigNumber.from(chainId).toNumber();
                }
                if (typeof (chainId) !== "number" && result.v != null) {
                    chainId = (result.v - 35) / 2;
                    if (chainId < 0) {
                        chainId = 0;
                    }
                    chainId = parseInt(chainId);
                }
                if (typeof (chainId) !== "number") {
                    chainId = 0;
                }
                result.chainId = chainId;
            }
            // 0x0000... should actually be null
            if (result.blockHash && result.blockHash.replace(/0/g, "") === "x") {
                result.blockHash = null;
            }
            return result;
        }
        transaction(value) {
            return parse$1(value);
        }
        receiptLog(value) {
            return Formatter.check(this.formats.receiptLog, value);
        }
        receipt(value) {
            const result = Formatter.check(this.formats.receipt, value);
            // RSK incorrectly implemented EIP-658, so we munge things a bit here for it
            if (result.root != null) {
                if (result.root.length <= 4) {
                    // Could be 0x00, 0x0, 0x01 or 0x1
                    const value = BigNumber.from(result.root).toNumber();
                    if (value === 0 || value === 1) {
                        // Make sure if both are specified, they match
                        if (result.status != null && (result.status !== value)) {
                            logger$9.throwArgumentError("alt-root-status/status mismatch", "value", { root: result.root, status: result.status });
                        }
                        result.status = value;
                        delete result.root;
                    }
                    else {
                        logger$9.throwArgumentError("invalid alt-root-status", "value.root", result.root);
                    }
                }
                else if (result.root.length !== 66) {
                    // Must be a valid bytes32
                    logger$9.throwArgumentError("invalid root hash", "value.root", result.root);
                }
            }
            if (result.status != null) {
                result.byzantium = true;
            }
            return result;
        }
        topics(value) {
            if (Array.isArray(value)) {
                return value.map((v) => this.topics(v));
            }
            else if (value != null) {
                return this.hash(value, true);
            }
            return null;
        }
        filter(value) {
            return Formatter.check(this.formats.filter, value);
        }
        filterLog(value) {
            return Formatter.check(this.formats.filterLog, value);
        }
        static check(format, object) {
            const result = {};
            for (const key in format) {
                try {
                    const value = format[key](object[key]);
                    if (value !== undefined) {
                        result[key] = value;
                    }
                }
                catch (error) {
                    error.checkKey = key;
                    error.checkValue = object[key];
                    throw error;
                }
            }
            return result;
        }
        // if value is null-ish, nullValue is returned
        static allowNull(format, nullValue) {
            return (function (value) {
                if (value == null) {
                    return nullValue;
                }
                return format(value);
            });
        }
        // If value is false-ish, replaceValue is returned
        static allowFalsish(format, replaceValue) {
            return (function (value) {
                if (!value) {
                    return replaceValue;
                }
                return format(value);
            });
        }
        // Requires an Array satisfying check
        static arrayOf(format) {
            return (function (array) {
                if (!Array.isArray(array)) {
                    throw new Error("not an array");
                }
                const result = [];
                array.forEach(function (value) {
                    result.push(format(value));
                });
                return result;
            });
        }
    }

    var __awaiter$4 = (window && window.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    const logger$8 = new Logger(version$5);
    const MAX_CCIP_REDIRECTS = 10;
    //////////////////////////////
    // Event Serializeing
    function checkTopic(topic) {
        if (topic == null) {
            return "null";
        }
        if (hexDataLength(topic) !== 32) {
            logger$8.throwArgumentError("invalid topic", "topic", topic);
        }
        return topic.toLowerCase();
    }
    function serializeTopics(topics) {
        // Remove trailing null AND-topics; they are redundant
        topics = topics.slice();
        while (topics.length > 0 && topics[topics.length - 1] == null) {
            topics.pop();
        }
        return topics.map((topic) => {
            if (Array.isArray(topic)) {
                // Only track unique OR-topics
                const unique = {};
                topic.forEach((topic) => {
                    unique[checkTopic(topic)] = true;
                });
                // The order of OR-topics does not matter
                const sorted = Object.keys(unique);
                sorted.sort();
                return sorted.join("|");
            }
            else {
                return checkTopic(topic);
            }
        }).join("&");
    }
    function deserializeTopics(data) {
        if (data === "") {
            return [];
        }
        return data.split(/&/g).map((topic) => {
            if (topic === "") {
                return [];
            }
            const comps = topic.split("|").map((topic) => {
                return ((topic === "null") ? null : topic);
            });
            return ((comps.length === 1) ? comps[0] : comps);
        });
    }
    function getEventTag(eventName) {
        if (typeof (eventName) === "string") {
            eventName = eventName.toLowerCase();
            if (hexDataLength(eventName) === 32) {
                return "tx:" + eventName;
            }
            if (eventName.indexOf(":") === -1) {
                return eventName;
            }
        }
        else if (Array.isArray(eventName)) {
            return "filter:*:" + serializeTopics(eventName);
        }
        else if (ForkEvent.isForkEvent(eventName)) {
            logger$8.warn("not implemented");
            throw new Error("not implemented");
        }
        else if (eventName && typeof (eventName) === "object") {
            return "filter:" + (eventName.address || "*") + ":" + serializeTopics(eventName.topics || []);
        }
        throw new Error("invalid event - " + eventName);
    }
    //////////////////////////////
    // Helper Object
    function getTime() {
        return (new Date()).getTime();
    }
    function stall(duration) {
        return new Promise((resolve) => {
            setTimeout(resolve, duration);
        });
    }
    //////////////////////////////
    // Provider Object
    /**
     *  EventType
     *   - "block"
     *   - "poll"
     *   - "didPoll"
     *   - "pending"
     *   - "error"
     *   - "network"
     *   - filter
     *   - topics array
     *   - transaction hash
     */
    const PollableEvents = ["block", "network", "pending", "poll"];
    class Event {
        constructor(tag, listener, once) {
            defineReadOnly(this, "tag", tag);
            defineReadOnly(this, "listener", listener);
            defineReadOnly(this, "once", once);
            this._lastBlockNumber = -2;
            this._inflight = false;
        }
        get event() {
            switch (this.type) {
                case "tx":
                    return this.hash;
                case "filter":
                    return this.filter;
            }
            return this.tag;
        }
        get type() {
            return this.tag.split(":")[0];
        }
        get hash() {
            const comps = this.tag.split(":");
            if (comps[0] !== "tx") {
                return null;
            }
            return comps[1];
        }
        get filter() {
            const comps = this.tag.split(":");
            if (comps[0] !== "filter") {
                return null;
            }
            const address = comps[1];
            const topics = deserializeTopics(comps[2]);
            const filter = {};
            if (topics.length > 0) {
                filter.topics = topics;
            }
            if (address && address !== "*") {
                filter.address = address;
            }
            return filter;
        }
        pollable() {
            return (this.tag.indexOf(":") >= 0 || PollableEvents.indexOf(this.tag) >= 0);
        }
    }
    // https://github.com/satoshilabs/slips/blob/master/slip-0044.md
    const coinInfos = {
        "0": { symbol: "btc", p2pkh: 0x00, p2sh: 0x05, prefix: "bc" },
        "2": { symbol: "ltc", p2pkh: 0x30, p2sh: 0x32, prefix: "ltc" },
        "3": { symbol: "doge", p2pkh: 0x1e, p2sh: 0x16 },
        "60": { symbol: "eth", ilk: "eth" },
        "61": { symbol: "etc", ilk: "eth" },
        "700": { symbol: "xdai", ilk: "eth" },
    };
    function bytes32ify(value) {
        return hexZeroPad(BigNumber.from(value).toHexString(), 32);
    }
    // Compute the Base58Check encoded data (checksum is first 4 bytes of sha256d)
    function base58Encode(data) {
        return Base58.encode(concat([data, hexDataSlice(sha256$1(sha256$1(data)), 0, 4)]));
    }
    const matcherIpfs = new RegExp("^(ipfs):/\/(.*)$", "i");
    const matchers = [
        new RegExp("^(https):/\/(.*)$", "i"),
        new RegExp("^(data):(.*)$", "i"),
        matcherIpfs,
        new RegExp("^eip155:[0-9]+/(erc[0-9]+):(.*)$", "i"),
    ];
    function _parseString(result, start) {
        try {
            return toUtf8String(_parseBytes(result, start));
        }
        catch (error) { }
        return null;
    }
    function _parseBytes(result, start) {
        if (result === "0x") {
            return null;
        }
        const offset = BigNumber.from(hexDataSlice(result, start, start + 32)).toNumber();
        const length = BigNumber.from(hexDataSlice(result, offset, offset + 32)).toNumber();
        return hexDataSlice(result, offset + 32, offset + 32 + length);
    }
    // Trim off the ipfs:// prefix and return the default gateway URL
    function getIpfsLink(link) {
        if (link.match(/^ipfs:\/\/ipfs\//i)) {
            link = link.substring(12);
        }
        else if (link.match(/^ipfs:\/\//i)) {
            link = link.substring(7);
        }
        else {
            logger$8.throwArgumentError("unsupported IPFS format", "link", link);
        }
        return `https:/\/gateway.ipfs.io/ipfs/${link}`;
    }
    function numPad(value) {
        const result = arrayify(value);
        if (result.length > 32) {
            throw new Error("internal; should not happen");
        }
        const padded = new Uint8Array(32);
        padded.set(result, 32 - result.length);
        return padded;
    }
    function bytesPad(value) {
        if ((value.length % 32) === 0) {
            return value;
        }
        const result = new Uint8Array(Math.ceil(value.length / 32) * 32);
        result.set(value);
        return result;
    }
    // ABI Encodes a series of (bytes, bytes, ...)
    function encodeBytes(datas) {
        const result = [];
        let byteCount = 0;
        // Add place-holders for pointers as we add items
        for (let i = 0; i < datas.length; i++) {
            result.push(null);
            byteCount += 32;
        }
        for (let i = 0; i < datas.length; i++) {
            const data = arrayify(datas[i]);
            // Update the bytes offset
            result[i] = numPad(byteCount);
            // The length and padded value of data
            result.push(numPad(data.length));
            result.push(bytesPad(data));
            byteCount += 32 + Math.ceil(data.length / 32) * 32;
        }
        return hexConcat(result);
    }
    class Resolver {
        // The resolvedAddress is only for creating a ReverseLookup resolver
        constructor(provider, address, name, resolvedAddress) {
            defineReadOnly(this, "provider", provider);
            defineReadOnly(this, "name", name);
            defineReadOnly(this, "address", provider.formatter.address(address));
            defineReadOnly(this, "_resolvedAddress", resolvedAddress);
        }
        supportsWildcard() {
            if (!this._supportsEip2544) {
                // supportsInterface(bytes4 = selector("resolve(bytes,bytes)"))
                this._supportsEip2544 = this.provider.call({
                    to: this.address,
                    data: "0x01ffc9a79061b92300000000000000000000000000000000000000000000000000000000"
                }).then((result) => {
                    return BigNumber.from(result).eq(1);
                }).catch((error) => {
                    if (error.code === Logger.errors.CALL_EXCEPTION) {
                        return false;
                    }
                    // Rethrow the error: link is down, etc. Let future attempts retry.
                    this._supportsEip2544 = null;
                    throw error;
                });
            }
            return this._supportsEip2544;
        }
        _fetch(selector, parameters) {
            return __awaiter$4(this, void 0, void 0, function* () {
                // e.g. keccak256("addr(bytes32,uint256)")
                const tx = {
                    to: this.address,
                    ccipReadEnabled: true,
                    data: hexConcat([selector, namehash(this.name), (parameters || "0x")])
                };
                // Wildcard support; use EIP-2544 to resolve the request
                let parseBytes = false;
                if (yield this.supportsWildcard()) {
                    parseBytes = true;
                    // selector("resolve(bytes,bytes)")
                    tx.data = hexConcat(["0x9061b923", encodeBytes([dnsEncode(this.name), tx.data])]);
                }
                try {
                    let result = yield this.provider.call(tx);
                    if ((arrayify(result).length % 32) === 4) {
                        logger$8.throwError("resolver threw error", Logger.errors.CALL_EXCEPTION, {
                            transaction: tx, data: result
                        });
                    }
                    if (parseBytes) {
                        result = _parseBytes(result, 0);
                    }
                    return result;
                }
                catch (error) {
                    if (error.code === Logger.errors.CALL_EXCEPTION) {
                        return null;
                    }
                    throw error;
                }
            });
        }
        _fetchBytes(selector, parameters) {
            return __awaiter$4(this, void 0, void 0, function* () {
                const result = yield this._fetch(selector, parameters);
                if (result != null) {
                    return _parseBytes(result, 0);
                }
                return null;
            });
        }
        _getAddress(coinType, hexBytes) {
            const coinInfo = coinInfos[String(coinType)];
            if (coinInfo == null) {
                logger$8.throwError(`unsupported coin type: ${coinType}`, Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: `getAddress(${coinType})`
                });
            }
            if (coinInfo.ilk === "eth") {
                return this.provider.formatter.address(hexBytes);
            }
            const bytes = arrayify(hexBytes);
            // P2PKH: OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG
            if (coinInfo.p2pkh != null) {
                const p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);
                if (p2pkh) {
                    const length = parseInt(p2pkh[1], 16);
                    if (p2pkh[2].length === length * 2 && length >= 1 && length <= 75) {
                        return base58Encode(concat([[coinInfo.p2pkh], ("0x" + p2pkh[2])]));
                    }
                }
            }
            // P2SH: OP_HASH160 <scriptHash> OP_EQUAL
            if (coinInfo.p2sh != null) {
                const p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);
                if (p2sh) {
                    const length = parseInt(p2sh[1], 16);
                    if (p2sh[2].length === length * 2 && length >= 1 && length <= 75) {
                        return base58Encode(concat([[coinInfo.p2sh], ("0x" + p2sh[2])]));
                    }
                }
            }
            // Bech32
            if (coinInfo.prefix != null) {
                const length = bytes[1];
                // https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#witness-program
                let version = bytes[0];
                if (version === 0x00) {
                    if (length !== 20 && length !== 32) {
                        version = -1;
                    }
                }
                else {
                    version = -1;
                }
                if (version >= 0 && bytes.length === 2 + length && length >= 1 && length <= 75) {
                    const words = bech32.toWords(bytes.slice(2));
                    words.unshift(version);
                    return bech32.encode(coinInfo.prefix, words);
                }
            }
            return null;
        }
        getAddress(coinType) {
            return __awaiter$4(this, void 0, void 0, function* () {
                if (coinType == null) {
                    coinType = 60;
                }
                // If Ethereum, use the standard `addr(bytes32)`
                if (coinType === 60) {
                    try {
                        // keccak256("addr(bytes32)")
                        const result = yield this._fetch("0x3b3b57de");
                        // No address
                        if (result === "0x" || result === HashZero) {
                            return null;
                        }
                        return this.provider.formatter.callAddress(result);
                    }
                    catch (error) {
                        if (error.code === Logger.errors.CALL_EXCEPTION) {
                            return null;
                        }
                        throw error;
                    }
                }
                // keccak256("addr(bytes32,uint256")
                const hexBytes = yield this._fetchBytes("0xf1cb7e06", bytes32ify(coinType));
                // No address
                if (hexBytes == null || hexBytes === "0x") {
                    return null;
                }
                // Compute the address
                const address = this._getAddress(coinType, hexBytes);
                if (address == null) {
                    logger$8.throwError(`invalid or unsupported coin data`, Logger.errors.UNSUPPORTED_OPERATION, {
                        operation: `getAddress(${coinType})`,
                        coinType: coinType,
                        data: hexBytes
                    });
                }
                return address;
            });
        }
        getAvatar() {
            return __awaiter$4(this, void 0, void 0, function* () {
                const linkage = [{ type: "name", content: this.name }];
                try {
                    // test data for ricmoo.eth
                    //const avatar = "eip155:1/erc721:0x265385c7f4132228A0d54EB1A9e7460b91c0cC68/29233";
                    const avatar = yield this.getText("avatar");
                    if (avatar == null) {
                        return null;
                    }
                    for (let i = 0; i < matchers.length; i++) {
                        const match = avatar.match(matchers[i]);
                        if (match == null) {
                            continue;
                        }
                        const scheme = match[1].toLowerCase();
                        switch (scheme) {
                            case "https":
                                linkage.push({ type: "url", content: avatar });
                                return { linkage, url: avatar };
                            case "data":
                                linkage.push({ type: "data", content: avatar });
                                return { linkage, url: avatar };
                            case "ipfs":
                                linkage.push({ type: "ipfs", content: avatar });
                                return { linkage, url: getIpfsLink(avatar) };
                            case "erc721":
                            case "erc1155": {
                                // Depending on the ERC type, use tokenURI(uint256) or url(uint256)
                                const selector = (scheme === "erc721") ? "0xc87b56dd" : "0x0e89341c";
                                linkage.push({ type: scheme, content: avatar });
                                // The owner of this name
                                const owner = (this._resolvedAddress || (yield this.getAddress()));
                                const comps = (match[2] || "").split("/");
                                if (comps.length !== 2) {
                                    return null;
                                }
                                const addr = yield this.provider.formatter.address(comps[0]);
                                const tokenId = hexZeroPad(BigNumber.from(comps[1]).toHexString(), 32);
                                // Check that this account owns the token
                                if (scheme === "erc721") {
                                    // ownerOf(uint256 tokenId)
                                    const tokenOwner = this.provider.formatter.callAddress(yield this.provider.call({
                                        to: addr, data: hexConcat(["0x6352211e", tokenId])
                                    }));
                                    if (owner !== tokenOwner) {
                                        return null;
                                    }
                                    linkage.push({ type: "owner", content: tokenOwner });
                                }
                                else if (scheme === "erc1155") {
                                    // balanceOf(address owner, uint256 tokenId)
                                    const balance = BigNumber.from(yield this.provider.call({
                                        to: addr, data: hexConcat(["0x00fdd58e", hexZeroPad(owner, 32), tokenId])
                                    }));
                                    if (balance.isZero()) {
                                        return null;
                                    }
                                    linkage.push({ type: "balance", content: balance.toString() });
                                }
                                // Call the token contract for the metadata URL
                                const tx = {
                                    to: this.provider.formatter.address(comps[0]),
                                    data: hexConcat([selector, tokenId])
                                };
                                let metadataUrl = _parseString(yield this.provider.call(tx), 0);
                                if (metadataUrl == null) {
                                    return null;
                                }
                                linkage.push({ type: "metadata-url-base", content: metadataUrl });
                                // ERC-1155 allows a generic {id} in the URL
                                if (scheme === "erc1155") {
                                    metadataUrl = metadataUrl.replace("{id}", tokenId.substring(2));
                                    linkage.push({ type: "metadata-url-expanded", content: metadataUrl });
                                }
                                // Transform IPFS metadata links
                                if (metadataUrl.match(/^ipfs:/i)) {
                                    metadataUrl = getIpfsLink(metadataUrl);
                                }
                                linkage.push({ type: "metadata-url", content: metadataUrl });
                                // Get the token metadata
                                const metadata = yield fetchJson(metadataUrl);
                                if (!metadata) {
                                    return null;
                                }
                                linkage.push({ type: "metadata", content: JSON.stringify(metadata) });
                                // Pull the image URL out
                                let imageUrl = metadata.image;
                                if (typeof (imageUrl) !== "string") {
                                    return null;
                                }
                                if (imageUrl.match(/^(https:\/\/|data:)/i)) {
                                    // Allow
                                }
                                else {
                                    // Transform IPFS link to gateway
                                    const ipfs = imageUrl.match(matcherIpfs);
                                    if (ipfs == null) {
                                        return null;
                                    }
                                    linkage.push({ type: "url-ipfs", content: imageUrl });
                                    imageUrl = getIpfsLink(imageUrl);
                                }
                                linkage.push({ type: "url", content: imageUrl });
                                return { linkage, url: imageUrl };
                            }
                        }
                    }
                }
                catch (error) { }
                return null;
            });
        }
        getContentHash() {
            return __awaiter$4(this, void 0, void 0, function* () {
                // keccak256("contenthash()")
                const hexBytes = yield this._fetchBytes("0xbc1c58d1");
                // No contenthash
                if (hexBytes == null || hexBytes === "0x") {
                    return null;
                }
                // IPFS (CID: 1, Type: DAG-PB)
                const ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);
                if (ipfs) {
                    const length = parseInt(ipfs[3], 16);
                    if (ipfs[4].length === length * 2) {
                        return "ipfs:/\/" + Base58.encode("0x" + ipfs[1]);
                    }
                }
                // IPNS (CID: 1, Type: libp2p-key)
                const ipns = hexBytes.match(/^0xe5010172(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);
                if (ipns) {
                    const length = parseInt(ipns[3], 16);
                    if (ipns[4].length === length * 2) {
                        return "ipns:/\/" + Base58.encode("0x" + ipns[1]);
                    }
                }
                // Swarm (CID: 1, Type: swarm-manifest; hash/length hard-coded to keccak256/32)
                const swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/);
                if (swarm) {
                    if (swarm[1].length === (32 * 2)) {
                        return "bzz:/\/" + swarm[1];
                    }
                }
                const skynet = hexBytes.match(/^0x90b2c605([0-9a-f]*)$/);
                if (skynet) {
                    if (skynet[1].length === (34 * 2)) {
                        // URL Safe base64; https://datatracker.ietf.org/doc/html/rfc4648#section-5
                        const urlSafe = { "=": "", "+": "-", "/": "_" };
                        const hash = encode$1("0x" + skynet[1]).replace(/[=+\/]/g, (a) => (urlSafe[a]));
                        return "sia:/\/" + hash;
                    }
                }
                return logger$8.throwError(`invalid or unsupported content hash data`, Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "getContentHash()",
                    data: hexBytes
                });
            });
        }
        getText(key) {
            return __awaiter$4(this, void 0, void 0, function* () {
                // The key encoded as parameter to fetchBytes
                let keyBytes = toUtf8Bytes(key);
                // The nodehash consumes the first slot, so the string pointer targets
                // offset 64, with the length at offset 64 and data starting at offset 96
                keyBytes = concat([bytes32ify(64), bytes32ify(keyBytes.length), keyBytes]);
                // Pad to word-size (32 bytes)
                if ((keyBytes.length % 32) !== 0) {
                    keyBytes = concat([keyBytes, hexZeroPad("0x", 32 - (key.length % 32))]);
                }
                const hexBytes = yield this._fetchBytes("0x59d1d43c", hexlify(keyBytes));
                if (hexBytes == null || hexBytes === "0x") {
                    return null;
                }
                return toUtf8String(hexBytes);
            });
        }
    }
    let defaultFormatter = null;
    let nextPollId = 1;
    class BaseProvider extends Provider$1 {
        /**
         *  ready
         *
         *  A Promise<Network> that resolves only once the provider is ready.
         *
         *  Sub-classes that call the super with a network without a chainId
         *  MUST set this. Standard named networks have a known chainId.
         *
         */
        constructor(network) {
            super();
            // Events being listened to
            this._events = [];
            this._emitted = { block: -2 };
            this.disableCcipRead = false;
            this.formatter = new.target.getFormatter();
            // If network is any, this Provider allows the underlying
            // network to change dynamically, and we auto-detect the
            // current network
            defineReadOnly(this, "anyNetwork", (network === "any"));
            if (this.anyNetwork) {
                network = this.detectNetwork();
            }
            if (network instanceof Promise) {
                this._networkPromise = network;
                // Squash any "unhandled promise" errors; that do not need to be handled
                network.catch((error) => { });
                // Trigger initial network setting (async)
                this._ready().catch((error) => { });
            }
            else {
                const knownNetwork = getStatic(new.target, "getNetwork")(network);
                if (knownNetwork) {
                    defineReadOnly(this, "_network", knownNetwork);
                    this.emit("network", knownNetwork, null);
                }
                else {
                    logger$8.throwArgumentError("invalid network", "network", network);
                }
            }
            this._maxInternalBlockNumber = -1024;
            this._lastBlockNumber = -2;
            this._maxFilterBlockRange = 10;
            this._pollingInterval = 4000;
            this._fastQueryDate = 0;
        }
        _ready() {
            return __awaiter$4(this, void 0, void 0, function* () {
                if (this._network == null) {
                    let network = null;
                    if (this._networkPromise) {
                        try {
                            network = yield this._networkPromise;
                        }
                        catch (error) { }
                    }
                    // Try the Provider's network detection (this MUST throw if it cannot)
                    if (network == null) {
                        network = yield this.detectNetwork();
                    }
                    // This should never happen; every Provider sub-class should have
                    // suggested a network by here (or have thrown).
                    if (!network) {
                        logger$8.throwError("no network detected", Logger.errors.UNKNOWN_ERROR, {});
                    }
                    // Possible this call stacked so do not call defineReadOnly again
                    if (this._network == null) {
                        if (this.anyNetwork) {
                            this._network = network;
                        }
                        else {
                            defineReadOnly(this, "_network", network);
                        }
                        this.emit("network", network, null);
                    }
                }
                return this._network;
            });
        }
        // This will always return the most recently established network.
        // For "any", this can change (a "network" event is emitted before
        // any change is reflected); otherwise this cannot change
        get ready() {
            return poll(() => {
                return this._ready().then((network) => {
                    return network;
                }, (error) => {
                    // If the network isn't running yet, we will wait
                    if (error.code === Logger.errors.NETWORK_ERROR && error.event === "noNetwork") {
                        return undefined;
                    }
                    throw error;
                });
            });
        }
        // @TODO: Remove this and just create a singleton formatter
        static getFormatter() {
            if (defaultFormatter == null) {
                defaultFormatter = new Formatter();
            }
            return defaultFormatter;
        }
        // @TODO: Remove this and just use getNetwork
        static getNetwork(network) {
            return getNetwork((network == null) ? "homestead" : network);
        }
        ccipReadFetch(tx, calldata, urls) {
            return __awaiter$4(this, void 0, void 0, function* () {
                if (this.disableCcipRead || urls.length === 0) {
                    return null;
                }
                const sender = tx.to.toLowerCase();
                const data = calldata.toLowerCase();
                const errorMessages = [];
                for (let i = 0; i < urls.length; i++) {
                    const url = urls[i];
                    // URL expansion
                    const href = url.replace("{sender}", sender).replace("{data}", data);
                    // If no {data} is present, use POST; otherwise GET
                    const json = (url.indexOf("{data}") >= 0) ? null : JSON.stringify({ data, sender });
                    const result = yield fetchJson({ url: href, errorPassThrough: true }, json, (value, response) => {
                        value.status = response.statusCode;
                        return value;
                    });
                    if (result.data) {
                        return result.data;
                    }
                    const errorMessage = (result.message || "unknown error");
                    // 4xx indicates the result is not present; stop
                    if (result.status >= 400 && result.status < 500) {
                        return logger$8.throwError(`response not found during CCIP fetch: ${errorMessage}`, Logger.errors.SERVER_ERROR, { url, errorMessage });
                    }
                    // 5xx indicates server issue; try the next url
                    errorMessages.push(errorMessage);
                }
                return logger$8.throwError(`error encountered during CCIP fetch: ${errorMessages.map((m) => JSON.stringify(m)).join(", ")}`, Logger.errors.SERVER_ERROR, {
                    urls, errorMessages
                });
            });
        }
        // Fetches the blockNumber, but will reuse any result that is less
        // than maxAge old or has been requested since the last request
        _getInternalBlockNumber(maxAge) {
            return __awaiter$4(this, void 0, void 0, function* () {
                yield this._ready();
                // Allowing stale data up to maxAge old
                if (maxAge > 0) {
                    // While there are pending internal block requests...
                    while (this._internalBlockNumber) {
                        // ..."remember" which fetch we started with
                        const internalBlockNumber = this._internalBlockNumber;
                        try {
                            // Check the result is not too stale
                            const result = yield internalBlockNumber;
                            if ((getTime() - result.respTime) <= maxAge) {
                                return result.blockNumber;
                            }
                            // Too old; fetch a new value
                            break;
                        }
                        catch (error) {
                            // The fetch rejected; if we are the first to get the
                            // rejection, drop through so we replace it with a new
                            // fetch; all others blocked will then get that fetch
                            // which won't match the one they "remembered" and loop
                            if (this._internalBlockNumber === internalBlockNumber) {
                                break;
                            }
                        }
                    }
                }
                const reqTime = getTime();
                const checkInternalBlockNumber = resolveProperties({
                    blockNumber: this.perform("getBlockNumber", {}),
                    networkError: this.getNetwork().then((network) => (null), (error) => (error))
                }).then(({ blockNumber, networkError }) => {
                    if (networkError) {
                        // Unremember this bad internal block number
                        if (this._internalBlockNumber === checkInternalBlockNumber) {
                            this._internalBlockNumber = null;
                        }
                        throw networkError;
                    }
                    const respTime = getTime();
                    blockNumber = BigNumber.from(blockNumber).toNumber();
                    if (blockNumber < this._maxInternalBlockNumber) {
                        blockNumber = this._maxInternalBlockNumber;
                    }
                    this._maxInternalBlockNumber = blockNumber;
                    this._setFastBlockNumber(blockNumber); // @TODO: Still need this?
                    return { blockNumber, reqTime, respTime };
                });
                this._internalBlockNumber = checkInternalBlockNumber;
                // Swallow unhandled exceptions; if needed they are handled else where
                checkInternalBlockNumber.catch((error) => {
                    // Don't null the dead (rejected) fetch, if it has already been updated
                    if (this._internalBlockNumber === checkInternalBlockNumber) {
                        this._internalBlockNumber = null;
                    }
                });
                return (yield checkInternalBlockNumber).blockNumber;
            });
        }
        poll() {
            return __awaiter$4(this, void 0, void 0, function* () {
                const pollId = nextPollId++;
                // Track all running promises, so we can trigger a post-poll once they are complete
                const runners = [];
                let blockNumber = null;
                try {
                    blockNumber = yield this._getInternalBlockNumber(100 + this.pollingInterval / 2);
                }
                catch (error) {
                    this.emit("error", error);
                    return;
                }
                this._setFastBlockNumber(blockNumber);
                // Emit a poll event after we have the latest (fast) block number
                this.emit("poll", pollId, blockNumber);
                // If the block has not changed, meh.
                if (blockNumber === this._lastBlockNumber) {
                    this.emit("didPoll", pollId);
                    return;
                }
                // First polling cycle, trigger a "block" events
                if (this._emitted.block === -2) {
                    this._emitted.block = blockNumber - 1;
                }
                if (Math.abs((this._emitted.block) - blockNumber) > 1000) {
                    logger$8.warn(`network block skew detected; skipping block events (emitted=${this._emitted.block} blockNumber${blockNumber})`);
                    this.emit("error", logger$8.makeError("network block skew detected", Logger.errors.NETWORK_ERROR, {
                        blockNumber: blockNumber,
                        event: "blockSkew",
                        previousBlockNumber: this._emitted.block
                    }));
                    this.emit("block", blockNumber);
                }
                else {
                    // Notify all listener for each block that has passed
                    for (let i = this._emitted.block + 1; i <= blockNumber; i++) {
                        this.emit("block", i);
                    }
                }
                // The emitted block was updated, check for obsolete events
                if (this._emitted.block !== blockNumber) {
                    this._emitted.block = blockNumber;
                    Object.keys(this._emitted).forEach((key) => {
                        // The block event does not expire
                        if (key === "block") {
                            return;
                        }
                        // The block we were at when we emitted this event
                        const eventBlockNumber = this._emitted[key];
                        // We cannot garbage collect pending transactions or blocks here
                        // They should be garbage collected by the Provider when setting
                        // "pending" events
                        if (eventBlockNumber === "pending") {
                            return;
                        }
                        // Evict any transaction hashes or block hashes over 12 blocks
                        // old, since they should not return null anyways
                        if (blockNumber - eventBlockNumber > 12) {
                            delete this._emitted[key];
                        }
                    });
                }
                // First polling cycle
                if (this._lastBlockNumber === -2) {
                    this._lastBlockNumber = blockNumber - 1;
                }
                // Find all transaction hashes we are waiting on
                this._events.forEach((event) => {
                    switch (event.type) {
                        case "tx": {
                            const hash = event.hash;
                            let runner = this.getTransactionReceipt(hash).then((receipt) => {
                                if (!receipt || receipt.blockNumber == null) {
                                    return null;
                                }
                                this._emitted["t:" + hash] = receipt.blockNumber;
                                this.emit(hash, receipt);
                                return null;
                            }).catch((error) => { this.emit("error", error); });
                            runners.push(runner);
                            break;
                        }
                        case "filter": {
                            // We only allow a single getLogs to be in-flight at a time
                            if (!event._inflight) {
                                event._inflight = true;
                                // This is the first filter for this event, so we want to
                                // restrict events to events that happened no earlier than now
                                if (event._lastBlockNumber === -2) {
                                    event._lastBlockNumber = blockNumber - 1;
                                }
                                // Filter from the last *known* event; due to load-balancing
                                // and some nodes returning updated block numbers before
                                // indexing events, a logs result with 0 entries cannot be
                                // trusted and we must retry a range which includes it again
                                const filter = event.filter;
                                filter.fromBlock = event._lastBlockNumber + 1;
                                filter.toBlock = blockNumber;
                                // Prevent fitler ranges from growing too wild, since it is quite
                                // likely there just haven't been any events to move the lastBlockNumber.
                                const minFromBlock = filter.toBlock - this._maxFilterBlockRange;
                                if (minFromBlock > filter.fromBlock) {
                                    filter.fromBlock = minFromBlock;
                                }
                                if (filter.fromBlock < 0) {
                                    filter.fromBlock = 0;
                                }
                                const runner = this.getLogs(filter).then((logs) => {
                                    // Allow the next getLogs
                                    event._inflight = false;
                                    if (logs.length === 0) {
                                        return;
                                    }
                                    logs.forEach((log) => {
                                        // Only when we get an event for a given block number
                                        // can we trust the events are indexed
                                        if (log.blockNumber > event._lastBlockNumber) {
                                            event._lastBlockNumber = log.blockNumber;
                                        }
                                        // Make sure we stall requests to fetch blocks and txs
                                        this._emitted["b:" + log.blockHash] = log.blockNumber;
                                        this._emitted["t:" + log.transactionHash] = log.blockNumber;
                                        this.emit(filter, log);
                                    });
                                }).catch((error) => {
                                    this.emit("error", error);
                                    // Allow another getLogs (the range was not updated)
                                    event._inflight = false;
                                });
                                runners.push(runner);
                            }
                            break;
                        }
                    }
                });
                this._lastBlockNumber = blockNumber;
                // Once all events for this loop have been processed, emit "didPoll"
                Promise.all(runners).then(() => {
                    this.emit("didPoll", pollId);
                }).catch((error) => { this.emit("error", error); });
                return;
            });
        }
        // Deprecated; do not use this
        resetEventsBlock(blockNumber) {
            this._lastBlockNumber = blockNumber - 1;
            if (this.polling) {
                this.poll();
            }
        }
        get network() {
            return this._network;
        }
        // This method should query the network if the underlying network
        // can change, such as when connected to a JSON-RPC backend
        detectNetwork() {
            return __awaiter$4(this, void 0, void 0, function* () {
                return logger$8.throwError("provider does not support network detection", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "provider.detectNetwork"
                });
            });
        }
        getNetwork() {
            return __awaiter$4(this, void 0, void 0, function* () {
                const network = yield this._ready();
                // Make sure we are still connected to the same network; this is
                // only an external call for backends which can have the underlying
                // network change spontaneously
                const currentNetwork = yield this.detectNetwork();
                if (network.chainId !== currentNetwork.chainId) {
                    // We are allowing network changes, things can get complex fast;
                    // make sure you know what you are doing if you use "any"
                    if (this.anyNetwork) {
                        this._network = currentNetwork;
                        // Reset all internal block number guards and caches
                        this._lastBlockNumber = -2;
                        this._fastBlockNumber = null;
                        this._fastBlockNumberPromise = null;
                        this._fastQueryDate = 0;
                        this._emitted.block = -2;
                        this._maxInternalBlockNumber = -1024;
                        this._internalBlockNumber = null;
                        // The "network" event MUST happen before this method resolves
                        // so any events have a chance to unregister, so we stall an
                        // additional event loop before returning from /this/ call
                        this.emit("network", currentNetwork, network);
                        yield stall(0);
                        return this._network;
                    }
                    const error = logger$8.makeError("underlying network changed", Logger.errors.NETWORK_ERROR, {
                        event: "changed",
                        network: network,
                        detectedNetwork: currentNetwork
                    });
                    this.emit("error", error);
                    throw error;
                }
                return network;
            });
        }
        get blockNumber() {
            this._getInternalBlockNumber(100 + this.pollingInterval / 2).then((blockNumber) => {
                this._setFastBlockNumber(blockNumber);
            }, (error) => { });
            return (this._fastBlockNumber != null) ? this._fastBlockNumber : -1;
        }
        get polling() {
            return (this._poller != null);
        }
        set polling(value) {
            if (value && !this._poller) {
                this._poller = setInterval(() => { this.poll(); }, this.pollingInterval);
                if (!this._bootstrapPoll) {
                    this._bootstrapPoll = setTimeout(() => {
                        this.poll();
                        // We block additional polls until the polling interval
                        // is done, to prevent overwhelming the poll function
                        this._bootstrapPoll = setTimeout(() => {
                            // If polling was disabled, something may require a poke
                            // since starting the bootstrap poll and it was disabled
                            if (!this._poller) {
                                this.poll();
                            }
                            // Clear out the bootstrap so we can do another
                            this._bootstrapPoll = null;
                        }, this.pollingInterval);
                    }, 0);
                }
            }
            else if (!value && this._poller) {
                clearInterval(this._poller);
                this._poller = null;
            }
        }
        get pollingInterval() {
            return this._pollingInterval;
        }
        set pollingInterval(value) {
            if (typeof (value) !== "number" || value <= 0 || parseInt(String(value)) != value) {
                throw new Error("invalid polling interval");
            }
            this._pollingInterval = value;
            if (this._poller) {
                clearInterval(this._poller);
                this._poller = setInterval(() => { this.poll(); }, this._pollingInterval);
            }
        }
        _getFastBlockNumber() {
            const now = getTime();
            // Stale block number, request a newer value
            if ((now - this._fastQueryDate) > 2 * this._pollingInterval) {
                this._fastQueryDate = now;
                this._fastBlockNumberPromise = this.getBlockNumber().then((blockNumber) => {
                    if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {
                        this._fastBlockNumber = blockNumber;
                    }
                    return this._fastBlockNumber;
                });
            }
            return this._fastBlockNumberPromise;
        }
        _setFastBlockNumber(blockNumber) {
            // Older block, maybe a stale request
            if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) {
                return;
            }
            // Update the time we updated the blocknumber
            this._fastQueryDate = getTime();
            // Newer block number, use  it
            if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {
                this._fastBlockNumber = blockNumber;
                this._fastBlockNumberPromise = Promise.resolve(blockNumber);
            }
        }
        waitForTransaction(transactionHash, confirmations, timeout) {
            return __awaiter$4(this, void 0, void 0, function* () {
                return this._waitForTransaction(transactionHash, (confirmations == null) ? 1 : confirmations, timeout || 0, null);
            });
        }
        _waitForTransaction(transactionHash, confirmations, timeout, replaceable) {
            return __awaiter$4(this, void 0, void 0, function* () {
                const receipt = yield this.getTransactionReceipt(transactionHash);
                // Receipt is already good
                if ((receipt ? receipt.confirmations : 0) >= confirmations) {
                    return receipt;
                }
                // Poll until the receipt is good...
                return new Promise((resolve, reject) => {
                    const cancelFuncs = [];
                    let done = false;
                    const alreadyDone = function () {
                        if (done) {
                            return true;
                        }
                        done = true;
                        cancelFuncs.forEach((func) => { func(); });
                        return false;
                    };
                    const minedHandler = (receipt) => {
                        if (receipt.confirmations < confirmations) {
                            return;
                        }
                        if (alreadyDone()) {
                            return;
                        }
                        resolve(receipt);
                    };
                    this.on(transactionHash, minedHandler);
                    cancelFuncs.push(() => { this.removeListener(transactionHash, minedHandler); });
                    if (replaceable) {
                        let lastBlockNumber = replaceable.startBlock;
                        let scannedBlock = null;
                        const replaceHandler = (blockNumber) => __awaiter$4(this, void 0, void 0, function* () {
                            if (done) {
                                return;
                            }
                            // Wait 1 second; this is only used in the case of a fault, so
                            // we will trade off a little bit of latency for more consistent
                            // results and fewer JSON-RPC calls
                            yield stall(1000);
                            this.getTransactionCount(replaceable.from).then((nonce) => __awaiter$4(this, void 0, void 0, function* () {
                                if (done) {
                                    return;
                                }
                                if (nonce <= replaceable.nonce) {
                                    lastBlockNumber = blockNumber;
                                }
                                else {
                                    // First check if the transaction was mined
                                    {
                                        const mined = yield this.getTransaction(transactionHash);
                                        if (mined && mined.blockNumber != null) {
                                            return;
                                        }
                                    }
                                    // First time scanning. We start a little earlier for some
                                    // wiggle room here to handle the eventually consistent nature
                                    // of blockchain (e.g. the getTransactionCount was for a
                                    // different block)
                                    if (scannedBlock == null) {
                                        scannedBlock = lastBlockNumber - 3;
                                        if (scannedBlock < replaceable.startBlock) {
                                            scannedBlock = replaceable.startBlock;
                                        }
                                    }
                                    while (scannedBlock <= blockNumber) {
                                        if (done) {
                                            return;
                                        }
                                        const block = yield this.getBlockWithTransactions(scannedBlock);
                                        for (let ti = 0; ti < block.transactions.length; ti++) {
                                            const tx = block.transactions[ti];
                                            // Successfully mined!
                                            if (tx.hash === transactionHash) {
                                                return;
                                            }
                                            // Matches our transaction from and nonce; its a replacement
                                            if (tx.from === replaceable.from && tx.nonce === replaceable.nonce) {
                                                if (done) {
                                                    return;
                                                }
                                                // Get the receipt of the replacement
                                                const receipt = yield this.waitForTransaction(tx.hash, confirmations);
                                                // Already resolved or rejected (prolly a timeout)
                                                if (alreadyDone()) {
                                                    return;
                                                }
                                                // The reason we were replaced
                                                let reason = "replaced";
                                                if (tx.data === replaceable.data && tx.to === replaceable.to && tx.value.eq(replaceable.value)) {
                                                    reason = "repriced";
                                                }
                                                else if (tx.data === "0x" && tx.from === tx.to && tx.value.isZero()) {
                                                    reason = "cancelled";
                                                }
                                                // Explain why we were replaced
                                                reject(logger$8.makeError("transaction was replaced", Logger.errors.TRANSACTION_REPLACED, {
                                                    cancelled: (reason === "replaced" || reason === "cancelled"),
                                                    reason,
                                                    replacement: this._wrapTransaction(tx),
                                                    hash: transactionHash,
                                                    receipt
                                                }));
                                                return;
                                            }
                                        }
                                        scannedBlock++;
                                    }
                                }
                                if (done) {
                                    return;
                                }
                                this.once("block", replaceHandler);
                            }), (error) => {
                                if (done) {
                                    return;
                                }
                                this.once("block", replaceHandler);
                            });
                        });
                        if (done) {
                            return;
                        }
                        this.once("block", replaceHandler);
                        cancelFuncs.push(() => {
                            this.removeListener("block", replaceHandler);
                        });
                    }
                    if (typeof (timeout) === "number" && timeout > 0) {
                        const timer = setTimeout(() => {
                            if (alreadyDone()) {
                                return;
                            }
                            reject(logger$8.makeError("timeout exceeded", Logger.errors.TIMEOUT, { timeout: timeout }));
                        }, timeout);
                        if (timer.unref) {
                            timer.unref();
                        }
                        cancelFuncs.push(() => { clearTimeout(timer); });
                    }
                });
            });
        }
        getBlockNumber() {
            return __awaiter$4(this, void 0, void 0, function* () {
                return this._getInternalBlockNumber(0);
            });
        }
        getGasPrice() {
            return __awaiter$4(this, void 0, void 0, function* () {
                yield this.getNetwork();
                const result = yield this.perform("getGasPrice", {});
                try {
                    return BigNumber.from(result);
                }
                catch (error) {
                    return logger$8.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
                        method: "getGasPrice",
                        result, error
                    });
                }
            });
        }
        getBalance(addressOrName, blockTag) {
            return __awaiter$4(this, void 0, void 0, function* () {
                yield this.getNetwork();
                const params = yield resolveProperties({
                    address: this._getAddress(addressOrName),
                    blockTag: this._getBlockTag(blockTag)
                });
                const result = yield this.perform("getBalance", params);
                try {
                    return BigNumber.from(result);
                }
                catch (error) {
                    return logger$8.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
                        method: "getBalance",
                        params, result, error
                    });
                }
            });
        }
        getTransactionCount(addressOrName, blockTag) {
            return __awaiter$4(this, void 0, void 0, function* () {
                yield this.getNetwork();
                const params = yield resolveProperties({
                    address: this._getAddress(addressOrName),
                    blockTag: this._getBlockTag(blockTag)
                });
                const result = yield this.perform("getTransactionCount", params);
                try {
                    return BigNumber.from(result).toNumber();
                }
                catch (error) {
                    return logger$8.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
                        method: "getTransactionCount",
                        params, result, error
                    });
                }
            });
        }
        getCode(addressOrName, blockTag) {
            return __awaiter$4(this, void 0, void 0, function* () {
                yield this.getNetwork();
                const params = yield resolveProperties({
                    address: this._getAddress(addressOrName),
                    blockTag: this._getBlockTag(blockTag)
                });
                const result = yield this.perform("getCode", params);
                try {
                    return hexlify(result);
                }
                catch (error) {
                    return logger$8.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
                        method: "getCode",
                        params, result, error
                    });
                }
            });
        }
        getStorageAt(addressOrName, position, blockTag) {
            return __awaiter$4(this, void 0, void 0, function* () {
                yield this.getNetwork();
                const params = yield resolveProperties({
                    address: this._getAddress(addressOrName),
                    blockTag: this._getBlockTag(blockTag),
                    position: Promise.resolve(position).then((p) => hexValue(p))
                });
                const result = yield this.perform("getStorageAt", params);
                try {
                    return hexlify(result);
                }
                catch (error) {
                    return logger$8.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
                        method: "getStorageAt",
                        params, result, error
                    });
                }
            });
        }
        // This should be called by any subclass wrapping a TransactionResponse
        _wrapTransaction(tx, hash, startBlock) {
            if (hash != null && hexDataLength(hash) !== 32) {
                throw new Error("invalid response - sendTransaction");
            }
            const result = tx;
            // Check the hash we expect is the same as the hash the server reported
            if (hash != null && tx.hash !== hash) {
                logger$8.throwError("Transaction hash mismatch from Provider.sendTransaction.", Logger.errors.UNKNOWN_ERROR, { expectedHash: tx.hash, returnedHash: hash });
            }
            result.wait = (confirms, timeout) => __awaiter$4(this, void 0, void 0, function* () {
                if (confirms == null) {
                    confirms = 1;
                }
                if (timeout == null) {
                    timeout = 0;
                }
                // Get the details to detect replacement
                let replacement = undefined;
                if (confirms !== 0 && startBlock != null) {
                    replacement = {
                        data: tx.data,
                        from: tx.from,
                        nonce: tx.nonce,
                        to: tx.to,
                        value: tx.value,
                        startBlock
                    };
                }
                const receipt = yield this._waitForTransaction(tx.hash, confirms, timeout, replacement);
                if (receipt == null && confirms === 0) {
                    return null;
                }
                // No longer pending, allow the polling loop to garbage collect this
                this._emitted["t:" + tx.hash] = receipt.blockNumber;
                if (receipt.status === 0) {
                    logger$8.throwError("transaction failed", Logger.errors.CALL_EXCEPTION, {
                        transactionHash: tx.hash,
                        transaction: tx,
                        receipt: receipt
                    });
                }
                return receipt;
            });
            return result;
        }
        sendTransaction(signedTransaction) {
            return __awaiter$4(this, void 0, void 0, function* () {
                yield this.getNetwork();
                const hexTx = yield Promise.resolve(signedTransaction).then(t => hexlify(t));
                const tx = this.formatter.transaction(signedTransaction);
                if (tx.confirmations == null) {
                    tx.confirmations = 0;
                }
                const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
                try {
                    const hash = yield this.perform("sendTransaction", { signedTransaction: hexTx });
                    return this._wrapTransaction(tx, hash, blockNumber);
                }
                catch (error) {
                    error.transaction = tx;
                    error.transactionHash = tx.hash;
                    throw error;
                }
            });
        }
        _getTransactionRequest(transaction) {
            return __awaiter$4(this, void 0, void 0, function* () {
                const values = yield transaction;
                const tx = {};
                ["from", "to"].forEach((key) => {
                    if (values[key] == null) {
                        return;
                    }
                    tx[key] = Promise.resolve(values[key]).then((v) => (v ? this._getAddress(v) : null));
                });
                ["gasLimit", "gasPrice", "maxFeePerGas", "maxPriorityFeePerGas", "value"].forEach((key) => {
                    if (values[key] == null) {
                        return;
                    }
                    tx[key] = Promise.resolve(values[key]).then((v) => (v ? BigNumber.from(v) : null));
                });
                ["type"].forEach((key) => {
                    if (values[key] == null) {
                        return;
                    }
                    tx[key] = Promise.resolve(values[key]).then((v) => ((v != null) ? v : null));
                });
                if (values.accessList) {
                    tx.accessList = this.formatter.accessList(values.accessList);
                }
                ["data"].forEach((key) => {
                    if (values[key] == null) {
                        return;
                    }
                    tx[key] = Promise.resolve(values[key]).then((v) => (v ? hexlify(v) : null));
                });
                return this.formatter.transactionRequest(yield resolveProperties(tx));
            });
        }
        _getFilter(filter) {
            return __awaiter$4(this, void 0, void 0, function* () {
                filter = yield filter;
                const result = {};
                if (filter.address != null) {
                    result.address = this._getAddress(filter.address);
                }
                ["blockHash", "topics"].forEach((key) => {
                    if (filter[key] == null) {
                        return;
                    }
                    result[key] = filter[key];
                });
                ["fromBlock", "toBlock"].forEach((key) => {
                    if (filter[key] == null) {
                        return;
                    }
                    result[key] = this._getBlockTag(filter[key]);
                });
                return this.formatter.filter(yield resolveProperties(result));
            });
        }
        _call(transaction, blockTag, attempt) {
            return __awaiter$4(this, void 0, void 0, function* () {
                if (attempt >= MAX_CCIP_REDIRECTS) {
                    logger$8.throwError("CCIP read exceeded maximum redirections", Logger.errors.SERVER_ERROR, {
                        redirects: attempt, transaction
                    });
                }
                const txSender = transaction.to;
                const result = yield this.perform("call", { transaction, blockTag });
                // CCIP Read request via OffchainLookup(address,string[],bytes,bytes4,bytes)
                if (attempt >= 0 && blockTag === "latest" && txSender != null && result.substring(0, 10) === "0x556f1830" && (hexDataLength(result) % 32 === 4)) {
                    try {
                        const data = hexDataSlice(result, 4);
                        // Check the sender of the OffchainLookup matches the transaction
                        const sender = hexDataSlice(data, 0, 32);
                        if (!BigNumber.from(sender).eq(txSender)) {
                            logger$8.throwError("CCIP Read sender did not match", Logger.errors.CALL_EXCEPTION, {
                                name: "OffchainLookup",
                                signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
                                transaction, data: result
                            });
                        }
                        // Read the URLs from the response
                        const urls = [];
                        const urlsOffset = BigNumber.from(hexDataSlice(data, 32, 64)).toNumber();
                        const urlsLength = BigNumber.from(hexDataSlice(data, urlsOffset, urlsOffset + 32)).toNumber();
                        const urlsData = hexDataSlice(data, urlsOffset + 32);
                        for (let u = 0; u < urlsLength; u++) {
                            const url = _parseString(urlsData, u * 32);
                            if (url == null) {
                                logger$8.throwError("CCIP Read contained corrupt URL string", Logger.errors.CALL_EXCEPTION, {
                                    name: "OffchainLookup",
                                    signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
                                    transaction, data: result
                                });
                            }
                            urls.push(url);
                        }
                        // Get the CCIP calldata to forward
                        const calldata = _parseBytes(data, 64);
                        // Get the callbackSelector (bytes4)
                        if (!BigNumber.from(hexDataSlice(data, 100, 128)).isZero()) {
                            logger$8.throwError("CCIP Read callback selector included junk", Logger.errors.CALL_EXCEPTION, {
                                name: "OffchainLookup",
                                signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
                                transaction, data: result
                            });
                        }
                        const callbackSelector = hexDataSlice(data, 96, 100);
                        // Get the extra data to send back to the contract as context
                        const extraData = _parseBytes(data, 128);
                        const ccipResult = yield this.ccipReadFetch(transaction, calldata, urls);
                        if (ccipResult == null) {
                            logger$8.throwError("CCIP Read disabled or provided no URLs", Logger.errors.CALL_EXCEPTION, {
                                name: "OffchainLookup",
                                signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
                                transaction, data: result
                            });
                        }
                        const tx = {
                            to: txSender,
                            data: hexConcat([callbackSelector, encodeBytes([ccipResult, extraData])])
                        };
                        return this._call(tx, blockTag, attempt + 1);
                    }
                    catch (error) {
                        if (error.code === Logger.errors.SERVER_ERROR) {
                            throw error;
                        }
                    }
                }
                try {
                    return hexlify(result);
                }
                catch (error) {
                    return logger$8.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
                        method: "call",
                        params: { transaction, blockTag }, result, error
                    });
                }
            });
        }
        call(transaction, blockTag) {
            return __awaiter$4(this, void 0, void 0, function* () {
                yield this.getNetwork();
                const resolved = yield resolveProperties({
                    transaction: this._getTransactionRequest(transaction),
                    blockTag: this._getBlockTag(blockTag),
                    ccipReadEnabled: Promise.resolve(transaction.ccipReadEnabled)
                });
                return this._call(resolved.transaction, resolved.blockTag, resolved.ccipReadEnabled ? 0 : -1);
            });
        }
        estimateGas(transaction) {
            return __awaiter$4(this, void 0, void 0, function* () {
                yield this.getNetwork();
                const params = yield resolveProperties({
                    transaction: this._getTransactionRequest(transaction)
                });
                const result = yield this.perform("estimateGas", params);
                try {
                    return BigNumber.from(result);
                }
                catch (error) {
                    return logger$8.throwError("bad result from backend", Logger.errors.SERVER_ERROR, {
                        method: "estimateGas",
                        params, result, error
                    });
                }
            });
        }
        _getAddress(addressOrName) {
            return __awaiter$4(this, void 0, void 0, function* () {
                addressOrName = yield addressOrName;
                if (typeof (addressOrName) !== "string") {
                    logger$8.throwArgumentError("invalid address or ENS name", "name", addressOrName);
                }
                const address = yield this.resolveName(addressOrName);
                if (address == null) {
                    logger$8.throwError("ENS name not configured", Logger.errors.UNSUPPORTED_OPERATION, {
                        operation: `resolveName(${JSON.stringify(addressOrName)})`
                    });
                }
                return address;
            });
        }
        _getBlock(blockHashOrBlockTag, includeTransactions) {
            return __awaiter$4(this, void 0, void 0, function* () {
                yield this.getNetwork();
                blockHashOrBlockTag = yield blockHashOrBlockTag;
                // If blockTag is a number (not "latest", etc), this is the block number
                let blockNumber = -128;
                const params = {
                    includeTransactions: !!includeTransactions
                };
                if (isHexString(blockHashOrBlockTag, 32)) {
                    params.blockHash = blockHashOrBlockTag;
                }
                else {
                    try {
                        params.blockTag = yield this._getBlockTag(blockHashOrBlockTag);
                        if (isHexString(params.blockTag)) {
                            blockNumber = parseInt(params.blockTag.substring(2), 16);
                        }
                    }
                    catch (error) {
                        logger$8.throwArgumentError("invalid block hash or block tag", "blockHashOrBlockTag", blockHashOrBlockTag);
                    }
                }
                return poll(() => __awaiter$4(this, void 0, void 0, function* () {
                    const block = yield this.perform("getBlock", params);
                    // Block was not found
                    if (block == null) {
                        // For blockhashes, if we didn't say it existed, that blockhash may
                        // not exist. If we did see it though, perhaps from a log, we know
                        // it exists, and this node is just not caught up yet.
                        if (params.blockHash != null) {
                            if (this._emitted["b:" + params.blockHash] == null) {
                                return null;
                            }
                        }
                        // For block tags, if we are asking for a future block, we return null
                        if (params.blockTag != null) {
                            if (blockNumber > this._emitted.block) {
                                return null;
                            }
                        }
                        // Retry on the next block
                        return undefined;
                    }
                    // Add transactions
                    if (includeTransactions) {
                        let blockNumber = null;
                        for (let i = 0; i < block.transactions.length; i++) {
                            const tx = block.transactions[i];
                            if (tx.blockNumber == null) {
                                tx.confirmations = 0;
                            }
                            else if (tx.confirmations == null) {
                                if (blockNumber == null) {
                                    blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
                                }
                                // Add the confirmations using the fast block number (pessimistic)
                                let confirmations = (blockNumber - tx.blockNumber) + 1;
                                if (confirmations <= 0) {
                                    confirmations = 1;
                                }
                                tx.confirmations = confirmations;
                            }
                        }
                        const blockWithTxs = this.formatter.blockWithTransactions(block);
                        blockWithTxs.transactions = blockWithTxs.transactions.map((tx) => this._wrapTransaction(tx));
                        return blockWithTxs;
                    }
                    return this.formatter.block(block);
                }), { oncePoll: this });
            });
        }
        getBlock(blockHashOrBlockTag) {
            return (this._getBlock(blockHashOrBlockTag, false));
        }
        getBlockWithTransactions(blockHashOrBlockTag) {
            return (this._getBlock(blockHashOrBlockTag, true));
        }
        getTransaction(transactionHash) {
            return __awaiter$4(this, void 0, void 0, function* () {
                yield this.getNetwork();
                transactionHash = yield transactionHash;
                const params = { transactionHash: this.formatter.hash(transactionHash, true) };
                return poll(() => __awaiter$4(this, void 0, void 0, function* () {
                    const result = yield this.perform("getTransaction", params);
                    if (result == null) {
                        if (this._emitted["t:" + transactionHash] == null) {
                            return null;
                        }
                        return undefined;
                    }
                    const tx = this.formatter.transactionResponse(result);
                    if (tx.blockNumber == null) {
                        tx.confirmations = 0;
                    }
                    else if (tx.confirmations == null) {
                        const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
                        // Add the confirmations using the fast block number (pessimistic)
                        let confirmations = (blockNumber - tx.blockNumber) + 1;
                        if (confirmations <= 0) {
                            confirmations = 1;
                        }
                        tx.confirmations = confirmations;
                    }
                    return this._wrapTransaction(tx);
                }), { oncePoll: this });
            });
        }
        getTransactionReceipt(transactionHash) {
            return __awaiter$4(this, void 0, void 0, function* () {
                yield this.getNetwork();
                transactionHash = yield transactionHash;
                const params = { transactionHash: this.formatter.hash(transactionHash, true) };
                return poll(() => __awaiter$4(this, void 0, void 0, function* () {
                    const result = yield this.perform("getTransactionReceipt", params);
                    if (result == null) {
                        if (this._emitted["t:" + transactionHash] == null) {
                            return null;
                        }
                        return undefined;
                    }
                    // "geth-etc" returns receipts before they are ready
                    if (result.blockHash == null) {
                        return undefined;
                    }
                    const receipt = this.formatter.receipt(result);
                    if (receipt.blockNumber == null) {
                        receipt.confirmations = 0;
                    }
                    else if (receipt.confirmations == null) {
                        const blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
                        // Add the confirmations using the fast block number (pessimistic)
                        let confirmations = (blockNumber - receipt.blockNumber) + 1;
                        if (confirmations <= 0) {
                            confirmations = 1;
                        }
                        receipt.confirmations = confirmations;
                    }
                    return receipt;
                }), { oncePoll: this });
            });
        }
        getLogs(filter) {
            return __awaiter$4(this, void 0, void 0, function* () {
                yield this.getNetwork();
                const params = yield resolveProperties({ filter: this._getFilter(filter) });
                const logs = yield this.perform("getLogs", params);
                logs.forEach((log) => {
                    if (log.removed == null) {
                        log.removed = false;
                    }
                });
                return Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs);
            });
        }
        getEtherPrice() {
            return __awaiter$4(this, void 0, void 0, function* () {
                yield this.getNetwork();
                return this.perform("getEtherPrice", {});
            });
        }
        _getBlockTag(blockTag) {
            return __awaiter$4(this, void 0, void 0, function* () {
                blockTag = yield blockTag;
                if (typeof (blockTag) === "number" && blockTag < 0) {
                    if (blockTag % 1) {
                        logger$8.throwArgumentError("invalid BlockTag", "blockTag", blockTag);
                    }
                    let blockNumber = yield this._getInternalBlockNumber(100 + 2 * this.pollingInterval);
                    blockNumber += blockTag;
                    if (blockNumber < 0) {
                        blockNumber = 0;
                    }
                    return this.formatter.blockTag(blockNumber);
                }
                return this.formatter.blockTag(blockTag);
            });
        }
        getResolver(name) {
            return __awaiter$4(this, void 0, void 0, function* () {
                let currentName = name;
                while (true) {
                    if (currentName === "" || currentName === ".") {
                        return null;
                    }
                    // Optimization since the eth node cannot change and does
                    // not have a wildcard resolver
                    if (name !== "eth" && currentName === "eth") {
                        return null;
                    }
                    // Check the current node for a resolver
                    const addr = yield this._getResolver(currentName, "getResolver");
                    // Found a resolver!
                    if (addr != null) {
                        const resolver = new Resolver(this, addr, name);
                        // Legacy resolver found, using EIP-2544 so it isn't safe to use
                        if (currentName !== name && !(yield resolver.supportsWildcard())) {
                            return null;
                        }
                        return resolver;
                    }
                    // Get the parent node
                    currentName = currentName.split(".").slice(1).join(".");
                }
            });
        }
        _getResolver(name, operation) {
            return __awaiter$4(this, void 0, void 0, function* () {
                if (operation == null) {
                    operation = "ENS";
                }
                const network = yield this.getNetwork();
                // No ENS...
                if (!network.ensAddress) {
                    logger$8.throwError("network does not support ENS", Logger.errors.UNSUPPORTED_OPERATION, { operation, network: network.name });
                }
                try {
                    // keccak256("resolver(bytes32)")
                    const addrData = yield this.call({
                        to: network.ensAddress,
                        data: ("0x0178b8bf" + namehash(name).substring(2))
                    });
                    return this.formatter.callAddress(addrData);
                }
                catch (error) {
                    // ENS registry cannot throw errors on resolver(bytes32)
                }
                return null;
            });
        }
        resolveName(name) {
            return __awaiter$4(this, void 0, void 0, function* () {
                name = yield name;
                // If it is already an address, nothing to resolve
                try {
                    return Promise.resolve(this.formatter.address(name));
                }
                catch (error) {
                    // If is is a hexstring, the address is bad (See #694)
                    if (isHexString(name)) {
                        throw error;
                    }
                }
                if (typeof (name) !== "string") {
                    logger$8.throwArgumentError("invalid ENS name", "name", name);
                }
                // Get the addr from the resolver
                const resolver = yield this.getResolver(name);
                if (!resolver) {
                    return null;
                }
                return yield resolver.getAddress();
            });
        }
        lookupAddress(address) {
            return __awaiter$4(this, void 0, void 0, function* () {
                address = yield address;
                address = this.formatter.address(address);
                const node = address.substring(2).toLowerCase() + ".addr.reverse";
                const resolverAddr = yield this._getResolver(node, "lookupAddress");
                if (resolverAddr == null) {
                    return null;
                }
                // keccak("name(bytes32)")
                const name = _parseString(yield this.call({
                    to: resolverAddr,
                    data: ("0x691f3431" + namehash(node).substring(2))
                }), 0);
                const addr = yield this.resolveName(name);
                if (addr != address) {
                    return null;
                }
                return name;
            });
        }
        getAvatar(nameOrAddress) {
            return __awaiter$4(this, void 0, void 0, function* () {
                let resolver = null;
                if (isHexString(nameOrAddress)) {
                    // Address; reverse lookup
                    const address = this.formatter.address(nameOrAddress);
                    const node = address.substring(2).toLowerCase() + ".addr.reverse";
                    const resolverAddress = yield this._getResolver(node, "getAvatar");
                    if (!resolverAddress) {
                        return null;
                    }
                    // Try resolving the avatar against the addr.reverse resolver
                    resolver = new Resolver(this, resolverAddress, node);
                    try {
                        const avatar = yield resolver.getAvatar();
                        if (avatar) {
                            return avatar.url;
                        }
                    }
                    catch (error) {
                        if (error.code !== Logger.errors.CALL_EXCEPTION) {
                            throw error;
                        }
                    }
                    // Try getting the name and performing forward lookup; allowing wildcards
                    try {
                        // keccak("name(bytes32)")
                        const name = _parseString(yield this.call({
                            to: resolverAddress,
                            data: ("0x691f3431" + namehash(node).substring(2))
                        }), 0);
                        resolver = yield this.getResolver(name);
                    }
                    catch (error) {
                        if (error.code !== Logger.errors.CALL_EXCEPTION) {
                            throw error;
                        }
                        return null;
                    }
                }
                else {
                    // ENS name; forward lookup with wildcard
                    resolver = yield this.getResolver(nameOrAddress);
                    if (!resolver) {
                        return null;
                    }
                }
                const avatar = yield resolver.getAvatar();
                if (avatar == null) {
                    return null;
                }
                return avatar.url;
            });
        }
        perform(method, params) {
            return logger$8.throwError(method + " not implemented", Logger.errors.NOT_IMPLEMENTED, { operation: method });
        }
        _startEvent(event) {
            this.polling = (this._events.filter((e) => e.pollable()).length > 0);
        }
        _stopEvent(event) {
            this.polling = (this._events.filter((e) => e.pollable()).length > 0);
        }
        _addEventListener(eventName, listener, once) {
            const event = new Event(getEventTag(eventName), listener, once);
            this._events.push(event);
            this._startEvent(event);
            return this;
        }
        on(eventName, listener) {
            return this._addEventListener(eventName, listener, false);
        }
        once(eventName, listener) {
            return this._addEventListener(eventName, listener, true);
        }
        emit(eventName, ...args) {
            let result = false;
            let stopped = [];
            let eventTag = getEventTag(eventName);
            this._events = this._events.filter((event) => {
                if (event.tag !== eventTag) {
                    return true;
                }
                setTimeout(() => {
                    event.listener.apply(this, args);
                }, 0);
                result = true;
                if (event.once) {
                    stopped.push(event);
                    return false;
                }
                return true;
            });
            stopped.forEach((event) => { this._stopEvent(event); });
            return result;
        }
        listenerCount(eventName) {
            if (!eventName) {
                return this._events.length;
            }
            let eventTag = getEventTag(eventName);
            return this._events.filter((event) => {
                return (event.tag === eventTag);
            }).length;
        }
        listeners(eventName) {
            if (eventName == null) {
                return this._events.map((event) => event.listener);
            }
            let eventTag = getEventTag(eventName);
            return this._events
                .filter((event) => (event.tag === eventTag))
                .map((event) => event.listener);
        }
        off(eventName, listener) {
            if (listener == null) {
                return this.removeAllListeners(eventName);
            }
            const stopped = [];
            let found = false;
            let eventTag = getEventTag(eventName);
            this._events = this._events.filter((event) => {
                if (event.tag !== eventTag || event.listener != listener) {
                    return true;
                }
                if (found) {
                    return true;
                }
                found = true;
                stopped.push(event);
                return false;
            });
            stopped.forEach((event) => { this._stopEvent(event); });
            return this;
        }
        removeAllListeners(eventName) {
            let stopped = [];
            if (eventName == null) {
                stopped = this._events;
                this._events = [];
            }
            else {
                const eventTag = getEventTag(eventName);
                this._events = this._events.filter((event) => {
                    if (event.tag !== eventTag) {
                        return true;
                    }
                    stopped.push(event);
                    return false;
                });
            }
            stopped.forEach((event) => { this._stopEvent(event); });
            return this;
        }
    }

    var __awaiter$3 = (window && window.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    const logger$7 = new Logger(version$5);
    const errorGas = ["call", "estimateGas"];
    function spelunk(value, requireData) {
        if (value == null) {
            return null;
        }
        // These *are* the droids we're looking for.
        if (typeof (value.message) === "string" && value.message.match("reverted")) {
            const data = isHexString(value.data) ? value.data : null;
            if (!requireData || data) {
                return { message: value.message, data };
            }
        }
        // Spelunk further...
        if (typeof (value) === "object") {
            for (const key in value) {
                const result = spelunk(value[key], requireData);
                if (result) {
                    return result;
                }
            }
            return null;
        }
        // Might be a JSON string we can further descend...
        if (typeof (value) === "string") {
            try {
                return spelunk(JSON.parse(value), requireData);
            }
            catch (error) { }
        }
        return null;
    }
    function checkError(method, error, params) {
        const transaction = params.transaction || params.signedTransaction;
        // Undo the "convenience" some nodes are attempting to prevent backwards
        // incompatibility; maybe for v6 consider forwarding reverts as errors
        if (method === "call") {
            const result = spelunk(error, true);
            if (result) {
                return result.data;
            }
            // Nothing descriptive..
            logger$7.throwError("missing revert data in call exception; Transaction reverted without a reason string", Logger.errors.CALL_EXCEPTION, {
                data: "0x", transaction, error
            });
        }
        if (method === "estimateGas") {
            // Try to find something, with a preference on SERVER_ERROR body
            let result = spelunk(error.body, false);
            if (result == null) {
                result = spelunk(error, false);
            }
            // Found "reverted", this is a CALL_EXCEPTION
            if (result) {
                logger$7.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {
                    reason: result.message, method, transaction, error
                });
            }
        }
        // @TODO: Should we spelunk for message too?
        let message = error.message;
        if (error.code === Logger.errors.SERVER_ERROR && error.error && typeof (error.error.message) === "string") {
            message = error.error.message;
        }
        else if (typeof (error.body) === "string") {
            message = error.body;
        }
        else if (typeof (error.responseText) === "string") {
            message = error.responseText;
        }
        message = (message || "").toLowerCase();
        // "insufficient funds for gas * price + value + cost(data)"
        if (message.match(/insufficient funds|base fee exceeds gas limit|InsufficientFunds/i)) {
            logger$7.throwError("insufficient funds for intrinsic transaction cost", Logger.errors.INSUFFICIENT_FUNDS, {
                error, method, transaction
            });
        }
        // "nonce too low"
        if (message.match(/nonce (is )?too low/i)) {
            logger$7.throwError("nonce has already been used", Logger.errors.NONCE_EXPIRED, {
                error, method, transaction
            });
        }
        // "replacement transaction underpriced"
        if (message.match(/replacement transaction underpriced|transaction gas price.*too low/i)) {
            logger$7.throwError("replacement fee too low", Logger.errors.REPLACEMENT_UNDERPRICED, {
                error, method, transaction
            });
        }
        // "replacement transaction underpriced"
        if (message.match(/only replay-protected/i)) {
            logger$7.throwError("legacy pre-eip-155 transactions not supported", Logger.errors.UNSUPPORTED_OPERATION, {
                error, method, transaction
            });
        }
        if (errorGas.indexOf(method) >= 0 && message.match(/gas required exceeds allowance|always failing transaction|execution reverted|revert/)) {
            logger$7.throwError("cannot estimate gas; transaction may fail or may require manual gas limit", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {
                error, method, transaction
            });
        }
        throw error;
    }
    function timer(timeout) {
        return new Promise(function (resolve) {
            setTimeout(resolve, timeout);
        });
    }
    function getResult(payload) {
        if (payload.error) {
            // @TODO: not any
            const error = new Error(payload.error.message);
            error.code = payload.error.code;
            error.data = payload.error.data;
            throw error;
        }
        return payload.result;
    }
    function getLowerCase(value) {
        if (value) {
            return value.toLowerCase();
        }
        return value;
    }
    const _constructorGuard$1 = {};
    class JsonRpcSigner extends Signer {
        constructor(constructorGuard, provider, addressOrIndex) {
            super();
            if (constructorGuard !== _constructorGuard$1) {
                throw new Error("do not call the JsonRpcSigner constructor directly; use provider.getSigner");
            }
            defineReadOnly(this, "provider", provider);
            if (addressOrIndex == null) {
                addressOrIndex = 0;
            }
            if (typeof (addressOrIndex) === "string") {
                defineReadOnly(this, "_address", this.provider.formatter.address(addressOrIndex));
                defineReadOnly(this, "_index", null);
            }
            else if (typeof (addressOrIndex) === "number") {
                defineReadOnly(this, "_index", addressOrIndex);
                defineReadOnly(this, "_address", null);
            }
            else {
                logger$7.throwArgumentError("invalid address or index", "addressOrIndex", addressOrIndex);
            }
        }
        connect(provider) {
            return logger$7.throwError("cannot alter JSON-RPC Signer connection", Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "connect"
            });
        }
        connectUnchecked() {
            return new UncheckedJsonRpcSigner(_constructorGuard$1, this.provider, this._address || this._index);
        }
        getAddress() {
            if (this._address) {
                return Promise.resolve(this._address);
            }
            return this.provider.send("eth_accounts", []).then((accounts) => {
                if (accounts.length <= this._index) {
                    logger$7.throwError("unknown account #" + this._index, Logger.errors.UNSUPPORTED_OPERATION, {
                        operation: "getAddress"
                    });
                }
                return this.provider.formatter.address(accounts[this._index]);
            });
        }
        sendUncheckedTransaction(transaction) {
            transaction = shallowCopy(transaction);
            const fromAddress = this.getAddress().then((address) => {
                if (address) {
                    address = address.toLowerCase();
                }
                return address;
            });
            // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user
            // wishes to use this, it is easy to specify explicitly, otherwise
            // we look it up for them.
            if (transaction.gasLimit == null) {
                const estimate = shallowCopy(transaction);
                estimate.from = fromAddress;
                transaction.gasLimit = this.provider.estimateGas(estimate);
            }
            if (transaction.to != null) {
                transaction.to = Promise.resolve(transaction.to).then((to) => __awaiter$3(this, void 0, void 0, function* () {
                    if (to == null) {
                        return null;
                    }
                    const address = yield this.provider.resolveName(to);
                    if (address == null) {
                        logger$7.throwArgumentError("provided ENS name resolves to null", "tx.to", to);
                    }
                    return address;
                }));
            }
            return resolveProperties({
                tx: resolveProperties(transaction),
                sender: fromAddress
            }).then(({ tx, sender }) => {
                if (tx.from != null) {
                    if (tx.from.toLowerCase() !== sender) {
                        logger$7.throwArgumentError("from address mismatch", "transaction", transaction);
                    }
                }
                else {
                    tx.from = sender;
                }
                const hexTx = this.provider.constructor.hexlifyTransaction(tx, { from: true });
                return this.provider.send("eth_sendTransaction", [hexTx]).then((hash) => {
                    return hash;
                }, (error) => {
                    if (typeof (error.message) === "string" && error.message.match(/user denied/i)) {
                        logger$7.throwError("user rejected transaction", Logger.errors.ACTION_REJECTED, {
                            action: "sendTransaction",
                            transaction: tx
                        });
                    }
                    return checkError("sendTransaction", error, hexTx);
                });
            });
        }
        signTransaction(transaction) {
            return logger$7.throwError("signing transactions is unsupported", Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "signTransaction"
            });
        }
        sendTransaction(transaction) {
            return __awaiter$3(this, void 0, void 0, function* () {
                // This cannot be mined any earlier than any recent block
                const blockNumber = yield this.provider._getInternalBlockNumber(100 + 2 * this.provider.pollingInterval);
                // Send the transaction
                const hash = yield this.sendUncheckedTransaction(transaction);
                try {
                    // Unfortunately, JSON-RPC only provides and opaque transaction hash
                    // for a response, and we need the actual transaction, so we poll
                    // for it; it should show up very quickly
                    return yield poll(() => __awaiter$3(this, void 0, void 0, function* () {
                        const tx = yield this.provider.getTransaction(hash);
                        if (tx === null) {
                            return undefined;
                        }
                        return this.provider._wrapTransaction(tx, hash, blockNumber);
                    }), { oncePoll: this.provider });
                }
                catch (error) {
                    error.transactionHash = hash;
                    throw error;
                }
            });
        }
        signMessage(message) {
            return __awaiter$3(this, void 0, void 0, function* () {
                const data = ((typeof (message) === "string") ? toUtf8Bytes(message) : message);
                const address = yield this.getAddress();
                try {
                    return yield this.provider.send("personal_sign", [hexlify(data), address.toLowerCase()]);
                }
                catch (error) {
                    if (typeof (error.message) === "string" && error.message.match(/user denied/i)) {
                        logger$7.throwError("user rejected signing", Logger.errors.ACTION_REJECTED, {
                            action: "signMessage",
                            from: address,
                            messageData: message
                        });
                    }
                    throw error;
                }
            });
        }
        _legacySignMessage(message) {
            return __awaiter$3(this, void 0, void 0, function* () {
                const data = ((typeof (message) === "string") ? toUtf8Bytes(message) : message);
                const address = yield this.getAddress();
                try {
                    // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign
                    return yield this.provider.send("eth_sign", [address.toLowerCase(), hexlify(data)]);
                }
                catch (error) {
                    if (typeof (error.message) === "string" && error.message.match(/user denied/i)) {
                        logger$7.throwError("user rejected signing", Logger.errors.ACTION_REJECTED, {
                            action: "_legacySignMessage",
                            from: address,
                            messageData: message
                        });
                    }
                    throw error;
                }
            });
        }
        _signTypedData(domain, types, value) {
            return __awaiter$3(this, void 0, void 0, function* () {
                // Populate any ENS names (in-place)
                const populated = yield TypedDataEncoder.resolveNames(domain, types, value, (name) => {
                    return this.provider.resolveName(name);
                });
                const address = yield this.getAddress();
                try {
                    return yield this.provider.send("eth_signTypedData_v4", [
                        address.toLowerCase(),
                        JSON.stringify(TypedDataEncoder.getPayload(populated.domain, types, populated.value))
                    ]);
                }
                catch (error) {
                    if (typeof (error.message) === "string" && error.message.match(/user denied/i)) {
                        logger$7.throwError("user rejected signing", Logger.errors.ACTION_REJECTED, {
                            action: "_signTypedData",
                            from: address,
                            messageData: { domain: populated.domain, types, value: populated.value }
                        });
                    }
                    throw error;
                }
            });
        }
        unlock(password) {
            return __awaiter$3(this, void 0, void 0, function* () {
                const provider = this.provider;
                const address = yield this.getAddress();
                return provider.send("personal_unlockAccount", [address.toLowerCase(), password, null]);
            });
        }
    }
    class UncheckedJsonRpcSigner extends JsonRpcSigner {
        sendTransaction(transaction) {
            return this.sendUncheckedTransaction(transaction).then((hash) => {
                return {
                    hash: hash,
                    nonce: null,
                    gasLimit: null,
                    gasPrice: null,
                    data: null,
                    value: null,
                    chainId: null,
                    confirmations: 0,
                    from: null,
                    wait: (confirmations) => { return this.provider.waitForTransaction(hash, confirmations); }
                };
            });
        }
    }
    const allowedTransactionKeys = {
        chainId: true, data: true, gasLimit: true, gasPrice: true, nonce: true, to: true, value: true,
        type: true, accessList: true,
        maxFeePerGas: true, maxPriorityFeePerGas: true
    };
    class JsonRpcProvider extends BaseProvider {
        constructor(url, network) {
            let networkOrReady = network;
            // The network is unknown, query the JSON-RPC for it
            if (networkOrReady == null) {
                networkOrReady = new Promise((resolve, reject) => {
                    setTimeout(() => {
                        this.detectNetwork().then((network) => {
                            resolve(network);
                        }, (error) => {
                            reject(error);
                        });
                    }, 0);
                });
            }
            super(networkOrReady);
            // Default URL
            if (!url) {
                url = getStatic(this.constructor, "defaultUrl")();
            }
            if (typeof (url) === "string") {
                defineReadOnly(this, "connection", Object.freeze({
                    url: url
                }));
            }
            else {
                defineReadOnly(this, "connection", Object.freeze(shallowCopy(url)));
            }
            this._nextId = 42;
        }
        get _cache() {
            if (this._eventLoopCache == null) {
                this._eventLoopCache = {};
            }
            return this._eventLoopCache;
        }
        static defaultUrl() {
            return "http:/\/localhost:8545";
        }
        detectNetwork() {
            if (!this._cache["detectNetwork"]) {
                this._cache["detectNetwork"] = this._uncachedDetectNetwork();
                // Clear this cache at the beginning of the next event loop
                setTimeout(() => {
                    this._cache["detectNetwork"] = null;
                }, 0);
            }
            return this._cache["detectNetwork"];
        }
        _uncachedDetectNetwork() {
            return __awaiter$3(this, void 0, void 0, function* () {
                yield timer(0);
                let chainId = null;
                try {
                    chainId = yield this.send("eth_chainId", []);
                }
                catch (error) {
                    try {
                        chainId = yield this.send("net_version", []);
                    }
                    catch (error) { }
                }
                if (chainId != null) {
                    const getNetwork = getStatic(this.constructor, "getNetwork");
                    try {
                        return getNetwork(BigNumber.from(chainId).toNumber());
                    }
                    catch (error) {
                        return logger$7.throwError("could not detect network", Logger.errors.NETWORK_ERROR, {
                            chainId: chainId,
                            event: "invalidNetwork",
                            serverError: error
                        });
                    }
                }
                return logger$7.throwError("could not detect network", Logger.errors.NETWORK_ERROR, {
                    event: "noNetwork"
                });
            });
        }
        getSigner(addressOrIndex) {
            return new JsonRpcSigner(_constructorGuard$1, this, addressOrIndex);
        }
        getUncheckedSigner(addressOrIndex) {
            return this.getSigner(addressOrIndex).connectUnchecked();
        }
        listAccounts() {
            return this.send("eth_accounts", []).then((accounts) => {
                return accounts.map((a) => this.formatter.address(a));
            });
        }
        send(method, params) {
            const request = {
                method: method,
                params: params,
                id: (this._nextId++),
                jsonrpc: "2.0"
            };
            this.emit("debug", {
                action: "request",
                request: deepCopy(request),
                provider: this
            });
            // We can expand this in the future to any call, but for now these
            // are the biggest wins and do not require any serializing parameters.
            const cache = (["eth_chainId", "eth_blockNumber"].indexOf(method) >= 0);
            if (cache && this._cache[method]) {
                return this._cache[method];
            }
            const result = fetchJson(this.connection, JSON.stringify(request), getResult).then((result) => {
                this.emit("debug", {
                    action: "response",
                    request: request,
                    response: result,
                    provider: this
                });
                return result;
            }, (error) => {
                this.emit("debug", {
                    action: "response",
                    error: error,
                    request: request,
                    provider: this
                });
                throw error;
            });
            // Cache the fetch, but clear it on the next event loop
            if (cache) {
                this._cache[method] = result;
                setTimeout(() => {
                    this._cache[method] = null;
                }, 0);
            }
            return result;
        }
        prepareRequest(method, params) {
            switch (method) {
                case "getBlockNumber":
                    return ["eth_blockNumber", []];
                case "getGasPrice":
                    return ["eth_gasPrice", []];
                case "getBalance":
                    return ["eth_getBalance", [getLowerCase(params.address), params.blockTag]];
                case "getTransactionCount":
                    return ["eth_getTransactionCount", [getLowerCase(params.address), params.blockTag]];
                case "getCode":
                    return ["eth_getCode", [getLowerCase(params.address), params.blockTag]];
                case "getStorageAt":
                    return ["eth_getStorageAt", [getLowerCase(params.address), hexZeroPad(params.position, 32), params.blockTag]];
                case "sendTransaction":
                    return ["eth_sendRawTransaction", [params.signedTransaction]];
                case "getBlock":
                    if (params.blockTag) {
                        return ["eth_getBlockByNumber", [params.blockTag, !!params.includeTransactions]];
                    }
                    else if (params.blockHash) {
                        return ["eth_getBlockByHash", [params.blockHash, !!params.includeTransactions]];
                    }
                    return null;
                case "getTransaction":
                    return ["eth_getTransactionByHash", [params.transactionHash]];
                case "getTransactionReceipt":
                    return ["eth_getTransactionReceipt", [params.transactionHash]];
                case "call": {
                    const hexlifyTransaction = getStatic(this.constructor, "hexlifyTransaction");
                    return ["eth_call", [hexlifyTransaction(params.transaction, { from: true }), params.blockTag]];
                }
                case "estimateGas": {
                    const hexlifyTransaction = getStatic(this.constructor, "hexlifyTransaction");
                    return ["eth_estimateGas", [hexlifyTransaction(params.transaction, { from: true })]];
                }
                case "getLogs":
                    if (params.filter && params.filter.address != null) {
                        params.filter.address = getLowerCase(params.filter.address);
                    }
                    return ["eth_getLogs", [params.filter]];
            }
            return null;
        }
        perform(method, params) {
            return __awaiter$3(this, void 0, void 0, function* () {
                // Legacy networks do not like the type field being passed along (which
                // is fair), so we delete type if it is 0 and a non-EIP-1559 network
                if (method === "call" || method === "estimateGas") {
                    const tx = params.transaction;
                    if (tx && tx.type != null && BigNumber.from(tx.type).isZero()) {
                        // If there are no EIP-1559 properties, it might be non-EIP-1559
                        if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {
                            const feeData = yield this.getFeeData();
                            if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {
                                // Network doesn't know about EIP-1559 (and hence type)
                                params = shallowCopy(params);
                                params.transaction = shallowCopy(tx);
                                delete params.transaction.type;
                            }
                        }
                    }
                }
                const args = this.prepareRequest(method, params);
                if (args == null) {
                    logger$7.throwError(method + " not implemented", Logger.errors.NOT_IMPLEMENTED, { operation: method });
                }
                try {
                    return yield this.send(args[0], args[1]);
                }
                catch (error) {
                    return checkError(method, error, params);
                }
            });
        }
        _startEvent(event) {
            if (event.tag === "pending") {
                this._startPending();
            }
            super._startEvent(event);
        }
        _startPending() {
            if (this._pendingFilter != null) {
                return;
            }
            const self = this;
            const pendingFilter = this.send("eth_newPendingTransactionFilter", []);
            this._pendingFilter = pendingFilter;
            pendingFilter.then(function (filterId) {
                function poll() {
                    self.send("eth_getFilterChanges", [filterId]).then(function (hashes) {
                        if (self._pendingFilter != pendingFilter) {
                            return null;
                        }
                        let seq = Promise.resolve();
                        hashes.forEach(function (hash) {
                            // @TODO: This should be garbage collected at some point... How? When?
                            self._emitted["t:" + hash.toLowerCase()] = "pending";
                            seq = seq.then(function () {
                                return self.getTransaction(hash).then(function (tx) {
                                    self.emit("pending", tx);
                                    return null;
                                });
                            });
                        });
                        return seq.then(function () {
                            return timer(1000);
                        });
                    }).then(function () {
                        if (self._pendingFilter != pendingFilter) {
                            self.send("eth_uninstallFilter", [filterId]);
                            return;
                        }
                        setTimeout(function () { poll(); }, 0);
                        return null;
                    }).catch((error) => { });
                }
                poll();
                return filterId;
            }).catch((error) => { });
        }
        _stopEvent(event) {
            if (event.tag === "pending" && this.listenerCount("pending") === 0) {
                this._pendingFilter = null;
            }
            super._stopEvent(event);
        }
        // Convert an ethers.js transaction into a JSON-RPC transaction
        //  - gasLimit => gas
        //  - All values hexlified
        //  - All numeric values zero-striped
        //  - All addresses are lowercased
        // NOTE: This allows a TransactionRequest, but all values should be resolved
        //       before this is called
        // @TODO: This will likely be removed in future versions and prepareRequest
        //        will be the preferred method for this.
        static hexlifyTransaction(transaction, allowExtra) {
            // Check only allowed properties are given
            const allowed = shallowCopy(allowedTransactionKeys);
            if (allowExtra) {
                for (const key in allowExtra) {
                    if (allowExtra[key]) {
                        allowed[key] = true;
                    }
                }
            }
            checkProperties(transaction, allowed);
            const result = {};
            // JSON-RPC now requires numeric values to be "quantity" values
            ["chainId", "gasLimit", "gasPrice", "type", "maxFeePerGas", "maxPriorityFeePerGas", "nonce", "value"].forEach(function (key) {
                if (transaction[key] == null) {
                    return;
                }
                const value = hexValue(BigNumber.from(transaction[key]));
                if (key === "gasLimit") {
                    key = "gas";
                }
                result[key] = value;
            });
            ["from", "to", "data"].forEach(function (key) {
                if (transaction[key] == null) {
                    return;
                }
                result[key] = hexlify(transaction[key]);
            });
            if (transaction.accessList) {
                result["accessList"] = accessListify(transaction.accessList);
            }
            return result;
        }
    }

    var __awaiter$2 = (window && window.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    const logger$6 = new Logger(version$5);
    // A StaticJsonRpcProvider is useful when you *know* for certain that
    // the backend will never change, as it never calls eth_chainId to
    // verify its backend. However, if the backend does change, the effects
    // are undefined and may include:
    // - inconsistent results
    // - locking up the UI
    // - block skew warnings
    // - wrong results
    // If the network is not explicit (i.e. auto-detection is expected), the
    // node MUST be running and available to respond to requests BEFORE this
    // is instantiated.
    class StaticJsonRpcProvider extends JsonRpcProvider {
        detectNetwork() {
            const _super = Object.create(null, {
                detectNetwork: { get: () => super.detectNetwork }
            });
            return __awaiter$2(this, void 0, void 0, function* () {
                let network = this.network;
                if (network == null) {
                    network = yield _super.detectNetwork.call(this);
                    if (!network) {
                        logger$6.throwError("no network detected", Logger.errors.UNKNOWN_ERROR, {});
                    }
                    // If still not set, set it
                    if (this._network == null) {
                        // A static network does not support "any"
                        defineReadOnly(this, "_network", network);
                        this.emit("network", network, null);
                    }
                }
                return network;
            });
        }
    }

    const version$4 = "random/5.7.0";

    const logger$5 = new Logger(version$4);
    // Debugging line for testing browser lib in node
    //const window = { crypto: { getRandomValues: () => { } } };
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis
    function getGlobal() {
        if (typeof self !== 'undefined') {
            return self;
        }
        if (typeof window !== 'undefined') {
            return window;
        }
        if (typeof global$1 !== 'undefined') {
            return global$1;
        }
        throw new Error('unable to locate global object');
    }
    const anyGlobal = getGlobal();
    let crypto$1 = anyGlobal.crypto || anyGlobal.msCrypto;
    if (!crypto$1 || !crypto$1.getRandomValues) {
        logger$5.warn("WARNING: Missing strong random number source");
        crypto$1 = {
            getRandomValues: function (buffer) {
                return logger$5.throwError("no secure random source avaialble", Logger.errors.UNSUPPORTED_OPERATION, {
                    operation: "crypto.getRandomValues"
                });
            }
        };
    }
    function randomBytes$1(length) {
        if (length <= 0 || length > 1024 || (length % 1) || length != length) {
            logger$5.throwArgumentError("invalid length", "length", length);
        }
        const result = new Uint8Array(length);
        crypto$1.getRandomValues(result);
        return arrayify(result);
    }

    new Logger(version$5);

    const providers = {};
    const DEFAULT_BROVIDER_URL = 'https://rpc.snapshot.org';
    function getProvider$1(network, { broviderUrl = DEFAULT_BROVIDER_URL } = {}) {
        const url = `${broviderUrl}/${network}`;
        if (!providers[network])
            providers[network] = new StaticJsonRpcProvider({
                url,
                timeout: 25000,
                allowGzip: true
            }, Number(network));
        return providers[network];
    }

    function signMessage(web3, msg, address) {
        return __awaiter$c(this, void 0, void 0, function* () {
            msg = hexlify(new Buffer(msg, 'utf8'));
            return yield web3.send('personal_sign', [msg, address]);
        });
    }
    function getBlockNumber(provider) {
        return __awaiter$c(this, void 0, void 0, function* () {
            try {
                const blockNumber = yield provider.getBlockNumber();
                return parseInt(blockNumber);
            }
            catch (e) {
                return Promise.reject();
            }
        });
    }

    /*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */
    // Utilities
    /**
     * @__NO_SIDE_EFFECTS__
     */
    function assertNumber(n) {
        if (!Number.isSafeInteger(n))
            throw new Error(`Wrong integer: ${n}`);
    }
    function isBytes$3(a) {
        return (a instanceof Uint8Array ||
            (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));
    }
    /**
     * @__NO_SIDE_EFFECTS__
     */
    function chain(...args) {
        const id = (a) => a;
        // Wrap call in closure so JIT can inline calls
        const wrap = (a, b) => (c) => a(b(c));
        // Construct chain of args[-1].encode(args[-2].encode([...]))
        const encode = args.map((x) => x.encode).reduceRight(wrap, id);
        // Construct chain of args[0].decode(args[1].decode(...))
        const decode = args.map((x) => x.decode).reduce(wrap, id);
        return { encode, decode };
    }
    /**
     * Encodes integer radix representation to array of strings using alphabet and back
     * @__NO_SIDE_EFFECTS__
     */
    function alphabet(alphabet) {
        return {
            encode: (digits) => {
                if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))
                    throw new Error('alphabet.encode input should be an array of numbers');
                return digits.map((i) => {
                    assertNumber(i);
                    if (i < 0 || i >= alphabet.length)
                        throw new Error(`Digit index outside alphabet: ${i} (alphabet: ${alphabet.length})`);
                    return alphabet[i];
                });
            },
            decode: (input) => {
                if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))
                    throw new Error('alphabet.decode input should be array of strings');
                return input.map((letter) => {
                    if (typeof letter !== 'string')
                        throw new Error(`alphabet.decode: not string element=${letter}`);
                    const index = alphabet.indexOf(letter);
                    if (index === -1)
                        throw new Error(`Unknown letter: "${letter}". Allowed: ${alphabet}`);
                    return index;
                });
            },
        };
    }
    /**
     * @__NO_SIDE_EFFECTS__
     */
    function join(separator = '') {
        if (typeof separator !== 'string')
            throw new Error('join separator should be string');
        return {
            encode: (from) => {
                if (!Array.isArray(from) || (from.length && typeof from[0] !== 'string'))
                    throw new Error('join.encode input should be array of strings');
                for (let i of from)
                    if (typeof i !== 'string')
                        throw new Error(`join.encode: non-string input=${i}`);
                return from.join(separator);
            },
            decode: (to) => {
                if (typeof to !== 'string')
                    throw new Error('join.decode input should be string');
                return to.split(separator);
            },
        };
    }
    /**
     * Pad strings array so it has integer number of bits
     * @__NO_SIDE_EFFECTS__
     */
    function padding(bits, chr = '=') {
        assertNumber(bits);
        if (typeof chr !== 'string')
            throw new Error('padding chr should be string');
        return {
            encode(data) {
                if (!Array.isArray(data) || (data.length && typeof data[0] !== 'string'))
                    throw new Error('padding.encode input should be array of strings');
                for (let i of data)
                    if (typeof i !== 'string')
                        throw new Error(`padding.encode: non-string input=${i}`);
                while ((data.length * bits) % 8)
                    data.push(chr);
                return data;
            },
            decode(input) {
                if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))
                    throw new Error('padding.encode input should be array of strings');
                for (let i of input)
                    if (typeof i !== 'string')
                        throw new Error(`padding.decode: non-string input=${i}`);
                let end = input.length;
                if ((end * bits) % 8)
                    throw new Error('Invalid padding: string should have whole number of bytes');
                for (; end > 0 && input[end - 1] === chr; end--) {
                    if (!(((end - 1) * bits) % 8))
                        throw new Error('Invalid padding: string has too much padding');
                }
                return input.slice(0, end);
            },
        };
    }
    /**
     * @__NO_SIDE_EFFECTS__
     */
    function normalize(fn) {
        if (typeof fn !== 'function')
            throw new Error('normalize fn should be function');
        return { encode: (from) => from, decode: (to) => fn(to) };
    }
    const gcd = /* @__NO_SIDE_EFFECTS__ */ (a, b) => (!b ? a : gcd(b, a % b));
    const radix2carry = /*@__NO_SIDE_EFFECTS__ */ (from, to) => from + (to - gcd(from, to));
    /**
     * Implemented with numbers, because BigInt is 5x slower
     * @__NO_SIDE_EFFECTS__
     */
    function convertRadix2(data, from, to, padding) {
        if (!Array.isArray(data))
            throw new Error('convertRadix2: data should be array');
        if (from <= 0 || from > 32)
            throw new Error(`convertRadix2: wrong from=${from}`);
        if (to <= 0 || to > 32)
            throw new Error(`convertRadix2: wrong to=${to}`);
        if (radix2carry(from, to) > 32) {
            throw new Error(`convertRadix2: carry overflow from=${from} to=${to} carryBits=${radix2carry(from, to)}`);
        }
        let carry = 0;
        let pos = 0; // bitwise position in current element
        const mask = 2 ** to - 1;
        const res = [];
        for (const n of data) {
            assertNumber(n);
            if (n >= 2 ** from)
                throw new Error(`convertRadix2: invalid data word=${n} from=${from}`);
            carry = (carry << from) | n;
            if (pos + from > 32)
                throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from}`);
            pos += from;
            for (; pos >= to; pos -= to)
                res.push(((carry >> (pos - to)) & mask) >>> 0);
            carry &= 2 ** pos - 1; // clean carry, otherwise it will cause overflow
        }
        carry = (carry << (to - pos)) & mask;
        if (!padding && pos >= from)
            throw new Error('Excess padding');
        if (!padding && carry)
            throw new Error(`Non-zero padding: ${carry}`);
        if (padding && pos > 0)
            res.push(carry >>> 0);
        return res;
    }
    /**
     * If both bases are power of same number (like `2**8 <-> 2**64`),
     * there is a linear algorithm. For now we have implementation for power-of-two bases only.
     * @__NO_SIDE_EFFECTS__
     */
    function radix2(bits, revPadding = false) {
        assertNumber(bits);
        if (bits <= 0 || bits > 32)
            throw new Error('radix2: bits should be in (0..32]');
        if (radix2carry(8, bits) > 32 || radix2carry(bits, 8) > 32)
            throw new Error('radix2: carry overflow');
        return {
            encode: (bytes) => {
                if (!isBytes$3(bytes))
                    throw new Error('radix2.encode input should be Uint8Array');
                return convertRadix2(Array.from(bytes), 8, bits, !revPadding);
            },
            decode: (digits) => {
                if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))
                    throw new Error('radix2.decode input should be array of numbers');
                return Uint8Array.from(convertRadix2(digits, bits, 8, revPadding));
            },
        };
    }
    // RFC 4648 aka RFC 3548
    // ---------------------
    /* @__PURE__ */ chain(radix2(4), alphabet('0123456789ABCDEF'), join(''));
    /* @__PURE__ */ chain(radix2(5), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'), padding(5), join(''));
    /* @__PURE__ */ chain(radix2(5), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'), join(''));
    /* @__PURE__ */ chain(radix2(5), alphabet('0123456789ABCDEFGHIJKLMNOPQRSTUV'), padding(5), join(''));
    /* @__PURE__ */ chain(radix2(5), alphabet('0123456789ABCDEFGHIJKLMNOPQRSTUV'), join(''));
    /* @__PURE__ */ chain(radix2(5), alphabet('0123456789ABCDEFGHJKMNPQRSTVWXYZ'), join(''), normalize((s) => s.toUpperCase().replace(/O/g, '0').replace(/[IL]/g, '1')));
    const base64 = /* @__PURE__ */ chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'), padding(6), join(''));
    /* @__PURE__ */ chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'), join(''));
    /* @__PURE__ */ chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'), padding(6), join(''));
    /* @__PURE__ */ chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'), join(''));
    /* @__PURE__ */ chain(alphabet('qpzry9x8gf2tvdw0s3jn54khce6mua7l'), join(''));
    /* @__PURE__ */ chain(radix2(4), alphabet('0123456789abcdef'), join(''), normalize((s) => {
        if (typeof s !== 'string' || s.length % 2)
            throw new TypeError(`hex.decode: expected string, got ${typeof s} with length ${s.length}`);
        return s.toLowerCase();
    }));

    /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
    // 100 lines of code in the file are duplicated from noble-hashes (utils).
    // This is OK: `abstract` directory does not use noble-hashes.
    // User may opt-in into using different hashing library. This way, noble-hashes
    // won't be included into their bundle.
    const _0n$4 = BigInt(0);
    const _1n$4 = BigInt(1);
    const _2n$3 = BigInt(2);
    function isBytes$2(a) {
        return (a instanceof Uint8Array ||
            (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));
    }
    // Array where index 0xf0 (240) is mapped to string 'f0'
    const hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));
    /**
     * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'
     */
    function bytesToHex(bytes) {
        if (!isBytes$2(bytes))
            throw new Error('Uint8Array expected');
        // pre-caching improves the speed 6x
        let hex = '';
        for (let i = 0; i < bytes.length; i++) {
            hex += hexes[bytes[i]];
        }
        return hex;
    }
    function numberToHexUnpadded(num) {
        const hex = num.toString(16);
        return hex.length & 1 ? `0${hex}` : hex;
    }
    function hexToNumber(hex) {
        if (typeof hex !== 'string')
            throw new Error('hex string expected, got ' + typeof hex);
        // Big Endian
        return BigInt(hex === '' ? '0' : `0x${hex}`);
    }
    // We use optimized technique to convert hex string to byte array
    const asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 };
    function asciiToBase16(char) {
        if (char >= asciis._0 && char <= asciis._9)
            return char - asciis._0;
        if (char >= asciis._A && char <= asciis._F)
            return char - (asciis._A - 10);
        if (char >= asciis._a && char <= asciis._f)
            return char - (asciis._a - 10);
        return;
    }
    /**
     * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])
     */
    function hexToBytes$1(hex) {
        if (typeof hex !== 'string')
            throw new Error('hex string expected, got ' + typeof hex);
        const hl = hex.length;
        const al = hl / 2;
        if (hl % 2)
            throw new Error('padded hex string expected, got unpadded hex of length ' + hl);
        const array = new Uint8Array(al);
        for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {
            const n1 = asciiToBase16(hex.charCodeAt(hi));
            const n2 = asciiToBase16(hex.charCodeAt(hi + 1));
            if (n1 === undefined || n2 === undefined) {
                const char = hex[hi] + hex[hi + 1];
                throw new Error('hex string expected, got non-hex character "' + char + '" at index ' + hi);
            }
            array[ai] = n1 * 16 + n2;
        }
        return array;
    }
    // BE: Big Endian, LE: Little Endian
    function bytesToNumberBE(bytes) {
        return hexToNumber(bytesToHex(bytes));
    }
    function bytesToNumberLE(bytes) {
        if (!isBytes$2(bytes))
            throw new Error('Uint8Array expected');
        return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));
    }
    function numberToBytesBE(n, len) {
        return hexToBytes$1(n.toString(16).padStart(len * 2, '0'));
    }
    function numberToBytesLE(n, len) {
        return numberToBytesBE(n, len).reverse();
    }
    // Unpadded, rarely used
    function numberToVarBytesBE(n) {
        return hexToBytes$1(numberToHexUnpadded(n));
    }
    /**
     * Takes hex string or Uint8Array, converts to Uint8Array.
     * Validates output length.
     * Will throw error for other types.
     * @param title descriptive title for an error e.g. 'private key'
     * @param hex hex string or Uint8Array
     * @param expectedLength optional, will compare to result array's length
     * @returns
     */
    function ensureBytes$1(title, hex, expectedLength) {
        let res;
        if (typeof hex === 'string') {
            try {
                res = hexToBytes$1(hex);
            }
            catch (e) {
                throw new Error(`${title} must be valid hex string, got "${hex}". Cause: ${e}`);
            }
        }
        else if (isBytes$2(hex)) {
            // Uint8Array.from() instead of hash.slice() because node.js Buffer
            // is instance of Uint8Array, and its slice() creates **mutable** copy
            res = Uint8Array.from(hex);
        }
        else {
            throw new Error(`${title} must be hex string or Uint8Array`);
        }
        const len = res.length;
        if (typeof expectedLength === 'number' && len !== expectedLength)
            throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);
        return res;
    }
    /**
     * Copies several Uint8Arrays into one.
     */
    function concatBytes$1(...arrays) {
        let sum = 0;
        for (let i = 0; i < arrays.length; i++) {
            const a = arrays[i];
            if (!isBytes$2(a))
                throw new Error('Uint8Array expected');
            sum += a.length;
        }
        let res = new Uint8Array(sum);
        let pad = 0;
        for (let i = 0; i < arrays.length; i++) {
            const a = arrays[i];
            res.set(a, pad);
            pad += a.length;
        }
        return res;
    }
    // Compares 2 u8a-s in kinda constant time
    function equalBytes(a, b) {
        if (a.length !== b.length)
            return false;
        let diff = 0;
        for (let i = 0; i < a.length; i++)
            diff |= a[i] ^ b[i];
        return diff === 0;
    }
    /**
     * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])
     */
    function utf8ToBytes$1(str) {
        if (typeof str !== 'string')
            throw new Error(`utf8ToBytes expected string, got ${typeof str}`);
        return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809
    }
    // Bit operations
    /**
     * Calculates amount of bits in a bigint.
     * Same as `n.toString(2).length`
     */
    function bitLen(n) {
        let len;
        for (len = 0; n > _0n$4; n >>= _1n$4, len += 1)
            ;
        return len;
    }
    /**
     * Gets single bit at position.
     * NOTE: first bit position is 0 (same as arrays)
     * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`
     */
    function bitGet(n, pos) {
        return (n >> BigInt(pos)) & _1n$4;
    }
    /**
     * Sets single bit at position.
     */
    const bitSet = (n, pos, value) => {
        return n | ((value ? _1n$4 : _0n$4) << BigInt(pos));
    };
    /**
     * Calculate mask for N bits. Not using ** operator with bigints because of old engines.
     * Same as BigInt(`0b${Array(i).fill('1').join('')}`)
     */
    const bitMask = (n) => (_2n$3 << BigInt(n - 1)) - _1n$4;
    // DRBG
    const u8n = (data) => new Uint8Array(data); // creates Uint8Array
    const u8fr = (arr) => Uint8Array.from(arr); // another shortcut
    /**
     * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.
     * @returns function that will call DRBG until 2nd arg returns something meaningful
     * @example
     *   const drbg = createHmacDRBG<Key>(32, 32, hmac);
     *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined
     */
    function createHmacDrbg(hashLen, qByteLen, hmacFn) {
        if (typeof hashLen !== 'number' || hashLen < 2)
            throw new Error('hashLen must be a number');
        if (typeof qByteLen !== 'number' || qByteLen < 2)
            throw new Error('qByteLen must be a number');
        if (typeof hmacFn !== 'function')
            throw new Error('hmacFn must be a function');
        // Step B, Step C: set hashLen to 8*ceil(hlen/8)
        let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.
        let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same
        let i = 0; // Iterations counter, will throw when over 1000
        const reset = () => {
            v.fill(1);
            k.fill(0);
            i = 0;
        };
        const h = (...b) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)
        const reseed = (seed = u8n()) => {
            // HMAC-DRBG reseed() function. Steps D-G
            k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)
            v = h(); // v = hmac(k || v)
            if (seed.length === 0)
                return;
            k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)
            v = h(); // v = hmac(k || v)
        };
        const gen = () => {
            // HMAC-DRBG generate() function
            if (i++ >= 1000)
                throw new Error('drbg: tried 1000 values');
            let len = 0;
            const out = [];
            while (len < qByteLen) {
                v = h();
                const sl = v.slice();
                out.push(sl);
                len += v.length;
            }
            return concatBytes$1(...out);
        };
        const genUntil = (seed, pred) => {
            reset();
            reseed(seed); // Steps D-G
            let res = undefined; // Step H: grind until k is in [1..n-1]
            while (!(res = pred(gen())))
                reseed();
            reset();
            return res;
        };
        return genUntil;
    }
    // Validating curves and fields
    const validatorFns = {
        bigint: (val) => typeof val === 'bigint',
        function: (val) => typeof val === 'function',
        boolean: (val) => typeof val === 'boolean',
        string: (val) => typeof val === 'string',
        stringOrUint8Array: (val) => typeof val === 'string' || isBytes$2(val),
        isSafeInteger: (val) => Number.isSafeInteger(val),
        array: (val) => Array.isArray(val),
        field: (val, object) => object.Fp.isValid(val),
        hash: (val) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),
    };
    // type Record<K extends string | number | symbol, T> = { [P in K]: T; }
    function validateObject(object, validators, optValidators = {}) {
        const checkField = (fieldName, type, isOptional) => {
            const checkVal = validatorFns[type];
            if (typeof checkVal !== 'function')
                throw new Error(`Invalid validator "${type}", expected function`);
            const val = object[fieldName];
            if (isOptional && val === undefined)
                return;
            if (!checkVal(val, object)) {
                throw new Error(`Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`);
            }
        };
        for (const [fieldName, type] of Object.entries(validators))
            checkField(fieldName, type, false);
        for (const [fieldName, type] of Object.entries(optValidators))
            checkField(fieldName, type, true);
        return object;
    }
    // validate type tests
    // const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };
    // const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!
    // // Should fail type-check
    // const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });
    // const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });
    // const z3 = validateObject(o, { test: 'boolean', z: 'bug' });
    // const z4 = validateObject(o, { a: 'boolean', z: 'bug' });

    var ut = /*#__PURE__*/Object.freeze({
        __proto__: null,
        isBytes: isBytes$2,
        bytesToHex: bytesToHex,
        numberToHexUnpadded: numberToHexUnpadded,
        hexToNumber: hexToNumber,
        hexToBytes: hexToBytes$1,
        bytesToNumberBE: bytesToNumberBE,
        bytesToNumberLE: bytesToNumberLE,
        numberToBytesBE: numberToBytesBE,
        numberToBytesLE: numberToBytesLE,
        numberToVarBytesBE: numberToVarBytesBE,
        ensureBytes: ensureBytes$1,
        concatBytes: concatBytes$1,
        equalBytes: equalBytes,
        utf8ToBytes: utf8ToBytes$1,
        bitLen: bitLen,
        bitGet: bitGet,
        bitSet: bitSet,
        bitMask: bitMask,
        createHmacDrbg: createHmacDrbg,
        validateObject: validateObject
    });

    function number(n) {
        if (!Number.isSafeInteger(n) || n < 0)
            throw new Error(`Wrong positive integer: ${n}`);
    }
    // copied from utils
    function isBytes$1(a) {
        return (a instanceof Uint8Array ||
            (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));
    }
    function bytes(b, ...lengths) {
        if (!isBytes$1(b))
            throw new Error('Expected Uint8Array');
        if (lengths.length > 0 && !lengths.includes(b.length))
            throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);
    }
    function hash(hash) {
        if (typeof hash !== 'function' || typeof hash.create !== 'function')
            throw new Error('Hash should be wrapped by utils.wrapConstructor');
        number(hash.outputLen);
        number(hash.blockLen);
    }
    function exists(instance, checkFinished = true) {
        if (instance.destroyed)
            throw new Error('Hash instance has been destroyed');
        if (checkFinished && instance.finished)
            throw new Error('Hash#digest() has already been called');
    }
    function output(out, instance) {
        bytes(out);
        const min = instance.outputLen;
        if (out.length < min) {
            throw new Error(`digestInto() expects output buffer of length at least ${min}`);
        }
    }

    const U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);
    const _32n = /* @__PURE__ */ BigInt(32);
    // We are not using BigUint64Array, because they are extremely slow as per 2022
    function fromBig(n, le = false) {
        if (le)
            return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };
        return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };
    }
    function split(lst, le = false) {
        let Ah = new Uint32Array(lst.length);
        let Al = new Uint32Array(lst.length);
        for (let i = 0; i < lst.length; i++) {
            const { h, l } = fromBig(lst[i], le);
            [Ah[i], Al[i]] = [h, l];
        }
        return [Ah, Al];
    }
    // Left rotate for Shift in [1, 32)
    const rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));
    const rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));
    // Left rotate for Shift in (32, 64), NOTE: 32 is special case.
    const rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));
    const rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));

    const crypto = typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;

    /*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */
    const u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
    function isBytes(a) {
        return (a instanceof Uint8Array ||
            (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array'));
    }
    // Cast array to view
    const createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
    // The rotate right (circular right shift) operation for uint32
    const rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);
    // big-endian hardware is rare. Just in case someone still decides to run hashes:
    // early-throw an error because we don't support BE yet.
    // Other libraries would silently corrupt the data instead of throwing an error,
    // when they don't support it.
    const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;
    if (!isLE)
        throw new Error('Non little-endian hardware is not supported');
    /**
     * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])
     */
    function utf8ToBytes(str) {
        if (typeof str !== 'string')
            throw new Error(`utf8ToBytes expected string, got ${typeof str}`);
        return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809
    }
    /**
     * Normalizes (non-hex) string or Uint8Array to Uint8Array.
     * Warning: when Uint8Array is passed, it would NOT get copied.
     * Keep in mind for future mutable operations.
     */
    function toBytes(data) {
        if (typeof data === 'string')
            data = utf8ToBytes(data);
        if (!isBytes(data))
            throw new Error(`expected Uint8Array, got ${typeof data}`);
        return data;
    }
    /**
     * Copies several Uint8Arrays into one.
     */
    function concatBytes(...arrays) {
        let sum = 0;
        for (let i = 0; i < arrays.length; i++) {
            const a = arrays[i];
            if (!isBytes(a))
                throw new Error('Uint8Array expected');
            sum += a.length;
        }
        const res = new Uint8Array(sum);
        for (let i = 0, pad = 0; i < arrays.length; i++) {
            const a = arrays[i];
            res.set(a, pad);
            pad += a.length;
        }
        return res;
    }
    // For runtime check if class implements interface
    class Hash {
        // Safe version that clones internal state
        clone() {
            return this._cloneInto();
        }
    }
    function wrapConstructor(hashCons) {
        const hashC = (msg) => hashCons().update(toBytes(msg)).digest();
        const tmp = hashCons();
        hashC.outputLen = tmp.outputLen;
        hashC.blockLen = tmp.blockLen;
        hashC.create = () => hashCons();
        return hashC;
    }
    /**
     * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.
     */
    function randomBytes(bytesLength = 32) {
        if (crypto && typeof crypto.getRandomValues === 'function') {
            return crypto.getRandomValues(new Uint8Array(bytesLength));
        }
        throw new Error('crypto.getRandomValues must be defined');
    }

    // SHA3 (keccak) is based on a new design: basically, the internal state is bigger than output size.
    // It's called a sponge function.
    // Various per round constants calculations
    const [SHA3_PI, SHA3_ROTL, _SHA3_IOTA] = [[], [], []];
    const _0n$3 = /* @__PURE__ */ BigInt(0);
    const _1n$3 = /* @__PURE__ */ BigInt(1);
    const _2n$2 = /* @__PURE__ */ BigInt(2);
    const _7n = /* @__PURE__ */ BigInt(7);
    const _256n = /* @__PURE__ */ BigInt(256);
    const _0x71n = /* @__PURE__ */ BigInt(0x71);
    for (let round = 0, R = _1n$3, x = 1, y = 0; round < 24; round++) {
        // Pi
        [x, y] = [y, (2 * x + 3 * y) % 5];
        SHA3_PI.push(2 * (5 * y + x));
        // Rotational
        SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);
        // Iota
        let t = _0n$3;
        for (let j = 0; j < 7; j++) {
            R = ((R << _1n$3) ^ ((R >> _7n) * _0x71n)) % _256n;
            if (R & _2n$2)
                t ^= _1n$3 << ((_1n$3 << /* @__PURE__ */ BigInt(j)) - _1n$3);
        }
        _SHA3_IOTA.push(t);
    }
    const [SHA3_IOTA_H, SHA3_IOTA_L] = /* @__PURE__ */ split(_SHA3_IOTA, true);
    // Left rotation (without 0, 32, 64)
    const rotlH = (h, l, s) => (s > 32 ? rotlBH(h, l, s) : rotlSH(h, l, s));
    const rotlL = (h, l, s) => (s > 32 ? rotlBL(h, l, s) : rotlSL(h, l, s));
    // Same as keccakf1600, but allows to skip some rounds
    function keccakP(s, rounds = 24) {
        const B = new Uint32Array(5 * 2);
        // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)
        for (let round = 24 - rounds; round < 24; round++) {
            // Theta θ
            for (let x = 0; x < 10; x++)
                B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];
            for (let x = 0; x < 10; x += 2) {
                const idx1 = (x + 8) % 10;
                const idx0 = (x + 2) % 10;
                const B0 = B[idx0];
                const B1 = B[idx0 + 1];
                const Th = rotlH(B0, B1, 1) ^ B[idx1];
                const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];
                for (let y = 0; y < 50; y += 10) {
                    s[x + y] ^= Th;
                    s[x + y + 1] ^= Tl;
                }
            }
            // Rho (ρ) and Pi (π)
            let curH = s[2];
            let curL = s[3];
            for (let t = 0; t < 24; t++) {
                const shift = SHA3_ROTL[t];
                const Th = rotlH(curH, curL, shift);
                const Tl = rotlL(curH, curL, shift);
                const PI = SHA3_PI[t];
                curH = s[PI];
                curL = s[PI + 1];
                s[PI] = Th;
                s[PI + 1] = Tl;
            }
            // Chi (χ)
            for (let y = 0; y < 50; y += 10) {
                for (let x = 0; x < 10; x++)
                    B[x] = s[y + x];
                for (let x = 0; x < 10; x++)
                    s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];
            }
            // Iota (ι)
            s[0] ^= SHA3_IOTA_H[round];
            s[1] ^= SHA3_IOTA_L[round];
        }
        B.fill(0);
    }
    class Keccak extends Hash {
        // NOTE: we accept arguments in bytes instead of bits here.
        constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {
            super();
            this.blockLen = blockLen;
            this.suffix = suffix;
            this.outputLen = outputLen;
            this.enableXOF = enableXOF;
            this.rounds = rounds;
            this.pos = 0;
            this.posOut = 0;
            this.finished = false;
            this.destroyed = false;
            // Can be passed from user as dkLen
            number(outputLen);
            // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes
            if (0 >= this.blockLen || this.blockLen >= 200)
                throw new Error('Sha3 supports only keccak-f1600 function');
            this.state = new Uint8Array(200);
            this.state32 = u32(this.state);
        }
        keccak() {
            keccakP(this.state32, this.rounds);
            this.posOut = 0;
            this.pos = 0;
        }
        update(data) {
            exists(this);
            const { blockLen, state } = this;
            data = toBytes(data);
            const len = data.length;
            for (let pos = 0; pos < len;) {
                const take = Math.min(blockLen - this.pos, len - pos);
                for (let i = 0; i < take; i++)
                    state[this.pos++] ^= data[pos++];
                if (this.pos === blockLen)
                    this.keccak();
            }
            return this;
        }
        finish() {
            if (this.finished)
                return;
            this.finished = true;
            const { state, suffix, pos, blockLen } = this;
            // Do the padding
            state[pos] ^= suffix;
            if ((suffix & 0x80) !== 0 && pos === blockLen - 1)
                this.keccak();
            state[blockLen - 1] ^= 0x80;
            this.keccak();
        }
        writeInto(out) {
            exists(this, false);
            bytes(out);
            this.finish();
            const bufferOut = this.state;
            const { blockLen } = this;
            for (let pos = 0, len = out.length; pos < len;) {
                if (this.posOut >= blockLen)
                    this.keccak();
                const take = Math.min(blockLen - this.posOut, len - pos);
                out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);
                this.posOut += take;
                pos += take;
            }
            return out;
        }
        xofInto(out) {
            // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF
            if (!this.enableXOF)
                throw new Error('XOF is not possible for this instance');
            return this.writeInto(out);
        }
        xof(bytes) {
            number(bytes);
            return this.xofInto(new Uint8Array(bytes));
        }
        digestInto(out) {
            output(out, this);
            if (this.finished)
                throw new Error('digest() was already called');
            this.writeInto(out);
            this.destroy();
            return out;
        }
        digest() {
            return this.digestInto(new Uint8Array(this.outputLen));
        }
        destroy() {
            this.destroyed = true;
            this.state.fill(0);
        }
        _cloneInto(to) {
            const { blockLen, suffix, outputLen, rounds, enableXOF } = this;
            to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));
            to.state32.set(this.state32);
            to.pos = this.pos;
            to.posOut = this.posOut;
            to.finished = this.finished;
            to.rounds = rounds;
            // Suffix can change in cSHAKE
            to.suffix = suffix;
            to.outputLen = outputLen;
            to.enableXOF = enableXOF;
            to.destroyed = this.destroyed;
            return to;
        }
    }
    const gen = (suffix, blockLen, outputLen) => wrapConstructor(() => new Keccak(blockLen, suffix, outputLen));
    /**
     * keccak-256 hash function. Different from SHA3-256.
     * @param message - that would be hashed
     */
    const keccak_256 = /* @__PURE__ */ gen(0x01, 136, 256 / 8);

    // Polyfill for Safari 14
    function setBigUint64(view, byteOffset, value, isLE) {
        if (typeof view.setBigUint64 === 'function')
            return view.setBigUint64(byteOffset, value, isLE);
        const _32n = BigInt(32);
        const _u32_max = BigInt(0xffffffff);
        const wh = Number((value >> _32n) & _u32_max);
        const wl = Number(value & _u32_max);
        const h = isLE ? 4 : 0;
        const l = isLE ? 0 : 4;
        view.setUint32(byteOffset + h, wh, isLE);
        view.setUint32(byteOffset + l, wl, isLE);
    }
    // Base SHA2 class (RFC 6234)
    class SHA2 extends Hash {
        constructor(blockLen, outputLen, padOffset, isLE) {
            super();
            this.blockLen = blockLen;
            this.outputLen = outputLen;
            this.padOffset = padOffset;
            this.isLE = isLE;
            this.finished = false;
            this.length = 0;
            this.pos = 0;
            this.destroyed = false;
            this.buffer = new Uint8Array(blockLen);
            this.view = createView(this.buffer);
        }
        update(data) {
            exists(this);
            const { view, buffer, blockLen } = this;
            data = toBytes(data);
            const len = data.length;
            for (let pos = 0; pos < len;) {
                const take = Math.min(blockLen - this.pos, len - pos);
                // Fast path: we have at least one block in input, cast it to view and process
                if (take === blockLen) {
                    const dataView = createView(data);
                    for (; blockLen <= len - pos; pos += blockLen)
                        this.process(dataView, pos);
                    continue;
                }
                buffer.set(data.subarray(pos, pos + take), this.pos);
                this.pos += take;
                pos += take;
                if (this.pos === blockLen) {
                    this.process(view, 0);
                    this.pos = 0;
                }
            }
            this.length += data.length;
            this.roundClean();
            return this;
        }
        digestInto(out) {
            exists(this);
            output(out, this);
            this.finished = true;
            // Padding
            // We can avoid allocation of buffer for padding completely if it
            // was previously not allocated here. But it won't change performance.
            const { buffer, view, blockLen, isLE } = this;
            let { pos } = this;
            // append the bit '1' to the message
            buffer[pos++] = 0b10000000;
            this.buffer.subarray(pos).fill(0);
            // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again
            if (this.padOffset > blockLen - pos) {
                this.process(view, 0);
                pos = 0;
            }
            // Pad until full block byte with zeros
            for (let i = pos; i < blockLen; i++)
                buffer[i] = 0;
            // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that
            // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.
            // So we just write lowest 64 bits of that value.
            setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);
            this.process(view, 0);
            const oview = createView(out);
            const len = this.outputLen;
            // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT
            if (len % 4)
                throw new Error('_sha2: outputLen should be aligned to 32bit');
            const outLen = len / 4;
            const state = this.get();
            if (outLen > state.length)
                throw new Error('_sha2: outputLen bigger than state');
            for (let i = 0; i < outLen; i++)
                oview.setUint32(4 * i, state[i], isLE);
        }
        digest() {
            const { buffer, outputLen } = this;
            this.digestInto(buffer);
            const res = buffer.slice(0, outputLen);
            this.destroy();
            return res;
        }
        _cloneInto(to) {
            to || (to = new this.constructor());
            to.set(...this.get());
            const { blockLen, buffer, length, finished, destroyed, pos } = this;
            to.length = length;
            to.pos = pos;
            to.finished = finished;
            to.destroyed = destroyed;
            if (length % blockLen)
                to.buffer.set(buffer);
            return to;
        }
    }

    // SHA2-256 need to try 2^128 hashes to execute birthday attack.
    // BTC network is doing 2^67 hashes/sec as per early 2023.
    // Choice: a ? b : c
    const Chi = (a, b, c) => (a & b) ^ (~a & c);
    // Majority function, true if any two inpust is true
    const Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);
    // Round constants:
    // first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)
    // prettier-ignore
    const SHA256_K = /* @__PURE__ */ new Uint32Array([
        0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
        0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
        0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
        0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
        0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
        0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
        0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
        0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
    ]);
    // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):
    // prettier-ignore
    const IV = /* @__PURE__ */ new Uint32Array([
        0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
    ]);
    // Temporary buffer, not used to store anything between runs
    // Named this way because it matches specification.
    const SHA256_W = /* @__PURE__ */ new Uint32Array(64);
    class SHA256 extends SHA2 {
        constructor() {
            super(64, 32, 8, false);
            // We cannot use array here since array allows indexing by variable
            // which means optimizer/compiler cannot use registers.
            this.A = IV[0] | 0;
            this.B = IV[1] | 0;
            this.C = IV[2] | 0;
            this.D = IV[3] | 0;
            this.E = IV[4] | 0;
            this.F = IV[5] | 0;
            this.G = IV[6] | 0;
            this.H = IV[7] | 0;
        }
        get() {
            const { A, B, C, D, E, F, G, H } = this;
            return [A, B, C, D, E, F, G, H];
        }
        // prettier-ignore
        set(A, B, C, D, E, F, G, H) {
            this.A = A | 0;
            this.B = B | 0;
            this.C = C | 0;
            this.D = D | 0;
            this.E = E | 0;
            this.F = F | 0;
            this.G = G | 0;
            this.H = H | 0;
        }
        process(view, offset) {
            // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array
            for (let i = 0; i < 16; i++, offset += 4)
                SHA256_W[i] = view.getUint32(offset, false);
            for (let i = 16; i < 64; i++) {
                const W15 = SHA256_W[i - 15];
                const W2 = SHA256_W[i - 2];
                const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);
                const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);
                SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;
            }
            // Compression function main loop, 64 rounds
            let { A, B, C, D, E, F, G, H } = this;
            for (let i = 0; i < 64; i++) {
                const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);
                const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;
                const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);
                const T2 = (sigma0 + Maj(A, B, C)) | 0;
                H = G;
                G = F;
                F = E;
                E = (D + T1) | 0;
                D = C;
                C = B;
                B = A;
                A = (T1 + T2) | 0;
            }
            // Add the compressed chunk to the current hash value
            A = (A + this.A) | 0;
            B = (B + this.B) | 0;
            C = (C + this.C) | 0;
            D = (D + this.D) | 0;
            E = (E + this.E) | 0;
            F = (F + this.F) | 0;
            G = (G + this.G) | 0;
            H = (H + this.H) | 0;
            this.set(A, B, C, D, E, F, G, H);
        }
        roundClean() {
            SHA256_W.fill(0);
        }
        destroy() {
            this.set(0, 0, 0, 0, 0, 0, 0, 0);
            this.buffer.fill(0);
        }
    }
    /**
     * SHA2-256 hash function
     * @param message - data that would be hashed
     */
    const sha256 = /* @__PURE__ */ wrapConstructor(() => new SHA256());

    /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
    // prettier-ignore
    const _0n$2 = BigInt(0), _1n$2 = BigInt(1), _2n$1 = BigInt(2), _3n$1 = BigInt(3);
    // prettier-ignore
    const _4n$1 = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);
    // prettier-ignore
    BigInt(9); BigInt(16);
    // Calculates a modulo b
    function mod(a, b) {
        const result = a % b;
        return result >= _0n$2 ? result : b + result;
    }
    /**
     * Efficiently raise num to power and do modular division.
     * Unsafe in some contexts: uses ladder, so can expose bigint bits.
     * @example
     * pow(2n, 6n, 11n) // 64n % 11n == 9n
     */
    // TODO: use field version && remove
    function pow(num, power, modulo) {
        if (modulo <= _0n$2 || power < _0n$2)
            throw new Error('Expected power/modulo > 0');
        if (modulo === _1n$2)
            return _0n$2;
        let res = _1n$2;
        while (power > _0n$2) {
            if (power & _1n$2)
                res = (res * num) % modulo;
            num = (num * num) % modulo;
            power >>= _1n$2;
        }
        return res;
    }
    // Inverses number over modulo
    function invert(number, modulo) {
        if (number === _0n$2 || modulo <= _0n$2) {
            throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);
        }
        // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/
        // Fermat's little theorem "CT-like" version inv(n) = n^(m-2) mod m is 30x slower.
        let a = mod(number, modulo);
        let b = modulo;
        // prettier-ignore
        let x = _0n$2, u = _1n$2;
        while (a !== _0n$2) {
            // JIT applies optimization if those two lines follow each other
            const q = b / a;
            const r = b % a;
            const m = x - u * q;
            // prettier-ignore
            b = a, a = r, x = u, u = m;
        }
        const gcd = b;
        if (gcd !== _1n$2)
            throw new Error('invert: does not exist');
        return mod(x, modulo);
    }
    /**
     * Tonelli-Shanks square root search algorithm.
     * 1. https://eprint.iacr.org/2012/685.pdf (page 12)
     * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks
     * Will start an infinite loop if field order P is not prime.
     * @param P field order
     * @returns function that takes field Fp (created from P) and number n
     */
    function tonelliShanks(P) {
        // Legendre constant: used to calculate Legendre symbol (a | p),
        // which denotes the value of a^((p-1)/2) (mod p).
        // (a | p) ≡ 1    if a is a square (mod p)
        // (a | p) ≡ -1   if a is not a square (mod p)
        // (a | p) ≡ 0    if a ≡ 0 (mod p)
        const legendreC = (P - _1n$2) / _2n$1;
        let Q, S, Z;
        // Step 1: By factoring out powers of 2 from p - 1,
        // find q and s such that p - 1 = q*(2^s) with q odd
        for (Q = P - _1n$2, S = 0; Q % _2n$1 === _0n$2; Q /= _2n$1, S++)
            ;
        // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq
        for (Z = _2n$1; Z < P && pow(Z, legendreC, P) !== P - _1n$2; Z++)
            ;
        // Fast-path
        if (S === 1) {
            const p1div4 = (P + _1n$2) / _4n$1;
            return function tonelliFast(Fp, n) {
                const root = Fp.pow(n, p1div4);
                if (!Fp.eql(Fp.sqr(root), n))
                    throw new Error('Cannot find square root');
                return root;
            };
        }
        // Slow-path
        const Q1div2 = (Q + _1n$2) / _2n$1;
        return function tonelliSlow(Fp, n) {
            // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1
            if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE))
                throw new Error('Cannot find square root');
            let r = S;
            // TODO: will fail at Fp2/etc
            let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b
            let x = Fp.pow(n, Q1div2); // first guess at the square root
            let b = Fp.pow(n, Q); // first guess at the fudge factor
            while (!Fp.eql(b, Fp.ONE)) {
                if (Fp.eql(b, Fp.ZERO))
                    return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)
                // Find m such b^(2^m)==1
                let m = 1;
                for (let t2 = Fp.sqr(b); m < r; m++) {
                    if (Fp.eql(t2, Fp.ONE))
                        break;
                    t2 = Fp.sqr(t2); // t2 *= t2
                }
                // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow
                const ge = Fp.pow(g, _1n$2 << BigInt(r - m - 1)); // ge = 2^(r-m-1)
                g = Fp.sqr(ge); // g = ge * ge
                x = Fp.mul(x, ge); // x *= ge
                b = Fp.mul(b, g); // b *= g
                r = m;
            }
            return x;
        };
    }
    function FpSqrt(P) {
        // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.
        // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).
        // P ≡ 3 (mod 4)
        // √n = n^((P+1)/4)
        if (P % _4n$1 === _3n$1) {
            // Not all roots possible!
            // const ORDER =
            //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;
            // const NUM = 72057594037927816n;
            const p1div4 = (P + _1n$2) / _4n$1;
            return function sqrt3mod4(Fp, n) {
                const root = Fp.pow(n, p1div4);
                // Throw if root**2 != n
                if (!Fp.eql(Fp.sqr(root), n))
                    throw new Error('Cannot find square root');
                return root;
            };
        }
        // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)
        if (P % _8n === _5n) {
            const c1 = (P - _5n) / _8n;
            return function sqrt5mod8(Fp, n) {
                const n2 = Fp.mul(n, _2n$1);
                const v = Fp.pow(n2, c1);
                const nv = Fp.mul(n, v);
                const i = Fp.mul(Fp.mul(nv, _2n$1), v);
                const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));
                if (!Fp.eql(Fp.sqr(root), n))
                    throw new Error('Cannot find square root');
                return root;
            };
        }
        // Other cases: Tonelli-Shanks algorithm
        return tonelliShanks(P);
    }
    // prettier-ignore
    const FIELD_FIELDS = [
        'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',
        'eql', 'add', 'sub', 'mul', 'pow', 'div',
        'addN', 'subN', 'mulN', 'sqrN'
    ];
    function validateField(field) {
        const initial = {
            ORDER: 'bigint',
            MASK: 'bigint',
            BYTES: 'isSafeInteger',
            BITS: 'isSafeInteger',
        };
        const opts = FIELD_FIELDS.reduce((map, val) => {
            map[val] = 'function';
            return map;
        }, initial);
        return validateObject(field, opts);
    }
    // Generic field functions
    /**
     * Same as `pow` but for Fp: non-constant-time.
     * Unsafe in some contexts: uses ladder, so can expose bigint bits.
     */
    function FpPow(f, num, power) {
        // Should have same speed as pow for bigints
        // TODO: benchmark!
        if (power < _0n$2)
            throw new Error('Expected power > 0');
        if (power === _0n$2)
            return f.ONE;
        if (power === _1n$2)
            return num;
        let p = f.ONE;
        let d = num;
        while (power > _0n$2) {
            if (power & _1n$2)
                p = f.mul(p, d);
            d = f.sqr(d);
            power >>= _1n$2;
        }
        return p;
    }
    /**
     * Efficiently invert an array of Field elements.
     * `inv(0)` will return `undefined` here: make sure to throw an error.
     */
    function FpInvertBatch(f, nums) {
        const tmp = new Array(nums.length);
        // Walk from first to last, multiply them by each other MOD p
        const lastMultiplied = nums.reduce((acc, num, i) => {
            if (f.is0(num))
                return acc;
            tmp[i] = acc;
            return f.mul(acc, num);
        }, f.ONE);
        // Invert last element
        const inverted = f.inv(lastMultiplied);
        // Walk from last to first, multiply them by inverted each other MOD p
        nums.reduceRight((acc, num, i) => {
            if (f.is0(num))
                return acc;
            tmp[i] = f.mul(acc, tmp[i]);
            return f.mul(acc, num);
        }, inverted);
        return tmp;
    }
    // CURVE.n lengths
    function nLength(n, nBitLength) {
        // Bit size, byte size of CURVE.n
        const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;
        const nByteLength = Math.ceil(_nBitLength / 8);
        return { nBitLength: _nBitLength, nByteLength };
    }
    /**
     * Initializes a finite field over prime. **Non-primes are not supported.**
     * Do not init in loop: slow. Very fragile: always run a benchmark on a change.
     * Major performance optimizations:
     * * a) denormalized operations like mulN instead of mul
     * * b) same object shape: never add or remove keys
     * * c) Object.freeze
     * @param ORDER prime positive bigint
     * @param bitLen how many bits the field consumes
     * @param isLE (def: false) if encoding / decoding should be in little-endian
     * @param redef optional faster redefinitions of sqrt and other methods
     */
    function Field(ORDER, bitLen, isLE = false, redef = {}) {
        if (ORDER <= _0n$2)
            throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);
        const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);
        if (BYTES > 2048)
            throw new Error('Field lengths over 2048 bytes are not supported');
        const sqrtP = FpSqrt(ORDER);
        const f = Object.freeze({
            ORDER,
            BITS,
            BYTES,
            MASK: bitMask(BITS),
            ZERO: _0n$2,
            ONE: _1n$2,
            create: (num) => mod(num, ORDER),
            isValid: (num) => {
                if (typeof num !== 'bigint')
                    throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);
                return _0n$2 <= num && num < ORDER; // 0 is valid element, but it's not invertible
            },
            is0: (num) => num === _0n$2,
            isOdd: (num) => (num & _1n$2) === _1n$2,
            neg: (num) => mod(-num, ORDER),
            eql: (lhs, rhs) => lhs === rhs,
            sqr: (num) => mod(num * num, ORDER),
            add: (lhs, rhs) => mod(lhs + rhs, ORDER),
            sub: (lhs, rhs) => mod(lhs - rhs, ORDER),
            mul: (lhs, rhs) => mod(lhs * rhs, ORDER),
            pow: (num, power) => FpPow(f, num, power),
            div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),
            // Same as above, but doesn't normalize
            sqrN: (num) => num * num,
            addN: (lhs, rhs) => lhs + rhs,
            subN: (lhs, rhs) => lhs - rhs,
            mulN: (lhs, rhs) => lhs * rhs,
            inv: (num) => invert(num, ORDER),
            sqrt: redef.sqrt || ((n) => sqrtP(f, n)),
            invertBatch: (lst) => FpInvertBatch(f, lst),
            // TODO: do we really need constant cmov?
            // We don't have const-time bigints anyway, so probably will be not very useful
            cmov: (a, b, c) => (c ? b : a),
            toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),
            fromBytes: (bytes) => {
                if (bytes.length !== BYTES)
                    throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);
                return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);
            },
        });
        return Object.freeze(f);
    }
    /**
     * Returns total number of bytes consumed by the field element.
     * For example, 32 bytes for usual 256-bit weierstrass curve.
     * @param fieldOrder number of field elements, usually CURVE.n
     * @returns byte length of field
     */
    function getFieldBytesLength(fieldOrder) {
        if (typeof fieldOrder !== 'bigint')
            throw new Error('field order must be bigint');
        const bitLength = fieldOrder.toString(2).length;
        return Math.ceil(bitLength / 8);
    }
    /**
     * Returns minimal amount of bytes that can be safely reduced
     * by field order.
     * Should be 2^-128 for 128-bit curve such as P256.
     * @param fieldOrder number of field elements, usually CURVE.n
     * @returns byte length of target hash
     */
    function getMinHashLength(fieldOrder) {
        const length = getFieldBytesLength(fieldOrder);
        return length + Math.ceil(length / 2);
    }
    /**
     * "Constant-time" private key generation utility.
     * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF
     * and convert them into private scalar, with the modulo bias being negligible.
     * Needs at least 48 bytes of input for 32-byte private key.
     * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/
     * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final
     * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5
     * @param hash hash output from SHA3 or a similar function
     * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)
     * @param isLE interpret hash bytes as LE num
     * @returns valid private scalar
     */
    function mapHashToField(key, fieldOrder, isLE = false) {
        const len = key.length;
        const fieldLen = getFieldBytesLength(fieldOrder);
        const minLen = getMinHashLength(fieldOrder);
        // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.
        if (len < 16 || len < minLen || len > 1024)
            throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);
        const num = isLE ? bytesToNumberBE(key) : bytesToNumberLE(key);
        // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0
        const reduced = mod(num, fieldOrder - _1n$2) + _1n$2;
        return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);
    }

    /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
    function validateOpts$1(opts) {
        const { Fp, mds, reversePartialPowIdx: rev, roundConstants: rc } = opts;
        const { roundsFull, roundsPartial, sboxPower, t } = opts;
        validateField(Fp);
        for (const i of ['t', 'roundsFull', 'roundsPartial']) {
            if (typeof opts[i] !== 'number' || !Number.isSafeInteger(opts[i]))
                throw new Error(`Poseidon: invalid param ${i}=${opts[i]} (${typeof opts[i]})`);
        }
        // MDS is TxT matrix
        if (!Array.isArray(mds) || mds.length !== t)
            throw new Error('Poseidon: wrong MDS matrix');
        const _mds = mds.map((mdsRow) => {
            if (!Array.isArray(mdsRow) || mdsRow.length !== t)
                throw new Error(`Poseidon MDS matrix row: ${mdsRow}`);
            return mdsRow.map((i) => {
                if (typeof i !== 'bigint')
                    throw new Error(`Poseidon MDS matrix value=${i}`);
                return Fp.create(i);
            });
        });
        if (rev !== undefined && typeof rev !== 'boolean')
            throw new Error(`Poseidon: invalid param reversePartialPowIdx=${rev}`);
        if (roundsFull % 2 !== 0)
            throw new Error(`Poseidon roundsFull is not even: ${roundsFull}`);
        const rounds = roundsFull + roundsPartial;
        if (!Array.isArray(rc) || rc.length !== rounds)
            throw new Error('Poseidon: wrong round constants');
        const roundConstants = rc.map((rc) => {
            if (!Array.isArray(rc) || rc.length !== t)
                throw new Error(`Poseidon wrong round constants: ${rc}`);
            return rc.map((i) => {
                if (typeof i !== 'bigint' || !Fp.isValid(i))
                    throw new Error(`Poseidon wrong round constant=${i}`);
                return Fp.create(i);
            });
        });
        if (!sboxPower || ![3, 5, 7].includes(sboxPower))
            throw new Error(`Poseidon wrong sboxPower=${sboxPower}`);
        const _sboxPower = BigInt(sboxPower);
        let sboxFn = (n) => FpPow(Fp, n, _sboxPower);
        // Unwrapped sbox power for common cases (195->142μs)
        if (sboxPower === 3)
            sboxFn = (n) => Fp.mul(Fp.sqrN(n), n);
        else if (sboxPower === 5)
            sboxFn = (n) => Fp.mul(Fp.sqrN(Fp.sqrN(n)), n);
        return Object.freeze({ ...opts, rounds, sboxFn, roundConstants, mds: _mds });
    }
    function splitConstants(rc, t) {
        if (typeof t !== 'number')
            throw new Error('poseidonSplitConstants: wrong t');
        if (!Array.isArray(rc) || rc.length % t)
            throw new Error('poseidonSplitConstants: wrong rc');
        const res = [];
        let tmp = [];
        for (let i = 0; i < rc.length; i++) {
            tmp.push(rc[i]);
            if (tmp.length === t) {
                res.push(tmp);
                tmp = [];
            }
        }
        return res;
    }
    function poseidon(opts) {
        const _opts = validateOpts$1(opts);
        const { Fp, mds, roundConstants, rounds, roundsPartial, sboxFn, t } = _opts;
        const halfRoundsFull = _opts.roundsFull / 2;
        const partialIdx = _opts.reversePartialPowIdx ? t - 1 : 0;
        const poseidonRound = (values, isFull, idx) => {
            values = values.map((i, j) => Fp.add(i, roundConstants[idx][j]));
            if (isFull)
                values = values.map((i) => sboxFn(i));
            else
                values[partialIdx] = sboxFn(values[partialIdx]);
            // Matrix multiplication
            values = mds.map((i) => i.reduce((acc, i, j) => Fp.add(acc, Fp.mulN(i, values[j])), Fp.ZERO));
            return values;
        };
        const poseidonHash = function poseidonHash(values) {
            if (!Array.isArray(values) || values.length !== t)
                throw new Error(`Poseidon: wrong values (expected array of bigints with length ${t})`);
            values = values.map((i) => {
                if (typeof i !== 'bigint')
                    throw new Error(`Poseidon: wrong value=${i} (${typeof i})`);
                return Fp.create(i);
            });
            let round = 0;
            // Apply r_f/2 full rounds.
            for (let i = 0; i < halfRoundsFull; i++)
                values = poseidonRound(values, true, round++);
            // Apply r_p partial rounds.
            for (let i = 0; i < roundsPartial; i++)
                values = poseidonRound(values, false, round++);
            // Apply r_f/2 full rounds.
            for (let i = 0; i < halfRoundsFull; i++)
                values = poseidonRound(values, true, round++);
            if (round !== rounds)
                throw new Error(`Poseidon: wrong number of rounds: last round=${round}, total=${rounds}`);
            return values;
        };
        // For verification in tests
        poseidonHash.roundConstants = roundConstants;
        return poseidonHash;
    }

    var poseidon$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        validateOpts: validateOpts$1,
        splitConstants: splitConstants,
        poseidon: poseidon
    });

    /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
    const _0n$1 = BigInt(0);
    const _1n$1 = BigInt(1);
    // Elliptic curve multiplication of Point by scalar. Fragile.
    // Scalars should always be less than curve order: this should be checked inside of a curve itself.
    // Creates precomputation tables for fast multiplication:
    // - private scalar is split by fixed size windows of W bits
    // - every window point is collected from window's table & added to accumulator
    // - since windows are different, same point inside tables won't be accessed more than once per calc
    // - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)
    // - +1 window is neccessary for wNAF
    // - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication
    // TODO: Research returning 2d JS array of windows, instead of a single window. This would allow
    // windows to be in different memory locations
    function wNAF(c, bits) {
        const constTimeNegate = (condition, item) => {
            const neg = item.negate();
            return condition ? neg : item;
        };
        const opts = (W) => {
            const windows = Math.ceil(bits / W) + 1; // +1, because
            const windowSize = 2 ** (W - 1); // -1 because we skip zero
            return { windows, windowSize };
        };
        return {
            constTimeNegate,
            // non-const time multiplication ladder
            unsafeLadder(elm, n) {
                let p = c.ZERO;
                let d = elm;
                while (n > _0n$1) {
                    if (n & _1n$1)
                        p = p.add(d);
                    d = d.double();
                    n >>= _1n$1;
                }
                return p;
            },
            /**
             * Creates a wNAF precomputation window. Used for caching.
             * Default window size is set by `utils.precompute()` and is equal to 8.
             * Number of precomputed points depends on the curve size:
             * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:
             * - 𝑊 is the window size
             * - 𝑛 is the bitlength of the curve order.
             * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.
             * @returns precomputed point tables flattened to a single array
             */
            precomputeWindow(elm, W) {
                const { windows, windowSize } = opts(W);
                const points = [];
                let p = elm;
                let base = p;
                for (let window = 0; window < windows; window++) {
                    base = p;
                    points.push(base);
                    // =1, because we skip zero
                    for (let i = 1; i < windowSize; i++) {
                        base = base.add(p);
                        points.push(base);
                    }
                    p = base.double();
                }
                return points;
            },
            /**
             * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.
             * @param W window size
             * @param precomputes precomputed tables
             * @param n scalar (we don't check here, but should be less than curve order)
             * @returns real and fake (for const-time) points
             */
            wNAF(W, precomputes, n) {
                // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise
                // But need to carefully remove other checks before wNAF. ORDER == bits here
                const { windows, windowSize } = opts(W);
                let p = c.ZERO;
                let f = c.BASE;
                const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.
                const maxNumber = 2 ** W;
                const shiftBy = BigInt(W);
                for (let window = 0; window < windows; window++) {
                    const offset = window * windowSize;
                    // Extract W bits.
                    let wbits = Number(n & mask);
                    // Shift number by W bits.
                    n >>= shiftBy;
                    // If the bits are bigger than max size, we'll split those.
                    // +224 => 256 - 32
                    if (wbits > windowSize) {
                        wbits -= maxNumber;
                        n += _1n$1;
                    }
                    // This code was first written with assumption that 'f' and 'p' will never be infinity point:
                    // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,
                    // there is negate now: it is possible that negated element from low value
                    // would be the same as high element, which will create carry into next window.
                    // It's not obvious how this can fail, but still worth investigating later.
                    // Check if we're onto Zero point.
                    // Add random point inside current window to f.
                    const offset1 = offset;
                    const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero
                    const cond1 = window % 2 !== 0;
                    const cond2 = wbits < 0;
                    if (wbits === 0) {
                        // The most important part for const-time getPublicKey
                        f = f.add(constTimeNegate(cond1, precomputes[offset1]));
                    }
                    else {
                        p = p.add(constTimeNegate(cond2, precomputes[offset2]));
                    }
                }
                // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()
                // Even if the variable is still unused, there are some checks which will
                // throw an exception, so compiler needs to prove they won't happen, which is hard.
                // At this point there is a way to F be infinity-point even if p is not,
                // which makes it less const-time: around 1 bigint multiply.
                return { p, f };
            },
            wNAFCached(P, precomputesMap, n, transform) {
                // @ts-ignore
                const W = P._WINDOW_SIZE || 1;
                // Calculate precomputes on a first run, reuse them after
                let comp = precomputesMap.get(P);
                if (!comp) {
                    comp = this.precomputeWindow(P, W);
                    if (W !== 1) {
                        precomputesMap.set(P, transform(comp));
                    }
                }
                return this.wNAF(W, comp, n);
            },
        };
    }
    function validateBasic(curve) {
        validateField(curve.Fp);
        validateObject(curve, {
            n: 'bigint',
            h: 'bigint',
            Gx: 'field',
            Gy: 'field',
        }, {
            nBitLength: 'isSafeInteger',
            nByteLength: 'isSafeInteger',
        });
        // Set defaults
        return Object.freeze({
            ...nLength(curve.n, curve.nBitLength),
            ...curve,
            ...{ p: curve.Fp.ORDER },
        });
    }

    /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
    function validatePointOpts(curve) {
        const opts = validateBasic(curve);
        validateObject(opts, {
            a: 'field',
            b: 'field',
        }, {
            allowedPrivateKeyLengths: 'array',
            wrapPrivateKey: 'boolean',
            isTorsionFree: 'function',
            clearCofactor: 'function',
            allowInfinityPoint: 'boolean',
            fromBytes: 'function',
            toBytes: 'function',
        });
        const { endo, Fp, a } = opts;
        if (endo) {
            if (!Fp.eql(a, Fp.ZERO)) {
                throw new Error('Endomorphism can only be defined for Koblitz curves that have a=0');
            }
            if (typeof endo !== 'object' ||
                typeof endo.beta !== 'bigint' ||
                typeof endo.splitScalar !== 'function') {
                throw new Error('Expected endomorphism with beta: bigint and splitScalar: function');
            }
        }
        return Object.freeze({ ...opts });
    }
    // ASN.1 DER encoding utilities
    const { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;
    const DER = {
        // asn.1 DER encoding utils
        Err: class DERErr extends Error {
            constructor(m = '') {
                super(m);
            }
        },
        _parseInt(data) {
            const { Err: E } = DER;
            if (data.length < 2 || data[0] !== 0x02)
                throw new E('Invalid signature integer tag');
            const len = data[1];
            const res = data.subarray(2, len + 2);
            if (!len || res.length !== len)
                throw new E('Invalid signature integer: wrong length');
            // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,
            // since we always use positive integers here. It must always be empty:
            // - add zero byte if exists
            // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)
            if (res[0] & 0b10000000)
                throw new E('Invalid signature integer: negative');
            if (res[0] === 0x00 && !(res[1] & 0b10000000))
                throw new E('Invalid signature integer: unnecessary leading zero');
            return { d: b2n(res), l: data.subarray(len + 2) }; // d is data, l is left
        },
        toSig(hex) {
            // parse DER signature
            const { Err: E } = DER;
            const data = typeof hex === 'string' ? h2b(hex) : hex;
            if (!isBytes$2(data))
                throw new Error('ui8a expected');
            let l = data.length;
            if (l < 2 || data[0] != 0x30)
                throw new E('Invalid signature tag');
            if (data[1] !== l - 2)
                throw new E('Invalid signature: incorrect length');
            const { d: r, l: sBytes } = DER._parseInt(data.subarray(2));
            const { d: s, l: rBytesLeft } = DER._parseInt(sBytes);
            if (rBytesLeft.length)
                throw new E('Invalid signature: left bytes after parsing');
            return { r, s };
        },
        hexFromSig(sig) {
            // Add leading zero if first byte has negative bit enabled. More details in '_parseInt'
            const slice = (s) => (Number.parseInt(s[0], 16) & 0b1000 ? '00' + s : s);
            const h = (num) => {
                const hex = num.toString(16);
                return hex.length & 1 ? `0${hex}` : hex;
            };
            const s = slice(h(sig.s));
            const r = slice(h(sig.r));
            const shl = s.length / 2;
            const rhl = r.length / 2;
            const sl = h(shl);
            const rl = h(rhl);
            return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;
        },
    };
    // Be friendly to bad ECMAScript parsers by not using bigint literals
    // prettier-ignore
    const _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);
    function weierstrassPoints(opts) {
        const CURVE = validatePointOpts(opts);
        const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ
        const toBytes = CURVE.toBytes ||
            ((_c, point, _isCompressed) => {
                const a = point.toAffine();
                return concatBytes$1(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));
            });
        const fromBytes = CURVE.fromBytes ||
            ((bytes) => {
                // const head = bytes[0];
                const tail = bytes.subarray(1);
                // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');
                const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));
                const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));
                return { x, y };
            });
        /**
         * y² = x³ + ax + b: Short weierstrass curve formula
         * @returns y²
         */
        function weierstrassEquation(x) {
            const { a, b } = CURVE;
            const x2 = Fp.sqr(x); // x * x
            const x3 = Fp.mul(x2, x); // x2 * x
            return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b
        }
        // Validate whether the passed curve params are valid.
        // We check if curve equation works for generator point.
        // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.
        // ProjectivePoint class has not been initialized yet.
        if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))
            throw new Error('bad generator point: equation left != right');
        // Valid group elements reside in range 1..n-1
        function isWithinCurveOrder(num) {
            return typeof num === 'bigint' && _0n < num && num < CURVE.n;
        }
        function assertGE(num) {
            if (!isWithinCurveOrder(num))
                throw new Error('Expected valid bigint: 0 < bigint < curve.n');
        }
        // Validates if priv key is valid and converts it to bigint.
        // Supports options allowedPrivateKeyLengths and wrapPrivateKey.
        function normPrivateKeyToScalar(key) {
            const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;
            if (lengths && typeof key !== 'bigint') {
                if (isBytes$2(key))
                    key = bytesToHex(key);
                // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes
                if (typeof key !== 'string' || !lengths.includes(key.length))
                    throw new Error('Invalid key');
                key = key.padStart(nByteLength * 2, '0');
            }
            let num;
            try {
                num =
                    typeof key === 'bigint'
                        ? key
                        : bytesToNumberBE(ensureBytes$1('private key', key, nByteLength));
            }
            catch (error) {
                throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);
            }
            if (wrapPrivateKey)
                num = mod(num, n); // disabled by default, enabled for BLS
            assertGE(num); // num in range [1..N-1]
            return num;
        }
        const pointPrecomputes = new Map();
        function assertPrjPoint(other) {
            if (!(other instanceof Point))
                throw new Error('ProjectivePoint expected');
        }
        /**
         * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)
         * Default Point works in 2d / affine coordinates: (x, y)
         * We're doing calculations in projective, because its operations don't require costly inversion.
         */
        class Point {
            constructor(px, py, pz) {
                this.px = px;
                this.py = py;
                this.pz = pz;
                if (px == null || !Fp.isValid(px))
                    throw new Error('x required');
                if (py == null || !Fp.isValid(py))
                    throw new Error('y required');
                if (pz == null || !Fp.isValid(pz))
                    throw new Error('z required');
            }
            // Does not validate if the point is on-curve.
            // Use fromHex instead, or call assertValidity() later.
            static fromAffine(p) {
                const { x, y } = p || {};
                if (!p || !Fp.isValid(x) || !Fp.isValid(y))
                    throw new Error('invalid affine point');
                if (p instanceof Point)
                    throw new Error('projective point not allowed');
                const is0 = (i) => Fp.eql(i, Fp.ZERO);
                // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)
                if (is0(x) && is0(y))
                    return Point.ZERO;
                return new Point(x, y, Fp.ONE);
            }
            get x() {
                return this.toAffine().x;
            }
            get y() {
                return this.toAffine().y;
            }
            /**
             * Takes a bunch of Projective Points but executes only one
             * inversion on all of them. Inversion is very slow operation,
             * so this improves performance massively.
             * Optimization: converts a list of projective points to a list of identical points with Z=1.
             */
            static normalizeZ(points) {
                const toInv = Fp.invertBatch(points.map((p) => p.pz));
                return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);
            }
            /**
             * Converts hash string or Uint8Array to Point.
             * @param hex short/long ECDSA hex
             */
            static fromHex(hex) {
                const P = Point.fromAffine(fromBytes(ensureBytes$1('pointHex', hex)));
                P.assertValidity();
                return P;
            }
            // Multiplies generator point by privateKey.
            static fromPrivateKey(privateKey) {
                return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));
            }
            // "Private method", don't use it directly
            _setWindowSize(windowSize) {
                this._WINDOW_SIZE = windowSize;
                pointPrecomputes.delete(this);
            }
            // A point on curve is valid if it conforms to equation.
            assertValidity() {
                if (this.is0()) {
                    // (0, 1, 0) aka ZERO is invalid in most contexts.
                    // In BLS, ZERO can be serialized, so we allow it.
                    // (0, 0, 0) is wrong representation of ZERO and is always invalid.
                    if (CURVE.allowInfinityPoint && !Fp.is0(this.py))
                        return;
                    throw new Error('bad point: ZERO');
                }
                // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`
                const { x, y } = this.toAffine();
                // Check if x, y are valid field elements
                if (!Fp.isValid(x) || !Fp.isValid(y))
                    throw new Error('bad point: x or y not FE');
                const left = Fp.sqr(y); // y²
                const right = weierstrassEquation(x); // x³ + ax + b
                if (!Fp.eql(left, right))
                    throw new Error('bad point: equation left != right');
                if (!this.isTorsionFree())
                    throw new Error('bad point: not in prime-order subgroup');
            }
            hasEvenY() {
                const { y } = this.toAffine();
                if (Fp.isOdd)
                    return !Fp.isOdd(y);
                throw new Error("Field doesn't support isOdd");
            }
            /**
             * Compare one point to another.
             */
            equals(other) {
                assertPrjPoint(other);
                const { px: X1, py: Y1, pz: Z1 } = this;
                const { px: X2, py: Y2, pz: Z2 } = other;
                const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));
                const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));
                return U1 && U2;
            }
            /**
             * Flips point to one corresponding to (x, -y) in Affine coordinates.
             */
            negate() {
                return new Point(this.px, Fp.neg(this.py), this.pz);
            }
            // Renes-Costello-Batina exception-free doubling formula.
            // There is 30% faster Jacobian formula, but it is not complete.
            // https://eprint.iacr.org/2015/1060, algorithm 3
            // Cost: 8M + 3S + 3*a + 2*b3 + 15add.
            double() {
                const { a, b } = CURVE;
                const b3 = Fp.mul(b, _3n);
                const { px: X1, py: Y1, pz: Z1 } = this;
                let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore
                let t0 = Fp.mul(X1, X1); // step 1
                let t1 = Fp.mul(Y1, Y1);
                let t2 = Fp.mul(Z1, Z1);
                let t3 = Fp.mul(X1, Y1);
                t3 = Fp.add(t3, t3); // step 5
                Z3 = Fp.mul(X1, Z1);
                Z3 = Fp.add(Z3, Z3);
                X3 = Fp.mul(a, Z3);
                Y3 = Fp.mul(b3, t2);
                Y3 = Fp.add(X3, Y3); // step 10
                X3 = Fp.sub(t1, Y3);
                Y3 = Fp.add(t1, Y3);
                Y3 = Fp.mul(X3, Y3);
                X3 = Fp.mul(t3, X3);
                Z3 = Fp.mul(b3, Z3); // step 15
                t2 = Fp.mul(a, t2);
                t3 = Fp.sub(t0, t2);
                t3 = Fp.mul(a, t3);
                t3 = Fp.add(t3, Z3);
                Z3 = Fp.add(t0, t0); // step 20
                t0 = Fp.add(Z3, t0);
                t0 = Fp.add(t0, t2);
                t0 = Fp.mul(t0, t3);
                Y3 = Fp.add(Y3, t0);
                t2 = Fp.mul(Y1, Z1); // step 25
                t2 = Fp.add(t2, t2);
                t0 = Fp.mul(t2, t3);
                X3 = Fp.sub(X3, t0);
                Z3 = Fp.mul(t2, t1);
                Z3 = Fp.add(Z3, Z3); // step 30
                Z3 = Fp.add(Z3, Z3);
                return new Point(X3, Y3, Z3);
            }
            // Renes-Costello-Batina exception-free addition formula.
            // There is 30% faster Jacobian formula, but it is not complete.
            // https://eprint.iacr.org/2015/1060, algorithm 1
            // Cost: 12M + 0S + 3*a + 3*b3 + 23add.
            add(other) {
                assertPrjPoint(other);
                const { px: X1, py: Y1, pz: Z1 } = this;
                const { px: X2, py: Y2, pz: Z2 } = other;
                let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore
                const a = CURVE.a;
                const b3 = Fp.mul(CURVE.b, _3n);
                let t0 = Fp.mul(X1, X2); // step 1
                let t1 = Fp.mul(Y1, Y2);
                let t2 = Fp.mul(Z1, Z2);
                let t3 = Fp.add(X1, Y1);
                let t4 = Fp.add(X2, Y2); // step 5
                t3 = Fp.mul(t3, t4);
                t4 = Fp.add(t0, t1);
                t3 = Fp.sub(t3, t4);
                t4 = Fp.add(X1, Z1);
                let t5 = Fp.add(X2, Z2); // step 10
                t4 = Fp.mul(t4, t5);
                t5 = Fp.add(t0, t2);
                t4 = Fp.sub(t4, t5);
                t5 = Fp.add(Y1, Z1);
                X3 = Fp.add(Y2, Z2); // step 15
                t5 = Fp.mul(t5, X3);
                X3 = Fp.add(t1, t2);
                t5 = Fp.sub(t5, X3);
                Z3 = Fp.mul(a, t4);
                X3 = Fp.mul(b3, t2); // step 20
                Z3 = Fp.add(X3, Z3);
                X3 = Fp.sub(t1, Z3);
                Z3 = Fp.add(t1, Z3);
                Y3 = Fp.mul(X3, Z3);
                t1 = Fp.add(t0, t0); // step 25
                t1 = Fp.add(t1, t0);
                t2 = Fp.mul(a, t2);
                t4 = Fp.mul(b3, t4);
                t1 = Fp.add(t1, t2);
                t2 = Fp.sub(t0, t2); // step 30
                t2 = Fp.mul(a, t2);
                t4 = Fp.add(t4, t2);
                t0 = Fp.mul(t1, t4);
                Y3 = Fp.add(Y3, t0);
                t0 = Fp.mul(t5, t4); // step 35
                X3 = Fp.mul(t3, X3);
                X3 = Fp.sub(X3, t0);
                t0 = Fp.mul(t3, t1);
                Z3 = Fp.mul(t5, Z3);
                Z3 = Fp.add(Z3, t0); // step 40
                return new Point(X3, Y3, Z3);
            }
            subtract(other) {
                return this.add(other.negate());
            }
            is0() {
                return this.equals(Point.ZERO);
            }
            wNAF(n) {
                return wnaf.wNAFCached(this, pointPrecomputes, n, (comp) => {
                    const toInv = Fp.invertBatch(comp.map((p) => p.pz));
                    return comp.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);
                });
            }
            /**
             * Non-constant-time multiplication. Uses double-and-add algorithm.
             * It's faster, but should only be used when you don't care about
             * an exposed private key e.g. sig verification, which works over *public* keys.
             */
            multiplyUnsafe(n) {
                const I = Point.ZERO;
                if (n === _0n)
                    return I;
                assertGE(n); // Will throw on 0
                if (n === _1n)
                    return this;
                const { endo } = CURVE;
                if (!endo)
                    return wnaf.unsafeLadder(this, n);
                // Apply endomorphism
                let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);
                let k1p = I;
                let k2p = I;
                let d = this;
                while (k1 > _0n || k2 > _0n) {
                    if (k1 & _1n)
                        k1p = k1p.add(d);
                    if (k2 & _1n)
                        k2p = k2p.add(d);
                    d = d.double();
                    k1 >>= _1n;
                    k2 >>= _1n;
                }
                if (k1neg)
                    k1p = k1p.negate();
                if (k2neg)
                    k2p = k2p.negate();
                k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
                return k1p.add(k2p);
            }
            /**
             * Constant time multiplication.
             * Uses wNAF method. Windowed method may be 10% faster,
             * but takes 2x longer to generate and consumes 2x memory.
             * Uses precomputes when available.
             * Uses endomorphism for Koblitz curves.
             * @param scalar by which the point would be multiplied
             * @returns New point
             */
            multiply(scalar) {
                assertGE(scalar);
                let n = scalar;
                let point, fake; // Fake point is used to const-time mult
                const { endo } = CURVE;
                if (endo) {
                    const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);
                    let { p: k1p, f: f1p } = this.wNAF(k1);
                    let { p: k2p, f: f2p } = this.wNAF(k2);
                    k1p = wnaf.constTimeNegate(k1neg, k1p);
                    k2p = wnaf.constTimeNegate(k2neg, k2p);
                    k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
                    point = k1p.add(k2p);
                    fake = f1p.add(f2p);
                }
                else {
                    const { p, f } = this.wNAF(n);
                    point = p;
                    fake = f;
                }
                // Normalize `z` for both points, but return only real one
                return Point.normalizeZ([point, fake])[0];
            }
            /**
             * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.
             * Not using Strauss-Shamir trick: precomputation tables are faster.
             * The trick could be useful if both P and Q are not G (not in our case).
             * @returns non-zero affine point
             */
            multiplyAndAddUnsafe(Q, a, b) {
                const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes
                const mul = (P, a // Select faster multiply() method
                ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));
                const sum = mul(this, a).add(mul(Q, b));
                return sum.is0() ? undefined : sum;
            }
            // Converts Projective point to affine (x, y) coordinates.
            // Can accept precomputed Z^-1 - for example, from invertBatch.
            // (x, y, z) ∋ (x=x/z, y=y/z)
            toAffine(iz) {
                const { px: x, py: y, pz: z } = this;
                const is0 = this.is0();
                // If invZ was 0, we return zero point. However we still want to execute
                // all operations, so we replace invZ with a random number, 1.
                if (iz == null)
                    iz = is0 ? Fp.ONE : Fp.inv(z);
                const ax = Fp.mul(x, iz);
                const ay = Fp.mul(y, iz);
                const zz = Fp.mul(z, iz);
                if (is0)
                    return { x: Fp.ZERO, y: Fp.ZERO };
                if (!Fp.eql(zz, Fp.ONE))
                    throw new Error('invZ was invalid');
                return { x: ax, y: ay };
            }
            isTorsionFree() {
                const { h: cofactor, isTorsionFree } = CURVE;
                if (cofactor === _1n)
                    return true; // No subgroups, always torsion-free
                if (isTorsionFree)
                    return isTorsionFree(Point, this);
                throw new Error('isTorsionFree() has not been declared for the elliptic curve');
            }
            clearCofactor() {
                const { h: cofactor, clearCofactor } = CURVE;
                if (cofactor === _1n)
                    return this; // Fast-path
                if (clearCofactor)
                    return clearCofactor(Point, this);
                return this.multiplyUnsafe(CURVE.h);
            }
            toRawBytes(isCompressed = true) {
                this.assertValidity();
                return toBytes(Point, this, isCompressed);
            }
            toHex(isCompressed = true) {
                return bytesToHex(this.toRawBytes(isCompressed));
            }
        }
        Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);
        Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);
        const _bits = CURVE.nBitLength;
        const wnaf = wNAF(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);
        // Validate if generator point is on curve
        return {
            CURVE,
            ProjectivePoint: Point,
            normPrivateKeyToScalar,
            weierstrassEquation,
            isWithinCurveOrder,
        };
    }
    function validateOpts(curve) {
        const opts = validateBasic(curve);
        validateObject(opts, {
            hash: 'hash',
            hmac: 'function',
            randomBytes: 'function',
        }, {
            bits2int: 'function',
            bits2int_modN: 'function',
            lowS: 'boolean',
        });
        return Object.freeze({ lowS: true, ...opts });
    }
    function weierstrass(curveDef) {
        const CURVE = validateOpts(curveDef);
        const { Fp, n: CURVE_ORDER } = CURVE;
        const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32
        const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32
        function isValidFieldElement(num) {
            return _0n < num && num < Fp.ORDER; // 0 is banned since it's not invertible FE
        }
        function modN(a) {
            return mod(a, CURVE_ORDER);
        }
        function invN(a) {
            return invert(a, CURVE_ORDER);
        }
        const { ProjectivePoint: Point, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder, } = weierstrassPoints({
            ...CURVE,
            toBytes(_c, point, isCompressed) {
                const a = point.toAffine();
                const x = Fp.toBytes(a.x);
                const cat = concatBytes$1;
                if (isCompressed) {
                    return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);
                }
                else {
                    return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));
                }
            },
            fromBytes(bytes) {
                const len = bytes.length;
                const head = bytes[0];
                const tail = bytes.subarray(1);
                // this.assertValidity() is done inside of fromHex
                if (len === compressedLen && (head === 0x02 || head === 0x03)) {
                    const x = bytesToNumberBE(tail);
                    if (!isValidFieldElement(x))
                        throw new Error('Point is not on curve');
                    const y2 = weierstrassEquation(x); // y² = x³ + ax + b
                    let y = Fp.sqrt(y2); // y = y² ^ (p+1)/4
                    const isYOdd = (y & _1n) === _1n;
                    // ECDSA
                    const isHeadOdd = (head & 1) === 1;
                    if (isHeadOdd !== isYOdd)
                        y = Fp.neg(y);
                    return { x, y };
                }
                else if (len === uncompressedLen && head === 0x04) {
                    const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));
                    const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));
                    return { x, y };
                }
                else {
                    throw new Error(`Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`);
                }
            },
        });
        const numToNByteStr = (num) => bytesToHex(numberToBytesBE(num, CURVE.nByteLength));
        function isBiggerThanHalfOrder(number) {
            const HALF = CURVE_ORDER >> _1n;
            return number > HALF;
        }
        function normalizeS(s) {
            return isBiggerThanHalfOrder(s) ? modN(-s) : s;
        }
        // slice bytes num
        const slcNum = (b, from, to) => bytesToNumberBE(b.slice(from, to));
        /**
         * ECDSA signature with its (r, s) properties. Supports DER & compact representations.
         */
        class Signature {
            constructor(r, s, recovery) {
                this.r = r;
                this.s = s;
                this.recovery = recovery;
                this.assertValidity();
            }
            // pair (bytes of r, bytes of s)
            static fromCompact(hex) {
                const l = CURVE.nByteLength;
                hex = ensureBytes$1('compactSignature', hex, l * 2);
                return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));
            }
            // DER encoded ECDSA signature
            // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script
            static fromDER(hex) {
                const { r, s } = DER.toSig(ensureBytes$1('DER', hex));
                return new Signature(r, s);
            }
            assertValidity() {
                // can use assertGE here
                if (!isWithinCurveOrder(this.r))
                    throw new Error('r must be 0 < r < CURVE.n');
                if (!isWithinCurveOrder(this.s))
                    throw new Error('s must be 0 < s < CURVE.n');
            }
            addRecoveryBit(recovery) {
                return new Signature(this.r, this.s, recovery);
            }
            recoverPublicKey(msgHash) {
                const { r, s, recovery: rec } = this;
                const h = bits2int_modN(ensureBytes$1('msgHash', msgHash)); // Truncate hash
                if (rec == null || ![0, 1, 2, 3].includes(rec))
                    throw new Error('recovery id invalid');
                const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;
                if (radj >= Fp.ORDER)
                    throw new Error('recovery id 2 or 3 invalid');
                const prefix = (rec & 1) === 0 ? '02' : '03';
                const R = Point.fromHex(prefix + numToNByteStr(radj));
                const ir = invN(radj); // r^-1
                const u1 = modN(-h * ir); // -hr^-1
                const u2 = modN(s * ir); // sr^-1
                const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)
                if (!Q)
                    throw new Error('point at infinify'); // unsafe is fine: no priv data leaked
                Q.assertValidity();
                return Q;
            }
            // Signatures should be low-s, to prevent malleability.
            hasHighS() {
                return isBiggerThanHalfOrder(this.s);
            }
            normalizeS() {
                return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;
            }
            // DER-encoded
            toDERRawBytes() {
                return hexToBytes$1(this.toDERHex());
            }
            toDERHex() {
                return DER.hexFromSig({ r: this.r, s: this.s });
            }
            // padded bytes of r, then padded bytes of s
            toCompactRawBytes() {
                return hexToBytes$1(this.toCompactHex());
            }
            toCompactHex() {
                return numToNByteStr(this.r) + numToNByteStr(this.s);
            }
        }
        const utils = {
            isValidPrivateKey(privateKey) {
                try {
                    normPrivateKeyToScalar(privateKey);
                    return true;
                }
                catch (error) {
                    return false;
                }
            },
            normPrivateKeyToScalar: normPrivateKeyToScalar,
            /**
             * Produces cryptographically secure private key from random of size
             * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.
             */
            randomPrivateKey: () => {
                const length = getMinHashLength(CURVE.n);
                return mapHashToField(CURVE.randomBytes(length), CURVE.n);
            },
            /**
             * Creates precompute table for an arbitrary EC point. Makes point "cached".
             * Allows to massively speed-up `point.multiply(scalar)`.
             * @returns cached point
             * @example
             * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));
             * fast.multiply(privKey); // much faster ECDH now
             */
            precompute(windowSize = 8, point = Point.BASE) {
                point._setWindowSize(windowSize);
                point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here
                return point;
            },
        };
        /**
         * Computes public key for a private key. Checks for validity of the private key.
         * @param privateKey private key
         * @param isCompressed whether to return compact (default), or full key
         * @returns Public key, full when isCompressed=false; short when isCompressed=true
         */
        function getPublicKey(privateKey, isCompressed = true) {
            return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);
        }
        /**
         * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.
         */
        function isProbPub(item) {
            const arr = isBytes$2(item);
            const str = typeof item === 'string';
            const len = (arr || str) && item.length;
            if (arr)
                return len === compressedLen || len === uncompressedLen;
            if (str)
                return len === 2 * compressedLen || len === 2 * uncompressedLen;
            if (item instanceof Point)
                return true;
            return false;
        }
        /**
         * ECDH (Elliptic Curve Diffie Hellman).
         * Computes shared public key from private key and public key.
         * Checks: 1) private key validity 2) shared key is on-curve.
         * Does NOT hash the result.
         * @param privateA private key
         * @param publicB different public key
         * @param isCompressed whether to return compact (default), or full key
         * @returns shared public key
         */
        function getSharedSecret(privateA, publicB, isCompressed = true) {
            if (isProbPub(privateA))
                throw new Error('first arg must be private key');
            if (!isProbPub(publicB))
                throw new Error('second arg must be public key');
            const b = Point.fromHex(publicB); // check for being on-curve
            return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);
        }
        // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.
        // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.
        // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.
        // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors
        const bits2int = CURVE.bits2int ||
            function (bytes) {
                // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)
                // for some cases, since bytes.length * 8 is not actual bitLength.
                const num = bytesToNumberBE(bytes); // check for == u8 done here
                const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits
                return delta > 0 ? num >> BigInt(delta) : num;
            };
        const bits2int_modN = CURVE.bits2int_modN ||
            function (bytes) {
                return modN(bits2int(bytes)); // can't use bytesToNumberBE here
            };
        // NOTE: pads output with zero as per spec
        const ORDER_MASK = bitMask(CURVE.nBitLength);
        /**
         * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.
         */
        function int2octets(num) {
            if (typeof num !== 'bigint')
                throw new Error('bigint expected');
            if (!(_0n <= num && num < ORDER_MASK))
                throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);
            // works with order, can have different size than numToField!
            return numberToBytesBE(num, CURVE.nByteLength);
        }
        // Steps A, D of RFC6979 3.2
        // Creates RFC6979 seed; converts msg/privKey to numbers.
        // Used only in sign, not in verify.
        // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.
        // Also it can be bigger for P224 + SHA256
        function prepSig(msgHash, privateKey, opts = defaultSigOpts) {
            if (['recovered', 'canonical'].some((k) => k in opts))
                throw new Error('sign() legacy options not supported');
            const { hash, randomBytes } = CURVE;
            let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default
            if (lowS == null)
                lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash
            msgHash = ensureBytes$1('msgHash', msgHash);
            if (prehash)
                msgHash = ensureBytes$1('prehashed msgHash', hash(msgHash));
            // We can't later call bits2octets, since nested bits2int is broken for curves
            // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.
            // const bits2octets = (bits) => int2octets(bits2int_modN(bits))
            const h1int = bits2int_modN(msgHash);
            const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint
            const seedArgs = [int2octets(d), int2octets(h1int)];
            // extraEntropy. RFC6979 3.6: additional k' (optional).
            if (ent != null) {
                // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')
                const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is
                seedArgs.push(ensureBytes$1('extraEntropy', e)); // check for being bytes
            }
            const seed = concatBytes$1(...seedArgs); // Step D of RFC6979 3.2
            const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!
            // Converts signature params into point w r/s, checks result for validity.
            function k2sig(kBytes) {
                // RFC 6979 Section 3.2, step 3: k = bits2int(T)
                const k = bits2int(kBytes); // Cannot use fields methods, since it is group element
                if (!isWithinCurveOrder(k))
                    return; // Important: all mod() calls here must be done over N
                const ik = invN(k); // k^-1 mod n
                const q = Point.BASE.multiply(k).toAffine(); // q = Gk
                const r = modN(q.x); // r = q.x mod n
                if (r === _0n)
                    return;
                // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to
                // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:
                // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT
                const s = modN(ik * modN(m + r * d)); // Not using blinding here
                if (s === _0n)
                    return;
                let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)
                let normS = s;
                if (lowS && isBiggerThanHalfOrder(s)) {
                    normS = normalizeS(s); // if lowS was passed, ensure s is always
                    recovery ^= 1; // // in the bottom half of N
                }
                return new Signature(r, normS, recovery); // use normS, not s
            }
            return { seed, k2sig };
        }
        const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };
        const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };
        /**
         * Signs message hash with a private key.
         * ```
         * sign(m, d, k) where
         *   (x, y) = G × k
         *   r = x mod n
         *   s = (m + dr)/k mod n
         * ```
         * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.
         * @param privKey private key
         * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.
         * @returns signature with recovery param
         */
        function sign(msgHash, privKey, opts = defaultSigOpts) {
            const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.
            const C = CURVE;
            const drbg = createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);
            return drbg(seed, k2sig); // Steps B, C, D, E, F, G
        }
        // Enable precomputes. Slows down first publicKey computation by 20ms.
        Point.BASE._setWindowSize(8);
        // utils.precompute(8, ProjectivePoint.BASE)
        /**
         * Verifies a signature against message hash and public key.
         * Rejects lowS signatures by default: to override,
         * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:
         *
         * ```
         * verify(r, s, h, P) where
         *   U1 = hs^-1 mod n
         *   U2 = rs^-1 mod n
         *   R = U1⋅G - U2⋅P
         *   mod(R.x, n) == r
         * ```
         */
        function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {
            const sg = signature;
            msgHash = ensureBytes$1('msgHash', msgHash);
            publicKey = ensureBytes$1('publicKey', publicKey);
            if ('strict' in opts)
                throw new Error('options.strict was renamed to lowS');
            const { lowS, prehash } = opts;
            let _sig = undefined;
            let P;
            try {
                if (typeof sg === 'string' || isBytes$2(sg)) {
                    // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).
                    // Since DER can also be 2*nByteLength bytes, we check for it first.
                    try {
                        _sig = Signature.fromDER(sg);
                    }
                    catch (derError) {
                        if (!(derError instanceof DER.Err))
                            throw derError;
                        _sig = Signature.fromCompact(sg);
                    }
                }
                else if (typeof sg === 'object' && typeof sg.r === 'bigint' && typeof sg.s === 'bigint') {
                    const { r, s } = sg;
                    _sig = new Signature(r, s);
                }
                else {
                    throw new Error('PARSE');
                }
                P = Point.fromHex(publicKey);
            }
            catch (error) {
                if (error.message === 'PARSE')
                    throw new Error(`signature must be Signature instance, Uint8Array or hex string`);
                return false;
            }
            if (lowS && _sig.hasHighS())
                return false;
            if (prehash)
                msgHash = CURVE.hash(msgHash);
            const { r, s } = _sig;
            const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element
            const is = invN(s); // s^-1
            const u1 = modN(h * is); // u1 = hs^-1 mod n
            const u2 = modN(r * is); // u2 = rs^-1 mod n
            const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P
            if (!R)
                return false;
            const v = modN(R.x);
            return v === r;
        }
        return {
            CURVE,
            getPublicKey,
            getSharedSecret,
            sign,
            verify,
            ProjectivePoint: Point,
            Signature,
            utils,
        };
    }
    /**
     * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.
     * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.
     * b = True and y = sqrt(u / v) if (u / v) is square in F, and
     * b = False and y = sqrt(Z * (u / v)) otherwise.
     * @param Fp
     * @param Z
     * @returns
     */
    function SWUFpSqrtRatio(Fp, Z) {
        // Generic implementation
        const q = Fp.ORDER;
        let l = _0n;
        for (let o = q - _1n; o % _2n === _0n; o /= _2n)
            l += _1n;
        const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.
        // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.
        // 2n ** c1 == 2n << (c1-1)
        const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);
        const _2n_pow_c1 = _2n_pow_c1_1 * _2n;
        const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic
        const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic
        const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic
        const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic
        const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2
        const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)
        let sqrtRatio = (u, v) => {
            let tv1 = c6; // 1. tv1 = c6
            let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4
            let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2
            tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v
            let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3
            tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3
            tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2
            tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v
            tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u
            let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2
            tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5
            let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1
            tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7
            tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1
            tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)
            tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)
            // 17. for i in (c1, c1 - 1, ..., 2):
            for (let i = c1; i > _1n; i--) {
                let tv5 = i - _2n; // 18.    tv5 = i - 2
                tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5
                let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5
                const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1
                tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1
                tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1
                tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1
                tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)
                tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)
            }
            return { isValid: isQR, value: tv3 };
        };
        if (Fp.ORDER % _4n === _3n) {
            // sqrt_ratio_3mod4(u, v)
            const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic
            const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)
            sqrtRatio = (u, v) => {
                let tv1 = Fp.sqr(v); // 1. tv1 = v^2
                const tv2 = Fp.mul(u, v); // 2. tv2 = u * v
                tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2
                let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1
                y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2
                const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2
                const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v
                const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u
                let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)
                return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2
            };
        }
        // No curves uses that
        // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8
        return sqrtRatio;
    }
    /**
     * Simplified Shallue-van de Woestijne-Ulas Method
     * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2
     */
    function mapToCurveSimpleSWU(Fp, opts) {
        validateField(Fp);
        if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))
            throw new Error('mapToCurveSimpleSWU: invalid opts');
        const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);
        if (!Fp.isOdd)
            throw new Error('Fp.isOdd is not implemented!');
        // Input: u, an element of F.
        // Output: (x, y), a point on E.
        return (u) => {
            // prettier-ignore
            let tv1, tv2, tv3, tv4, tv5, tv6, x, y;
            tv1 = Fp.sqr(u); // 1.  tv1 = u^2
            tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1
            tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2
            tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1
            tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1
            tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3
            tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)
            tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4
            tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2
            tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2
            tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6
            tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5
            tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3
            tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4
            tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6
            tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5
            x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3
            const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)
            y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1
            y = Fp.mul(y, value); // 20.   y = y * y1
            x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)
            y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)
            const e1 = Fp.isOdd(u) === Fp.isOdd(y); // 23.  e1 = sgn0(u) == sgn0(y)
            y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)
            x = Fp.div(x, tv4); // 25.   x = x / tv4
            return { x, y };
        };
    }

    var weierstrass$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        DER: DER,
        weierstrassPoints: weierstrassPoints,
        weierstrass: weierstrass,
        SWUFpSqrtRatio: SWUFpSqrtRatio,
        mapToCurveSimpleSWU: mapToCurveSimpleSWU
    });

    // HMAC (RFC 2104)
    class HMAC extends Hash {
        constructor(hash$1, _key) {
            super();
            this.finished = false;
            this.destroyed = false;
            hash(hash$1);
            const key = toBytes(_key);
            this.iHash = hash$1.create();
            if (typeof this.iHash.update !== 'function')
                throw new Error('Expected instance of class which extends utils.Hash');
            this.blockLen = this.iHash.blockLen;
            this.outputLen = this.iHash.outputLen;
            const blockLen = this.blockLen;
            const pad = new Uint8Array(blockLen);
            // blockLen can be bigger than outputLen
            pad.set(key.length > blockLen ? hash$1.create().update(key).digest() : key);
            for (let i = 0; i < pad.length; i++)
                pad[i] ^= 0x36;
            this.iHash.update(pad);
            // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone
            this.oHash = hash$1.create();
            // Undo internal XOR && apply outer XOR
            for (let i = 0; i < pad.length; i++)
                pad[i] ^= 0x36 ^ 0x5c;
            this.oHash.update(pad);
            pad.fill(0);
        }
        update(buf) {
            exists(this);
            this.iHash.update(buf);
            return this;
        }
        digestInto(out) {
            exists(this);
            bytes(out, this.outputLen);
            this.finished = true;
            this.iHash.digestInto(out);
            this.oHash.update(out);
            this.oHash.digestInto(out);
            this.destroy();
        }
        digest() {
            const out = new Uint8Array(this.oHash.outputLen);
            this.digestInto(out);
            return out;
        }
        _cloneInto(to) {
            // Create new instance without calling constructor since key already in state and we don't know it.
            to || (to = Object.create(Object.getPrototypeOf(this), {}));
            const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;
            to = to;
            to.finished = finished;
            to.destroyed = destroyed;
            to.blockLen = blockLen;
            to.outputLen = outputLen;
            to.oHash = oHash._cloneInto(to.oHash);
            to.iHash = iHash._cloneInto(to.iHash);
            return to;
        }
        destroy() {
            this.destroyed = true;
            this.oHash.destroy();
            this.iHash.destroy();
        }
    }
    /**
     * HMAC: RFC2104 message authentication code.
     * @param hash - function that would be used e.g. sha256
     * @param key - message key
     * @param message - message data
     */
    const hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();
    hmac.create = (hash, key) => new HMAC(hash, key);

    /*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
    // connects noble-curves to noble-hashes
    function getHash$3(hash) {
        return {
            hash,
            hmac: (key, ...msgs) => hmac(hash, key, concatBytes(...msgs)),
            randomBytes,
        };
    }

    const CURVE_ORDER = BigInt('3618502788666131213697322783095070105526743751716087489154079457884512865583');
    const MAX_VALUE = BigInt('0x800000000000000000000000000000000000000000000000000000000000000');
    const nBitLength = 252;
    function bits2int(bytes) {
        while (bytes[0] === 0)
            bytes = bytes.subarray(1);
        const delta = bytes.length * 8 - nBitLength;
        const num = bytesToNumberBE(bytes);
        return delta > 0 ? num >> BigInt(delta) : num;
    }
    function hex0xToBytes(hex) {
        if (typeof hex === 'string') {
            hex = strip0x(hex);
            if (hex.length & 1)
                hex = '0' + hex;
        }
        return hexToBytes$1(hex);
    }
    const curve = weierstrass({
        a: BigInt(1),
        b: BigInt('3141592653589793238462643383279502884197169399375105820974944592307816406665'),
        Fp: Field(BigInt('0x800000000000011000000000000000000000000000000000000000000000001')),
        n: CURVE_ORDER,
        nBitLength,
        Gx: BigInt('874739451078007766457464989774322083649278607533249481151382481072868806602'),
        Gy: BigInt('152666792071518830868575557812948353041420400780739481342941381225525861407'),
        h: BigInt(1),
        lowS: false,
        ...getHash$3(sha256),
        bits2int,
        bits2int_modN: (bytes) => {
            const hex = bytesToNumberBE(bytes).toString(16);
            if (hex.length === 63)
                bytes = hex0xToBytes(hex + '0');
            return mod(bits2int(bytes), CURVE_ORDER);
        },
    });
    const _starkCurve = curve;
    function ensureBytes(hex) {
        return ensureBytes$1('', typeof hex === 'string' ? hex0xToBytes(hex) : hex);
    }
    function normPrivKey(privKey) {
        return bytesToHex(ensureBytes(privKey)).padStart(64, '0');
    }
    function getPublicKey(privKey, isCompressed = false) {
        return curve.getPublicKey(normPrivKey(privKey), isCompressed);
    }
    function getSharedSecret(privKeyA, pubKeyB) {
        return curve.getSharedSecret(normPrivKey(privKeyA), pubKeyB);
    }
    function checkSignature(signature) {
        const { r, s } = signature;
        if (r < 0n || r >= MAX_VALUE)
            throw new Error(`Signature.r should be [1, ${MAX_VALUE})`);
        const w = invert(s, CURVE_ORDER);
        if (w < 0n || w >= MAX_VALUE)
            throw new Error(`inv(Signature.s) should be [1, ${MAX_VALUE})`);
    }
    function checkMessage(msgHash) {
        const bytes = ensureBytes(msgHash);
        const num = bytesToNumberBE(bytes);
        if (num >= MAX_VALUE)
            throw new Error(`msgHash should be [0, ${MAX_VALUE})`);
        return bytes;
    }
    function sign(msgHash, privKey, opts) {
        const sig = curve.sign(checkMessage(msgHash), normPrivKey(privKey), opts);
        checkSignature(sig);
        return sig;
    }
    function verify$3(signature, msgHash, pubKey) {
        if (!(signature instanceof Signature)) {
            const bytes = ensureBytes(signature);
            try {
                signature = Signature.fromDER(bytes);
            }
            catch (derError) {
                if (!(derError instanceof DER.Err))
                    throw derError;
                signature = Signature.fromCompact(bytes);
            }
        }
        checkSignature(signature);
        return curve.verify(signature, checkMessage(msgHash), ensureBytes(pubKey));
    }
    const { CURVE, ProjectivePoint, Signature, utils: utils$1 } = curve;
    function extractX(bytes) {
        const hex = bytesToHex(bytes.subarray(1));
        const stripped = hex.replace(/^0+/gm, '');
        return `0x${stripped}`;
    }
    function strip0x(hex) {
        return hex.replace(/^0x/i, '');
    }
    function grindKey(seed) {
        const _seed = ensureBytes(seed);
        const sha256mask = 2n ** 256n;
        const limit = sha256mask - mod(sha256mask, CURVE_ORDER);
        for (let i = 0;; i++) {
            const key = sha256Num(concatBytes$1(_seed, numberToVarBytesBE(BigInt(i))));
            if (key < limit)
                return mod(key, CURVE_ORDER).toString(16);
            if (i === 100000)
                throw new Error('grindKey is broken: tried 100k vals');
        }
    }
    function getStarkKey(privateKey) {
        return extractX(getPublicKey(privateKey, true));
    }
    function ethSigToPrivate(signature) {
        signature = strip0x(signature);
        if (signature.length !== 130)
            throw new Error('Wrong ethereum signature');
        return grindKey(signature.substring(0, 64));
    }
    const MASK_31 = 2n ** 31n - 1n;
    const int31 = (n) => Number(n & MASK_31);
    function getAccountPath(layer, application, ethereumAddress, index) {
        const layerNum = int31(sha256Num(layer));
        const applicationNum = int31(sha256Num(application));
        const eth = hexToNumber(strip0x(ethereumAddress));
        return `m/2645'/${layerNum}'/${applicationNum}'/${int31(eth)}'/${int31(eth >> 31n)}'/${index}`;
    }
    const PEDERSEN_POINTS = [
        new ProjectivePoint(2089986280348253421170679821480865132823066470938446095505822317253594081284n, 1713931329540660377023406109199410414810705867260802078187082345529207694986n, 1n),
        new ProjectivePoint(996781205833008774514500082376783249102396023663454813447423147977397232763n, 1668503676786377725805489344771023921079126552019160156920634619255970485781n, 1n),
        new ProjectivePoint(2251563274489750535117886426533222435294046428347329203627021249169616184184n, 1798716007562728905295480679789526322175868328062420237419143593021674992973n, 1n),
        new ProjectivePoint(2138414695194151160943305727036575959195309218611738193261179310511854807447n, 113410276730064486255102093846540133784865286929052426931474106396135072156n, 1n),
        new ProjectivePoint(2379962749567351885752724891227938183011949129833673362440656643086021394946n, 776496453633298175483985398648758586525933812536653089401905292063708816422n, 1n),
    ];
    function pedersenPrecompute(p1, p2) {
        const out = [];
        let p = p1;
        for (let i = 0; i < 248; i++) {
            out.push(p);
            p = p.double();
        }
        p = p2;
        for (let i = 0; i < 4; i++) {
            out.push(p);
            p = p.double();
        }
        return out;
    }
    const PEDERSEN_POINTS1 = pedersenPrecompute(PEDERSEN_POINTS[1], PEDERSEN_POINTS[2]);
    const PEDERSEN_POINTS2 = pedersenPrecompute(PEDERSEN_POINTS[3], PEDERSEN_POINTS[4]);
    function pedersenArg(arg) {
        let value;
        if (typeof arg === 'bigint') {
            value = arg;
        }
        else if (typeof arg === 'number') {
            if (!Number.isSafeInteger(arg))
                throw new Error(`Invalid pedersenArg: ${arg}`);
            value = BigInt(arg);
        }
        else {
            value = bytesToNumberBE(ensureBytes(arg));
        }
        if (!(0n <= value && value < curve.CURVE.Fp.ORDER))
            throw new Error(`PedersenArg should be 0 <= value < CURVE.P: ${value}`);
        return value;
    }
    function pedersenSingle(point, value, constants) {
        let x = pedersenArg(value);
        for (let j = 0; j < 252; j++) {
            const pt = constants[j];
            if (pt.equals(point))
                throw new Error('Same point');
            if ((x & 1n) !== 0n)
                point = point.add(pt);
            x >>= 1n;
        }
        return point;
    }
    function pedersen(x, y) {
        let point = PEDERSEN_POINTS[0];
        point = pedersenSingle(point, x, PEDERSEN_POINTS1);
        point = pedersenSingle(point, y, PEDERSEN_POINTS2);
        return extractX(point.toRawBytes(true));
    }
    const computeHashOnElements$1 = (data, fn = pedersen) => [0, ...data, data.length].reduce((x, y) => fn(x, y));
    const MASK_250$1 = bitMask(250);
    const keccak = (data) => bytesToNumberBE(keccak_256(data)) & MASK_250$1;
    const sha256Num = (data) => bytesToNumberBE(sha256(data));
    const Fp251 = Field(BigInt('3618502788666131213697322783095070105623107215331596699973092056135872020481'));
    function poseidonRoundConstant(Fp, name, idx) {
        const val = Fp.fromBytes(sha256(utf8ToBytes(`${name}${idx}`)));
        return Fp.create(val);
    }
    function _poseidonMDS(Fp, name, m, attempt = 0) {
        const x_values = [];
        const y_values = [];
        for (let i = 0; i < m; i++) {
            x_values.push(poseidonRoundConstant(Fp, `${name}x`, attempt * m + i));
            y_values.push(poseidonRoundConstant(Fp, `${name}y`, attempt * m + i));
        }
        if (new Set([...x_values, ...y_values]).size !== 2 * m)
            throw new Error('X and Y values are not distinct');
        return x_values.map((x) => y_values.map((y) => Fp.inv(Fp.sub(x, y))));
    }
    const MDS_SMALL = [
        [3, 1, 1],
        [1, -1, 1],
        [1, 1, -2],
    ].map((i) => i.map(BigInt));
    function poseidonBasic(opts, mds) {
        validateField(opts.Fp);
        if (!Number.isSafeInteger(opts.rate) || !Number.isSafeInteger(opts.capacity))
            throw new Error(`Wrong poseidon opts: ${opts}`);
        const m = opts.rate + opts.capacity;
        const rounds = opts.roundsFull + opts.roundsPartial;
        const roundConstants = [];
        for (let i = 0; i < rounds; i++) {
            const row = [];
            for (let j = 0; j < m; j++)
                row.push(poseidonRoundConstant(opts.Fp, 'Hades', m * i + j));
            roundConstants.push(row);
        }
        const res = poseidon({
            ...opts,
            t: m,
            sboxPower: 3,
            reversePartialPowIdx: true,
            mds,
            roundConstants,
        });
        res.m = m;
        res.rate = opts.rate;
        res.capacity = opts.capacity;
        return res;
    }
    function poseidonCreate(opts, mdsAttempt = 0) {
        const m = opts.rate + opts.capacity;
        if (!Number.isSafeInteger(mdsAttempt))
            throw new Error(`Wrong mdsAttempt=${mdsAttempt}`);
        return poseidonBasic(opts, _poseidonMDS(opts.Fp, 'HadesMDS', m, mdsAttempt));
    }
    const poseidonSmall = poseidonBasic({ Fp: Fp251, rate: 2, capacity: 1, roundsFull: 8, roundsPartial: 83 }, MDS_SMALL);
    function poseidonHash(x, y, fn = poseidonSmall) {
        return fn([x, y, 2n])[0];
    }
    function poseidonHashFunc(x, y, fn = poseidonSmall) {
        return numberToVarBytesBE(poseidonHash(bytesToNumberBE(x), bytesToNumberBE(y), fn));
    }
    function poseidonHashSingle(x, fn = poseidonSmall) {
        return fn([x, 0n, 1n])[0];
    }
    function poseidonHashMany(values, fn = poseidonSmall) {
        const { m, rate } = fn;
        if (!Array.isArray(values))
            throw new Error('bigint array expected in values');
        const padded = Array.from(values);
        padded.push(1n);
        while (padded.length % rate !== 0)
            padded.push(0n);
        let state = new Array(m).fill(0n);
        for (let i = 0; i < padded.length; i += rate) {
            for (let j = 0; j < rate; j++)
                state[j] += padded[i + j];
            state = fn(state);
        }
        return state[0];
    }

    var starkCurve = /*#__PURE__*/Object.freeze({
        __proto__: null,
        MAX_VALUE: MAX_VALUE,
        _starkCurve: _starkCurve,
        getPublicKey: getPublicKey,
        getSharedSecret: getSharedSecret,
        sign: sign,
        verify: verify$3,
        CURVE: CURVE,
        ProjectivePoint: ProjectivePoint,
        Signature: Signature,
        utils: utils$1,
        grindKey: grindKey,
        getStarkKey: getStarkKey,
        ethSigToPrivate: ethSigToPrivate,
        getAccountPath: getAccountPath,
        pedersen: pedersen,
        computeHashOnElements: computeHashOnElements$1,
        keccak: keccak,
        Fp251: Fp251,
        _poseidonMDS: _poseidonMDS,
        poseidonBasic: poseidonBasic,
        poseidonCreate: poseidonCreate,
        poseidonSmall: poseidonSmall,
        poseidonHash: poseidonHash,
        poseidonHashFunc: poseidonHashFunc,
        poseidonHashSingle: poseidonHashSingle,
        poseidonHashMany: poseidonHashMany
    });

    /**
     * Test whether a string contains an integer number
     */
    function isInteger(value) {
      return INTEGER_REGEX.test(value);
    }
    var INTEGER_REGEX = /^-?[0-9]+$/;

    /**
     * Test whether a string contains a number
     * http://stackoverflow.com/questions/13340717/json-numbers-regular-expression
     */
    function isNumber(value) {
      return NUMBER_REGEX.test(value);
    }
    var NUMBER_REGEX = /^-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?$/;

    /**
     * Test whether a string can be safely represented with a number
     * without information loss.
     *
     * When approx is true, floating point numbers that lose a few digits but
     * are still approximately equal in value are considered safe too.
     * Integer numbers must still be exactly equal.
     */
    function isSafeNumber(value, config) {
      var num = parseFloat(value);
      var str = String(num);
      var v = extractSignificantDigits(value);
      var s = extractSignificantDigits(str);
      if (v === s) {
        return true;
      }
      if ((config === null || config === void 0 ? void 0 : config.approx) === true) {
        // A value is approximately equal when:
        // 1. it is a floating point number, not an integer
        // 2. it has at least 14 digits
        // 3. the first 14 digits are equal
        var requiredDigits = 14;
        if (!isInteger(value) && s.length >= requiredDigits && v.startsWith(s.substring(0, requiredDigits))) {
          return true;
        }
      }
      return false;
    }
    var UnsafeNumberReason = /*#__PURE__*/function (UnsafeNumberReason) {
      UnsafeNumberReason["underflow"] = "underflow";
      UnsafeNumberReason["overflow"] = "overflow";
      UnsafeNumberReason["truncate_integer"] = "truncate_integer";
      UnsafeNumberReason["truncate_float"] = "truncate_float";
      return UnsafeNumberReason;
    }({});

    /**
     * When the provided value is an unsafe number, describe what the reason is:
     * overflow, underflow, truncate_integer, or truncate_float.
     * Returns undefined when the value is safe.
     */
    function getUnsafeNumberReason(value) {
      if (isSafeNumber(value, {
        approx: false
      })) {
        return undefined;
      }
      if (isInteger(value)) {
        return UnsafeNumberReason.truncate_integer;
      }
      var num = parseFloat(value);
      if (!isFinite(num)) {
        return UnsafeNumberReason.overflow;
      }
      if (num === 0) {
        return UnsafeNumberReason.underflow;
      }
      return UnsafeNumberReason.truncate_float;
    }

    /**
     * Get the significant digits of a number.
     *
     * For example:
     *   '2.34' returns '234'
     *   '-77' returns '77'
     *   '0.003400' returns '34'
     *   '120.5e+30' returns '1205'
     **/
    function extractSignificantDigits(value) {
      return value
      // from "-0.250e+30" to "-0.250"
      .replace(EXPONENTIAL_PART_REGEX, '')

      // from "-0.250" to "-0250"
      .replace(DOT_REGEX, '')

      // from "-0250" to "-025"
      .replace(TRAILING_ZEROS_REGEX, '')

      // from "-025" to "25"
      .replace(LEADING_MINUS_AND_ZEROS_REGEX, '');
    }
    var EXPONENTIAL_PART_REGEX = /[eE][+-]?\d+$/;
    var LEADING_MINUS_AND_ZEROS_REGEX = /^-?(0*)?/;
    var DOT_REGEX = /\./;
    var TRAILING_ZEROS_REGEX = /0+$/;

    function _typeof$3(obj) { "@babel/helpers - typeof"; return _typeof$3 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof$3(obj); }
    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
    function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
    function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
    function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
    function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof$3(key) === "symbol" ? key : String(key); }
    function _toPrimitive(input, hint) { if (_typeof$3(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof$3(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }

    /**
     * A lossless number. Stores its numeric value as string
     */
    var LosslessNumber = /*#__PURE__*/function () {
      function LosslessNumber(value) {
        _classCallCheck(this, LosslessNumber);
        // numeric value as string
        // type information
        _defineProperty(this, "isLosslessNumber", true);
        if (!isNumber(value)) {
          throw new Error('Invalid number (value: "' + value + '")');
        }
        this.value = value;
      }

      /**
       * Get the value of the LosslessNumber as number or bigint.
       *
       * - a number is returned for safe numbers and decimal values that only lose some insignificant digits
       * - a bigint is returned for big integer numbers
       * - an Error is thrown for values that will overflow or underflow
       *
       * Note that you can implement your own strategy for conversion by just getting the value as string
       * via .toString(), and using util functions like isInteger, isSafeNumber, getUnsafeNumberReason,
       * and toSafeNumberOrThrow to convert it to a numeric value.
       */
      _createClass(LosslessNumber, [{
        key: "valueOf",
        value: function valueOf() {
          var unsafeReason = getUnsafeNumberReason(this.value);

          // safe or truncate_float
          if (unsafeReason === undefined || unsafeReason === UnsafeNumberReason.truncate_float) {
            return parseFloat(this.value);
          }

          // truncate_integer
          if (isInteger(this.value)) {
            return BigInt(this.value);
          }

          // overflow or underflow
          throw new Error('Cannot safely convert to number: ' + "the value '".concat(this.value, "' would ").concat(unsafeReason, " and become ").concat(parseFloat(this.value)));
        }

        /**
         * Get the value of the LosslessNumber as string.
         */
      }, {
        key: "toString",
        value: function toString() {
          return this.value;
        }

        // Note: we do NOT implement a .toJSON() method, and you should not implement
        // or use that, it cannot safely turn the numeric value in the string into
        // stringified JSON since it has to be parsed into a number first.
      }]);
      return LosslessNumber;
    }();

    /**
     * Test whether a value is a LosslessNumber
     */
    function isLosslessNumber(value) {
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-ignore
      return value && _typeof$3(value) === 'object' && value.isLosslessNumber === true || false;
    }

    function parseLosslessNumber(value) {
      return new LosslessNumber(value);
    }
    function parseNumberAndBigInt(value) {
      return isInteger(value) ? BigInt(value) : parseFloat(value);
    }

    function _typeof$2(obj) { "@babel/helpers - typeof"; return _typeof$2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof$2(obj); }
    /**
     * Revive a json object.
     * Applies the reviver function recursively on all values in the JSON object.
     * @param json   A JSON Object, Array, or value
     * @param reviver
     *              A reviver function invoked with arguments `key` and `value`,
     *              which must return a replacement value. The function context
     *              (`this`) is the Object or Array that contains the currently
     *              handled value.
     */
    function revive(json, reviver) {
      return reviveValue({
        '': json
      }, '', json, reviver);
    }

    /**
     * Revive a value
     */
    function reviveValue(context, key, value, reviver) {
      if (Array.isArray(value)) {
        return reviver.call(context, key, reviveArray(value, reviver));
      } else if (value && _typeof$2(value) === 'object' && !isLosslessNumber(value)) {
        // note the special case for LosslessNumber,
        // we don't want to iterate over the internals of a LosslessNumber
        return reviver.call(context, key, reviveObject(value, reviver));
      } else {
        return reviver.call(context, key, value);
      }
    }

    /**
     * Revive the properties of an object
     */
    function reviveObject(object, reviver) {
      Object.keys(object).forEach(function (key) {
        var value = reviveValue(object, key, object[key], reviver);
        if (value !== undefined) {
          object[key] = value;
        } else {
          delete object[key];
        }
      });
      return object;
    }

    /**
     * Revive the properties of an Array
     */
    function reviveArray(array, reviver) {
      for (var i = 0; i < array.length; i++) {
        array[i] = reviveValue(array, i + '', array[i], reviver);
      }
      return array;
    }

    function _typeof$1(obj) { "@babel/helpers - typeof"; return _typeof$1 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof$1(obj); }
    function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
    function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
    function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
    function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
    function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
    function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
    /**
     * The LosslessJSON.parse() method parses a string as JSON, optionally transforming
     * the value produced by parsing.
     *
     * The parser is based on the parser of Tan Li Hou shared in
     * https://lihautan.com/json-parser-with-javascript/
     *
     * @param text
     * The string to parse as JSON. See the JSON object for a description of JSON syntax.
     *
     * @param [reviver]
     * If a function, prescribes how the value originally produced by parsing is
     * transformed, before being returned.
     *
     * @param [parseNumber=parseLosslessNumber]
     * Pass a custom number parser. Input is a string, and the output can be unknown
     * numeric value: number, bigint, LosslessNumber, or a custom BigNumber library.
     *
     * @returns Returns the Object corresponding to the given JSON text.
     *
     * @throws Throws a SyntaxError exception if the string to parse is not valid JSON.
     */
    function parse(text, reviver) {
      var parseNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : parseLosslessNumber;
      var i = 0;
      var value = parseValue();
      expectValue(value);
      expectEndOfInput();
      return reviver ? revive(value, reviver) : value;
      function parseObject() {
        if (text.charCodeAt(i) === codeOpeningBrace) {
          i++;
          skipWhitespace();
          var object = {};
          var initial = true;
          while (i < text.length && text.charCodeAt(i) !== codeClosingBrace) {
            if (!initial) {
              eatComma();
              skipWhitespace();
            } else {
              initial = false;
            }
            var start = i;
            var key = parseString();
            if (key === undefined) {
              throwObjectKeyExpected();
            }
            skipWhitespace();
            eatColon();
            var _value = parseValue();
            if (_value === undefined) {
              throwObjectValueExpected();
            }

            // TODO: test deep equal instead of strict equal
            if (Object.prototype.hasOwnProperty.call(object, key) && !isDeepEqual(_value, object[key])) {
              // Note that we could also test `if(key in object) {...}`
              // or `if (object[key] !== 'undefined') {...}`, but that is slower.
              throwDuplicateKey(key, start + 1);
            }
            object[key] = _value;
          }
          if (text.charCodeAt(i) !== codeClosingBrace) {
            throwObjectKeyOrEndExpected();
          }
          i++;
          return object;
        }
      }
      function parseArray() {
        if (text.charCodeAt(i) === codeOpeningBracket) {
          i++;
          skipWhitespace();
          var array = [];
          var initial = true;
          while (i < text.length && text.charCodeAt(i) !== codeClosingBracket) {
            if (!initial) {
              eatComma();
            } else {
              initial = false;
            }
            var _value2 = parseValue();
            expectArrayItem(_value2);
            array.push(_value2);
          }
          if (text.charCodeAt(i) !== codeClosingBracket) {
            throwArrayItemOrEndExpected();
          }
          i++;
          return array;
        }
      }
      function parseValue() {
        var _ref, _ref2, _ref3, _ref4, _ref5, _parseString;
        skipWhitespace();
        var value = (_ref = (_ref2 = (_ref3 = (_ref4 = (_ref5 = (_parseString = parseString()) !== null && _parseString !== void 0 ? _parseString : parseNumeric()) !== null && _ref5 !== void 0 ? _ref5 : parseObject()) !== null && _ref4 !== void 0 ? _ref4 : parseArray()) !== null && _ref3 !== void 0 ? _ref3 : parseKeyword('true', true)) !== null && _ref2 !== void 0 ? _ref2 : parseKeyword('false', false)) !== null && _ref !== void 0 ? _ref : parseKeyword('null', null);
        skipWhitespace();
        return value;
      }
      function parseKeyword(name, value) {
        if (text.slice(i, i + name.length) === name) {
          i += name.length;
          return value;
        }
      }
      function skipWhitespace() {
        while (isWhitespace(text.charCodeAt(i))) {
          i++;
        }
      }
      function parseString() {
        if (text.charCodeAt(i) === codeDoubleQuote) {
          i++;
          var result = '';
          while (i < text.length && text.charCodeAt(i) !== codeDoubleQuote) {
            if (text.charCodeAt(i) === codeBackslash) {
              var char = text[i + 1];
              var escapeChar = escapeCharacters[char];
              if (escapeChar !== undefined) {
                result += escapeChar;
                i++;
              } else if (char === 'u') {
                if (isHex$1(text.charCodeAt(i + 2)) && isHex$1(text.charCodeAt(i + 3)) && isHex$1(text.charCodeAt(i + 4)) && isHex$1(text.charCodeAt(i + 5))) {
                  result += String.fromCharCode(parseInt(text.slice(i + 2, i + 6), 16));
                  i += 5;
                } else {
                  throwInvalidUnicodeCharacter(i);
                }
              } else {
                throwInvalidEscapeCharacter(i);
              }
            } else {
              if (isValidStringCharacter(text.charCodeAt(i))) {
                result += text[i];
              } else {
                throwInvalidCharacter(text[i]);
              }
            }
            i++;
          }
          expectEndOfString();
          i++;
          return result;
        }
      }
      function parseNumeric() {
        var start = i;
        if (text.charCodeAt(i) === codeMinus) {
          i++;
          expectDigit(start);
        }
        if (text.charCodeAt(i) === codeZero) {
          i++;
        } else if (isNonZeroDigit(text.charCodeAt(i))) {
          i++;
          while (isDigit(text.charCodeAt(i))) {
            i++;
          }
        }
        if (text.charCodeAt(i) === codeDot) {
          i++;
          expectDigit(start);
          while (isDigit(text.charCodeAt(i))) {
            i++;
          }
        }
        if (text.charCodeAt(i) === codeLowercaseE || text.charCodeAt(i) === codeUppercaseE) {
          i++;
          if (text.charCodeAt(i) === codeMinus || text.charCodeAt(i) === codePlus) {
            i++;
          }
          expectDigit(start);
          while (isDigit(text.charCodeAt(i))) {
            i++;
          }
        }
        if (i > start) {
          return parseNumber(text.slice(start, i));
        }
      }
      function eatComma() {
        if (text.charCodeAt(i) !== codeComma) {
          throw new SyntaxError("Comma ',' expected after value ".concat(gotAt()));
        }
        i++;
      }
      function eatColon() {
        if (text.charCodeAt(i) !== codeColon) {
          throw new SyntaxError("Colon ':' expected after property name ".concat(gotAt()));
        }
        i++;
      }
      function expectValue(value) {
        if (value === undefined) {
          throw new SyntaxError("JSON value expected ".concat(gotAt()));
        }
      }
      function expectArrayItem(value) {
        if (value === undefined) {
          throw new SyntaxError("Array item expected ".concat(gotAt()));
        }
      }
      function expectEndOfInput() {
        if (i < text.length) {
          throw new SyntaxError("Expected end of input ".concat(gotAt()));
        }
      }
      function expectDigit(start) {
        if (!isDigit(text.charCodeAt(i))) {
          var numSoFar = text.slice(start, i);
          throw new SyntaxError("Invalid number '".concat(numSoFar, "', expecting a digit ").concat(gotAt()));
        }
      }
      function expectEndOfString() {
        if (text.charCodeAt(i) !== codeDoubleQuote) {
          throw new SyntaxError("End of string '\"' expected ".concat(gotAt()));
        }
      }
      function throwObjectKeyExpected() {
        throw new SyntaxError("Quoted object key expected ".concat(gotAt()));
      }
      function throwDuplicateKey(key, pos) {
        throw new SyntaxError("Duplicate key '".concat(key, "' encountered at position ").concat(pos));
      }
      function throwObjectKeyOrEndExpected() {
        throw new SyntaxError("Quoted object key or end of object '}' expected ".concat(gotAt()));
      }
      function throwArrayItemOrEndExpected() {
        throw new SyntaxError("Array item or end of array ']' expected ".concat(gotAt()));
      }
      function throwInvalidCharacter(char) {
        throw new SyntaxError("Invalid character '".concat(char, "' ").concat(pos()));
      }
      function throwInvalidEscapeCharacter(start) {
        var chars = text.slice(start, start + 2);
        throw new SyntaxError("Invalid escape character '".concat(chars, "' ").concat(pos()));
      }
      function throwObjectValueExpected() {
        throw new SyntaxError("Object value expected after ':' ".concat(pos()));
      }
      function throwInvalidUnicodeCharacter(start) {
        var end = start + 2;
        while (/\w/.test(text[end])) {
          end++;
        }
        var chars = text.slice(start, end);
        throw new SyntaxError("Invalid unicode character '".concat(chars, "' ").concat(pos()));
      }

      // zero based character position
      function pos() {
        return "at position ".concat(i);
      }
      function got() {
        return i < text.length ? "but got '".concat(text[i], "'") : 'but reached end of input';
      }
      function gotAt() {
        return got() + ' ' + pos();
      }
    }
    function isWhitespace(code) {
      return code === codeSpace || code === codeNewline || code === codeTab || code === codeReturn;
    }
    function isHex$1(code) {
      return code >= codeZero && code <= codeNine || code >= codeUppercaseA && code <= codeUppercaseF || code >= codeLowercaseA && code <= codeLowercaseF;
    }
    function isDigit(code) {
      return code >= codeZero && code <= codeNine;
    }
    function isNonZeroDigit(code) {
      return code >= codeOne && code <= codeNine;
    }
    function isValidStringCharacter(code) {
      return code >= 0x20 && code <= 0x10ffff;
    }
    function isDeepEqual(a, b) {
      if (a === b) {
        return true;
      }
      if (Array.isArray(a) && Array.isArray(b)) {
        return a.length === b.length && a.every(function (item, index) {
          return isDeepEqual(item, b[index]);
        });
      }
      if (isObject(a) && isObject(b)) {
        var keys = _toConsumableArray(new Set([].concat(_toConsumableArray(Object.keys(a)), _toConsumableArray(Object.keys(b)))));
        return keys.every(function (key) {
          return isDeepEqual(a[key], b[key]);
        });
      }
      return false;
    }
    function isObject(value) {
      return _typeof$1(value) === 'object' && value !== null;
    }

    // map with all escape characters
    var escapeCharacters = {
      '"': '"',
      '\\': '\\',
      '/': '/',
      b: '\b',
      f: '\f',
      n: '\n',
      r: '\r',
      t: '\t'
      // note that \u is handled separately in parseString()
    };

    var codeBackslash = 0x5c; // "\"
    var codeOpeningBrace = 0x7b; // "{"
    var codeClosingBrace = 0x7d; // "}"
    var codeOpeningBracket = 0x5b; // "["
    var codeClosingBracket = 0x5d; // "]"
    var codeSpace = 0x20; // " "
    var codeNewline = 0xa; // "\n"
    var codeTab = 0x9; // "\t"
    var codeReturn = 0xd; // "\r"
    var codeDoubleQuote = 0x0022; // "
    var codePlus = 0x2b; // "+"
    var codeMinus = 0x2d; // "-"
    var codeZero = 0x30;
    var codeOne = 0x31;
    var codeNine = 0x39;
    var codeComma = 0x2c; // ","
    var codeDot = 0x2e; // "." (dot, period)
    var codeColon = 0x3a; // ":"
    var codeUppercaseA = 0x41; // "A"
    var codeLowercaseA = 0x61; // "a"
    var codeUppercaseE = 0x45; // "E"
    var codeLowercaseE = 0x65; // "e"
    var codeUppercaseF = 0x46; // "F"
    var codeLowercaseF = 0x66; // "f"

    function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

    /**
     * The LosslessJSON.stringify() method converts a JavaScript value to a JSON string,
     * optionally replacing values if a replacer function is specified, or
     * optionally including only the specified properties if a replacer array is specified.
     *
     * @param value
     * The value to convert to a JSON string.
     *
     * @param [replacer]
     * A function that alters the behavior of the stringification process,
     * or an array of String and Number objects that serve as a whitelist for
     * selecting the properties of the value object to be included in the JSON string.
     * If this value is null or not provided, all properties of the object are
     * included in the resulting JSON string.
     *
     * @param [space]
     * A String or Number object that's used to insert white space into the output
     * JSON string for readability purposes. If this is a Number, it indicates the
     * number of space characters to use as white space; this number is capped at 10
     * if it's larger than that. Values less than 1 indicate that no space should be
     * used. If this is a String, the string (or the first 10 characters of the string,
     * if it's longer than that) is used as white space. If this parameter is not
     * provided (or is null), no white space is used.
     *
     * @param [numberStringifiers]
     * An optional list with additional number stringifiers, for example to serialize
     * a BigNumber. The output of the function must be valid stringified JSON.
     * When `undefined` is returned, the property will be deleted from the object.
     * The difference with using a `replacer` is that the output of a `replacer`
     * must be JSON and will be stringified afterwards, whereas the output of the
     * `numberStringifiers` is already stringified JSON.
     *
     * @returns Returns the string representation of the JSON object.
     */
    function stringify(value, replacer, space, numberStringifiers) {
      var resolvedSpace = resolveSpace(space);
      var replacedValue = typeof replacer === 'function' ? replacer.call({
        '': value
      }, '', value) : value;
      return stringifyValue(replacedValue, '');

      /**
       * Stringify a value
       */
      function stringifyValue(value, indent) {
        if (Array.isArray(numberStringifiers)) {
          var stringifier = numberStringifiers.find(function (item) {
            return item.test(value);
          });
          if (stringifier) {
            var str = stringifier.stringify(value);
            if (typeof str !== 'string' || !isNumber(str)) {
              throw new Error('Invalid JSON number: ' + 'output of a number stringifier must be a string containing a JSON number ' + "(output: ".concat(str, ")"));
            }
            return str;
          }
        }

        // boolean, null, number, string, or date
        if (typeof value === 'boolean' || typeof value === 'number' || typeof value === 'string' || value === null || value instanceof Date || value instanceof Boolean || value instanceof Number || value instanceof String) {
          return JSON.stringify(value);
        }

        // lossless number, the secret ingredient :)
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        if (value && value.isLosslessNumber) {
          return value.toString();
        }

        // BigInt
        if (typeof value === 'bigint') {
          return value.toString();
        }

        // Array
        if (Array.isArray(value)) {
          return stringifyArray(value, indent);
        }

        // Object (test lastly!)
        if (value && _typeof(value) === 'object') {
          return stringifyObject(value, indent);
        }
        return undefined;
      }

      /**
       * Stringify an array
       */
      function stringifyArray(array, indent) {
        if (array.length === 0) {
          return '[]';
        }
        var childIndent = resolvedSpace ? indent + resolvedSpace : undefined;
        var str = resolvedSpace ? '[\n' : '[';
        for (var i = 0; i < array.length; i++) {
          var item = typeof replacer === 'function' ? replacer.call(array, String(i), array[i]) : array[i];
          if (resolvedSpace) {
            str += childIndent;
          }
          if (typeof item !== 'undefined' && typeof item !== 'function') {
            str += stringifyValue(item, childIndent);
          } else {
            str += 'null';
          }
          if (i < array.length - 1) {
            str += resolvedSpace ? ',\n' : ',';
          }
        }
        str += resolvedSpace ? '\n' + indent + ']' : ']';
        return str;
      }

      /**
       * Stringify an object
       */
      function stringifyObject(object, indent) {
        if (typeof object.toJSON === 'function') {
          return stringify(object.toJSON(), replacer, space, undefined);
        }
        var keys = Array.isArray(replacer) ? replacer.map(String) : Object.keys(object);
        if (keys.length === 0) {
          return '{}';
        }
        var childIndent = resolvedSpace ? indent + resolvedSpace : undefined;
        var first = true;
        var str = resolvedSpace ? '{\n' : '{';
        keys.forEach(function (key) {
          var value = typeof replacer === 'function' ? replacer.call(object, key, object[key]) : object[key];
          if (includeProperty(key, value)) {
            if (first) {
              first = false;
            } else {
              str += resolvedSpace ? ',\n' : ',';
            }
            var keyStr = JSON.stringify(key);
            str += resolvedSpace ? childIndent + keyStr + ': ' : keyStr + ':';
            str += stringifyValue(value, childIndent);
          }
        });
        str += resolvedSpace ? '\n' + indent + '}' : '}';
        return str;
      }

      /**
       * Test whether to include a property in a stringified object or not.
       */
      function includeProperty(key, value) {
        return typeof value !== 'undefined' && typeof value !== 'function' && _typeof(value) !== 'symbol';
      }
    }

    /**
     * Resolve a JSON stringify space:
     * replace a number with a string containing that number of spaces
     */
    function resolveSpace(space) {
      if (typeof space === 'number') {
        return ' '.repeat(space);
      }
      if (typeof space === 'string' && space !== '') {
        return space;
      }
      return undefined;
    }

    /*! pako 2.1.0 https://github.com/nodeca/pako @license (MIT AND Zlib) */
    // (C) 1995-2013 Jean-loup Gailly and Mark Adler
    // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
    //
    // This software is provided 'as-is', without any express or implied
    // warranty. In no event will the authors be held liable for any damages
    // arising from the use of this software.
    //
    // Permission is granted to anyone to use this software for any purpose,
    // including commercial applications, and to alter it and redistribute it
    // freely, subject to the following restrictions:
    //
    // 1. The origin of this software must not be misrepresented; you must not
    //   claim that you wrote the original software. If you use this software
    //   in a product, an acknowledgment in the product documentation would be
    //   appreciated but is not required.
    // 2. Altered source versions must be plainly marked as such, and must not be
    //   misrepresented as being the original software.
    // 3. This notice may not be removed or altered from any source distribution.

    /* eslint-disable space-unary-ops */

    /* Public constants ==========================================================*/
    /* ===========================================================================*/


    //const Z_FILTERED          = 1;
    //const Z_HUFFMAN_ONLY      = 2;
    //const Z_RLE               = 3;
    const Z_FIXED$1               = 4;
    //const Z_DEFAULT_STRATEGY  = 0;

    /* Possible values of the data_type field (though see inflate()) */
    const Z_BINARY              = 0;
    const Z_TEXT                = 1;
    //const Z_ASCII             = 1; // = Z_TEXT
    const Z_UNKNOWN$1             = 2;

    /*============================================================================*/


    function zero$1(buf) { let len = buf.length; while (--len >= 0) { buf[len] = 0; } }

    // From zutil.h

    const STORED_BLOCK = 0;
    const STATIC_TREES = 1;
    const DYN_TREES    = 2;
    /* The three kinds of block type */

    const MIN_MATCH$1    = 3;
    const MAX_MATCH$1    = 258;
    /* The minimum and maximum match lengths */

    // From deflate.h
    /* ===========================================================================
     * Internal compression state.
     */

    const LENGTH_CODES$1  = 29;
    /* number of length codes, not counting the special END_BLOCK code */

    const LITERALS$1      = 256;
    /* number of literal bytes 0..255 */

    const L_CODES$1       = LITERALS$1 + 1 + LENGTH_CODES$1;
    /* number of Literal or Length codes, including the END_BLOCK code */

    const D_CODES$1       = 30;
    /* number of distance codes */

    const BL_CODES$1      = 19;
    /* number of codes used to transfer the bit lengths */

    const HEAP_SIZE$1     = 2 * L_CODES$1 + 1;
    /* maximum heap size */

    const MAX_BITS$1      = 15;
    /* All codes must not exceed MAX_BITS bits */

    const Buf_size      = 16;
    /* size of bit buffer in bi_buf */


    /* ===========================================================================
     * Constants
     */

    const MAX_BL_BITS = 7;
    /* Bit length codes must not exceed MAX_BL_BITS bits */

    const END_BLOCK   = 256;
    /* end of block literal code */

    const REP_3_6     = 16;
    /* repeat previous bit length 3-6 times (2 bits of repeat count) */

    const REPZ_3_10   = 17;
    /* repeat a zero length 3-10 times  (3 bits of repeat count) */

    const REPZ_11_138 = 18;
    /* repeat a zero length 11-138 times  (7 bits of repeat count) */

    /* eslint-disable comma-spacing,array-bracket-spacing */
    const extra_lbits =   /* extra bits for each length code */
      new Uint8Array([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0]);

    const extra_dbits =   /* extra bits for each distance code */
      new Uint8Array([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]);

    const extra_blbits =  /* extra bits for each bit length code */
      new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7]);

    const bl_order =
      new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);
    /* eslint-enable comma-spacing,array-bracket-spacing */

    /* The lengths of the bit length codes are sent in order of decreasing
     * probability, to avoid transmitting the lengths for unused bit length codes.
     */

    /* ===========================================================================
     * Local data. These are initialized only once.
     */

    // We pre-fill arrays with 0 to avoid uninitialized gaps

    const DIST_CODE_LEN = 512; /* see definition of array dist_code below */

    // !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1
    const static_ltree  = new Array((L_CODES$1 + 2) * 2);
    zero$1(static_ltree);
    /* The static literal tree. Since the bit lengths are imposed, there is no
     * need for the L_CODES extra codes used during heap construction. However
     * The codes 286 and 287 are needed to build a canonical tree (see _tr_init
     * below).
     */

    const static_dtree  = new Array(D_CODES$1 * 2);
    zero$1(static_dtree);
    /* The static distance tree. (Actually a trivial tree since all codes use
     * 5 bits.)
     */

    const _dist_code    = new Array(DIST_CODE_LEN);
    zero$1(_dist_code);
    /* Distance codes. The first 256 values correspond to the distances
     * 3 .. 258, the last 256 values correspond to the top 8 bits of
     * the 15 bit distances.
     */

    const _length_code  = new Array(MAX_MATCH$1 - MIN_MATCH$1 + 1);
    zero$1(_length_code);
    /* length code for each normalized match length (0 == MIN_MATCH) */

    const base_length   = new Array(LENGTH_CODES$1);
    zero$1(base_length);
    /* First normalized length for each code (0 = MIN_MATCH) */

    const base_dist     = new Array(D_CODES$1);
    zero$1(base_dist);
    /* First normalized distance for each code (0 = distance of 1) */


    function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {

      this.static_tree  = static_tree;  /* static tree or NULL */
      this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */
      this.extra_base   = extra_base;   /* base index for extra_bits */
      this.elems        = elems;        /* max number of elements in the tree */
      this.max_length   = max_length;   /* max bit length for the codes */

      // show if `static_tree` has data or dummy - needed for monomorphic objects
      this.has_stree    = static_tree && static_tree.length;
    }


    let static_l_desc;
    let static_d_desc;
    let static_bl_desc;


    function TreeDesc(dyn_tree, stat_desc) {
      this.dyn_tree = dyn_tree;     /* the dynamic tree */
      this.max_code = 0;            /* largest code with non zero frequency */
      this.stat_desc = stat_desc;   /* the corresponding static tree */
    }



    const d_code = (dist) => {

      return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];
    };


    /* ===========================================================================
     * Output a short LSB first on the stream.
     * IN assertion: there is enough room in pendingBuf.
     */
    const put_short = (s, w) => {
    //    put_byte(s, (uch)((w) & 0xff));
    //    put_byte(s, (uch)((ush)(w) >> 8));
      s.pending_buf[s.pending++] = (w) & 0xff;
      s.pending_buf[s.pending++] = (w >>> 8) & 0xff;
    };


    /* ===========================================================================
     * Send a value on a given number of bits.
     * IN assertion: length <= 16 and value fits in length bits.
     */
    const send_bits = (s, value, length) => {

      if (s.bi_valid > (Buf_size - length)) {
        s.bi_buf |= (value << s.bi_valid) & 0xffff;
        put_short(s, s.bi_buf);
        s.bi_buf = value >> (Buf_size - s.bi_valid);
        s.bi_valid += length - Buf_size;
      } else {
        s.bi_buf |= (value << s.bi_valid) & 0xffff;
        s.bi_valid += length;
      }
    };


    const send_code = (s, c, tree) => {

      send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);
    };


    /* ===========================================================================
     * Reverse the first len bits of a code, using straightforward code (a faster
     * method would use a table)
     * IN assertion: 1 <= len <= 15
     */
    const bi_reverse = (code, len) => {

      let res = 0;
      do {
        res |= code & 1;
        code >>>= 1;
        res <<= 1;
      } while (--len > 0);
      return res >>> 1;
    };


    /* ===========================================================================
     * Flush the bit buffer, keeping at most 7 bits in it.
     */
    const bi_flush = (s) => {

      if (s.bi_valid === 16) {
        put_short(s, s.bi_buf);
        s.bi_buf = 0;
        s.bi_valid = 0;

      } else if (s.bi_valid >= 8) {
        s.pending_buf[s.pending++] = s.bi_buf & 0xff;
        s.bi_buf >>= 8;
        s.bi_valid -= 8;
      }
    };


    /* ===========================================================================
     * Compute the optimal bit lengths for a tree and update the total bit length
     * for the current block.
     * IN assertion: the fields freq and dad are set, heap[heap_max] and
     *    above are the tree nodes sorted by increasing frequency.
     * OUT assertions: the field len is set to the optimal bit length, the
     *     array bl_count contains the frequencies for each bit length.
     *     The length opt_len is updated; static_len is also updated if stree is
     *     not null.
     */
    const gen_bitlen = (s, desc) => {
    //    deflate_state *s;
    //    tree_desc *desc;    /* the tree descriptor */

      const tree            = desc.dyn_tree;
      const max_code        = desc.max_code;
      const stree           = desc.stat_desc.static_tree;
      const has_stree       = desc.stat_desc.has_stree;
      const extra           = desc.stat_desc.extra_bits;
      const base            = desc.stat_desc.extra_base;
      const max_length      = desc.stat_desc.max_length;
      let h;              /* heap index */
      let n, m;           /* iterate over the tree elements */
      let bits;           /* bit length */
      let xbits;          /* extra bits */
      let f;              /* frequency */
      let overflow = 0;   /* number of elements with bit length too large */

      for (bits = 0; bits <= MAX_BITS$1; bits++) {
        s.bl_count[bits] = 0;
      }

      /* In a first pass, compute the optimal bit lengths (which may
       * overflow in the case of the bit length tree).
       */
      tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */

      for (h = s.heap_max + 1; h < HEAP_SIZE$1; h++) {
        n = s.heap[h];
        bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;
        if (bits > max_length) {
          bits = max_length;
          overflow++;
        }
        tree[n * 2 + 1]/*.Len*/ = bits;
        /* We overwrite tree[n].Dad which is no longer needed */

        if (n > max_code) { continue; } /* not a leaf node */

        s.bl_count[bits]++;
        xbits = 0;
        if (n >= base) {
          xbits = extra[n - base];
        }
        f = tree[n * 2]/*.Freq*/;
        s.opt_len += f * (bits + xbits);
        if (has_stree) {
          s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);
        }
      }
      if (overflow === 0) { return; }

      // Tracev((stderr,"\nbit length overflow\n"));
      /* This happens for example on obj2 and pic of the Calgary corpus */

      /* Find the first bit length which could increase: */
      do {
        bits = max_length - 1;
        while (s.bl_count[bits] === 0) { bits--; }
        s.bl_count[bits]--;      /* move one leaf down the tree */
        s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */
        s.bl_count[max_length]--;
        /* The brother of the overflow item also moves one step up,
         * but this does not affect bl_count[max_length]
         */
        overflow -= 2;
      } while (overflow > 0);

      /* Now recompute all bit lengths, scanning in increasing frequency.
       * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
       * lengths instead of fixing only the wrong ones. This idea is taken
       * from 'ar' written by Haruhiko Okumura.)
       */
      for (bits = max_length; bits !== 0; bits--) {
        n = s.bl_count[bits];
        while (n !== 0) {
          m = s.heap[--h];
          if (m > max_code) { continue; }
          if (tree[m * 2 + 1]/*.Len*/ !== bits) {
            // Tracev((stderr,"code %d bits %d->%d\n", m, tree[m].Len, bits));
            s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;
            tree[m * 2 + 1]/*.Len*/ = bits;
          }
          n--;
        }
      }
    };


    /* ===========================================================================
     * Generate the codes for a given tree and bit counts (which need not be
     * optimal).
     * IN assertion: the array bl_count contains the bit length statistics for
     * the given tree and the field len is set for all tree elements.
     * OUT assertion: the field code is set for all tree elements of non
     *     zero code length.
     */
    const gen_codes = (tree, max_code, bl_count) => {
    //    ct_data *tree;             /* the tree to decorate */
    //    int max_code;              /* largest code with non zero frequency */
    //    ushf *bl_count;            /* number of codes at each bit length */

      const next_code = new Array(MAX_BITS$1 + 1); /* next code value for each bit length */
      let code = 0;              /* running code value */
      let bits;                  /* bit index */
      let n;                     /* code index */

      /* The distribution counts are first used to generate the code values
       * without bit reversal.
       */
      for (bits = 1; bits <= MAX_BITS$1; bits++) {
        code = (code + bl_count[bits - 1]) << 1;
        next_code[bits] = code;
      }
      /* Check that the bit counts in bl_count are consistent. The last code
       * must be all ones.
       */
      //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
      //        "inconsistent bit counts");
      //Tracev((stderr,"\ngen_codes: max_code %d ", max_code));

      for (n = 0;  n <= max_code; n++) {
        let len = tree[n * 2 + 1]/*.Len*/;
        if (len === 0) { continue; }
        /* Now reverse the bits */
        tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);

        //Tracecv(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
        //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));
      }
    };


    /* ===========================================================================
     * Initialize the various 'constant' tables.
     */
    const tr_static_init = () => {

      let n;        /* iterates over tree elements */
      let bits;     /* bit counter */
      let length;   /* length value */
      let code;     /* code value */
      let dist;     /* distance index */
      const bl_count = new Array(MAX_BITS$1 + 1);
      /* number of codes at each bit length for an optimal tree */

      // do check in _tr_init()
      //if (static_init_done) return;

      /* For some embedded targets, global variables are not initialized: */
    /*#ifdef NO_INIT_GLOBAL_POINTERS
      static_l_desc.static_tree = static_ltree;
      static_l_desc.extra_bits = extra_lbits;
      static_d_desc.static_tree = static_dtree;
      static_d_desc.extra_bits = extra_dbits;
      static_bl_desc.extra_bits = extra_blbits;
    #endif*/

      /* Initialize the mapping length (0..255) -> length code (0..28) */
      length = 0;
      for (code = 0; code < LENGTH_CODES$1 - 1; code++) {
        base_length[code] = length;
        for (n = 0; n < (1 << extra_lbits[code]); n++) {
          _length_code[length++] = code;
        }
      }
      //Assert (length == 256, "tr_static_init: length != 256");
      /* Note that the length 255 (match length 258) can be represented
       * in two different ways: code 284 + 5 bits or code 285, so we
       * overwrite length_code[255] to use the best encoding:
       */
      _length_code[length - 1] = code;

      /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
      dist = 0;
      for (code = 0; code < 16; code++) {
        base_dist[code] = dist;
        for (n = 0; n < (1 << extra_dbits[code]); n++) {
          _dist_code[dist++] = code;
        }
      }
      //Assert (dist == 256, "tr_static_init: dist != 256");
      dist >>= 7; /* from now on, all distances are divided by 128 */
      for (; code < D_CODES$1; code++) {
        base_dist[code] = dist << 7;
        for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {
          _dist_code[256 + dist++] = code;
        }
      }
      //Assert (dist == 256, "tr_static_init: 256+dist != 512");

      /* Construct the codes of the static literal tree */
      for (bits = 0; bits <= MAX_BITS$1; bits++) {
        bl_count[bits] = 0;
      }

      n = 0;
      while (n <= 143) {
        static_ltree[n * 2 + 1]/*.Len*/ = 8;
        n++;
        bl_count[8]++;
      }
      while (n <= 255) {
        static_ltree[n * 2 + 1]/*.Len*/ = 9;
        n++;
        bl_count[9]++;
      }
      while (n <= 279) {
        static_ltree[n * 2 + 1]/*.Len*/ = 7;
        n++;
        bl_count[7]++;
      }
      while (n <= 287) {
        static_ltree[n * 2 + 1]/*.Len*/ = 8;
        n++;
        bl_count[8]++;
      }
      /* Codes 286 and 287 do not exist, but we must include them in the
       * tree construction to get a canonical Huffman tree (longest code
       * all ones)
       */
      gen_codes(static_ltree, L_CODES$1 + 1, bl_count);

      /* The static distance tree is trivial: */
      for (n = 0; n < D_CODES$1; n++) {
        static_dtree[n * 2 + 1]/*.Len*/ = 5;
        static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);
      }

      // Now data ready and we can init static trees
      static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS$1 + 1, L_CODES$1, MAX_BITS$1);
      static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES$1, MAX_BITS$1);
      static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES$1, MAX_BL_BITS);

      //static_init_done = true;
    };


    /* ===========================================================================
     * Initialize a new block.
     */
    const init_block = (s) => {

      let n; /* iterates over tree elements */

      /* Initialize the trees. */
      for (n = 0; n < L_CODES$1;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }
      for (n = 0; n < D_CODES$1;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }
      for (n = 0; n < BL_CODES$1; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }

      s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;
      s.opt_len = s.static_len = 0;
      s.sym_next = s.matches = 0;
    };


    /* ===========================================================================
     * Flush the bit buffer and align the output on a byte boundary
     */
    const bi_windup = (s) =>
    {
      if (s.bi_valid > 8) {
        put_short(s, s.bi_buf);
      } else if (s.bi_valid > 0) {
        //put_byte(s, (Byte)s->bi_buf);
        s.pending_buf[s.pending++] = s.bi_buf;
      }
      s.bi_buf = 0;
      s.bi_valid = 0;
    };

    /* ===========================================================================
     * Compares to subtrees, using the tree depth as tie breaker when
     * the subtrees have equal frequency. This minimizes the worst case length.
     */
    const smaller = (tree, n, m, depth) => {

      const _n2 = n * 2;
      const _m2 = m * 2;
      return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||
             (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));
    };

    /* ===========================================================================
     * Restore the heap property by moving down the tree starting at node k,
     * exchanging a node with the smallest of its two sons if necessary, stopping
     * when the heap property is re-established (each father smaller than its
     * two sons).
     */
    const pqdownheap = (s, tree, k) => {
    //    deflate_state *s;
    //    ct_data *tree;  /* the tree to restore */
    //    int k;               /* node to move down */

      const v = s.heap[k];
      let j = k << 1;  /* left son of k */
      while (j <= s.heap_len) {
        /* Set j to the smallest of the two sons: */
        if (j < s.heap_len &&
          smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {
          j++;
        }
        /* Exit if v is smaller than both sons */
        if (smaller(tree, v, s.heap[j], s.depth)) { break; }

        /* Exchange v with the smallest son */
        s.heap[k] = s.heap[j];
        k = j;

        /* And continue down the tree, setting j to the left son of k */
        j <<= 1;
      }
      s.heap[k] = v;
    };


    // inlined manually
    // const SMALLEST = 1;

    /* ===========================================================================
     * Send the block data compressed using the given Huffman trees
     */
    const compress_block = (s, ltree, dtree) => {
    //    deflate_state *s;
    //    const ct_data *ltree; /* literal tree */
    //    const ct_data *dtree; /* distance tree */

      let dist;           /* distance of matched string */
      let lc;             /* match length or unmatched char (if dist == 0) */
      let sx = 0;         /* running index in sym_buf */
      let code;           /* the code to send */
      let extra;          /* number of extra bits to send */

      if (s.sym_next !== 0) {
        do {
          dist = s.pending_buf[s.sym_buf + sx++] & 0xff;
          dist += (s.pending_buf[s.sym_buf + sx++] & 0xff) << 8;
          lc = s.pending_buf[s.sym_buf + sx++];
          if (dist === 0) {
            send_code(s, lc, ltree); /* send a literal byte */
            //Tracecv(isgraph(lc), (stderr," '%c' ", lc));
          } else {
            /* Here, lc is the match length - MIN_MATCH */
            code = _length_code[lc];
            send_code(s, code + LITERALS$1 + 1, ltree); /* send the length code */
            extra = extra_lbits[code];
            if (extra !== 0) {
              lc -= base_length[code];
              send_bits(s, lc, extra);       /* send the extra length bits */
            }
            dist--; /* dist is now the match distance - 1 */
            code = d_code(dist);
            //Assert (code < D_CODES, "bad d_code");

            send_code(s, code, dtree);       /* send the distance code */
            extra = extra_dbits[code];
            if (extra !== 0) {
              dist -= base_dist[code];
              send_bits(s, dist, extra);   /* send the extra distance bits */
            }
          } /* literal or match pair ? */

          /* Check that the overlay between pending_buf and sym_buf is ok: */
          //Assert(s->pending < s->lit_bufsize + sx, "pendingBuf overflow");

        } while (sx < s.sym_next);
      }

      send_code(s, END_BLOCK, ltree);
    };


    /* ===========================================================================
     * Construct one Huffman tree and assigns the code bit strings and lengths.
     * Update the total bit length for the current block.
     * IN assertion: the field freq is set for all tree elements.
     * OUT assertions: the fields len and code are set to the optimal bit length
     *     and corresponding code. The length opt_len is updated; static_len is
     *     also updated if stree is not null. The field max_code is set.
     */
    const build_tree = (s, desc) => {
    //    deflate_state *s;
    //    tree_desc *desc; /* the tree descriptor */

      const tree     = desc.dyn_tree;
      const stree    = desc.stat_desc.static_tree;
      const has_stree = desc.stat_desc.has_stree;
      const elems    = desc.stat_desc.elems;
      let n, m;          /* iterate over heap elements */
      let max_code = -1; /* largest code with non zero frequency */
      let node;          /* new node being created */

      /* Construct the initial heap, with least frequent element in
       * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
       * heap[0] is not used.
       */
      s.heap_len = 0;
      s.heap_max = HEAP_SIZE$1;

      for (n = 0; n < elems; n++) {
        if (tree[n * 2]/*.Freq*/ !== 0) {
          s.heap[++s.heap_len] = max_code = n;
          s.depth[n] = 0;

        } else {
          tree[n * 2 + 1]/*.Len*/ = 0;
        }
      }

      /* The pkzip format requires that at least one distance code exists,
       * and that at least one bit should be sent even if there is only one
       * possible code. So to avoid special checks later on we force at least
       * two codes of non zero frequency.
       */
      while (s.heap_len < 2) {
        node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);
        tree[node * 2]/*.Freq*/ = 1;
        s.depth[node] = 0;
        s.opt_len--;

        if (has_stree) {
          s.static_len -= stree[node * 2 + 1]/*.Len*/;
        }
        /* node is 0 or 1 so it does not have extra bits */
      }
      desc.max_code = max_code;

      /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
       * establish sub-heaps of increasing lengths:
       */
      for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }

      /* Construct the Huffman tree by repeatedly combining the least two
       * frequent nodes.
       */
      node = elems;              /* next internal node of the tree */
      do {
        //pqremove(s, tree, n);  /* n = node of least frequency */
        /*** pqremove ***/
        n = s.heap[1/*SMALLEST*/];
        s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];
        pqdownheap(s, tree, 1/*SMALLEST*/);
        /***/

        m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */

        s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */
        s.heap[--s.heap_max] = m;

        /* Create a new node father of n and m */
        tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;
        s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;
        tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;

        /* and insert the new node in the heap */
        s.heap[1/*SMALLEST*/] = node++;
        pqdownheap(s, tree, 1/*SMALLEST*/);

      } while (s.heap_len >= 2);

      s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];

      /* At this point, the fields freq and dad are set. We can now
       * generate the bit lengths.
       */
      gen_bitlen(s, desc);

      /* The field len is now set, we can generate the bit codes */
      gen_codes(tree, max_code, s.bl_count);
    };


    /* ===========================================================================
     * Scan a literal or distance tree to determine the frequencies of the codes
     * in the bit length tree.
     */
    const scan_tree = (s, tree, max_code) => {
    //    deflate_state *s;
    //    ct_data *tree;   /* the tree to be scanned */
    //    int max_code;    /* and its largest code of non zero frequency */

      let n;                     /* iterates over all tree elements */
      let prevlen = -1;          /* last emitted length */
      let curlen;                /* length of current code */

      let nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

      let count = 0;             /* repeat count of the current code */
      let max_count = 7;         /* max repeat count */
      let min_count = 4;         /* min repeat count */

      if (nextlen === 0) {
        max_count = 138;
        min_count = 3;
      }
      tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */

      for (n = 0; n <= max_code; n++) {
        curlen = nextlen;
        nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

        if (++count < max_count && curlen === nextlen) {
          continue;

        } else if (count < min_count) {
          s.bl_tree[curlen * 2]/*.Freq*/ += count;

        } else if (curlen !== 0) {

          if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }
          s.bl_tree[REP_3_6 * 2]/*.Freq*/++;

        } else if (count <= 10) {
          s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;

        } else {
          s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;
        }

        count = 0;
        prevlen = curlen;

        if (nextlen === 0) {
          max_count = 138;
          min_count = 3;

        } else if (curlen === nextlen) {
          max_count = 6;
          min_count = 3;

        } else {
          max_count = 7;
          min_count = 4;
        }
      }
    };


    /* ===========================================================================
     * Send a literal or distance tree in compressed form, using the codes in
     * bl_tree.
     */
    const send_tree = (s, tree, max_code) => {
    //    deflate_state *s;
    //    ct_data *tree; /* the tree to be scanned */
    //    int max_code;       /* and its largest code of non zero frequency */

      let n;                     /* iterates over all tree elements */
      let prevlen = -1;          /* last emitted length */
      let curlen;                /* length of current code */

      let nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */

      let count = 0;             /* repeat count of the current code */
      let max_count = 7;         /* max repeat count */
      let min_count = 4;         /* min repeat count */

      /* tree[max_code+1].Len = -1; */  /* guard already set */
      if (nextlen === 0) {
        max_count = 138;
        min_count = 3;
      }

      for (n = 0; n <= max_code; n++) {
        curlen = nextlen;
        nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;

        if (++count < max_count && curlen === nextlen) {
          continue;

        } else if (count < min_count) {
          do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);

        } else if (curlen !== 0) {
          if (curlen !== prevlen) {
            send_code(s, curlen, s.bl_tree);
            count--;
          }
          //Assert(count >= 3 && count <= 6, " 3_6?");
          send_code(s, REP_3_6, s.bl_tree);
          send_bits(s, count - 3, 2);

        } else if (count <= 10) {
          send_code(s, REPZ_3_10, s.bl_tree);
          send_bits(s, count - 3, 3);

        } else {
          send_code(s, REPZ_11_138, s.bl_tree);
          send_bits(s, count - 11, 7);
        }

        count = 0;
        prevlen = curlen;
        if (nextlen === 0) {
          max_count = 138;
          min_count = 3;

        } else if (curlen === nextlen) {
          max_count = 6;
          min_count = 3;

        } else {
          max_count = 7;
          min_count = 4;
        }
      }
    };


    /* ===========================================================================
     * Construct the Huffman tree for the bit lengths and return the index in
     * bl_order of the last bit length code to send.
     */
    const build_bl_tree = (s) => {

      let max_blindex;  /* index of last bit length code of non zero freq */

      /* Determine the bit length frequencies for literal and distance trees */
      scan_tree(s, s.dyn_ltree, s.l_desc.max_code);
      scan_tree(s, s.dyn_dtree, s.d_desc.max_code);

      /* Build the bit length tree: */
      build_tree(s, s.bl_desc);
      /* opt_len now includes the length of the tree representations, except
       * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
       */

      /* Determine the number of bit length codes to send. The pkzip format
       * requires that at least 4 bit length codes be sent. (appnote.txt says
       * 3 but the actual value used is 4.)
       */
      for (max_blindex = BL_CODES$1 - 1; max_blindex >= 3; max_blindex--) {
        if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {
          break;
        }
      }
      /* Update opt_len to include the bit length tree and counts */
      s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;
      //Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
      //        s->opt_len, s->static_len));

      return max_blindex;
    };


    /* ===========================================================================
     * Send the header for a block using dynamic Huffman trees: the counts, the
     * lengths of the bit length codes, the literal tree and the distance tree.
     * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
     */
    const send_all_trees = (s, lcodes, dcodes, blcodes) => {
    //    deflate_state *s;
    //    int lcodes, dcodes, blcodes; /* number of codes for each tree */

      let rank;                    /* index in bl_order */

      //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
      //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
      //        "too many codes");
      //Tracev((stderr, "\nbl counts: "));
      send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */
      send_bits(s, dcodes - 1,   5);
      send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */
      for (rank = 0; rank < blcodes; rank++) {
        //Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
        send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);
      }
      //Tracev((stderr, "\nbl tree: sent %ld", s->bits_sent));

      send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */
      //Tracev((stderr, "\nlit tree: sent %ld", s->bits_sent));

      send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */
      //Tracev((stderr, "\ndist tree: sent %ld", s->bits_sent));
    };


    /* ===========================================================================
     * Check if the data type is TEXT or BINARY, using the following algorithm:
     * - TEXT if the two conditions below are satisfied:
     *    a) There are no non-portable control characters belonging to the
     *       "block list" (0..6, 14..25, 28..31).
     *    b) There is at least one printable character belonging to the
     *       "allow list" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).
     * - BINARY otherwise.
     * - The following partially-portable control characters form a
     *   "gray list" that is ignored in this detection algorithm:
     *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).
     * IN assertion: the fields Freq of dyn_ltree are set.
     */
    const detect_data_type = (s) => {
      /* block_mask is the bit mask of block-listed bytes
       * set bits 0..6, 14..25, and 28..31
       * 0xf3ffc07f = binary 11110011111111111100000001111111
       */
      let block_mask = 0xf3ffc07f;
      let n;

      /* Check for non-textual ("block-listed") bytes. */
      for (n = 0; n <= 31; n++, block_mask >>>= 1) {
        if ((block_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {
          return Z_BINARY;
        }
      }

      /* Check for textual ("allow-listed") bytes. */
      if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||
          s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {
        return Z_TEXT;
      }
      for (n = 32; n < LITERALS$1; n++) {
        if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {
          return Z_TEXT;
        }
      }

      /* There are no "block-listed" or "allow-listed" bytes:
       * this stream either is empty or has tolerated ("gray-listed") bytes only.
       */
      return Z_BINARY;
    };


    let static_init_done = false;

    /* ===========================================================================
     * Initialize the tree data structures for a new zlib stream.
     */
    const _tr_init$1 = (s) =>
    {

      if (!static_init_done) {
        tr_static_init();
        static_init_done = true;
      }

      s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);
      s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);
      s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);

      s.bi_buf = 0;
      s.bi_valid = 0;

      /* Initialize the first block of the first file: */
      init_block(s);
    };


    /* ===========================================================================
     * Send a stored block
     */
    const _tr_stored_block$1 = (s, buf, stored_len, last) => {
    //DeflateState *s;
    //charf *buf;       /* input block */
    //ulg stored_len;   /* length of input block */
    //int last;         /* one if this is the last block for a file */

      send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */
      bi_windup(s);        /* align on byte boundary */
      put_short(s, stored_len);
      put_short(s, ~stored_len);
      if (stored_len) {
        s.pending_buf.set(s.window.subarray(buf, buf + stored_len), s.pending);
      }
      s.pending += stored_len;
    };


    /* ===========================================================================
     * Send one empty static block to give enough lookahead for inflate.
     * This takes 10 bits, of which 7 may remain in the bit buffer.
     */
    const _tr_align$1 = (s) => {
      send_bits(s, STATIC_TREES << 1, 3);
      send_code(s, END_BLOCK, static_ltree);
      bi_flush(s);
    };


    /* ===========================================================================
     * Determine the best encoding for the current block: dynamic trees, static
     * trees or store, and write out the encoded block.
     */
    const _tr_flush_block$1 = (s, buf, stored_len, last) => {
    //DeflateState *s;
    //charf *buf;       /* input block, or NULL if too old */
    //ulg stored_len;   /* length of input block */
    //int last;         /* one if this is the last block for a file */

      let opt_lenb, static_lenb;  /* opt_len and static_len in bytes */
      let max_blindex = 0;        /* index of last bit length code of non zero freq */

      /* Build the Huffman trees unless a stored block is forced */
      if (s.level > 0) {

        /* Check if the file is binary or text */
        if (s.strm.data_type === Z_UNKNOWN$1) {
          s.strm.data_type = detect_data_type(s);
        }

        /* Construct the literal and distance trees */
        build_tree(s, s.l_desc);
        // Tracev((stderr, "\nlit data: dyn %ld, stat %ld", s->opt_len,
        //        s->static_len));

        build_tree(s, s.d_desc);
        // Tracev((stderr, "\ndist data: dyn %ld, stat %ld", s->opt_len,
        //        s->static_len));
        /* At this point, opt_len and static_len are the total bit lengths of
         * the compressed block data, excluding the tree representations.
         */

        /* Build the bit length tree for the above two trees, and get the index
         * in bl_order of the last bit length code to send.
         */
        max_blindex = build_bl_tree(s);

        /* Determine the best encoding. Compute the block lengths in bytes. */
        opt_lenb = (s.opt_len + 3 + 7) >>> 3;
        static_lenb = (s.static_len + 3 + 7) >>> 3;

        // Tracev((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u ",
        //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,
        //        s->sym_next / 3));

        if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }

      } else {
        // Assert(buf != (char*)0, "lost buf");
        opt_lenb = static_lenb = stored_len + 5; /* force a stored block */
      }

      if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {
        /* 4: two words for the lengths */

        /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
         * Otherwise we can't have processed more than WSIZE input bytes since
         * the last block flush, because compression would have been
         * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
         * transform a block into a stored block.
         */
        _tr_stored_block$1(s, buf, stored_len, last);

      } else if (s.strategy === Z_FIXED$1 || static_lenb === opt_lenb) {

        send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);
        compress_block(s, static_ltree, static_dtree);

      } else {
        send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);
        send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);
        compress_block(s, s.dyn_ltree, s.dyn_dtree);
      }
      // Assert (s->compressed_len == s->bits_sent, "bad compressed size");
      /* The above check is made mod 2^32, for files larger than 512 MB
       * and uLong implemented on 32 bits.
       */
      init_block(s);

      if (last) {
        bi_windup(s);
      }
      // Tracev((stderr,"\ncomprlen %lu(%lu) ", s->compressed_len>>3,
      //       s->compressed_len-7*last));
    };

    /* ===========================================================================
     * Save the match info and tally the frequency counts. Return true if
     * the current block must be flushed.
     */
    const _tr_tally$1 = (s, dist, lc) => {
    //    deflate_state *s;
    //    unsigned dist;  /* distance of matched string */
    //    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */

      s.pending_buf[s.sym_buf + s.sym_next++] = dist;
      s.pending_buf[s.sym_buf + s.sym_next++] = dist >> 8;
      s.pending_buf[s.sym_buf + s.sym_next++] = lc;
      if (dist === 0) {
        /* lc is the unmatched char */
        s.dyn_ltree[lc * 2]/*.Freq*/++;
      } else {
        s.matches++;
        /* Here, lc is the match length - MIN_MATCH */
        dist--;             /* dist = match distance - 1 */
        //Assert((ush)dist < (ush)MAX_DIST(s) &&
        //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
        //       (ush)d_code(dist) < (ush)D_CODES,  "_tr_tally: bad match");

        s.dyn_ltree[(_length_code[lc] + LITERALS$1 + 1) * 2]/*.Freq*/++;
        s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;
      }

      return (s.sym_next === s.sym_end);
    };

    var _tr_init_1  = _tr_init$1;
    var _tr_stored_block_1 = _tr_stored_block$1;
    var _tr_flush_block_1  = _tr_flush_block$1;
    var _tr_tally_1 = _tr_tally$1;
    var _tr_align_1 = _tr_align$1;

    var trees = {
    	_tr_init: _tr_init_1,
    	_tr_stored_block: _tr_stored_block_1,
    	_tr_flush_block: _tr_flush_block_1,
    	_tr_tally: _tr_tally_1,
    	_tr_align: _tr_align_1
    };

    // Note: adler32 takes 12% for level 0 and 2% for level 6.
    // It isn't worth it to make additional optimizations as in original.
    // Small size is preferable.

    // (C) 1995-2013 Jean-loup Gailly and Mark Adler
    // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
    //
    // This software is provided 'as-is', without any express or implied
    // warranty. In no event will the authors be held liable for any damages
    // arising from the use of this software.
    //
    // Permission is granted to anyone to use this software for any purpose,
    // including commercial applications, and to alter it and redistribute it
    // freely, subject to the following restrictions:
    //
    // 1. The origin of this software must not be misrepresented; you must not
    //   claim that you wrote the original software. If you use this software
    //   in a product, an acknowledgment in the product documentation would be
    //   appreciated but is not required.
    // 2. Altered source versions must be plainly marked as such, and must not be
    //   misrepresented as being the original software.
    // 3. This notice may not be removed or altered from any source distribution.

    const adler32 = (adler, buf, len, pos) => {
      let s1 = (adler & 0xffff) |0,
          s2 = ((adler >>> 16) & 0xffff) |0,
          n = 0;

      while (len !== 0) {
        // Set limit ~ twice less than 5552, to keep
        // s2 in 31-bits, because we force signed ints.
        // in other case %= will fail.
        n = len > 2000 ? 2000 : len;
        len -= n;

        do {
          s1 = (s1 + buf[pos++]) |0;
          s2 = (s2 + s1) |0;
        } while (--n);

        s1 %= 65521;
        s2 %= 65521;
      }

      return (s1 | (s2 << 16)) |0;
    };


    var adler32_1 = adler32;

    // Note: we can't get significant speed boost here.
    // So write code to minimize size - no pregenerated tables
    // and array tools dependencies.

    // (C) 1995-2013 Jean-loup Gailly and Mark Adler
    // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
    //
    // This software is provided 'as-is', without any express or implied
    // warranty. In no event will the authors be held liable for any damages
    // arising from the use of this software.
    //
    // Permission is granted to anyone to use this software for any purpose,
    // including commercial applications, and to alter it and redistribute it
    // freely, subject to the following restrictions:
    //
    // 1. The origin of this software must not be misrepresented; you must not
    //   claim that you wrote the original software. If you use this software
    //   in a product, an acknowledgment in the product documentation would be
    //   appreciated but is not required.
    // 2. Altered source versions must be plainly marked as such, and must not be
    //   misrepresented as being the original software.
    // 3. This notice may not be removed or altered from any source distribution.

    // Use ordinary array, since untyped makes no boost here
    const makeTable = () => {
      let c, table = [];

      for (var n = 0; n < 256; n++) {
        c = n;
        for (var k = 0; k < 8; k++) {
          c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
        }
        table[n] = c;
      }

      return table;
    };

    // Create table on load. Just 255 signed longs. Not a problem.
    const crcTable = new Uint32Array(makeTable());


    const crc32 = (crc, buf, len, pos) => {
      const t = crcTable;
      const end = pos + len;

      crc ^= -1;

      for (let i = pos; i < end; i++) {
        crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];
      }

      return (crc ^ (-1)); // >>> 0;
    };


    var crc32_1 = crc32;

    // (C) 1995-2013 Jean-loup Gailly and Mark Adler
    // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
    //
    // This software is provided 'as-is', without any express or implied
    // warranty. In no event will the authors be held liable for any damages
    // arising from the use of this software.
    //
    // Permission is granted to anyone to use this software for any purpose,
    // including commercial applications, and to alter it and redistribute it
    // freely, subject to the following restrictions:
    //
    // 1. The origin of this software must not be misrepresented; you must not
    //   claim that you wrote the original software. If you use this software
    //   in a product, an acknowledgment in the product documentation would be
    //   appreciated but is not required.
    // 2. Altered source versions must be plainly marked as such, and must not be
    //   misrepresented as being the original software.
    // 3. This notice may not be removed or altered from any source distribution.

    var messages = {
      2:      'need dictionary',     /* Z_NEED_DICT       2  */
      1:      'stream end',          /* Z_STREAM_END      1  */
      0:      '',                    /* Z_OK              0  */
      '-1':   'file error',          /* Z_ERRNO         (-1) */
      '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */
      '-3':   'data error',          /* Z_DATA_ERROR    (-3) */
      '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */
      '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */
      '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */
    };

    // (C) 1995-2013 Jean-loup Gailly and Mark Adler
    // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
    //
    // This software is provided 'as-is', without any express or implied
    // warranty. In no event will the authors be held liable for any damages
    // arising from the use of this software.
    //
    // Permission is granted to anyone to use this software for any purpose,
    // including commercial applications, and to alter it and redistribute it
    // freely, subject to the following restrictions:
    //
    // 1. The origin of this software must not be misrepresented; you must not
    //   claim that you wrote the original software. If you use this software
    //   in a product, an acknowledgment in the product documentation would be
    //   appreciated but is not required.
    // 2. Altered source versions must be plainly marked as such, and must not be
    //   misrepresented as being the original software.
    // 3. This notice may not be removed or altered from any source distribution.

    var constants$2 = {

      /* Allowed flush values; see deflate() and inflate() below for details */
      Z_NO_FLUSH:         0,
      Z_PARTIAL_FLUSH:    1,
      Z_SYNC_FLUSH:       2,
      Z_FULL_FLUSH:       3,
      Z_FINISH:           4,
      Z_BLOCK:            5,
      Z_TREES:            6,

      /* Return codes for the compression/decompression functions. Negative values
      * are errors, positive values are used for special but normal events.
      */
      Z_OK:               0,
      Z_STREAM_END:       1,
      Z_NEED_DICT:        2,
      Z_ERRNO:           -1,
      Z_STREAM_ERROR:    -2,
      Z_DATA_ERROR:      -3,
      Z_MEM_ERROR:       -4,
      Z_BUF_ERROR:       -5,
      //Z_VERSION_ERROR: -6,

      /* compression levels */
      Z_NO_COMPRESSION:         0,
      Z_BEST_SPEED:             1,
      Z_BEST_COMPRESSION:       9,
      Z_DEFAULT_COMPRESSION:   -1,


      Z_FILTERED:               1,
      Z_HUFFMAN_ONLY:           2,
      Z_RLE:                    3,
      Z_FIXED:                  4,
      Z_DEFAULT_STRATEGY:       0,

      /* Possible values of the data_type field (though see inflate()) */
      Z_BINARY:                 0,
      Z_TEXT:                   1,
      //Z_ASCII:                1, // = Z_TEXT (deprecated)
      Z_UNKNOWN:                2,

      /* The deflate compression method */
      Z_DEFLATED:               8
      //Z_NULL:                 null // Use -1 or null inline, depending on var type
    };

    // (C) 1995-2013 Jean-loup Gailly and Mark Adler
    // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
    //
    // This software is provided 'as-is', without any express or implied
    // warranty. In no event will the authors be held liable for any damages
    // arising from the use of this software.
    //
    // Permission is granted to anyone to use this software for any purpose,
    // including commercial applications, and to alter it and redistribute it
    // freely, subject to the following restrictions:
    //
    // 1. The origin of this software must not be misrepresented; you must not
    //   claim that you wrote the original software. If you use this software
    //   in a product, an acknowledgment in the product documentation would be
    //   appreciated but is not required.
    // 2. Altered source versions must be plainly marked as such, and must not be
    //   misrepresented as being the original software.
    // 3. This notice may not be removed or altered from any source distribution.

    const { _tr_init, _tr_stored_block, _tr_flush_block, _tr_tally, _tr_align } = trees;




    /* Public constants ==========================================================*/
    /* ===========================================================================*/

    const {
      Z_NO_FLUSH: Z_NO_FLUSH$2, Z_PARTIAL_FLUSH, Z_FULL_FLUSH: Z_FULL_FLUSH$1, Z_FINISH: Z_FINISH$3, Z_BLOCK: Z_BLOCK$1,
      Z_OK: Z_OK$3, Z_STREAM_END: Z_STREAM_END$3, Z_STREAM_ERROR: Z_STREAM_ERROR$2, Z_DATA_ERROR: Z_DATA_ERROR$2, Z_BUF_ERROR: Z_BUF_ERROR$1,
      Z_DEFAULT_COMPRESSION: Z_DEFAULT_COMPRESSION$1,
      Z_FILTERED, Z_HUFFMAN_ONLY, Z_RLE, Z_FIXED, Z_DEFAULT_STRATEGY: Z_DEFAULT_STRATEGY$1,
      Z_UNKNOWN,
      Z_DEFLATED: Z_DEFLATED$2
    } = constants$2;

    /*============================================================================*/


    const MAX_MEM_LEVEL = 9;
    /* Maximum value for memLevel in deflateInit2 */
    const MAX_WBITS$1 = 15;
    /* 32K LZ77 window */
    const DEF_MEM_LEVEL = 8;


    const LENGTH_CODES  = 29;
    /* number of length codes, not counting the special END_BLOCK code */
    const LITERALS      = 256;
    /* number of literal bytes 0..255 */
    const L_CODES       = LITERALS + 1 + LENGTH_CODES;
    /* number of Literal or Length codes, including the END_BLOCK code */
    const D_CODES       = 30;
    /* number of distance codes */
    const BL_CODES      = 19;
    /* number of codes used to transfer the bit lengths */
    const HEAP_SIZE     = 2 * L_CODES + 1;
    /* maximum heap size */
    const MAX_BITS  = 15;
    /* All codes must not exceed MAX_BITS bits */

    const MIN_MATCH = 3;
    const MAX_MATCH = 258;
    const MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);

    const PRESET_DICT = 0x20;

    const INIT_STATE    =  42;    /* zlib header -> BUSY_STATE */
    //#ifdef GZIP
    const GZIP_STATE    =  57;    /* gzip header -> BUSY_STATE | EXTRA_STATE */
    //#endif
    const EXTRA_STATE   =  69;    /* gzip extra block -> NAME_STATE */
    const NAME_STATE    =  73;    /* gzip file name -> COMMENT_STATE */
    const COMMENT_STATE =  91;    /* gzip comment -> HCRC_STATE */
    const HCRC_STATE    = 103;    /* gzip header CRC -> BUSY_STATE */
    const BUSY_STATE    = 113;    /* deflate -> FINISH_STATE */
    const FINISH_STATE  = 666;    /* stream complete */

    const BS_NEED_MORE      = 1; /* block not completed, need more input or more output */
    const BS_BLOCK_DONE     = 2; /* block flush performed */
    const BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */
    const BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */

    const OS_CODE = 0x03; // Unix :) . Don't detect, use this default.

    const err = (strm, errorCode) => {
      strm.msg = messages[errorCode];
      return errorCode;
    };

    const rank = (f) => {
      return ((f) * 2) - ((f) > 4 ? 9 : 0);
    };

    const zero = (buf) => {
      let len = buf.length; while (--len >= 0) { buf[len] = 0; }
    };

    /* ===========================================================================
     * Slide the hash table when sliding the window down (could be avoided with 32
     * bit values at the expense of memory usage). We slide even when level == 0 to
     * keep the hash table consistent if we switch back to level > 0 later.
     */
    const slide_hash = (s) => {
      let n, m;
      let p;
      let wsize = s.w_size;

      n = s.hash_size;
      p = n;
      do {
        m = s.head[--p];
        s.head[p] = (m >= wsize ? m - wsize : 0);
      } while (--n);
      n = wsize;
    //#ifndef FASTEST
      p = n;
      do {
        m = s.prev[--p];
        s.prev[p] = (m >= wsize ? m - wsize : 0);
        /* If n is not on any hash chain, prev[n] is garbage but
         * its value will never be used.
         */
      } while (--n);
    //#endif
    };

    /* eslint-disable new-cap */
    let HASH_ZLIB = (s, prev, data) => ((prev << s.hash_shift) ^ data) & s.hash_mask;
    // This hash causes less collisions, https://github.com/nodeca/pako/issues/135
    // But breaks binary compatibility
    //let HASH_FAST = (s, prev, data) => ((prev << 8) + (prev >> 8) + (data << 4)) & s.hash_mask;
    let HASH = HASH_ZLIB;


    /* =========================================================================
     * Flush as much pending output as possible. All deflate() output, except for
     * some deflate_stored() output, goes through this function so some
     * applications may wish to modify it to avoid allocating a large
     * strm->next_out buffer and copying into it. (See also read_buf()).
     */
    const flush_pending = (strm) => {
      const s = strm.state;

      //_tr_flush_bits(s);
      let len = s.pending;
      if (len > strm.avail_out) {
        len = strm.avail_out;
      }
      if (len === 0) { return; }

      strm.output.set(s.pending_buf.subarray(s.pending_out, s.pending_out + len), strm.next_out);
      strm.next_out  += len;
      s.pending_out  += len;
      strm.total_out += len;
      strm.avail_out -= len;
      s.pending      -= len;
      if (s.pending === 0) {
        s.pending_out = 0;
      }
    };


    const flush_block_only = (s, last) => {
      _tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);
      s.block_start = s.strstart;
      flush_pending(s.strm);
    };


    const put_byte = (s, b) => {
      s.pending_buf[s.pending++] = b;
    };


    /* =========================================================================
     * Put a short in the pending buffer. The 16-bit value is put in MSB order.
     * IN assertion: the stream state is correct and there is enough room in
     * pending_buf.
     */
    const putShortMSB = (s, b) => {

      //  put_byte(s, (Byte)(b >> 8));
    //  put_byte(s, (Byte)(b & 0xff));
      s.pending_buf[s.pending++] = (b >>> 8) & 0xff;
      s.pending_buf[s.pending++] = b & 0xff;
    };


    /* ===========================================================================
     * Read a new buffer from the current input stream, update the adler32
     * and total number of bytes read.  All deflate() input goes through
     * this function so some applications may wish to modify it to avoid
     * allocating a large strm->input buffer and copying from it.
     * (See also flush_pending()).
     */
    const read_buf = (strm, buf, start, size) => {

      let len = strm.avail_in;

      if (len > size) { len = size; }
      if (len === 0) { return 0; }

      strm.avail_in -= len;

      // zmemcpy(buf, strm->next_in, len);
      buf.set(strm.input.subarray(strm.next_in, strm.next_in + len), start);
      if (strm.state.wrap === 1) {
        strm.adler = adler32_1(strm.adler, buf, len, start);
      }

      else if (strm.state.wrap === 2) {
        strm.adler = crc32_1(strm.adler, buf, len, start);
      }

      strm.next_in += len;
      strm.total_in += len;

      return len;
    };


    /* ===========================================================================
     * Set match_start to the longest match starting at the given string and
     * return its length. Matches shorter or equal to prev_length are discarded,
     * in which case the result is equal to prev_length and match_start is
     * garbage.
     * IN assertions: cur_match is the head of the hash chain for the current
     *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
     * OUT assertion: the match length is not greater than s->lookahead.
     */
    const longest_match = (s, cur_match) => {

      let chain_length = s.max_chain_length;      /* max hash chain length */
      let scan = s.strstart; /* current string */
      let match;                       /* matched string */
      let len;                           /* length of current match */
      let best_len = s.prev_length;              /* best match length so far */
      let nice_match = s.nice_match;             /* stop if match long enough */
      const limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?
          s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;

      const _win = s.window; // shortcut

      const wmask = s.w_mask;
      const prev  = s.prev;

      /* Stop when cur_match becomes <= limit. To simplify the code,
       * we prevent matches with the string of window index 0.
       */

      const strend = s.strstart + MAX_MATCH;
      let scan_end1  = _win[scan + best_len - 1];
      let scan_end   = _win[scan + best_len];

      /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.
       * It is easy to get rid of this optimization if necessary.
       */
      // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, "Code too clever");

      /* Do not waste too much time if we already have a good match: */
      if (s.prev_length >= s.good_match) {
        chain_length >>= 2;
      }
      /* Do not look for matches beyond the end of the input. This is necessary
       * to make deflate deterministic.
       */
      if (nice_match > s.lookahead) { nice_match = s.lookahead; }

      // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, "need lookahead");

      do {
        // Assert(cur_match < s->strstart, "no future");
        match = cur_match;

        /* Skip to next match if the match length cannot increase
         * or if the match length is less than 2.  Note that the checks below
         * for insufficient lookahead only occur occasionally for performance
         * reasons.  Therefore uninitialized memory will be accessed, and
         * conditional jumps will be made that depend on those values.
         * However the length of the match is limited to the lookahead, so
         * the output of deflate is not affected by the uninitialized values.
         */

        if (_win[match + best_len]     !== scan_end  ||
            _win[match + best_len - 1] !== scan_end1 ||
            _win[match]                !== _win[scan] ||
            _win[++match]              !== _win[scan + 1]) {
          continue;
        }

        /* The check at best_len-1 can be removed because it will be made
         * again later. (This heuristic is not always a win.)
         * It is not necessary to compare scan[2] and match[2] since they
         * are always equal when the other bytes match, given that
         * the hash keys are equal and that HASH_BITS >= 8.
         */
        scan += 2;
        match++;
        // Assert(*scan == *match, "match[2]?");

        /* We check for insufficient lookahead only every 8th comparison;
         * the 256th check will be made at strstart+258.
         */
        do {
          /*jshint noempty:false*/
        } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
                 _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
                 _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
                 _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&
                 scan < strend);

        // Assert(scan <= s->window+(unsigned)(s->window_size-1), "wild scan");

        len = MAX_MATCH - (strend - scan);
        scan = strend - MAX_MATCH;

        if (len > best_len) {
          s.match_start = cur_match;
          best_len = len;
          if (len >= nice_match) {
            break;
          }
          scan_end1  = _win[scan + best_len - 1];
          scan_end   = _win[scan + best_len];
        }
      } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);

      if (best_len <= s.lookahead) {
        return best_len;
      }
      return s.lookahead;
    };


    /* ===========================================================================
     * Fill the window when the lookahead becomes insufficient.
     * Updates strstart and lookahead.
     *
     * IN assertion: lookahead < MIN_LOOKAHEAD
     * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD
     *    At least one byte has been read, or avail_in == 0; reads are
     *    performed for at least two bytes (required for the zip translate_eol
     *    option -- not supported here).
     */
    const fill_window = (s) => {

      const _w_size = s.w_size;
      let n, more, str;

      //Assert(s->lookahead < MIN_LOOKAHEAD, "already enough lookahead");

      do {
        more = s.window_size - s.lookahead - s.strstart;

        // JS ints have 32 bit, block below not needed
        /* Deal with !@#$% 64K limit: */
        //if (sizeof(int) <= 2) {
        //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {
        //        more = wsize;
        //
        //  } else if (more == (unsigned)(-1)) {
        //        /* Very unlikely, but possible on 16 bit machine if
        //         * strstart == 0 && lookahead == 1 (input done a byte at time)
        //         */
        //        more--;
        //    }
        //}


        /* If the window is almost full and there is insufficient lookahead,
         * move the upper half to the lower one to make room in the upper half.
         */
        if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {

          s.window.set(s.window.subarray(_w_size, _w_size + _w_size - more), 0);
          s.match_start -= _w_size;
          s.strstart -= _w_size;
          /* we now have strstart >= MAX_DIST */
          s.block_start -= _w_size;
          if (s.insert > s.strstart) {
            s.insert = s.strstart;
          }
          slide_hash(s);
          more += _w_size;
        }
        if (s.strm.avail_in === 0) {
          break;
        }

        /* If there was no sliding:
         *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&
         *    more == window_size - lookahead - strstart
         * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)
         * => more >= window_size - 2*WSIZE + 2
         * In the BIG_MEM or MMAP case (not yet supported),
         *   window_size == input_size + MIN_LOOKAHEAD  &&
         *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.
         * Otherwise, window_size == 2*WSIZE so more >= 2.
         * If there was sliding, more >= WSIZE. So in all cases, more >= 2.
         */
        //Assert(more >= 2, "more < 2");
        n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);
        s.lookahead += n;

        /* Initialize the hash value now that we have some input: */
        if (s.lookahead + s.insert >= MIN_MATCH) {
          str = s.strstart - s.insert;
          s.ins_h = s.window[str];

          /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */
          s.ins_h = HASH(s, s.ins_h, s.window[str + 1]);
    //#if MIN_MATCH != 3
    //        Call update_hash() MIN_MATCH-3 more times
    //#endif
          while (s.insert) {
            /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
            s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);

            s.prev[str & s.w_mask] = s.head[s.ins_h];
            s.head[s.ins_h] = str;
            str++;
            s.insert--;
            if (s.lookahead + s.insert < MIN_MATCH) {
              break;
            }
          }
        }
        /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,
         * but this is not important since only literal bytes will be emitted.
         */

      } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);

      /* If the WIN_INIT bytes after the end of the current data have never been
       * written, then zero those bytes in order to avoid memory check reports of
       * the use of uninitialized (or uninitialised as Julian writes) bytes by
       * the longest match routines.  Update the high water mark for the next
       * time through here.  WIN_INIT is set to MAX_MATCH since the longest match
       * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.
       */
    //  if (s.high_water < s.window_size) {
    //    const curr = s.strstart + s.lookahead;
    //    let init = 0;
    //
    //    if (s.high_water < curr) {
    //      /* Previous high water mark below current data -- zero WIN_INIT
    //       * bytes or up to end of window, whichever is less.
    //       */
    //      init = s.window_size - curr;
    //      if (init > WIN_INIT)
    //        init = WIN_INIT;
    //      zmemzero(s->window + curr, (unsigned)init);
    //      s->high_water = curr + init;
    //    }
    //    else if (s->high_water < (ulg)curr + WIN_INIT) {
    //      /* High water mark at or above current data, but below current data
    //       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up
    //       * to end of window, whichever is less.
    //       */
    //      init = (ulg)curr + WIN_INIT - s->high_water;
    //      if (init > s->window_size - s->high_water)
    //        init = s->window_size - s->high_water;
    //      zmemzero(s->window + s->high_water, (unsigned)init);
    //      s->high_water += init;
    //    }
    //  }
    //
    //  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,
    //    "not enough room for search");
    };

    /* ===========================================================================
     * Copy without compression as much as possible from the input stream, return
     * the current block state.
     *
     * In case deflateParams() is used to later switch to a non-zero compression
     * level, s->matches (otherwise unused when storing) keeps track of the number
     * of hash table slides to perform. If s->matches is 1, then one hash table
     * slide will be done when switching. If s->matches is 2, the maximum value
     * allowed here, then the hash table will be cleared, since two or more slides
     * is the same as a clear.
     *
     * deflate_stored() is written to minimize the number of times an input byte is
     * copied. It is most efficient with large input and output buffers, which
     * maximizes the opportunites to have a single copy from next_in to next_out.
     */
    const deflate_stored = (s, flush) => {

      /* Smallest worthy block size when not flushing or finishing. By default
       * this is 32K. This can be as small as 507 bytes for memLevel == 1. For
       * large input and output buffers, the stored block size will be larger.
       */
      let min_block = s.pending_buf_size - 5 > s.w_size ? s.w_size : s.pending_buf_size - 5;

      /* Copy as many min_block or larger stored blocks directly to next_out as
       * possible. If flushing, copy the remaining available input to next_out as
       * stored blocks, if there is enough space.
       */
      let len, left, have, last = 0;
      let used = s.strm.avail_in;
      do {
        /* Set len to the maximum size block that we can copy directly with the
         * available input data and output space. Set left to how much of that
         * would be copied from what's left in the window.
         */
        len = 65535/* MAX_STORED */;     /* maximum deflate stored block length */
        have = (s.bi_valid + 42) >> 3;     /* number of header bytes */
        if (s.strm.avail_out < have) {         /* need room for header */
          break;
        }
          /* maximum stored block length that will fit in avail_out: */
        have = s.strm.avail_out - have;
        left = s.strstart - s.block_start;  /* bytes left in window */
        if (len > left + s.strm.avail_in) {
          len = left + s.strm.avail_in;   /* limit len to the input */
        }
        if (len > have) {
          len = have;             /* limit len to the output */
        }

        /* If the stored block would be less than min_block in length, or if
         * unable to copy all of the available input when flushing, then try
         * copying to the window and the pending buffer instead. Also don't
         * write an empty block when flushing -- deflate() does that.
         */
        if (len < min_block && ((len === 0 && flush !== Z_FINISH$3) ||
                            flush === Z_NO_FLUSH$2 ||
                            len !== left + s.strm.avail_in)) {
          break;
        }

        /* Make a dummy stored block in pending to get the header bytes,
         * including any pending bits. This also updates the debugging counts.
         */
        last = flush === Z_FINISH$3 && len === left + s.strm.avail_in ? 1 : 0;
        _tr_stored_block(s, 0, 0, last);

        /* Replace the lengths in the dummy stored block with len. */
        s.pending_buf[s.pending - 4] = len;
        s.pending_buf[s.pending - 3] = len >> 8;
        s.pending_buf[s.pending - 2] = ~len;
        s.pending_buf[s.pending - 1] = ~len >> 8;

        /* Write the stored block header bytes. */
        flush_pending(s.strm);

    //#ifdef ZLIB_DEBUG
    //    /* Update debugging counts for the data about to be copied. */
    //    s->compressed_len += len << 3;
    //    s->bits_sent += len << 3;
    //#endif

        /* Copy uncompressed bytes from the window to next_out. */
        if (left) {
          if (left > len) {
            left = len;
          }
          //zmemcpy(s->strm->next_out, s->window + s->block_start, left);
          s.strm.output.set(s.window.subarray(s.block_start, s.block_start + left), s.strm.next_out);
          s.strm.next_out += left;
          s.strm.avail_out -= left;
          s.strm.total_out += left;
          s.block_start += left;
          len -= left;
        }

        /* Copy uncompressed bytes directly from next_in to next_out, updating
         * the check value.
         */
        if (len) {
          read_buf(s.strm, s.strm.output, s.strm.next_out, len);
          s.strm.next_out += len;
          s.strm.avail_out -= len;
          s.strm.total_out += len;
        }
      } while (last === 0);

      /* Update the sliding window with the last s->w_size bytes of the copied
       * data, or append all of the copied data to the existing window if less
       * than s->w_size bytes were copied. Also update the number of bytes to
       * insert in the hash tables, in the event that deflateParams() switches to
       * a non-zero compression level.
       */
      used -= s.strm.avail_in;    /* number of input bytes directly copied */
      if (used) {
        /* If any input was used, then no unused input remains in the window,
         * therefore s->block_start == s->strstart.
         */
        if (used >= s.w_size) {  /* supplant the previous history */
          s.matches = 2;     /* clear hash */
          //zmemcpy(s->window, s->strm->next_in - s->w_size, s->w_size);
          s.window.set(s.strm.input.subarray(s.strm.next_in - s.w_size, s.strm.next_in), 0);
          s.strstart = s.w_size;
          s.insert = s.strstart;
        }
        else {
          if (s.window_size - s.strstart <= used) {
            /* Slide the window down. */
            s.strstart -= s.w_size;
            //zmemcpy(s->window, s->window + s->w_size, s->strstart);
            s.window.set(s.window.subarray(s.w_size, s.w_size + s.strstart), 0);
            if (s.matches < 2) {
              s.matches++;   /* add a pending slide_hash() */
            }
            if (s.insert > s.strstart) {
              s.insert = s.strstart;
            }
          }
          //zmemcpy(s->window + s->strstart, s->strm->next_in - used, used);
          s.window.set(s.strm.input.subarray(s.strm.next_in - used, s.strm.next_in), s.strstart);
          s.strstart += used;
          s.insert += used > s.w_size - s.insert ? s.w_size - s.insert : used;
        }
        s.block_start = s.strstart;
      }
      if (s.high_water < s.strstart) {
        s.high_water = s.strstart;
      }

      /* If the last block was written to next_out, then done. */
      if (last) {
        return BS_FINISH_DONE;
      }

      /* If flushing and all input has been consumed, then done. */
      if (flush !== Z_NO_FLUSH$2 && flush !== Z_FINISH$3 &&
        s.strm.avail_in === 0 && s.strstart === s.block_start) {
        return BS_BLOCK_DONE;
      }

      /* Fill the window with any remaining input. */
      have = s.window_size - s.strstart;
      if (s.strm.avail_in > have && s.block_start >= s.w_size) {
        /* Slide the window down. */
        s.block_start -= s.w_size;
        s.strstart -= s.w_size;
        //zmemcpy(s->window, s->window + s->w_size, s->strstart);
        s.window.set(s.window.subarray(s.w_size, s.w_size + s.strstart), 0);
        if (s.matches < 2) {
          s.matches++;       /* add a pending slide_hash() */
        }
        have += s.w_size;      /* more space now */
        if (s.insert > s.strstart) {
          s.insert = s.strstart;
        }
      }
      if (have > s.strm.avail_in) {
        have = s.strm.avail_in;
      }
      if (have) {
        read_buf(s.strm, s.window, s.strstart, have);
        s.strstart += have;
        s.insert += have > s.w_size - s.insert ? s.w_size - s.insert : have;
      }
      if (s.high_water < s.strstart) {
        s.high_water = s.strstart;
      }

      /* There was not enough avail_out to write a complete worthy or flushed
       * stored block to next_out. Write a stored block to pending instead, if we
       * have enough input for a worthy block, or if flushing and there is enough
       * room for the remaining input as a stored block in the pending buffer.
       */
      have = (s.bi_valid + 42) >> 3;     /* number of header bytes */
        /* maximum stored block length that will fit in pending: */
      have = s.pending_buf_size - have > 65535/* MAX_STORED */ ? 65535/* MAX_STORED */ : s.pending_buf_size - have;
      min_block = have > s.w_size ? s.w_size : have;
      left = s.strstart - s.block_start;
      if (left >= min_block ||
         ((left || flush === Z_FINISH$3) && flush !== Z_NO_FLUSH$2 &&
         s.strm.avail_in === 0 && left <= have)) {
        len = left > have ? have : left;
        last = flush === Z_FINISH$3 && s.strm.avail_in === 0 &&
             len === left ? 1 : 0;
        _tr_stored_block(s, s.block_start, len, last);
        s.block_start += len;
        flush_pending(s.strm);
      }

      /* We've done all we can with the available input and output. */
      return last ? BS_FINISH_STARTED : BS_NEED_MORE;
    };


    /* ===========================================================================
     * Compress as much as possible from the input stream, return the current
     * block state.
     * This function does not perform lazy evaluation of matches and inserts
     * new strings in the dictionary only for unmatched strings or for short
     * matches. It is used only for the fast compression options.
     */
    const deflate_fast = (s, flush) => {

      let hash_head;        /* head of the hash chain */
      let bflush;           /* set if current block must be flushed */

      for (;;) {
        /* Make sure that we always have enough lookahead, except
         * at the end of the input file. We need MAX_MATCH bytes
         * for the next match, plus MIN_MATCH bytes to insert the
         * string following the next match.
         */
        if (s.lookahead < MIN_LOOKAHEAD) {
          fill_window(s);
          if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH$2) {
            return BS_NEED_MORE;
          }
          if (s.lookahead === 0) {
            break; /* flush the current block */
          }
        }

        /* Insert the string window[strstart .. strstart+2] in the
         * dictionary, and set hash_head to the head of the hash chain:
         */
        hash_head = 0/*NIL*/;
        if (s.lookahead >= MIN_MATCH) {
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
        }

        /* Find the longest match, discarding those <= prev_length.
         * At this point we have always match_length < MIN_MATCH
         */
        if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {
          /* To simplify the code, we prevent matches with the string
           * of window index 0 (in particular we have to avoid a match
           * of the string with itself at the start of the input file).
           */
          s.match_length = longest_match(s, hash_head);
          /* longest_match() sets match_start */
        }
        if (s.match_length >= MIN_MATCH) {
          // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only

          /*** _tr_tally_dist(s, s.strstart - s.match_start,
                         s.match_length - MIN_MATCH, bflush); ***/
          bflush = _tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);

          s.lookahead -= s.match_length;

          /* Insert new strings in the hash table only if the match length
           * is not too large. This saves time but degrades compression.
           */
          if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {
            s.match_length--; /* string at strstart already in table */
            do {
              s.strstart++;
              /*** INSERT_STRING(s, s.strstart, hash_head); ***/
              s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);
              hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
              s.head[s.ins_h] = s.strstart;
              /***/
              /* strstart never exceeds WSIZE-MAX_MATCH, so there are
               * always MIN_MATCH bytes ahead.
               */
            } while (--s.match_length !== 0);
            s.strstart++;
          } else
          {
            s.strstart += s.match_length;
            s.match_length = 0;
            s.ins_h = s.window[s.strstart];
            /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */
            s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + 1]);

    //#if MIN_MATCH != 3
    //                Call UPDATE_HASH() MIN_MATCH-3 more times
    //#endif
            /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not
             * matter since it will be recomputed at next deflate call.
             */
          }
        } else {
          /* No match, output a literal byte */
          //Tracevv((stderr,"%c", s.window[s.strstart]));
          /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
          bflush = _tr_tally(s, 0, s.window[s.strstart]);

          s.lookahead--;
          s.strstart++;
        }
        if (bflush) {
          /*** FLUSH_BLOCK(s, 0); ***/
          flush_block_only(s, false);
          if (s.strm.avail_out === 0) {
            return BS_NEED_MORE;
          }
          /***/
        }
      }
      s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);
      if (flush === Z_FINISH$3) {
        /*** FLUSH_BLOCK(s, 1); ***/
        flush_block_only(s, true);
        if (s.strm.avail_out === 0) {
          return BS_FINISH_STARTED;
        }
        /***/
        return BS_FINISH_DONE;
      }
      if (s.sym_next) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }
      return BS_BLOCK_DONE;
    };

    /* ===========================================================================
     * Same as above, but achieves better compression. We use a lazy
     * evaluation for matches: a match is finally adopted only if there is
     * no better match at the next window position.
     */
    const deflate_slow = (s, flush) => {

      let hash_head;          /* head of hash chain */
      let bflush;              /* set if current block must be flushed */

      let max_insert;

      /* Process the input block. */
      for (;;) {
        /* Make sure that we always have enough lookahead, except
         * at the end of the input file. We need MAX_MATCH bytes
         * for the next match, plus MIN_MATCH bytes to insert the
         * string following the next match.
         */
        if (s.lookahead < MIN_LOOKAHEAD) {
          fill_window(s);
          if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH$2) {
            return BS_NEED_MORE;
          }
          if (s.lookahead === 0) { break; } /* flush the current block */
        }

        /* Insert the string window[strstart .. strstart+2] in the
         * dictionary, and set hash_head to the head of the hash chain:
         */
        hash_head = 0/*NIL*/;
        if (s.lookahead >= MIN_MATCH) {
          /*** INSERT_STRING(s, s.strstart, hash_head); ***/
          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);
          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
          s.head[s.ins_h] = s.strstart;
          /***/
        }

        /* Find the longest match, discarding those <= prev_length.
         */
        s.prev_length = s.match_length;
        s.prev_match = s.match_start;
        s.match_length = MIN_MATCH - 1;

        if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&
            s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {
          /* To simplify the code, we prevent matches with the string
           * of window index 0 (in particular we have to avoid a match
           * of the string with itself at the start of the input file).
           */
          s.match_length = longest_match(s, hash_head);
          /* longest_match() sets match_start */

          if (s.match_length <= 5 &&
             (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {

            /* If prev_match is also MIN_MATCH, match_start is garbage
             * but we will ignore the current match anyway.
             */
            s.match_length = MIN_MATCH - 1;
          }
        }
        /* If there was a match at the previous step and the current
         * match is not better, output the previous match:
         */
        if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {
          max_insert = s.strstart + s.lookahead - MIN_MATCH;
          /* Do not insert strings in hash table beyond this. */

          //check_match(s, s.strstart-1, s.prev_match, s.prev_length);

          /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,
                         s.prev_length - MIN_MATCH, bflush);***/
          bflush = _tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);
          /* Insert in hash table all strings up to the end of the match.
           * strstart-1 and strstart are already inserted. If there is not
           * enough lookahead, the last two strings are not inserted in
           * the hash table.
           */
          s.lookahead -= s.prev_length - 1;
          s.prev_length -= 2;
          do {
            if (++s.strstart <= max_insert) {
              /*** INSERT_STRING(s, s.strstart, hash_head); ***/
              s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);
              hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];
              s.head[s.ins_h] = s.strstart;
              /***/
            }
          } while (--s.prev_length !== 0);
          s.match_available = 0;
          s.match_length = MIN_MATCH - 1;
          s.strstart++;

          if (bflush) {
            /*** FLUSH_BLOCK(s, 0); ***/
            flush_block_only(s, false);
            if (s.strm.avail_out === 0) {
              return BS_NEED_MORE;
            }
            /***/
          }

        } else if (s.match_available) {
          /* If there was no match at the previous position, output a
           * single literal. If there was a match but the current match
           * is longer, truncate the previous match to a single literal.
           */
          //Tracevv((stderr,"%c", s->window[s->strstart-1]));
          /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
          bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);

          if (bflush) {
            /*** FLUSH_BLOCK_ONLY(s, 0) ***/
            flush_block_only(s, false);
            /***/
          }
          s.strstart++;
          s.lookahead--;
          if (s.strm.avail_out === 0) {
            return BS_NEED_MORE;
          }
        } else {
          /* There is no previous match to compare with, wait for
           * the next step to decide.
           */
          s.match_available = 1;
          s.strstart++;
          s.lookahead--;
        }
      }
      //Assert (flush != Z_NO_FLUSH, "no flush?");
      if (s.match_available) {
        //Tracevv((stderr,"%c", s->window[s->strstart-1]));
        /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/
        bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);

        s.match_available = 0;
      }
      s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;
      if (flush === Z_FINISH$3) {
        /*** FLUSH_BLOCK(s, 1); ***/
        flush_block_only(s, true);
        if (s.strm.avail_out === 0) {
          return BS_FINISH_STARTED;
        }
        /***/
        return BS_FINISH_DONE;
      }
      if (s.sym_next) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }

      return BS_BLOCK_DONE;
    };


    /* ===========================================================================
     * For Z_RLE, simply look for runs of bytes, generate matches only of distance
     * one.  Do not maintain a hash table.  (It will be regenerated if this run of
     * deflate switches away from Z_RLE.)
     */
    const deflate_rle = (s, flush) => {

      let bflush;            /* set if current block must be flushed */
      let prev;              /* byte at distance one to match */
      let scan, strend;      /* scan goes up to strend for length of run */

      const _win = s.window;

      for (;;) {
        /* Make sure that we always have enough lookahead, except
         * at the end of the input file. We need MAX_MATCH bytes
         * for the longest run, plus one for the unrolled loop.
         */
        if (s.lookahead <= MAX_MATCH) {
          fill_window(s);
          if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH$2) {
            return BS_NEED_MORE;
          }
          if (s.lookahead === 0) { break; } /* flush the current block */
        }

        /* See how many times the previous byte repeats */
        s.match_length = 0;
        if (s.lookahead >= MIN_MATCH && s.strstart > 0) {
          scan = s.strstart - 1;
          prev = _win[scan];
          if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {
            strend = s.strstart + MAX_MATCH;
            do {
              /*jshint noempty:false*/
            } while (prev === _win[++scan] && prev === _win[++scan] &&
                     prev === _win[++scan] && prev === _win[++scan] &&
                     prev === _win[++scan] && prev === _win[++scan] &&
                     prev === _win[++scan] && prev === _win[++scan] &&
                     scan < strend);
            s.match_length = MAX_MATCH - (strend - scan);
            if (s.match_length > s.lookahead) {
              s.match_length = s.lookahead;
            }
          }
          //Assert(scan <= s->window+(uInt)(s->window_size-1), "wild scan");
        }

        /* Emit match if have run of MIN_MATCH or longer, else emit literal */
        if (s.match_length >= MIN_MATCH) {
          //check_match(s, s.strstart, s.strstart - 1, s.match_length);

          /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/
          bflush = _tr_tally(s, 1, s.match_length - MIN_MATCH);

          s.lookahead -= s.match_length;
          s.strstart += s.match_length;
          s.match_length = 0;
        } else {
          /* No match, output a literal byte */
          //Tracevv((stderr,"%c", s->window[s->strstart]));
          /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
          bflush = _tr_tally(s, 0, s.window[s.strstart]);

          s.lookahead--;
          s.strstart++;
        }
        if (bflush) {
          /*** FLUSH_BLOCK(s, 0); ***/
          flush_block_only(s, false);
          if (s.strm.avail_out === 0) {
            return BS_NEED_MORE;
          }
          /***/
        }
      }
      s.insert = 0;
      if (flush === Z_FINISH$3) {
        /*** FLUSH_BLOCK(s, 1); ***/
        flush_block_only(s, true);
        if (s.strm.avail_out === 0) {
          return BS_FINISH_STARTED;
        }
        /***/
        return BS_FINISH_DONE;
      }
      if (s.sym_next) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }
      return BS_BLOCK_DONE;
    };

    /* ===========================================================================
     * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.
     * (It will be regenerated if this run of deflate switches away from Huffman.)
     */
    const deflate_huff = (s, flush) => {

      let bflush;             /* set if current block must be flushed */

      for (;;) {
        /* Make sure that we have a literal to write. */
        if (s.lookahead === 0) {
          fill_window(s);
          if (s.lookahead === 0) {
            if (flush === Z_NO_FLUSH$2) {
              return BS_NEED_MORE;
            }
            break;      /* flush the current block */
          }
        }

        /* Output a literal byte */
        s.match_length = 0;
        //Tracevv((stderr,"%c", s->window[s->strstart]));
        /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/
        bflush = _tr_tally(s, 0, s.window[s.strstart]);
        s.lookahead--;
        s.strstart++;
        if (bflush) {
          /*** FLUSH_BLOCK(s, 0); ***/
          flush_block_only(s, false);
          if (s.strm.avail_out === 0) {
            return BS_NEED_MORE;
          }
          /***/
        }
      }
      s.insert = 0;
      if (flush === Z_FINISH$3) {
        /*** FLUSH_BLOCK(s, 1); ***/
        flush_block_only(s, true);
        if (s.strm.avail_out === 0) {
          return BS_FINISH_STARTED;
        }
        /***/
        return BS_FINISH_DONE;
      }
      if (s.sym_next) {
        /*** FLUSH_BLOCK(s, 0); ***/
        flush_block_only(s, false);
        if (s.strm.avail_out === 0) {
          return BS_NEED_MORE;
        }
        /***/
      }
      return BS_BLOCK_DONE;
    };

    /* Values for max_lazy_match, good_match and max_chain_length, depending on
     * the desired pack level (0..9). The values given below have been tuned to
     * exclude worst case performance for pathological files. Better values may be
     * found for specific files.
     */
    function Config(good_length, max_lazy, nice_length, max_chain, func) {

      this.good_length = good_length;
      this.max_lazy = max_lazy;
      this.nice_length = nice_length;
      this.max_chain = max_chain;
      this.func = func;
    }

    const configuration_table = [
      /*      good lazy nice chain */
      new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */
      new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */
      new Config(4, 5, 16, 8, deflate_fast),           /* 2 */
      new Config(4, 6, 32, 32, deflate_fast),          /* 3 */

      new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */
      new Config(8, 16, 32, 32, deflate_slow),         /* 5 */
      new Config(8, 16, 128, 128, deflate_slow),       /* 6 */
      new Config(8, 32, 128, 256, deflate_slow),       /* 7 */
      new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */
      new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */
    ];


    /* ===========================================================================
     * Initialize the "longest match" routines for a new zlib stream
     */
    const lm_init = (s) => {

      s.window_size = 2 * s.w_size;

      /*** CLEAR_HASH(s); ***/
      zero(s.head); // Fill with NIL (= 0);

      /* Set the default configuration parameters:
       */
      s.max_lazy_match = configuration_table[s.level].max_lazy;
      s.good_match = configuration_table[s.level].good_length;
      s.nice_match = configuration_table[s.level].nice_length;
      s.max_chain_length = configuration_table[s.level].max_chain;

      s.strstart = 0;
      s.block_start = 0;
      s.lookahead = 0;
      s.insert = 0;
      s.match_length = s.prev_length = MIN_MATCH - 1;
      s.match_available = 0;
      s.ins_h = 0;
    };


    function DeflateState() {
      this.strm = null;            /* pointer back to this zlib stream */
      this.status = 0;            /* as the name implies */
      this.pending_buf = null;      /* output still pending */
      this.pending_buf_size = 0;  /* size of pending_buf */
      this.pending_out = 0;       /* next pending byte to output to the stream */
      this.pending = 0;           /* nb of bytes in the pending buffer */
      this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */
      this.gzhead = null;         /* gzip header information to write */
      this.gzindex = 0;           /* where in extra, name, or comment */
      this.method = Z_DEFLATED$2; /* can only be DEFLATED */
      this.last_flush = -1;   /* value of flush param for previous deflate call */

      this.w_size = 0;  /* LZ77 window size (32K by default) */
      this.w_bits = 0;  /* log2(w_size)  (8..16) */
      this.w_mask = 0;  /* w_size - 1 */

      this.window = null;
      /* Sliding window. Input bytes are read into the second half of the window,
       * and move to the first half later to keep a dictionary of at least wSize
       * bytes. With this organization, matches are limited to a distance of
       * wSize-MAX_MATCH bytes, but this ensures that IO is always
       * performed with a length multiple of the block size.
       */

      this.window_size = 0;
      /* Actual size of window: 2*wSize, except when the user input buffer
       * is directly used as sliding window.
       */

      this.prev = null;
      /* Link to older string with same hash index. To limit the size of this
       * array to 64K, this link is maintained only for the last 32K strings.
       * An index in this array is thus a window index modulo 32K.
       */

      this.head = null;   /* Heads of the hash chains or NIL. */

      this.ins_h = 0;       /* hash index of string to be inserted */
      this.hash_size = 0;   /* number of elements in hash table */
      this.hash_bits = 0;   /* log2(hash_size) */
      this.hash_mask = 0;   /* hash_size-1 */

      this.hash_shift = 0;
      /* Number of bits by which ins_h must be shifted at each input
       * step. It must be such that after MIN_MATCH steps, the oldest
       * byte no longer takes part in the hash key, that is:
       *   hash_shift * MIN_MATCH >= hash_bits
       */

      this.block_start = 0;
      /* Window position at the beginning of the current output block. Gets
       * negative when the window is moved backwards.
       */

      this.match_length = 0;      /* length of best match */
      this.prev_match = 0;        /* previous match */
      this.match_available = 0;   /* set if previous match exists */
      this.strstart = 0;          /* start of string to insert */
      this.match_start = 0;       /* start of matching string */
      this.lookahead = 0;         /* number of valid bytes ahead in window */

      this.prev_length = 0;
      /* Length of the best match at previous step. Matches not greater than this
       * are discarded. This is used in the lazy match evaluation.
       */

      this.max_chain_length = 0;
      /* To speed up deflation, hash chains are never searched beyond this
       * length.  A higher limit improves compression ratio but degrades the
       * speed.
       */

      this.max_lazy_match = 0;
      /* Attempt to find a better match only when the current match is strictly
       * smaller than this value. This mechanism is used only for compression
       * levels >= 4.
       */
      // That's alias to max_lazy_match, don't use directly
      //this.max_insert_length = 0;
      /* Insert new strings in the hash table only if the match length is not
       * greater than this length. This saves time but degrades compression.
       * max_insert_length is used only for compression levels <= 3.
       */

      this.level = 0;     /* compression level (1..9) */
      this.strategy = 0;  /* favor or force Huffman coding*/

      this.good_match = 0;
      /* Use a faster search when the previous match is longer than this */

      this.nice_match = 0; /* Stop searching when current match exceeds this */

                  /* used by trees.c: */

      /* Didn't use ct_data typedef below to suppress compiler warning */

      // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */
      // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */
      // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */

      // Use flat array of DOUBLE size, with interleaved fata,
      // because JS does not support effective
      this.dyn_ltree  = new Uint16Array(HEAP_SIZE * 2);
      this.dyn_dtree  = new Uint16Array((2 * D_CODES + 1) * 2);
      this.bl_tree    = new Uint16Array((2 * BL_CODES + 1) * 2);
      zero(this.dyn_ltree);
      zero(this.dyn_dtree);
      zero(this.bl_tree);

      this.l_desc   = null;         /* desc. for literal tree */
      this.d_desc   = null;         /* desc. for distance tree */
      this.bl_desc  = null;         /* desc. for bit length tree */

      //ush bl_count[MAX_BITS+1];
      this.bl_count = new Uint16Array(MAX_BITS + 1);
      /* number of codes at each bit length for an optimal tree */

      //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */
      this.heap = new Uint16Array(2 * L_CODES + 1);  /* heap used to build the Huffman trees */
      zero(this.heap);

      this.heap_len = 0;               /* number of elements in the heap */
      this.heap_max = 0;               /* element of largest frequency */
      /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.
       * The same heap array is used to build all trees.
       */

      this.depth = new Uint16Array(2 * L_CODES + 1); //uch depth[2*L_CODES+1];
      zero(this.depth);
      /* Depth of each subtree used as tie breaker for trees of equal frequency
       */

      this.sym_buf = 0;        /* buffer for distances and literals/lengths */

      this.lit_bufsize = 0;
      /* Size of match buffer for literals/lengths.  There are 4 reasons for
       * limiting lit_bufsize to 64K:
       *   - frequencies can be kept in 16 bit counters
       *   - if compression is not successful for the first block, all input
       *     data is still in the window so we can still emit a stored block even
       *     when input comes from standard input.  (This can also be done for
       *     all blocks if lit_bufsize is not greater than 32K.)
       *   - if compression is not successful for a file smaller than 64K, we can
       *     even emit a stored file instead of a stored block (saving 5 bytes).
       *     This is applicable only for zip (not gzip or zlib).
       *   - creating new Huffman trees less frequently may not provide fast
       *     adaptation to changes in the input data statistics. (Take for
       *     example a binary file with poorly compressible code followed by
       *     a highly compressible string table.) Smaller buffer sizes give
       *     fast adaptation but have of course the overhead of transmitting
       *     trees more frequently.
       *   - I can't count above 4
       */

      this.sym_next = 0;      /* running index in sym_buf */
      this.sym_end = 0;       /* symbol table full when sym_next reaches this */

      this.opt_len = 0;       /* bit length of current block with optimal trees */
      this.static_len = 0;    /* bit length of current block with static trees */
      this.matches = 0;       /* number of string matches in current block */
      this.insert = 0;        /* bytes at end of window left to insert */


      this.bi_buf = 0;
      /* Output buffer. bits are inserted starting at the bottom (least
       * significant bits).
       */
      this.bi_valid = 0;
      /* Number of valid bits in bi_buf.  All bits above the last valid bit
       * are always zero.
       */

      // Used for window memory init. We safely ignore it for JS. That makes
      // sense only for pointers and memory check tools.
      //this.high_water = 0;
      /* High water mark offset in window for initialized bytes -- bytes above
       * this are set to zero in order to avoid memory check warnings when
       * longest match routines access bytes past the input.  This is then
       * updated to the new high water mark.
       */
    }


    /* =========================================================================
     * Check for a valid deflate stream state. Return 0 if ok, 1 if not.
     */
    const deflateStateCheck = (strm) => {

      if (!strm) {
        return 1;
      }
      const s = strm.state;
      if (!s || s.strm !== strm || (s.status !== INIT_STATE &&
    //#ifdef GZIP
                                    s.status !== GZIP_STATE &&
    //#endif
                                    s.status !== EXTRA_STATE &&
                                    s.status !== NAME_STATE &&
                                    s.status !== COMMENT_STATE &&
                                    s.status !== HCRC_STATE &&
                                    s.status !== BUSY_STATE &&
                                    s.status !== FINISH_STATE)) {
        return 1;
      }
      return 0;
    };


    const deflateResetKeep = (strm) => {

      if (deflateStateCheck(strm)) {
        return err(strm, Z_STREAM_ERROR$2);
      }

      strm.total_in = strm.total_out = 0;
      strm.data_type = Z_UNKNOWN;

      const s = strm.state;
      s.pending = 0;
      s.pending_out = 0;

      if (s.wrap < 0) {
        s.wrap = -s.wrap;
        /* was made negative by deflate(..., Z_FINISH); */
      }
      s.status =
    //#ifdef GZIP
        s.wrap === 2 ? GZIP_STATE :
    //#endif
        s.wrap ? INIT_STATE : BUSY_STATE;
      strm.adler = (s.wrap === 2) ?
        0  // crc32(0, Z_NULL, 0)
      :
        1; // adler32(0, Z_NULL, 0)
      s.last_flush = -2;
      _tr_init(s);
      return Z_OK$3;
    };


    const deflateReset = (strm) => {

      const ret = deflateResetKeep(strm);
      if (ret === Z_OK$3) {
        lm_init(strm.state);
      }
      return ret;
    };


    const deflateSetHeader = (strm, head) => {

      if (deflateStateCheck(strm) || strm.state.wrap !== 2) {
        return Z_STREAM_ERROR$2;
      }
      strm.state.gzhead = head;
      return Z_OK$3;
    };


    const deflateInit2 = (strm, level, method, windowBits, memLevel, strategy) => {

      if (!strm) { // === Z_NULL
        return Z_STREAM_ERROR$2;
      }
      let wrap = 1;

      if (level === Z_DEFAULT_COMPRESSION$1) {
        level = 6;
      }

      if (windowBits < 0) { /* suppress zlib wrapper */
        wrap = 0;
        windowBits = -windowBits;
      }

      else if (windowBits > 15) {
        wrap = 2;           /* write gzip wrapper instead */
        windowBits -= 16;
      }


      if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED$2 ||
        windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||
        strategy < 0 || strategy > Z_FIXED || (windowBits === 8 && wrap !== 1)) {
        return err(strm, Z_STREAM_ERROR$2);
      }


      if (windowBits === 8) {
        windowBits = 9;
      }
      /* until 256-byte window bug fixed */

      const s = new DeflateState();

      strm.state = s;
      s.strm = strm;
      s.status = INIT_STATE;     /* to pass state test in deflateReset() */

      s.wrap = wrap;
      s.gzhead = null;
      s.w_bits = windowBits;
      s.w_size = 1 << s.w_bits;
      s.w_mask = s.w_size - 1;

      s.hash_bits = memLevel + 7;
      s.hash_size = 1 << s.hash_bits;
      s.hash_mask = s.hash_size - 1;
      s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);

      s.window = new Uint8Array(s.w_size * 2);
      s.head = new Uint16Array(s.hash_size);
      s.prev = new Uint16Array(s.w_size);

      // Don't need mem init magic for JS.
      //s.high_water = 0;  /* nothing written to s->window yet */

      s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */

      /* We overlay pending_buf and sym_buf. This works since the average size
       * for length/distance pairs over any compressed block is assured to be 31
       * bits or less.
       *
       * Analysis: The longest fixed codes are a length code of 8 bits plus 5
       * extra bits, for lengths 131 to 257. The longest fixed distance codes are
       * 5 bits plus 13 extra bits, for distances 16385 to 32768. The longest
       * possible fixed-codes length/distance pair is then 31 bits total.
       *
       * sym_buf starts one-fourth of the way into pending_buf. So there are
       * three bytes in sym_buf for every four bytes in pending_buf. Each symbol
       * in sym_buf is three bytes -- two for the distance and one for the
       * literal/length. As each symbol is consumed, the pointer to the next
       * sym_buf value to read moves forward three bytes. From that symbol, up to
       * 31 bits are written to pending_buf. The closest the written pending_buf
       * bits gets to the next sym_buf symbol to read is just before the last
       * code is written. At that time, 31*(n-2) bits have been written, just
       * after 24*(n-2) bits have been consumed from sym_buf. sym_buf starts at
       * 8*n bits into pending_buf. (Note that the symbol buffer fills when n-1
       * symbols are written.) The closest the writing gets to what is unread is
       * then n+14 bits. Here n is lit_bufsize, which is 16384 by default, and
       * can range from 128 to 32768.
       *
       * Therefore, at a minimum, there are 142 bits of space between what is
       * written and what is read in the overlain buffers, so the symbols cannot
       * be overwritten by the compressed data. That space is actually 139 bits,
       * due to the three-bit fixed-code block header.
       *
       * That covers the case where either Z_FIXED is specified, forcing fixed
       * codes, or when the use of fixed codes is chosen, because that choice
       * results in a smaller compressed block than dynamic codes. That latter
       * condition then assures that the above analysis also covers all dynamic
       * blocks. A dynamic-code block will only be chosen to be emitted if it has
       * fewer bits than a fixed-code block would for the same set of symbols.
       * Therefore its average symbol length is assured to be less than 31. So
       * the compressed data for a dynamic block also cannot overwrite the
       * symbols from which it is being constructed.
       */

      s.pending_buf_size = s.lit_bufsize * 4;
      s.pending_buf = new Uint8Array(s.pending_buf_size);

      // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)
      //s->sym_buf = s->pending_buf + s->lit_bufsize;
      s.sym_buf = s.lit_bufsize;

      //s->sym_end = (s->lit_bufsize - 1) * 3;
      s.sym_end = (s.lit_bufsize - 1) * 3;
      /* We avoid equality with lit_bufsize*3 because of wraparound at 64K
       * on 16 bit machines and because stored blocks are restricted to
       * 64K-1 bytes.
       */

      s.level = level;
      s.strategy = strategy;
      s.method = method;

      return deflateReset(strm);
    };

    const deflateInit = (strm, level) => {

      return deflateInit2(strm, level, Z_DEFLATED$2, MAX_WBITS$1, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY$1);
    };


    /* ========================================================================= */
    const deflate$2 = (strm, flush) => {

      if (deflateStateCheck(strm) || flush > Z_BLOCK$1 || flush < 0) {
        return strm ? err(strm, Z_STREAM_ERROR$2) : Z_STREAM_ERROR$2;
      }

      const s = strm.state;

      if (!strm.output ||
          (strm.avail_in !== 0 && !strm.input) ||
          (s.status === FINISH_STATE && flush !== Z_FINISH$3)) {
        return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR$1 : Z_STREAM_ERROR$2);
      }

      const old_flush = s.last_flush;
      s.last_flush = flush;

      /* Flush as much pending output as possible */
      if (s.pending !== 0) {
        flush_pending(strm);
        if (strm.avail_out === 0) {
          /* Since avail_out is 0, deflate will be called again with
           * more output space, but possibly with both pending and
           * avail_in equal to zero. There won't be anything to do,
           * but this is not an error situation so make sure we
           * return OK instead of BUF_ERROR at next call of deflate:
           */
          s.last_flush = -1;
          return Z_OK$3;
        }

        /* Make sure there is something to do and avoid duplicate consecutive
         * flushes. For repeated and useless calls with Z_FINISH, we keep
         * returning Z_STREAM_END instead of Z_BUF_ERROR.
         */
      } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&
        flush !== Z_FINISH$3) {
        return err(strm, Z_BUF_ERROR$1);
      }

      /* User must not provide more input after the first FINISH: */
      if (s.status === FINISH_STATE && strm.avail_in !== 0) {
        return err(strm, Z_BUF_ERROR$1);
      }

      /* Write the header */
      if (s.status === INIT_STATE && s.wrap === 0) {
        s.status = BUSY_STATE;
      }
      if (s.status === INIT_STATE) {
        /* zlib header */
        let header = (Z_DEFLATED$2 + ((s.w_bits - 8) << 4)) << 8;
        let level_flags = -1;

        if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {
          level_flags = 0;
        } else if (s.level < 6) {
          level_flags = 1;
        } else if (s.level === 6) {
          level_flags = 2;
        } else {
          level_flags = 3;
        }
        header |= (level_flags << 6);
        if (s.strstart !== 0) { header |= PRESET_DICT; }
        header += 31 - (header % 31);

        putShortMSB(s, header);

        /* Save the adler32 of the preset dictionary: */
        if (s.strstart !== 0) {
          putShortMSB(s, strm.adler >>> 16);
          putShortMSB(s, strm.adler & 0xffff);
        }
        strm.adler = 1; // adler32(0L, Z_NULL, 0);
        s.status = BUSY_STATE;

        /* Compression must start with an empty pending buffer */
        flush_pending(strm);
        if (s.pending !== 0) {
          s.last_flush = -1;
          return Z_OK$3;
        }
      }
    //#ifdef GZIP
      if (s.status === GZIP_STATE) {
        /* gzip header */
        strm.adler = 0;  //crc32(0L, Z_NULL, 0);
        put_byte(s, 31);
        put_byte(s, 139);
        put_byte(s, 8);
        if (!s.gzhead) { // s->gzhead == Z_NULL
          put_byte(s, 0);
          put_byte(s, 0);
          put_byte(s, 0);
          put_byte(s, 0);
          put_byte(s, 0);
          put_byte(s, s.level === 9 ? 2 :
                      (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                       4 : 0));
          put_byte(s, OS_CODE);
          s.status = BUSY_STATE;

          /* Compression must start with an empty pending buffer */
          flush_pending(strm);
          if (s.pending !== 0) {
            s.last_flush = -1;
            return Z_OK$3;
          }
        }
        else {
          put_byte(s, (s.gzhead.text ? 1 : 0) +
                      (s.gzhead.hcrc ? 2 : 0) +
                      (!s.gzhead.extra ? 0 : 4) +
                      (!s.gzhead.name ? 0 : 8) +
                      (!s.gzhead.comment ? 0 : 16)
          );
          put_byte(s, s.gzhead.time & 0xff);
          put_byte(s, (s.gzhead.time >> 8) & 0xff);
          put_byte(s, (s.gzhead.time >> 16) & 0xff);
          put_byte(s, (s.gzhead.time >> 24) & 0xff);
          put_byte(s, s.level === 9 ? 2 :
                      (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?
                       4 : 0));
          put_byte(s, s.gzhead.os & 0xff);
          if (s.gzhead.extra && s.gzhead.extra.length) {
            put_byte(s, s.gzhead.extra.length & 0xff);
            put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);
          }
          if (s.gzhead.hcrc) {
            strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending, 0);
          }
          s.gzindex = 0;
          s.status = EXTRA_STATE;
        }
      }
      if (s.status === EXTRA_STATE) {
        if (s.gzhead.extra/* != Z_NULL*/) {
          let beg = s.pending;   /* start of bytes to update crc */
          let left = (s.gzhead.extra.length & 0xffff) - s.gzindex;
          while (s.pending + left > s.pending_buf_size) {
            let copy = s.pending_buf_size - s.pending;
            // zmemcpy(s.pending_buf + s.pending,
            //    s.gzhead.extra + s.gzindex, copy);
            s.pending_buf.set(s.gzhead.extra.subarray(s.gzindex, s.gzindex + copy), s.pending);
            s.pending = s.pending_buf_size;
            //--- HCRC_UPDATE(beg) ---//
            if (s.gzhead.hcrc && s.pending > beg) {
              strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
            }
            //---//
            s.gzindex += copy;
            flush_pending(strm);
            if (s.pending !== 0) {
              s.last_flush = -1;
              return Z_OK$3;
            }
            beg = 0;
            left -= copy;
          }
          // JS specific: s.gzhead.extra may be TypedArray or Array for backward compatibility
          //              TypedArray.slice and TypedArray.from don't exist in IE10-IE11
          let gzhead_extra = new Uint8Array(s.gzhead.extra);
          // zmemcpy(s->pending_buf + s->pending,
          //     s->gzhead->extra + s->gzindex, left);
          s.pending_buf.set(gzhead_extra.subarray(s.gzindex, s.gzindex + left), s.pending);
          s.pending += left;
          //--- HCRC_UPDATE(beg) ---//
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          //---//
          s.gzindex = 0;
        }
        s.status = NAME_STATE;
      }
      if (s.status === NAME_STATE) {
        if (s.gzhead.name/* != Z_NULL*/) {
          let beg = s.pending;   /* start of bytes to update crc */
          let val;
          do {
            if (s.pending === s.pending_buf_size) {
              //--- HCRC_UPDATE(beg) ---//
              if (s.gzhead.hcrc && s.pending > beg) {
                strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
              }
              //---//
              flush_pending(strm);
              if (s.pending !== 0) {
                s.last_flush = -1;
                return Z_OK$3;
              }
              beg = 0;
            }
            // JS specific: little magic to add zero terminator to end of string
            if (s.gzindex < s.gzhead.name.length) {
              val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;
            } else {
              val = 0;
            }
            put_byte(s, val);
          } while (val !== 0);
          //--- HCRC_UPDATE(beg) ---//
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          //---//
          s.gzindex = 0;
        }
        s.status = COMMENT_STATE;
      }
      if (s.status === COMMENT_STATE) {
        if (s.gzhead.comment/* != Z_NULL*/) {
          let beg = s.pending;   /* start of bytes to update crc */
          let val;
          do {
            if (s.pending === s.pending_buf_size) {
              //--- HCRC_UPDATE(beg) ---//
              if (s.gzhead.hcrc && s.pending > beg) {
                strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
              }
              //---//
              flush_pending(strm);
              if (s.pending !== 0) {
                s.last_flush = -1;
                return Z_OK$3;
              }
              beg = 0;
            }
            // JS specific: little magic to add zero terminator to end of string
            if (s.gzindex < s.gzhead.comment.length) {
              val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;
            } else {
              val = 0;
            }
            put_byte(s, val);
          } while (val !== 0);
          //--- HCRC_UPDATE(beg) ---//
          if (s.gzhead.hcrc && s.pending > beg) {
            strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);
          }
          //---//
        }
        s.status = HCRC_STATE;
      }
      if (s.status === HCRC_STATE) {
        if (s.gzhead.hcrc) {
          if (s.pending + 2 > s.pending_buf_size) {
            flush_pending(strm);
            if (s.pending !== 0) {
              s.last_flush = -1;
              return Z_OK$3;
            }
          }
          put_byte(s, strm.adler & 0xff);
          put_byte(s, (strm.adler >> 8) & 0xff);
          strm.adler = 0; //crc32(0L, Z_NULL, 0);
        }
        s.status = BUSY_STATE;

        /* Compression must start with an empty pending buffer */
        flush_pending(strm);
        if (s.pending !== 0) {
          s.last_flush = -1;
          return Z_OK$3;
        }
      }
    //#endif

      /* Start a new block or continue the current one.
       */
      if (strm.avail_in !== 0 || s.lookahead !== 0 ||
        (flush !== Z_NO_FLUSH$2 && s.status !== FINISH_STATE)) {
        let bstate = s.level === 0 ? deflate_stored(s, flush) :
                     s.strategy === Z_HUFFMAN_ONLY ? deflate_huff(s, flush) :
                     s.strategy === Z_RLE ? deflate_rle(s, flush) :
                     configuration_table[s.level].func(s, flush);

        if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {
          s.status = FINISH_STATE;
        }
        if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {
          if (strm.avail_out === 0) {
            s.last_flush = -1;
            /* avoid BUF_ERROR next call, see above */
          }
          return Z_OK$3;
          /* If flush != Z_NO_FLUSH && avail_out == 0, the next call
           * of deflate should use the same flush parameter to make sure
           * that the flush is complete. So we don't have to output an
           * empty block here, this will be done at next call. This also
           * ensures that for a very small output buffer, we emit at most
           * one empty block.
           */
        }
        if (bstate === BS_BLOCK_DONE) {
          if (flush === Z_PARTIAL_FLUSH) {
            _tr_align(s);
          }
          else if (flush !== Z_BLOCK$1) { /* FULL_FLUSH or SYNC_FLUSH */

            _tr_stored_block(s, 0, 0, false);
            /* For a full flush, this empty block will be recognized
             * as a special marker by inflate_sync().
             */
            if (flush === Z_FULL_FLUSH$1) {
              /*** CLEAR_HASH(s); ***/             /* forget history */
              zero(s.head); // Fill with NIL (= 0);

              if (s.lookahead === 0) {
                s.strstart = 0;
                s.block_start = 0;
                s.insert = 0;
              }
            }
          }
          flush_pending(strm);
          if (strm.avail_out === 0) {
            s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */
            return Z_OK$3;
          }
        }
      }

      if (flush !== Z_FINISH$3) { return Z_OK$3; }
      if (s.wrap <= 0) { return Z_STREAM_END$3; }

      /* Write the trailer */
      if (s.wrap === 2) {
        put_byte(s, strm.adler & 0xff);
        put_byte(s, (strm.adler >> 8) & 0xff);
        put_byte(s, (strm.adler >> 16) & 0xff);
        put_byte(s, (strm.adler >> 24) & 0xff);
        put_byte(s, strm.total_in & 0xff);
        put_byte(s, (strm.total_in >> 8) & 0xff);
        put_byte(s, (strm.total_in >> 16) & 0xff);
        put_byte(s, (strm.total_in >> 24) & 0xff);
      }
      else
      {
        putShortMSB(s, strm.adler >>> 16);
        putShortMSB(s, strm.adler & 0xffff);
      }

      flush_pending(strm);
      /* If avail_out is zero, the application will call deflate again
       * to flush the rest.
       */
      if (s.wrap > 0) { s.wrap = -s.wrap; }
      /* write the trailer only once! */
      return s.pending !== 0 ? Z_OK$3 : Z_STREAM_END$3;
    };


    const deflateEnd = (strm) => {

      if (deflateStateCheck(strm)) {
        return Z_STREAM_ERROR$2;
      }

      const status = strm.state.status;

      strm.state = null;

      return status === BUSY_STATE ? err(strm, Z_DATA_ERROR$2) : Z_OK$3;
    };


    /* =========================================================================
     * Initializes the compression dictionary from the given byte
     * sequence without producing any compressed output.
     */
    const deflateSetDictionary = (strm, dictionary) => {

      let dictLength = dictionary.length;

      if (deflateStateCheck(strm)) {
        return Z_STREAM_ERROR$2;
      }

      const s = strm.state;
      const wrap = s.wrap;

      if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {
        return Z_STREAM_ERROR$2;
      }

      /* when using zlib wrappers, compute Adler-32 for provided dictionary */
      if (wrap === 1) {
        /* adler32(strm->adler, dictionary, dictLength); */
        strm.adler = adler32_1(strm.adler, dictionary, dictLength, 0);
      }

      s.wrap = 0;   /* avoid computing Adler-32 in read_buf */

      /* if dictionary would fill window, just replace the history */
      if (dictLength >= s.w_size) {
        if (wrap === 0) {            /* already empty otherwise */
          /*** CLEAR_HASH(s); ***/
          zero(s.head); // Fill with NIL (= 0);
          s.strstart = 0;
          s.block_start = 0;
          s.insert = 0;
        }
        /* use the tail */
        // dictionary = dictionary.slice(dictLength - s.w_size);
        let tmpDict = new Uint8Array(s.w_size);
        tmpDict.set(dictionary.subarray(dictLength - s.w_size, dictLength), 0);
        dictionary = tmpDict;
        dictLength = s.w_size;
      }
      /* insert dictionary into window and hash */
      const avail = strm.avail_in;
      const next = strm.next_in;
      const input = strm.input;
      strm.avail_in = dictLength;
      strm.next_in = 0;
      strm.input = dictionary;
      fill_window(s);
      while (s.lookahead >= MIN_MATCH) {
        let str = s.strstart;
        let n = s.lookahead - (MIN_MATCH - 1);
        do {
          /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */
          s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);

          s.prev[str & s.w_mask] = s.head[s.ins_h];

          s.head[s.ins_h] = str;
          str++;
        } while (--n);
        s.strstart = str;
        s.lookahead = MIN_MATCH - 1;
        fill_window(s);
      }
      s.strstart += s.lookahead;
      s.block_start = s.strstart;
      s.insert = s.lookahead;
      s.lookahead = 0;
      s.match_length = s.prev_length = MIN_MATCH - 1;
      s.match_available = 0;
      strm.next_in = next;
      strm.input = input;
      strm.avail_in = avail;
      s.wrap = wrap;
      return Z_OK$3;
    };


    var deflateInit_1 = deflateInit;
    var deflateInit2_1 = deflateInit2;
    var deflateReset_1 = deflateReset;
    var deflateResetKeep_1 = deflateResetKeep;
    var deflateSetHeader_1 = deflateSetHeader;
    var deflate_2$1 = deflate$2;
    var deflateEnd_1 = deflateEnd;
    var deflateSetDictionary_1 = deflateSetDictionary;
    var deflateInfo = 'pako deflate (from Nodeca project)';

    /* Not implemented
    module.exports.deflateBound = deflateBound;
    module.exports.deflateCopy = deflateCopy;
    module.exports.deflateGetDictionary = deflateGetDictionary;
    module.exports.deflateParams = deflateParams;
    module.exports.deflatePending = deflatePending;
    module.exports.deflatePrime = deflatePrime;
    module.exports.deflateTune = deflateTune;
    */

    var deflate_1$2 = {
    	deflateInit: deflateInit_1,
    	deflateInit2: deflateInit2_1,
    	deflateReset: deflateReset_1,
    	deflateResetKeep: deflateResetKeep_1,
    	deflateSetHeader: deflateSetHeader_1,
    	deflate: deflate_2$1,
    	deflateEnd: deflateEnd_1,
    	deflateSetDictionary: deflateSetDictionary_1,
    	deflateInfo: deflateInfo
    };

    const _has = (obj, key) => {
      return Object.prototype.hasOwnProperty.call(obj, key);
    };

    var assign = function (obj /*from1, from2, from3, ...*/) {
      const sources = Array.prototype.slice.call(arguments, 1);
      while (sources.length) {
        const source = sources.shift();
        if (!source) { continue; }

        if (typeof source !== 'object') {
          throw new TypeError(source + 'must be non-object');
        }

        for (const p in source) {
          if (_has(source, p)) {
            obj[p] = source[p];
          }
        }
      }

      return obj;
    };


    // Join array of chunks to single array.
    var flattenChunks = (chunks) => {
      // calculate data length
      let len = 0;

      for (let i = 0, l = chunks.length; i < l; i++) {
        len += chunks[i].length;
      }

      // join chunks
      const result = new Uint8Array(len);

      for (let i = 0, pos = 0, l = chunks.length; i < l; i++) {
        let chunk = chunks[i];
        result.set(chunk, pos);
        pos += chunk.length;
      }

      return result;
    };

    var common = {
    	assign: assign,
    	flattenChunks: flattenChunks
    };

    // String encode/decode helpers


    // Quick check if we can use fast array to bin string conversion
    //
    // - apply(Array) can fail on Android 2.2
    // - apply(Uint8Array) can fail on iOS 5.1 Safari
    //
    let STR_APPLY_UIA_OK = true;

    try { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }


    // Table with utf8 lengths (calculated by first byte of sequence)
    // Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,
    // because max possible codepoint is 0x10ffff
    const _utf8len = new Uint8Array(256);
    for (let q = 0; q < 256; q++) {
      _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);
    }
    _utf8len[254] = _utf8len[254] = 1; // Invalid sequence start


    // convert string to array (typed, when possible)
    var string2buf = (str) => {
      if (typeof TextEncoder === 'function' && TextEncoder.prototype.encode) {
        return new TextEncoder().encode(str);
      }

      let buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;

      // count binary size
      for (m_pos = 0; m_pos < str_len; m_pos++) {
        c = str.charCodeAt(m_pos);
        if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
          c2 = str.charCodeAt(m_pos + 1);
          if ((c2 & 0xfc00) === 0xdc00) {
            c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
            m_pos++;
          }
        }
        buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;
      }

      // allocate buffer
      buf = new Uint8Array(buf_len);

      // convert
      for (i = 0, m_pos = 0; i < buf_len; m_pos++) {
        c = str.charCodeAt(m_pos);
        if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {
          c2 = str.charCodeAt(m_pos + 1);
          if ((c2 & 0xfc00) === 0xdc00) {
            c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);
            m_pos++;
          }
        }
        if (c < 0x80) {
          /* one byte */
          buf[i++] = c;
        } else if (c < 0x800) {
          /* two bytes */
          buf[i++] = 0xC0 | (c >>> 6);
          buf[i++] = 0x80 | (c & 0x3f);
        } else if (c < 0x10000) {
          /* three bytes */
          buf[i++] = 0xE0 | (c >>> 12);
          buf[i++] = 0x80 | (c >>> 6 & 0x3f);
          buf[i++] = 0x80 | (c & 0x3f);
        } else {
          /* four bytes */
          buf[i++] = 0xf0 | (c >>> 18);
          buf[i++] = 0x80 | (c >>> 12 & 0x3f);
          buf[i++] = 0x80 | (c >>> 6 & 0x3f);
          buf[i++] = 0x80 | (c & 0x3f);
        }
      }

      return buf;
    };

    // Helper
    const buf2binstring = (buf, len) => {
      // On Chrome, the arguments in a function call that are allowed is `65534`.
      // If the length of the buffer is smaller than that, we can use this optimization,
      // otherwise we will take a slower path.
      if (len < 65534) {
        if (buf.subarray && STR_APPLY_UIA_OK) {
          return String.fromCharCode.apply(null, buf.length === len ? buf : buf.subarray(0, len));
        }
      }

      let result = '';
      for (let i = 0; i < len; i++) {
        result += String.fromCharCode(buf[i]);
      }
      return result;
    };


    // convert array to string
    var buf2string = (buf, max) => {
      const len = max || buf.length;

      if (typeof TextDecoder === 'function' && TextDecoder.prototype.decode) {
        return new TextDecoder().decode(buf.subarray(0, max));
      }

      let i, out;

      // Reserve max possible length (2 words per char)
      // NB: by unknown reasons, Array is significantly faster for
      //     String.fromCharCode.apply than Uint16Array.
      const utf16buf = new Array(len * 2);

      for (out = 0, i = 0; i < len;) {
        let c = buf[i++];
        // quick process ascii
        if (c < 0x80) { utf16buf[out++] = c; continue; }

        let c_len = _utf8len[c];
        // skip 5 & 6 byte codes
        if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }

        // apply mask on first byte
        c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;
        // join the rest
        while (c_len > 1 && i < len) {
          c = (c << 6) | (buf[i++] & 0x3f);
          c_len--;
        }

        // terminated by end of string?
        if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }

        if (c < 0x10000) {
          utf16buf[out++] = c;
        } else {
          c -= 0x10000;
          utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);
          utf16buf[out++] = 0xdc00 | (c & 0x3ff);
        }
      }

      return buf2binstring(utf16buf, out);
    };


    // Calculate max possible position in utf8 buffer,
    // that will not break sequence. If that's not possible
    // - (very small limits) return max size as is.
    //
    // buf[] - utf8 bytes array
    // max   - length limit (mandatory);
    var utf8border = (buf, max) => {

      max = max || buf.length;
      if (max > buf.length) { max = buf.length; }

      // go back from last position, until start of sequence found
      let pos = max - 1;
      while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }

      // Very small and broken sequence,
      // return max, because we should return something anyway.
      if (pos < 0) { return max; }

      // If we came to start of buffer - that means buffer is too small,
      // return max too.
      if (pos === 0) { return max; }

      return (pos + _utf8len[buf[pos]] > max) ? pos : max;
    };

    var strings = {
    	string2buf: string2buf,
    	buf2string: buf2string,
    	utf8border: utf8border
    };

    // (C) 1995-2013 Jean-loup Gailly and Mark Adler
    // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
    //
    // This software is provided 'as-is', without any express or implied
    // warranty. In no event will the authors be held liable for any damages
    // arising from the use of this software.
    //
    // Permission is granted to anyone to use this software for any purpose,
    // including commercial applications, and to alter it and redistribute it
    // freely, subject to the following restrictions:
    //
    // 1. The origin of this software must not be misrepresented; you must not
    //   claim that you wrote the original software. If you use this software
    //   in a product, an acknowledgment in the product documentation would be
    //   appreciated but is not required.
    // 2. Altered source versions must be plainly marked as such, and must not be
    //   misrepresented as being the original software.
    // 3. This notice may not be removed or altered from any source distribution.

    function ZStream() {
      /* next input byte */
      this.input = null; // JS specific, because we have no pointers
      this.next_in = 0;
      /* number of bytes available at input */
      this.avail_in = 0;
      /* total number of input bytes read so far */
      this.total_in = 0;
      /* next output byte should be put there */
      this.output = null; // JS specific, because we have no pointers
      this.next_out = 0;
      /* remaining free space at output */
      this.avail_out = 0;
      /* total number of bytes output so far */
      this.total_out = 0;
      /* last error message, NULL if no error */
      this.msg = ''/*Z_NULL*/;
      /* not visible by applications */
      this.state = null;
      /* best guess about the data type: binary or text */
      this.data_type = 2/*Z_UNKNOWN*/;
      /* adler32 value of the uncompressed data */
      this.adler = 0;
    }

    var zstream = ZStream;

    const toString$1 = Object.prototype.toString;

    /* Public constants ==========================================================*/
    /* ===========================================================================*/

    const {
      Z_NO_FLUSH: Z_NO_FLUSH$1, Z_SYNC_FLUSH, Z_FULL_FLUSH, Z_FINISH: Z_FINISH$2,
      Z_OK: Z_OK$2, Z_STREAM_END: Z_STREAM_END$2,
      Z_DEFAULT_COMPRESSION,
      Z_DEFAULT_STRATEGY,
      Z_DEFLATED: Z_DEFLATED$1
    } = constants$2;

    /* ===========================================================================*/


    /**
     * class Deflate
     *
     * Generic JS-style wrapper for zlib calls. If you don't need
     * streaming behaviour - use more simple functions: [[deflate]],
     * [[deflateRaw]] and [[gzip]].
     **/

    /* internal
     * Deflate.chunks -> Array
     *
     * Chunks of output data, if [[Deflate#onData]] not overridden.
     **/

    /**
     * Deflate.result -> Uint8Array
     *
     * Compressed result, generated by default [[Deflate#onData]]
     * and [[Deflate#onEnd]] handlers. Filled after you push last chunk
     * (call [[Deflate#push]] with `Z_FINISH` / `true` param).
     **/

    /**
     * Deflate.err -> Number
     *
     * Error code after deflate finished. 0 (Z_OK) on success.
     * You will not need it in real life, because deflate errors
     * are possible only on wrong options or bad `onData` / `onEnd`
     * custom handlers.
     **/

    /**
     * Deflate.msg -> String
     *
     * Error message, if [[Deflate.err]] != 0
     **/


    /**
     * new Deflate(options)
     * - options (Object): zlib deflate options.
     *
     * Creates new deflator instance with specified params. Throws exception
     * on bad params. Supported options:
     *
     * - `level`
     * - `windowBits`
     * - `memLevel`
     * - `strategy`
     * - `dictionary`
     *
     * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
     * for more information on these.
     *
     * Additional options, for internal needs:
     *
     * - `chunkSize` - size of generated data chunks (16K by default)
     * - `raw` (Boolean) - do raw deflate
     * - `gzip` (Boolean) - create gzip wrapper
     * - `header` (Object) - custom header for gzip
     *   - `text` (Boolean) - true if compressed data believed to be text
     *   - `time` (Number) - modification time, unix timestamp
     *   - `os` (Number) - operation system code
     *   - `extra` (Array) - array of bytes with extra data (max 65536)
     *   - `name` (String) - file name (binary string)
     *   - `comment` (String) - comment (binary string)
     *   - `hcrc` (Boolean) - true if header crc should be added
     *
     * ##### Example:
     *
     * ```javascript
     * const pako = require('pako')
     *   , chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])
     *   , chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);
     *
     * const deflate = new pako.Deflate({ level: 3});
     *
     * deflate.push(chunk1, false);
     * deflate.push(chunk2, true);  // true -> last chunk
     *
     * if (deflate.err) { throw new Error(deflate.err); }
     *
     * console.log(deflate.result);
     * ```
     **/
    function Deflate$1(options) {
      this.options = common.assign({
        level: Z_DEFAULT_COMPRESSION,
        method: Z_DEFLATED$1,
        chunkSize: 16384,
        windowBits: 15,
        memLevel: 8,
        strategy: Z_DEFAULT_STRATEGY
      }, options || {});

      let opt = this.options;

      if (opt.raw && (opt.windowBits > 0)) {
        opt.windowBits = -opt.windowBits;
      }

      else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {
        opt.windowBits += 16;
      }

      this.err    = 0;      // error code, if happens (0 = Z_OK)
      this.msg    = '';     // error message
      this.ended  = false;  // used to avoid multiple onEnd() calls
      this.chunks = [];     // chunks of compressed data

      this.strm = new zstream();
      this.strm.avail_out = 0;

      let status = deflate_1$2.deflateInit2(
        this.strm,
        opt.level,
        opt.method,
        opt.windowBits,
        opt.memLevel,
        opt.strategy
      );

      if (status !== Z_OK$2) {
        throw new Error(messages[status]);
      }

      if (opt.header) {
        deflate_1$2.deflateSetHeader(this.strm, opt.header);
      }

      if (opt.dictionary) {
        let dict;
        // Convert data if needed
        if (typeof opt.dictionary === 'string') {
          // If we need to compress text, change encoding to utf8.
          dict = strings.string2buf(opt.dictionary);
        } else if (toString$1.call(opt.dictionary) === '[object ArrayBuffer]') {
          dict = new Uint8Array(opt.dictionary);
        } else {
          dict = opt.dictionary;
        }

        status = deflate_1$2.deflateSetDictionary(this.strm, dict);

        if (status !== Z_OK$2) {
          throw new Error(messages[status]);
        }

        this._dict_set = true;
      }
    }

    /**
     * Deflate#push(data[, flush_mode]) -> Boolean
     * - data (Uint8Array|ArrayBuffer|String): input data. Strings will be
     *   converted to utf8 byte sequence.
     * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.
     *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.
     *
     * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with
     * new compressed chunks. Returns `true` on success. The last data block must
     * have `flush_mode` Z_FINISH (or `true`). That will flush internal pending
     * buffers and call [[Deflate#onEnd]].
     *
     * On fail call [[Deflate#onEnd]] with error code and return false.
     *
     * ##### Example
     *
     * ```javascript
     * push(chunk, false); // push one of data chunks
     * ...
     * push(chunk, true);  // push last chunk
     * ```
     **/
    Deflate$1.prototype.push = function (data, flush_mode) {
      const strm = this.strm;
      const chunkSize = this.options.chunkSize;
      let status, _flush_mode;

      if (this.ended) { return false; }

      if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;
      else _flush_mode = flush_mode === true ? Z_FINISH$2 : Z_NO_FLUSH$1;

      // Convert data if needed
      if (typeof data === 'string') {
        // If we need to compress text, change encoding to utf8.
        strm.input = strings.string2buf(data);
      } else if (toString$1.call(data) === '[object ArrayBuffer]') {
        strm.input = new Uint8Array(data);
      } else {
        strm.input = data;
      }

      strm.next_in = 0;
      strm.avail_in = strm.input.length;

      for (;;) {
        if (strm.avail_out === 0) {
          strm.output = new Uint8Array(chunkSize);
          strm.next_out = 0;
          strm.avail_out = chunkSize;
        }

        // Make sure avail_out > 6 to avoid repeating markers
        if ((_flush_mode === Z_SYNC_FLUSH || _flush_mode === Z_FULL_FLUSH) && strm.avail_out <= 6) {
          this.onData(strm.output.subarray(0, strm.next_out));
          strm.avail_out = 0;
          continue;
        }

        status = deflate_1$2.deflate(strm, _flush_mode);

        // Ended => flush and finish
        if (status === Z_STREAM_END$2) {
          if (strm.next_out > 0) {
            this.onData(strm.output.subarray(0, strm.next_out));
          }
          status = deflate_1$2.deflateEnd(this.strm);
          this.onEnd(status);
          this.ended = true;
          return status === Z_OK$2;
        }

        // Flush if out buffer full
        if (strm.avail_out === 0) {
          this.onData(strm.output);
          continue;
        }

        // Flush if requested and has data
        if (_flush_mode > 0 && strm.next_out > 0) {
          this.onData(strm.output.subarray(0, strm.next_out));
          strm.avail_out = 0;
          continue;
        }

        if (strm.avail_in === 0) break;
      }

      return true;
    };


    /**
     * Deflate#onData(chunk) -> Void
     * - chunk (Uint8Array): output data.
     *
     * By default, stores data blocks in `chunks[]` property and glue
     * those in `onEnd`. Override this handler, if you need another behaviour.
     **/
    Deflate$1.prototype.onData = function (chunk) {
      this.chunks.push(chunk);
    };


    /**
     * Deflate#onEnd(status) -> Void
     * - status (Number): deflate status. 0 (Z_OK) on success,
     *   other if not.
     *
     * Called once after you tell deflate that the input stream is
     * complete (Z_FINISH). By default - join collected chunks,
     * free memory and fill `results` / `err` properties.
     **/
    Deflate$1.prototype.onEnd = function (status) {
      // On success - join
      if (status === Z_OK$2) {
        this.result = common.flattenChunks(this.chunks);
      }
      this.chunks = [];
      this.err = status;
      this.msg = this.strm.msg;
    };


    /**
     * deflate(data[, options]) -> Uint8Array
     * - data (Uint8Array|ArrayBuffer|String): input data to compress.
     * - options (Object): zlib deflate options.
     *
     * Compress `data` with deflate algorithm and `options`.
     *
     * Supported options are:
     *
     * - level
     * - windowBits
     * - memLevel
     * - strategy
     * - dictionary
     *
     * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
     * for more information on these.
     *
     * Sugar (options):
     *
     * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
     *   negative windowBits implicitly.
     *
     * ##### Example:
     *
     * ```javascript
     * const pako = require('pako')
     * const data = new Uint8Array([1,2,3,4,5,6,7,8,9]);
     *
     * console.log(pako.deflate(data));
     * ```
     **/
    function deflate$1(input, options) {
      const deflator = new Deflate$1(options);

      deflator.push(input, true);

      // That will never happens, if you don't cheat with options :)
      if (deflator.err) { throw deflator.msg || messages[deflator.err]; }

      return deflator.result;
    }


    /**
     * deflateRaw(data[, options]) -> Uint8Array
     * - data (Uint8Array|ArrayBuffer|String): input data to compress.
     * - options (Object): zlib deflate options.
     *
     * The same as [[deflate]], but creates raw data, without wrapper
     * (header and adler32 crc).
     **/
    function deflateRaw$1(input, options) {
      options = options || {};
      options.raw = true;
      return deflate$1(input, options);
    }


    /**
     * gzip(data[, options]) -> Uint8Array
     * - data (Uint8Array|ArrayBuffer|String): input data to compress.
     * - options (Object): zlib deflate options.
     *
     * The same as [[deflate]], but create gzip wrapper instead of
     * deflate one.
     **/
    function gzip$1(input, options) {
      options = options || {};
      options.gzip = true;
      return deflate$1(input, options);
    }


    var Deflate_1$1 = Deflate$1;
    var deflate_2 = deflate$1;
    var deflateRaw_1$1 = deflateRaw$1;
    var gzip_1$1 = gzip$1;
    var constants$1 = constants$2;

    var deflate_1$1 = {
    	Deflate: Deflate_1$1,
    	deflate: deflate_2,
    	deflateRaw: deflateRaw_1$1,
    	gzip: gzip_1$1,
    	constants: constants$1
    };

    // (C) 1995-2013 Jean-loup Gailly and Mark Adler
    // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
    //
    // This software is provided 'as-is', without any express or implied
    // warranty. In no event will the authors be held liable for any damages
    // arising from the use of this software.
    //
    // Permission is granted to anyone to use this software for any purpose,
    // including commercial applications, and to alter it and redistribute it
    // freely, subject to the following restrictions:
    //
    // 1. The origin of this software must not be misrepresented; you must not
    //   claim that you wrote the original software. If you use this software
    //   in a product, an acknowledgment in the product documentation would be
    //   appreciated but is not required.
    // 2. Altered source versions must be plainly marked as such, and must not be
    //   misrepresented as being the original software.
    // 3. This notice may not be removed or altered from any source distribution.

    // See state defs from inflate.js
    const BAD$1 = 16209;       /* got a data error -- remain here until reset */
    const TYPE$1 = 16191;      /* i: waiting for type bits, including last-flag bit */

    /*
       Decode literal, length, and distance codes and write out the resulting
       literal and match bytes until either not enough input or output is
       available, an end-of-block is encountered, or a data error is encountered.
       When large enough input and output buffers are supplied to inflate(), for
       example, a 16K input buffer and a 64K output buffer, more than 95% of the
       inflate execution time is spent in this routine.

       Entry assumptions:

            state.mode === LEN
            strm.avail_in >= 6
            strm.avail_out >= 258
            start >= strm.avail_out
            state.bits < 8

       On return, state.mode is one of:

            LEN -- ran out of enough output space or enough available input
            TYPE -- reached end of block code, inflate() to interpret next block
            BAD -- error in block data

       Notes:

        - The maximum input bits used by a length/distance pair is 15 bits for the
          length code, 5 bits for the length extra, 15 bits for the distance code,
          and 13 bits for the distance extra.  This totals 48 bits, or six bytes.
          Therefore if strm.avail_in >= 6, then there is enough input to avoid
          checking for available input while decoding.

        - The maximum bytes that a single length/distance pair can output is 258
          bytes, which is the maximum length that can be coded.  inflate_fast()
          requires strm.avail_out >= 258 for each loop to avoid checking for
          output space.
     */
    var inffast = function inflate_fast(strm, start) {
      let _in;                    /* local strm.input */
      let last;                   /* have enough input while in < last */
      let _out;                   /* local strm.output */
      let beg;                    /* inflate()'s initial strm.output */
      let end;                    /* while out < end, enough space available */
    //#ifdef INFLATE_STRICT
      let dmax;                   /* maximum distance from zlib header */
    //#endif
      let wsize;                  /* window size or zero if not using window */
      let whave;                  /* valid bytes in the window */
      let wnext;                  /* window write index */
      // Use `s_window` instead `window`, avoid conflict with instrumentation tools
      let s_window;               /* allocated sliding window, if wsize != 0 */
      let hold;                   /* local strm.hold */
      let bits;                   /* local strm.bits */
      let lcode;                  /* local strm.lencode */
      let dcode;                  /* local strm.distcode */
      let lmask;                  /* mask for first level of length codes */
      let dmask;                  /* mask for first level of distance codes */
      let here;                   /* retrieved table entry */
      let op;                     /* code bits, operation, extra bits, or */
                                  /*  window position, window bytes to copy */
      let len;                    /* match length, unused bytes */
      let dist;                   /* match distance */
      let from;                   /* where to copy match from */
      let from_source;


      let input, output; // JS specific, because we have no pointers

      /* copy state to local variables */
      const state = strm.state;
      //here = state.here;
      _in = strm.next_in;
      input = strm.input;
      last = _in + (strm.avail_in - 5);
      _out = strm.next_out;
      output = strm.output;
      beg = _out - (start - strm.avail_out);
      end = _out + (strm.avail_out - 257);
    //#ifdef INFLATE_STRICT
      dmax = state.dmax;
    //#endif
      wsize = state.wsize;
      whave = state.whave;
      wnext = state.wnext;
      s_window = state.window;
      hold = state.hold;
      bits = state.bits;
      lcode = state.lencode;
      dcode = state.distcode;
      lmask = (1 << state.lenbits) - 1;
      dmask = (1 << state.distbits) - 1;


      /* decode literals and length/distances until end-of-block or not enough
         input data or output space */

      top:
      do {
        if (bits < 15) {
          hold += input[_in++] << bits;
          bits += 8;
          hold += input[_in++] << bits;
          bits += 8;
        }

        here = lcode[hold & lmask];

        dolen:
        for (;;) { // Goto emulation
          op = here >>> 24/*here.bits*/;
          hold >>>= op;
          bits -= op;
          op = (here >>> 16) & 0xff/*here.op*/;
          if (op === 0) {                          /* literal */
            //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
            //        "inflate:         literal '%c'\n" :
            //        "inflate:         literal 0x%02x\n", here.val));
            output[_out++] = here & 0xffff/*here.val*/;
          }
          else if (op & 16) {                     /* length base */
            len = here & 0xffff/*here.val*/;
            op &= 15;                           /* number of extra bits */
            if (op) {
              if (bits < op) {
                hold += input[_in++] << bits;
                bits += 8;
              }
              len += hold & ((1 << op) - 1);
              hold >>>= op;
              bits -= op;
            }
            //Tracevv((stderr, "inflate:         length %u\n", len));
            if (bits < 15) {
              hold += input[_in++] << bits;
              bits += 8;
              hold += input[_in++] << bits;
              bits += 8;
            }
            here = dcode[hold & dmask];

            dodist:
            for (;;) { // goto emulation
              op = here >>> 24/*here.bits*/;
              hold >>>= op;
              bits -= op;
              op = (here >>> 16) & 0xff/*here.op*/;

              if (op & 16) {                      /* distance base */
                dist = here & 0xffff/*here.val*/;
                op &= 15;                       /* number of extra bits */
                if (bits < op) {
                  hold += input[_in++] << bits;
                  bits += 8;
                  if (bits < op) {
                    hold += input[_in++] << bits;
                    bits += 8;
                  }
                }
                dist += hold & ((1 << op) - 1);
    //#ifdef INFLATE_STRICT
                if (dist > dmax) {
                  strm.msg = 'invalid distance too far back';
                  state.mode = BAD$1;
                  break top;
                }
    //#endif
                hold >>>= op;
                bits -= op;
                //Tracevv((stderr, "inflate:         distance %u\n", dist));
                op = _out - beg;                /* max distance in output */
                if (dist > op) {                /* see if copy from window */
                  op = dist - op;               /* distance back in window */
                  if (op > whave) {
                    if (state.sane) {
                      strm.msg = 'invalid distance too far back';
                      state.mode = BAD$1;
                      break top;
                    }

    // (!) This block is disabled in zlib defaults,
    // don't enable it for binary compatibility
    //#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
    //                if (len <= op - whave) {
    //                  do {
    //                    output[_out++] = 0;
    //                  } while (--len);
    //                  continue top;
    //                }
    //                len -= op - whave;
    //                do {
    //                  output[_out++] = 0;
    //                } while (--op > whave);
    //                if (op === 0) {
    //                  from = _out - dist;
    //                  do {
    //                    output[_out++] = output[from++];
    //                  } while (--len);
    //                  continue top;
    //                }
    //#endif
                  }
                  from = 0; // window index
                  from_source = s_window;
                  if (wnext === 0) {           /* very common case */
                    from += wsize - op;
                    if (op < len) {         /* some from window */
                      len -= op;
                      do {
                        output[_out++] = s_window[from++];
                      } while (--op);
                      from = _out - dist;  /* rest from output */
                      from_source = output;
                    }
                  }
                  else if (wnext < op) {      /* wrap around window */
                    from += wsize + wnext - op;
                    op -= wnext;
                    if (op < len) {         /* some from end of window */
                      len -= op;
                      do {
                        output[_out++] = s_window[from++];
                      } while (--op);
                      from = 0;
                      if (wnext < len) {  /* some from start of window */
                        op = wnext;
                        len -= op;
                        do {
                          output[_out++] = s_window[from++];
                        } while (--op);
                        from = _out - dist;      /* rest from output */
                        from_source = output;
                      }
                    }
                  }
                  else {                      /* contiguous in window */
                    from += wnext - op;
                    if (op < len) {         /* some from window */
                      len -= op;
                      do {
                        output[_out++] = s_window[from++];
                      } while (--op);
                      from = _out - dist;  /* rest from output */
                      from_source = output;
                    }
                  }
                  while (len > 2) {
                    output[_out++] = from_source[from++];
                    output[_out++] = from_source[from++];
                    output[_out++] = from_source[from++];
                    len -= 3;
                  }
                  if (len) {
                    output[_out++] = from_source[from++];
                    if (len > 1) {
                      output[_out++] = from_source[from++];
                    }
                  }
                }
                else {
                  from = _out - dist;          /* copy direct from output */
                  do {                        /* minimum length is three */
                    output[_out++] = output[from++];
                    output[_out++] = output[from++];
                    output[_out++] = output[from++];
                    len -= 3;
                  } while (len > 2);
                  if (len) {
                    output[_out++] = output[from++];
                    if (len > 1) {
                      output[_out++] = output[from++];
                    }
                  }
                }
              }
              else if ((op & 64) === 0) {          /* 2nd level distance code */
                here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
                continue dodist;
              }
              else {
                strm.msg = 'invalid distance code';
                state.mode = BAD$1;
                break top;
              }

              break; // need to emulate goto via "continue"
            }
          }
          else if ((op & 64) === 0) {              /* 2nd level length code */
            here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];
            continue dolen;
          }
          else if (op & 32) {                     /* end-of-block */
            //Tracevv((stderr, "inflate:         end of block\n"));
            state.mode = TYPE$1;
            break top;
          }
          else {
            strm.msg = 'invalid literal/length code';
            state.mode = BAD$1;
            break top;
          }

          break; // need to emulate goto via "continue"
        }
      } while (_in < last && _out < end);

      /* return unused bytes (on entry, bits < 8, so in won't go too far back) */
      len = bits >> 3;
      _in -= len;
      bits -= len << 3;
      hold &= (1 << bits) - 1;

      /* update state and return */
      strm.next_in = _in;
      strm.next_out = _out;
      strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));
      strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));
      state.hold = hold;
      state.bits = bits;
      return;
    };

    // (C) 1995-2013 Jean-loup Gailly and Mark Adler
    // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
    //
    // This software is provided 'as-is', without any express or implied
    // warranty. In no event will the authors be held liable for any damages
    // arising from the use of this software.
    //
    // Permission is granted to anyone to use this software for any purpose,
    // including commercial applications, and to alter it and redistribute it
    // freely, subject to the following restrictions:
    //
    // 1. The origin of this software must not be misrepresented; you must not
    //   claim that you wrote the original software. If you use this software
    //   in a product, an acknowledgment in the product documentation would be
    //   appreciated but is not required.
    // 2. Altered source versions must be plainly marked as such, and must not be
    //   misrepresented as being the original software.
    // 3. This notice may not be removed or altered from any source distribution.

    const MAXBITS = 15;
    const ENOUGH_LENS$1 = 852;
    const ENOUGH_DISTS$1 = 592;
    //const ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);

    const CODES$1 = 0;
    const LENS$1 = 1;
    const DISTS$1 = 2;

    const lbase = new Uint16Array([ /* Length codes 257..285 base */
      3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
      35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0
    ]);

    const lext = new Uint8Array([ /* Length codes 257..285 extra */
      16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,
      19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78
    ]);

    const dbase = new Uint16Array([ /* Distance codes 0..29 base */
      1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
      257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
      8193, 12289, 16385, 24577, 0, 0
    ]);

    const dext = new Uint8Array([ /* Distance codes 0..29 extra */
      16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,
      23, 23, 24, 24, 25, 25, 26, 26, 27, 27,
      28, 28, 29, 29, 64, 64
    ]);

    const inflate_table = (type, lens, lens_index, codes, table, table_index, work, opts) =>
    {
      const bits = opts.bits;
          //here = opts.here; /* table entry for duplication */

      let len = 0;               /* a code's length in bits */
      let sym = 0;               /* index of code symbols */
      let min = 0, max = 0;          /* minimum and maximum code lengths */
      let root = 0;              /* number of index bits for root table */
      let curr = 0;              /* number of index bits for current table */
      let drop = 0;              /* code bits to drop for sub-table */
      let left = 0;                   /* number of prefix codes available */
      let used = 0;              /* code entries in table used */
      let huff = 0;              /* Huffman code */
      let incr;              /* for incrementing code, index */
      let fill;              /* index for replicating entries */
      let low;               /* low bits for current root entry */
      let mask;              /* mask for low root bits */
      let next;             /* next available space in table */
      let base = null;     /* base value table to use */
    //  let shoextra;    /* extra bits table to use */
      let match;                  /* use base and extra for symbol >= match */
      const count = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */
      const offs = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */
      let extra = null;

      let here_bits, here_op, here_val;

      /*
       Process a set of code lengths to create a canonical Huffman code.  The
       code lengths are lens[0..codes-1].  Each length corresponds to the
       symbols 0..codes-1.  The Huffman code is generated by first sorting the
       symbols by length from short to long, and retaining the symbol order
       for codes with equal lengths.  Then the code starts with all zero bits
       for the first code of the shortest length, and the codes are integer
       increments for the same length, and zeros are appended as the length
       increases.  For the deflate format, these bits are stored backwards
       from their more natural integer increment ordering, and so when the
       decoding tables are built in the large loop below, the integer codes
       are incremented backwards.

       This routine assumes, but does not check, that all of the entries in
       lens[] are in the range 0..MAXBITS.  The caller must assure this.
       1..MAXBITS is interpreted as that code length.  zero means that that
       symbol does not occur in this code.

       The codes are sorted by computing a count of codes for each length,
       creating from that a table of starting indices for each length in the
       sorted table, and then entering the symbols in order in the sorted
       table.  The sorted table is work[], with that space being provided by
       the caller.

       The length counts are used for other purposes as well, i.e. finding
       the minimum and maximum length codes, determining if there are any
       codes at all, checking for a valid set of lengths, and looking ahead
       at length counts to determine sub-table sizes when building the
       decoding tables.
       */

      /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */
      for (len = 0; len <= MAXBITS; len++) {
        count[len] = 0;
      }
      for (sym = 0; sym < codes; sym++) {
        count[lens[lens_index + sym]]++;
      }

      /* bound code lengths, force root to be within code lengths */
      root = bits;
      for (max = MAXBITS; max >= 1; max--) {
        if (count[max] !== 0) { break; }
      }
      if (root > max) {
        root = max;
      }
      if (max === 0) {                     /* no symbols to code at all */
        //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */
        //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;
        //table.val[opts.table_index++] = 0;   //here.val = (var short)0;
        table[table_index++] = (1 << 24) | (64 << 16) | 0;


        //table.op[opts.table_index] = 64;
        //table.bits[opts.table_index] = 1;
        //table.val[opts.table_index++] = 0;
        table[table_index++] = (1 << 24) | (64 << 16) | 0;

        opts.bits = 1;
        return 0;     /* no symbols, but wait for decoding to report error */
      }
      for (min = 1; min < max; min++) {
        if (count[min] !== 0) { break; }
      }
      if (root < min) {
        root = min;
      }

      /* check for an over-subscribed or incomplete set of lengths */
      left = 1;
      for (len = 1; len <= MAXBITS; len++) {
        left <<= 1;
        left -= count[len];
        if (left < 0) {
          return -1;
        }        /* over-subscribed */
      }
      if (left > 0 && (type === CODES$1 || max !== 1)) {
        return -1;                      /* incomplete set */
      }

      /* generate offsets into symbol table for each length for sorting */
      offs[1] = 0;
      for (len = 1; len < MAXBITS; len++) {
        offs[len + 1] = offs[len] + count[len];
      }

      /* sort symbols by length, by symbol order within each length */
      for (sym = 0; sym < codes; sym++) {
        if (lens[lens_index + sym] !== 0) {
          work[offs[lens[lens_index + sym]]++] = sym;
        }
      }

      /*
       Create and fill in decoding tables.  In this loop, the table being
       filled is at next and has curr index bits.  The code being used is huff
       with length len.  That code is converted to an index by dropping drop
       bits off of the bottom.  For codes where len is less than drop + curr,
       those top drop + curr - len bits are incremented through all values to
       fill the table with replicated entries.

       root is the number of index bits for the root table.  When len exceeds
       root, sub-tables are created pointed to by the root entry with an index
       of the low root bits of huff.  This is saved in low to check for when a
       new sub-table should be started.  drop is zero when the root table is
       being filled, and drop is root when sub-tables are being filled.

       When a new sub-table is needed, it is necessary to look ahead in the
       code lengths to determine what size sub-table is needed.  The length
       counts are used for this, and so count[] is decremented as codes are
       entered in the tables.

       used keeps track of how many table entries have been allocated from the
       provided *table space.  It is checked for LENS and DIST tables against
       the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in
       the initial root table size constants.  See the comments in inftrees.h
       for more information.

       sym increments through all symbols, and the loop terminates when
       all codes of length max, i.e. all codes, have been processed.  This
       routine permits incomplete codes, so another loop after this one fills
       in the rest of the decoding tables with invalid code markers.
       */

      /* set up for code type */
      // poor man optimization - use if-else instead of switch,
      // to avoid deopts in old v8
      if (type === CODES$1) {
        base = extra = work;    /* dummy value--not used */
        match = 20;

      } else if (type === LENS$1) {
        base = lbase;
        extra = lext;
        match = 257;

      } else {                    /* DISTS */
        base = dbase;
        extra = dext;
        match = 0;
      }

      /* initialize opts for loop */
      huff = 0;                   /* starting code */
      sym = 0;                    /* starting code symbol */
      len = min;                  /* starting code length */
      next = table_index;              /* current table to fill in */
      curr = root;                /* current table index bits */
      drop = 0;                   /* current bits to drop from code for index */
      low = -1;                   /* trigger new sub-table when len > root */
      used = 1 << root;          /* use root table entries */
      mask = used - 1;            /* mask for comparing low */

      /* check available table space */
      if ((type === LENS$1 && used > ENOUGH_LENS$1) ||
        (type === DISTS$1 && used > ENOUGH_DISTS$1)) {
        return 1;
      }

      /* process all codes and make table entries */
      for (;;) {
        /* create table entry */
        here_bits = len - drop;
        if (work[sym] + 1 < match) {
          here_op = 0;
          here_val = work[sym];
        }
        else if (work[sym] >= match) {
          here_op = extra[work[sym] - match];
          here_val = base[work[sym] - match];
        }
        else {
          here_op = 32 + 64;         /* end of block */
          here_val = 0;
        }

        /* replicate for those indices with low len bits equal to huff */
        incr = 1 << (len - drop);
        fill = 1 << curr;
        min = fill;                 /* save offset to next table */
        do {
          fill -= incr;
          table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;
        } while (fill !== 0);

        /* backwards increment the len-bit code huff */
        incr = 1 << (len - 1);
        while (huff & incr) {
          incr >>= 1;
        }
        if (incr !== 0) {
          huff &= incr - 1;
          huff += incr;
        } else {
          huff = 0;
        }

        /* go to next symbol, update count, len */
        sym++;
        if (--count[len] === 0) {
          if (len === max) { break; }
          len = lens[lens_index + work[sym]];
        }

        /* create new sub-table if needed */
        if (len > root && (huff & mask) !== low) {
          /* if first time, transition to sub-tables */
          if (drop === 0) {
            drop = root;
          }

          /* increment past last table */
          next += min;            /* here min is 1 << curr */

          /* determine length of next table */
          curr = len - drop;
          left = 1 << curr;
          while (curr + drop < max) {
            left -= count[curr + drop];
            if (left <= 0) { break; }
            curr++;
            left <<= 1;
          }

          /* check for enough space */
          used += 1 << curr;
          if ((type === LENS$1 && used > ENOUGH_LENS$1) ||
            (type === DISTS$1 && used > ENOUGH_DISTS$1)) {
            return 1;
          }

          /* point entry in root table to sub-table */
          low = huff & mask;
          /*table.op[low] = curr;
          table.bits[low] = root;
          table.val[low] = next - opts.table_index;*/
          table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;
        }
      }

      /* fill in remaining table entry if code is incomplete (guaranteed to have
       at most one remaining entry, since if the code is incomplete, the
       maximum code length that was allowed to get this far is one bit) */
      if (huff !== 0) {
        //table.op[next + huff] = 64;            /* invalid code marker */
        //table.bits[next + huff] = len - drop;
        //table.val[next + huff] = 0;
        table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;
      }

      /* set return parameters */
      //opts.table_index += used;
      opts.bits = root;
      return 0;
    };


    var inftrees = inflate_table;

    // (C) 1995-2013 Jean-loup Gailly and Mark Adler
    // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
    //
    // This software is provided 'as-is', without any express or implied
    // warranty. In no event will the authors be held liable for any damages
    // arising from the use of this software.
    //
    // Permission is granted to anyone to use this software for any purpose,
    // including commercial applications, and to alter it and redistribute it
    // freely, subject to the following restrictions:
    //
    // 1. The origin of this software must not be misrepresented; you must not
    //   claim that you wrote the original software. If you use this software
    //   in a product, an acknowledgment in the product documentation would be
    //   appreciated but is not required.
    // 2. Altered source versions must be plainly marked as such, and must not be
    //   misrepresented as being the original software.
    // 3. This notice may not be removed or altered from any source distribution.






    const CODES = 0;
    const LENS = 1;
    const DISTS = 2;

    /* Public constants ==========================================================*/
    /* ===========================================================================*/

    const {
      Z_FINISH: Z_FINISH$1, Z_BLOCK, Z_TREES,
      Z_OK: Z_OK$1, Z_STREAM_END: Z_STREAM_END$1, Z_NEED_DICT: Z_NEED_DICT$1, Z_STREAM_ERROR: Z_STREAM_ERROR$1, Z_DATA_ERROR: Z_DATA_ERROR$1, Z_MEM_ERROR: Z_MEM_ERROR$1, Z_BUF_ERROR,
      Z_DEFLATED
    } = constants$2;


    /* STATES ====================================================================*/
    /* ===========================================================================*/


    const    HEAD = 16180;       /* i: waiting for magic header */
    const    FLAGS = 16181;      /* i: waiting for method and flags (gzip) */
    const    TIME = 16182;       /* i: waiting for modification time (gzip) */
    const    OS = 16183;         /* i: waiting for extra flags and operating system (gzip) */
    const    EXLEN = 16184;      /* i: waiting for extra length (gzip) */
    const    EXTRA = 16185;      /* i: waiting for extra bytes (gzip) */
    const    NAME = 16186;       /* i: waiting for end of file name (gzip) */
    const    COMMENT = 16187;    /* i: waiting for end of comment (gzip) */
    const    HCRC = 16188;       /* i: waiting for header crc (gzip) */
    const    DICTID = 16189;    /* i: waiting for dictionary check value */
    const    DICT = 16190;      /* waiting for inflateSetDictionary() call */
    const        TYPE = 16191;      /* i: waiting for type bits, including last-flag bit */
    const        TYPEDO = 16192;    /* i: same, but skip check to exit inflate on new block */
    const        STORED = 16193;    /* i: waiting for stored size (length and complement) */
    const        COPY_ = 16194;     /* i/o: same as COPY below, but only first time in */
    const        COPY = 16195;      /* i/o: waiting for input or output to copy stored block */
    const        TABLE = 16196;     /* i: waiting for dynamic block table lengths */
    const        LENLENS = 16197;   /* i: waiting for code length code lengths */
    const        CODELENS = 16198;  /* i: waiting for length/lit and distance code lengths */
    const            LEN_ = 16199;      /* i: same as LEN below, but only first time in */
    const            LEN = 16200;       /* i: waiting for length/lit/eob code */
    const            LENEXT = 16201;    /* i: waiting for length extra bits */
    const            DIST = 16202;      /* i: waiting for distance code */
    const            DISTEXT = 16203;   /* i: waiting for distance extra bits */
    const            MATCH = 16204;     /* o: waiting for output space to copy string */
    const            LIT = 16205;       /* o: waiting for output space to write literal */
    const    CHECK = 16206;     /* i: waiting for 32-bit check value */
    const    LENGTH = 16207;    /* i: waiting for 32-bit length (gzip) */
    const    DONE = 16208;      /* finished check, done -- remain here until reset */
    const    BAD = 16209;       /* got a data error -- remain here until reset */
    const    MEM = 16210;       /* got an inflate() memory error -- remain here until reset */
    const    SYNC = 16211;      /* looking for synchronization bytes to restart inflate() */

    /* ===========================================================================*/



    const ENOUGH_LENS = 852;
    const ENOUGH_DISTS = 592;
    //const ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);

    const MAX_WBITS = 15;
    /* 32K LZ77 window */
    const DEF_WBITS = MAX_WBITS;


    const zswap32 = (q) => {

      return  (((q >>> 24) & 0xff) +
              ((q >>> 8) & 0xff00) +
              ((q & 0xff00) << 8) +
              ((q & 0xff) << 24));
    };


    function InflateState() {
      this.strm = null;           /* pointer back to this zlib stream */
      this.mode = 0;              /* current inflate mode */
      this.last = false;          /* true if processing last block */
      this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip,
                                     bit 2 true to validate check value */
      this.havedict = false;      /* true if dictionary provided */
      this.flags = 0;             /* gzip header method and flags (0 if zlib), or
                                     -1 if raw or no header yet */
      this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */
      this.check = 0;             /* protected copy of check value */
      this.total = 0;             /* protected copy of output count */
      // TODO: may be {}
      this.head = null;           /* where to save gzip header information */

      /* sliding window */
      this.wbits = 0;             /* log base 2 of requested window size */
      this.wsize = 0;             /* window size or zero if not using window */
      this.whave = 0;             /* valid bytes in the window */
      this.wnext = 0;             /* window write index */
      this.window = null;         /* allocated sliding window, if needed */

      /* bit accumulator */
      this.hold = 0;              /* input bit accumulator */
      this.bits = 0;              /* number of bits in "in" */

      /* for string and stored block copying */
      this.length = 0;            /* literal or length of data to copy */
      this.offset = 0;            /* distance back to copy string from */

      /* for table and code decoding */
      this.extra = 0;             /* extra bits needed */

      /* fixed and dynamic code tables */
      this.lencode = null;          /* starting table for length/literal codes */
      this.distcode = null;         /* starting table for distance codes */
      this.lenbits = 0;           /* index bits for lencode */
      this.distbits = 0;          /* index bits for distcode */

      /* dynamic table building */
      this.ncode = 0;             /* number of code length code lengths */
      this.nlen = 0;              /* number of length code lengths */
      this.ndist = 0;             /* number of distance code lengths */
      this.have = 0;              /* number of code lengths in lens[] */
      this.next = null;              /* next available space in codes[] */

      this.lens = new Uint16Array(320); /* temporary storage for code lengths */
      this.work = new Uint16Array(288); /* work area for code table building */

      /*
       because we don't have pointers in js, we use lencode and distcode directly
       as buffers so we don't need codes
      */
      //this.codes = new Int32Array(ENOUGH);       /* space for code tables */
      this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */
      this.distdyn = null;             /* dynamic table for distance codes (JS specific) */
      this.sane = 0;                   /* if false, allow invalid distance too far */
      this.back = 0;                   /* bits back of last unprocessed length/lit */
      this.was = 0;                    /* initial length of match */
    }


    const inflateStateCheck = (strm) => {

      if (!strm) {
        return 1;
      }
      const state = strm.state;
      if (!state || state.strm !== strm ||
        state.mode < HEAD || state.mode > SYNC) {
        return 1;
      }
      return 0;
    };


    const inflateResetKeep = (strm) => {

      if (inflateStateCheck(strm)) { return Z_STREAM_ERROR$1; }
      const state = strm.state;
      strm.total_in = strm.total_out = state.total = 0;
      strm.msg = ''; /*Z_NULL*/
      if (state.wrap) {       /* to support ill-conceived Java test suite */
        strm.adler = state.wrap & 1;
      }
      state.mode = HEAD;
      state.last = 0;
      state.havedict = 0;
      state.flags = -1;
      state.dmax = 32768;
      state.head = null/*Z_NULL*/;
      state.hold = 0;
      state.bits = 0;
      //state.lencode = state.distcode = state.next = state.codes;
      state.lencode = state.lendyn = new Int32Array(ENOUGH_LENS);
      state.distcode = state.distdyn = new Int32Array(ENOUGH_DISTS);

      state.sane = 1;
      state.back = -1;
      //Tracev((stderr, "inflate: reset\n"));
      return Z_OK$1;
    };


    const inflateReset = (strm) => {

      if (inflateStateCheck(strm)) { return Z_STREAM_ERROR$1; }
      const state = strm.state;
      state.wsize = 0;
      state.whave = 0;
      state.wnext = 0;
      return inflateResetKeep(strm);

    };


    const inflateReset2 = (strm, windowBits) => {
      let wrap;

      /* get the state */
      if (inflateStateCheck(strm)) { return Z_STREAM_ERROR$1; }
      const state = strm.state;

      /* extract wrap request from windowBits parameter */
      if (windowBits < 0) {
        wrap = 0;
        windowBits = -windowBits;
      }
      else {
        wrap = (windowBits >> 4) + 5;
        if (windowBits < 48) {
          windowBits &= 15;
        }
      }

      /* set number of window bits, free window if different */
      if (windowBits && (windowBits < 8 || windowBits > 15)) {
        return Z_STREAM_ERROR$1;
      }
      if (state.window !== null && state.wbits !== windowBits) {
        state.window = null;
      }

      /* update state and reset the rest of it */
      state.wrap = wrap;
      state.wbits = windowBits;
      return inflateReset(strm);
    };


    const inflateInit2 = (strm, windowBits) => {

      if (!strm) { return Z_STREAM_ERROR$1; }
      //strm.msg = Z_NULL;                 /* in case we return an error */

      const state = new InflateState();

      //if (state === Z_NULL) return Z_MEM_ERROR;
      //Tracev((stderr, "inflate: allocated\n"));
      strm.state = state;
      state.strm = strm;
      state.window = null/*Z_NULL*/;
      state.mode = HEAD;     /* to pass state test in inflateReset2() */
      const ret = inflateReset2(strm, windowBits);
      if (ret !== Z_OK$1) {
        strm.state = null/*Z_NULL*/;
      }
      return ret;
    };


    const inflateInit = (strm) => {

      return inflateInit2(strm, DEF_WBITS);
    };


    /*
     Return state with length and distance decoding tables and index sizes set to
     fixed code decoding.  Normally this returns fixed tables from inffixed.h.
     If BUILDFIXED is defined, then instead this routine builds the tables the
     first time it's called, and returns those tables the first time and
     thereafter.  This reduces the size of the code by about 2K bytes, in
     exchange for a little execution time.  However, BUILDFIXED should not be
     used for threaded applications, since the rewriting of the tables and virgin
     may not be thread-safe.
     */
    let virgin = true;

    let lenfix, distfix; // We have no pointers in JS, so keep tables separate


    const fixedtables = (state) => {

      /* build fixed huffman tables if first call (may not be thread safe) */
      if (virgin) {
        lenfix = new Int32Array(512);
        distfix = new Int32Array(32);

        /* literal/length table */
        let sym = 0;
        while (sym < 144) { state.lens[sym++] = 8; }
        while (sym < 256) { state.lens[sym++] = 9; }
        while (sym < 280) { state.lens[sym++] = 7; }
        while (sym < 288) { state.lens[sym++] = 8; }

        inftrees(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });

        /* distance table */
        sym = 0;
        while (sym < 32) { state.lens[sym++] = 5; }

        inftrees(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });

        /* do this just once */
        virgin = false;
      }

      state.lencode = lenfix;
      state.lenbits = 9;
      state.distcode = distfix;
      state.distbits = 5;
    };


    /*
     Update the window with the last wsize (normally 32K) bytes written before
     returning.  If window does not exist yet, create it.  This is only called
     when a window is already in use, or when output has been written during this
     inflate call, but the end of the deflate stream has not been reached yet.
     It is also called to create a window for dictionary data when a dictionary
     is loaded.

     Providing output buffers larger than 32K to inflate() should provide a speed
     advantage, since only the last 32K of output is copied to the sliding window
     upon return from inflate(), and since all distances after the first 32K of
     output will fall in the output data, making match copies simpler and faster.
     The advantage may be dependent on the size of the processor's data caches.
     */
    const updatewindow = (strm, src, end, copy) => {

      let dist;
      const state = strm.state;

      /* if it hasn't been done already, allocate space for the window */
      if (state.window === null) {
        state.wsize = 1 << state.wbits;
        state.wnext = 0;
        state.whave = 0;

        state.window = new Uint8Array(state.wsize);
      }

      /* copy state->wsize or less output bytes into the circular window */
      if (copy >= state.wsize) {
        state.window.set(src.subarray(end - state.wsize, end), 0);
        state.wnext = 0;
        state.whave = state.wsize;
      }
      else {
        dist = state.wsize - state.wnext;
        if (dist > copy) {
          dist = copy;
        }
        //zmemcpy(state->window + state->wnext, end - copy, dist);
        state.window.set(src.subarray(end - copy, end - copy + dist), state.wnext);
        copy -= dist;
        if (copy) {
          //zmemcpy(state->window, end - copy, copy);
          state.window.set(src.subarray(end - copy, end), 0);
          state.wnext = copy;
          state.whave = state.wsize;
        }
        else {
          state.wnext += dist;
          if (state.wnext === state.wsize) { state.wnext = 0; }
          if (state.whave < state.wsize) { state.whave += dist; }
        }
      }
      return 0;
    };


    const inflate$2 = (strm, flush) => {

      let state;
      let input, output;          // input/output buffers
      let next;                   /* next input INDEX */
      let put;                    /* next output INDEX */
      let have, left;             /* available input and output */
      let hold;                   /* bit buffer */
      let bits;                   /* bits in bit buffer */
      let _in, _out;              /* save starting available input and output */
      let copy;                   /* number of stored or match bytes to copy */
      let from;                   /* where to copy match bytes from */
      let from_source;
      let here = 0;               /* current decoding table entry */
      let here_bits, here_op, here_val; // paked "here" denormalized (JS specific)
      //let last;                   /* parent table entry */
      let last_bits, last_op, last_val; // paked "last" denormalized (JS specific)
      let len;                    /* length to copy for repeats, bits to drop */
      let ret;                    /* return code */
      const hbuf = new Uint8Array(4);    /* buffer for gzip header crc calculation */
      let opts;

      let n; // temporary variable for NEED_BITS

      const order = /* permutation of code lengths */
        new Uint8Array([ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ]);


      if (inflateStateCheck(strm) || !strm.output ||
          (!strm.input && strm.avail_in !== 0)) {
        return Z_STREAM_ERROR$1;
      }

      state = strm.state;
      if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */


      //--- LOAD() ---
      put = strm.next_out;
      output = strm.output;
      left = strm.avail_out;
      next = strm.next_in;
      input = strm.input;
      have = strm.avail_in;
      hold = state.hold;
      bits = state.bits;
      //---

      _in = have;
      _out = left;
      ret = Z_OK$1;

      inf_leave: // goto emulation
      for (;;) {
        switch (state.mode) {
          case HEAD:
            if (state.wrap === 0) {
              state.mode = TYPEDO;
              break;
            }
            //=== NEEDBITS(16);
            while (bits < 16) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */
              if (state.wbits === 0) {
                state.wbits = 15;
              }
              state.check = 0/*crc32(0L, Z_NULL, 0)*/;
              //=== CRC2(state.check, hold);
              hbuf[0] = hold & 0xff;
              hbuf[1] = (hold >>> 8) & 0xff;
              state.check = crc32_1(state.check, hbuf, 2, 0);
              //===//

              //=== INITBITS();
              hold = 0;
              bits = 0;
              //===//
              state.mode = FLAGS;
              break;
            }
            if (state.head) {
              state.head.done = false;
            }
            if (!(state.wrap & 1) ||   /* check if zlib header allowed */
              (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {
              strm.msg = 'incorrect header check';
              state.mode = BAD;
              break;
            }
            if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {
              strm.msg = 'unknown compression method';
              state.mode = BAD;
              break;
            }
            //--- DROPBITS(4) ---//
            hold >>>= 4;
            bits -= 4;
            //---//
            len = (hold & 0x0f)/*BITS(4)*/ + 8;
            if (state.wbits === 0) {
              state.wbits = len;
            }
            if (len > 15 || len > state.wbits) {
              strm.msg = 'invalid window size';
              state.mode = BAD;
              break;
            }

            // !!! pako patch. Force use `options.windowBits` if passed.
            // Required to always use max window size by default.
            state.dmax = 1 << state.wbits;
            //state.dmax = 1 << len;

            state.flags = 0;               /* indicate zlib header */
            //Tracev((stderr, "inflate:   zlib header ok\n"));
            strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
            state.mode = hold & 0x200 ? DICTID : TYPE;
            //=== INITBITS();
            hold = 0;
            bits = 0;
            //===//
            break;
          case FLAGS:
            //=== NEEDBITS(16); */
            while (bits < 16) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            state.flags = hold;
            if ((state.flags & 0xff) !== Z_DEFLATED) {
              strm.msg = 'unknown compression method';
              state.mode = BAD;
              break;
            }
            if (state.flags & 0xe000) {
              strm.msg = 'unknown header flags set';
              state.mode = BAD;
              break;
            }
            if (state.head) {
              state.head.text = ((hold >> 8) & 1);
            }
            if ((state.flags & 0x0200) && (state.wrap & 4)) {
              //=== CRC2(state.check, hold);
              hbuf[0] = hold & 0xff;
              hbuf[1] = (hold >>> 8) & 0xff;
              state.check = crc32_1(state.check, hbuf, 2, 0);
              //===//
            }
            //=== INITBITS();
            hold = 0;
            bits = 0;
            //===//
            state.mode = TIME;
            /* falls through */
          case TIME:
            //=== NEEDBITS(32); */
            while (bits < 32) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            if (state.head) {
              state.head.time = hold;
            }
            if ((state.flags & 0x0200) && (state.wrap & 4)) {
              //=== CRC4(state.check, hold)
              hbuf[0] = hold & 0xff;
              hbuf[1] = (hold >>> 8) & 0xff;
              hbuf[2] = (hold >>> 16) & 0xff;
              hbuf[3] = (hold >>> 24) & 0xff;
              state.check = crc32_1(state.check, hbuf, 4, 0);
              //===
            }
            //=== INITBITS();
            hold = 0;
            bits = 0;
            //===//
            state.mode = OS;
            /* falls through */
          case OS:
            //=== NEEDBITS(16); */
            while (bits < 16) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            if (state.head) {
              state.head.xflags = (hold & 0xff);
              state.head.os = (hold >> 8);
            }
            if ((state.flags & 0x0200) && (state.wrap & 4)) {
              //=== CRC2(state.check, hold);
              hbuf[0] = hold & 0xff;
              hbuf[1] = (hold >>> 8) & 0xff;
              state.check = crc32_1(state.check, hbuf, 2, 0);
              //===//
            }
            //=== INITBITS();
            hold = 0;
            bits = 0;
            //===//
            state.mode = EXLEN;
            /* falls through */
          case EXLEN:
            if (state.flags & 0x0400) {
              //=== NEEDBITS(16); */
              while (bits < 16) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              state.length = hold;
              if (state.head) {
                state.head.extra_len = hold;
              }
              if ((state.flags & 0x0200) && (state.wrap & 4)) {
                //=== CRC2(state.check, hold);
                hbuf[0] = hold & 0xff;
                hbuf[1] = (hold >>> 8) & 0xff;
                state.check = crc32_1(state.check, hbuf, 2, 0);
                //===//
              }
              //=== INITBITS();
              hold = 0;
              bits = 0;
              //===//
            }
            else if (state.head) {
              state.head.extra = null/*Z_NULL*/;
            }
            state.mode = EXTRA;
            /* falls through */
          case EXTRA:
            if (state.flags & 0x0400) {
              copy = state.length;
              if (copy > have) { copy = have; }
              if (copy) {
                if (state.head) {
                  len = state.head.extra_len - state.length;
                  if (!state.head.extra) {
                    // Use untyped array for more convenient processing later
                    state.head.extra = new Uint8Array(state.head.extra_len);
                  }
                  state.head.extra.set(
                    input.subarray(
                      next,
                      // extra field is limited to 65536 bytes
                      // - no need for additional size check
                      next + copy
                    ),
                    /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
                    len
                  );
                  //zmemcpy(state.head.extra + len, next,
                  //        len + copy > state.head.extra_max ?
                  //        state.head.extra_max - len : copy);
                }
                if ((state.flags & 0x0200) && (state.wrap & 4)) {
                  state.check = crc32_1(state.check, input, copy, next);
                }
                have -= copy;
                next += copy;
                state.length -= copy;
              }
              if (state.length) { break inf_leave; }
            }
            state.length = 0;
            state.mode = NAME;
            /* falls through */
          case NAME:
            if (state.flags & 0x0800) {
              if (have === 0) { break inf_leave; }
              copy = 0;
              do {
                // TODO: 2 or 1 bytes?
                len = input[next + copy++];
                /* use constant limit because in js we should not preallocate memory */
                if (state.head && len &&
                    (state.length < 65536 /*state.head.name_max*/)) {
                  state.head.name += String.fromCharCode(len);
                }
              } while (len && copy < have);

              if ((state.flags & 0x0200) && (state.wrap & 4)) {
                state.check = crc32_1(state.check, input, copy, next);
              }
              have -= copy;
              next += copy;
              if (len) { break inf_leave; }
            }
            else if (state.head) {
              state.head.name = null;
            }
            state.length = 0;
            state.mode = COMMENT;
            /* falls through */
          case COMMENT:
            if (state.flags & 0x1000) {
              if (have === 0) { break inf_leave; }
              copy = 0;
              do {
                len = input[next + copy++];
                /* use constant limit because in js we should not preallocate memory */
                if (state.head && len &&
                    (state.length < 65536 /*state.head.comm_max*/)) {
                  state.head.comment += String.fromCharCode(len);
                }
              } while (len && copy < have);
              if ((state.flags & 0x0200) && (state.wrap & 4)) {
                state.check = crc32_1(state.check, input, copy, next);
              }
              have -= copy;
              next += copy;
              if (len) { break inf_leave; }
            }
            else if (state.head) {
              state.head.comment = null;
            }
            state.mode = HCRC;
            /* falls through */
          case HCRC:
            if (state.flags & 0x0200) {
              //=== NEEDBITS(16); */
              while (bits < 16) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              if ((state.wrap & 4) && hold !== (state.check & 0xffff)) {
                strm.msg = 'header crc mismatch';
                state.mode = BAD;
                break;
              }
              //=== INITBITS();
              hold = 0;
              bits = 0;
              //===//
            }
            if (state.head) {
              state.head.hcrc = ((state.flags >> 9) & 1);
              state.head.done = true;
            }
            strm.adler = state.check = 0;
            state.mode = TYPE;
            break;
          case DICTID:
            //=== NEEDBITS(32); */
            while (bits < 32) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            strm.adler = state.check = zswap32(hold);
            //=== INITBITS();
            hold = 0;
            bits = 0;
            //===//
            state.mode = DICT;
            /* falls through */
          case DICT:
            if (state.havedict === 0) {
              //--- RESTORE() ---
              strm.next_out = put;
              strm.avail_out = left;
              strm.next_in = next;
              strm.avail_in = have;
              state.hold = hold;
              state.bits = bits;
              //---
              return Z_NEED_DICT$1;
            }
            strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;
            state.mode = TYPE;
            /* falls through */
          case TYPE:
            if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }
            /* falls through */
          case TYPEDO:
            if (state.last) {
              //--- BYTEBITS() ---//
              hold >>>= bits & 7;
              bits -= bits & 7;
              //---//
              state.mode = CHECK;
              break;
            }
            //=== NEEDBITS(3); */
            while (bits < 3) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            state.last = (hold & 0x01)/*BITS(1)*/;
            //--- DROPBITS(1) ---//
            hold >>>= 1;
            bits -= 1;
            //---//

            switch ((hold & 0x03)/*BITS(2)*/) {
              case 0:                             /* stored block */
                //Tracev((stderr, "inflate:     stored block%s\n",
                //        state.last ? " (last)" : ""));
                state.mode = STORED;
                break;
              case 1:                             /* fixed block */
                fixedtables(state);
                //Tracev((stderr, "inflate:     fixed codes block%s\n",
                //        state.last ? " (last)" : ""));
                state.mode = LEN_;             /* decode codes */
                if (flush === Z_TREES) {
                  //--- DROPBITS(2) ---//
                  hold >>>= 2;
                  bits -= 2;
                  //---//
                  break inf_leave;
                }
                break;
              case 2:                             /* dynamic block */
                //Tracev((stderr, "inflate:     dynamic codes block%s\n",
                //        state.last ? " (last)" : ""));
                state.mode = TABLE;
                break;
              case 3:
                strm.msg = 'invalid block type';
                state.mode = BAD;
            }
            //--- DROPBITS(2) ---//
            hold >>>= 2;
            bits -= 2;
            //---//
            break;
          case STORED:
            //--- BYTEBITS() ---// /* go to byte boundary */
            hold >>>= bits & 7;
            bits -= bits & 7;
            //---//
            //=== NEEDBITS(32); */
            while (bits < 32) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {
              strm.msg = 'invalid stored block lengths';
              state.mode = BAD;
              break;
            }
            state.length = hold & 0xffff;
            //Tracev((stderr, "inflate:       stored length %u\n",
            //        state.length));
            //=== INITBITS();
            hold = 0;
            bits = 0;
            //===//
            state.mode = COPY_;
            if (flush === Z_TREES) { break inf_leave; }
            /* falls through */
          case COPY_:
            state.mode = COPY;
            /* falls through */
          case COPY:
            copy = state.length;
            if (copy) {
              if (copy > have) { copy = have; }
              if (copy > left) { copy = left; }
              if (copy === 0) { break inf_leave; }
              //--- zmemcpy(put, next, copy); ---
              output.set(input.subarray(next, next + copy), put);
              //---//
              have -= copy;
              next += copy;
              left -= copy;
              put += copy;
              state.length -= copy;
              break;
            }
            //Tracev((stderr, "inflate:       stored end\n"));
            state.mode = TYPE;
            break;
          case TABLE:
            //=== NEEDBITS(14); */
            while (bits < 14) {
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
            }
            //===//
            state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;
            //--- DROPBITS(5) ---//
            hold >>>= 5;
            bits -= 5;
            //---//
            state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;
            //--- DROPBITS(5) ---//
            hold >>>= 5;
            bits -= 5;
            //---//
            state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;
            //--- DROPBITS(4) ---//
            hold >>>= 4;
            bits -= 4;
            //---//
    //#ifndef PKZIP_BUG_WORKAROUND
            if (state.nlen > 286 || state.ndist > 30) {
              strm.msg = 'too many length or distance symbols';
              state.mode = BAD;
              break;
            }
    //#endif
            //Tracev((stderr, "inflate:       table sizes ok\n"));
            state.have = 0;
            state.mode = LENLENS;
            /* falls through */
          case LENLENS:
            while (state.have < state.ncode) {
              //=== NEEDBITS(3);
              while (bits < 3) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);
              //--- DROPBITS(3) ---//
              hold >>>= 3;
              bits -= 3;
              //---//
            }
            while (state.have < 19) {
              state.lens[order[state.have++]] = 0;
            }
            // We have separate tables & no pointers. 2 commented lines below not needed.
            //state.next = state.codes;
            //state.lencode = state.next;
            // Switch to use dynamic table
            state.lencode = state.lendyn;
            state.lenbits = 7;

            opts = { bits: state.lenbits };
            ret = inftrees(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);
            state.lenbits = opts.bits;

            if (ret) {
              strm.msg = 'invalid code lengths set';
              state.mode = BAD;
              break;
            }
            //Tracev((stderr, "inflate:       code lengths ok\n"));
            state.have = 0;
            state.mode = CODELENS;
            /* falls through */
          case CODELENS:
            while (state.have < state.nlen + state.ndist) {
              for (;;) {
                here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/
                here_bits = here >>> 24;
                here_op = (here >>> 16) & 0xff;
                here_val = here & 0xffff;

                if ((here_bits) <= bits) { break; }
                //--- PULLBYTE() ---//
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
                //---//
              }
              if (here_val < 16) {
                //--- DROPBITS(here.bits) ---//
                hold >>>= here_bits;
                bits -= here_bits;
                //---//
                state.lens[state.have++] = here_val;
              }
              else {
                if (here_val === 16) {
                  //=== NEEDBITS(here.bits + 2);
                  n = here_bits + 2;
                  while (bits < n) {
                    if (have === 0) { break inf_leave; }
                    have--;
                    hold += input[next++] << bits;
                    bits += 8;
                  }
                  //===//
                  //--- DROPBITS(here.bits) ---//
                  hold >>>= here_bits;
                  bits -= here_bits;
                  //---//
                  if (state.have === 0) {
                    strm.msg = 'invalid bit length repeat';
                    state.mode = BAD;
                    break;
                  }
                  len = state.lens[state.have - 1];
                  copy = 3 + (hold & 0x03);//BITS(2);
                  //--- DROPBITS(2) ---//
                  hold >>>= 2;
                  bits -= 2;
                  //---//
                }
                else if (here_val === 17) {
                  //=== NEEDBITS(here.bits + 3);
                  n = here_bits + 3;
                  while (bits < n) {
                    if (have === 0) { break inf_leave; }
                    have--;
                    hold += input[next++] << bits;
                    bits += 8;
                  }
                  //===//
                  //--- DROPBITS(here.bits) ---//
                  hold >>>= here_bits;
                  bits -= here_bits;
                  //---//
                  len = 0;
                  copy = 3 + (hold & 0x07);//BITS(3);
                  //--- DROPBITS(3) ---//
                  hold >>>= 3;
                  bits -= 3;
                  //---//
                }
                else {
                  //=== NEEDBITS(here.bits + 7);
                  n = here_bits + 7;
                  while (bits < n) {
                    if (have === 0) { break inf_leave; }
                    have--;
                    hold += input[next++] << bits;
                    bits += 8;
                  }
                  //===//
                  //--- DROPBITS(here.bits) ---//
                  hold >>>= here_bits;
                  bits -= here_bits;
                  //---//
                  len = 0;
                  copy = 11 + (hold & 0x7f);//BITS(7);
                  //--- DROPBITS(7) ---//
                  hold >>>= 7;
                  bits -= 7;
                  //---//
                }
                if (state.have + copy > state.nlen + state.ndist) {
                  strm.msg = 'invalid bit length repeat';
                  state.mode = BAD;
                  break;
                }
                while (copy--) {
                  state.lens[state.have++] = len;
                }
              }
            }

            /* handle error breaks in while */
            if (state.mode === BAD) { break; }

            /* check for end-of-block code (better have one) */
            if (state.lens[256] === 0) {
              strm.msg = 'invalid code -- missing end-of-block';
              state.mode = BAD;
              break;
            }

            /* build code tables -- note: do not change the lenbits or distbits
               values here (9 and 6) without reading the comments in inftrees.h
               concerning the ENOUGH constants, which depend on those values */
            state.lenbits = 9;

            opts = { bits: state.lenbits };
            ret = inftrees(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);
            // We have separate tables & no pointers. 2 commented lines below not needed.
            // state.next_index = opts.table_index;
            state.lenbits = opts.bits;
            // state.lencode = state.next;

            if (ret) {
              strm.msg = 'invalid literal/lengths set';
              state.mode = BAD;
              break;
            }

            state.distbits = 6;
            //state.distcode.copy(state.codes);
            // Switch to use dynamic table
            state.distcode = state.distdyn;
            opts = { bits: state.distbits };
            ret = inftrees(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);
            // We have separate tables & no pointers. 2 commented lines below not needed.
            // state.next_index = opts.table_index;
            state.distbits = opts.bits;
            // state.distcode = state.next;

            if (ret) {
              strm.msg = 'invalid distances set';
              state.mode = BAD;
              break;
            }
            //Tracev((stderr, 'inflate:       codes ok\n'));
            state.mode = LEN_;
            if (flush === Z_TREES) { break inf_leave; }
            /* falls through */
          case LEN_:
            state.mode = LEN;
            /* falls through */
          case LEN:
            if (have >= 6 && left >= 258) {
              //--- RESTORE() ---
              strm.next_out = put;
              strm.avail_out = left;
              strm.next_in = next;
              strm.avail_in = have;
              state.hold = hold;
              state.bits = bits;
              //---
              inffast(strm, _out);
              //--- LOAD() ---
              put = strm.next_out;
              output = strm.output;
              left = strm.avail_out;
              next = strm.next_in;
              input = strm.input;
              have = strm.avail_in;
              hold = state.hold;
              bits = state.bits;
              //---

              if (state.mode === TYPE) {
                state.back = -1;
              }
              break;
            }
            state.back = 0;
            for (;;) {
              here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/
              here_bits = here >>> 24;
              here_op = (here >>> 16) & 0xff;
              here_val = here & 0xffff;

              if (here_bits <= bits) { break; }
              //--- PULLBYTE() ---//
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
              //---//
            }
            if (here_op && (here_op & 0xf0) === 0) {
              last_bits = here_bits;
              last_op = here_op;
              last_val = here_val;
              for (;;) {
                here = state.lencode[last_val +
                        ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
                here_bits = here >>> 24;
                here_op = (here >>> 16) & 0xff;
                here_val = here & 0xffff;

                if ((last_bits + here_bits) <= bits) { break; }
                //--- PULLBYTE() ---//
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
                //---//
              }
              //--- DROPBITS(last.bits) ---//
              hold >>>= last_bits;
              bits -= last_bits;
              //---//
              state.back += last_bits;
            }
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            state.back += here_bits;
            state.length = here_val;
            if (here_op === 0) {
              //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?
              //        "inflate:         literal '%c'\n" :
              //        "inflate:         literal 0x%02x\n", here.val));
              state.mode = LIT;
              break;
            }
            if (here_op & 32) {
              //Tracevv((stderr, "inflate:         end of block\n"));
              state.back = -1;
              state.mode = TYPE;
              break;
            }
            if (here_op & 64) {
              strm.msg = 'invalid literal/length code';
              state.mode = BAD;
              break;
            }
            state.extra = here_op & 15;
            state.mode = LENEXT;
            /* falls through */
          case LENEXT:
            if (state.extra) {
              //=== NEEDBITS(state.extra);
              n = state.extra;
              while (bits < n) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
              //--- DROPBITS(state.extra) ---//
              hold >>>= state.extra;
              bits -= state.extra;
              //---//
              state.back += state.extra;
            }
            //Tracevv((stderr, "inflate:         length %u\n", state.length));
            state.was = state.length;
            state.mode = DIST;
            /* falls through */
          case DIST:
            for (;;) {
              here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/
              here_bits = here >>> 24;
              here_op = (here >>> 16) & 0xff;
              here_val = here & 0xffff;

              if ((here_bits) <= bits) { break; }
              //--- PULLBYTE() ---//
              if (have === 0) { break inf_leave; }
              have--;
              hold += input[next++] << bits;
              bits += 8;
              //---//
            }
            if ((here_op & 0xf0) === 0) {
              last_bits = here_bits;
              last_op = here_op;
              last_val = here_val;
              for (;;) {
                here = state.distcode[last_val +
                        ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];
                here_bits = here >>> 24;
                here_op = (here >>> 16) & 0xff;
                here_val = here & 0xffff;

                if ((last_bits + here_bits) <= bits) { break; }
                //--- PULLBYTE() ---//
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
                //---//
              }
              //--- DROPBITS(last.bits) ---//
              hold >>>= last_bits;
              bits -= last_bits;
              //---//
              state.back += last_bits;
            }
            //--- DROPBITS(here.bits) ---//
            hold >>>= here_bits;
            bits -= here_bits;
            //---//
            state.back += here_bits;
            if (here_op & 64) {
              strm.msg = 'invalid distance code';
              state.mode = BAD;
              break;
            }
            state.offset = here_val;
            state.extra = (here_op) & 15;
            state.mode = DISTEXT;
            /* falls through */
          case DISTEXT:
            if (state.extra) {
              //=== NEEDBITS(state.extra);
              n = state.extra;
              while (bits < n) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;
              //--- DROPBITS(state.extra) ---//
              hold >>>= state.extra;
              bits -= state.extra;
              //---//
              state.back += state.extra;
            }
    //#ifdef INFLATE_STRICT
            if (state.offset > state.dmax) {
              strm.msg = 'invalid distance too far back';
              state.mode = BAD;
              break;
            }
    //#endif
            //Tracevv((stderr, "inflate:         distance %u\n", state.offset));
            state.mode = MATCH;
            /* falls through */
          case MATCH:
            if (left === 0) { break inf_leave; }
            copy = _out - left;
            if (state.offset > copy) {         /* copy from window */
              copy = state.offset - copy;
              if (copy > state.whave) {
                if (state.sane) {
                  strm.msg = 'invalid distance too far back';
                  state.mode = BAD;
                  break;
                }
    // (!) This block is disabled in zlib defaults,
    // don't enable it for binary compatibility
    //#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR
    //          Trace((stderr, "inflate.c too far\n"));
    //          copy -= state.whave;
    //          if (copy > state.length) { copy = state.length; }
    //          if (copy > left) { copy = left; }
    //          left -= copy;
    //          state.length -= copy;
    //          do {
    //            output[put++] = 0;
    //          } while (--copy);
    //          if (state.length === 0) { state.mode = LEN; }
    //          break;
    //#endif
              }
              if (copy > state.wnext) {
                copy -= state.wnext;
                from = state.wsize - copy;
              }
              else {
                from = state.wnext - copy;
              }
              if (copy > state.length) { copy = state.length; }
              from_source = state.window;
            }
            else {                              /* copy from output */
              from_source = output;
              from = put - state.offset;
              copy = state.length;
            }
            if (copy > left) { copy = left; }
            left -= copy;
            state.length -= copy;
            do {
              output[put++] = from_source[from++];
            } while (--copy);
            if (state.length === 0) { state.mode = LEN; }
            break;
          case LIT:
            if (left === 0) { break inf_leave; }
            output[put++] = state.length;
            left--;
            state.mode = LEN;
            break;
          case CHECK:
            if (state.wrap) {
              //=== NEEDBITS(32);
              while (bits < 32) {
                if (have === 0) { break inf_leave; }
                have--;
                // Use '|' instead of '+' to make sure that result is signed
                hold |= input[next++] << bits;
                bits += 8;
              }
              //===//
              _out -= left;
              strm.total_out += _out;
              state.total += _out;
              if ((state.wrap & 4) && _out) {
                strm.adler = state.check =
                    /*UPDATE_CHECK(state.check, put - _out, _out);*/
                    (state.flags ? crc32_1(state.check, output, _out, put - _out) : adler32_1(state.check, output, _out, put - _out));

              }
              _out = left;
              // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too
              if ((state.wrap & 4) && (state.flags ? hold : zswap32(hold)) !== state.check) {
                strm.msg = 'incorrect data check';
                state.mode = BAD;
                break;
              }
              //=== INITBITS();
              hold = 0;
              bits = 0;
              //===//
              //Tracev((stderr, "inflate:   check matches trailer\n"));
            }
            state.mode = LENGTH;
            /* falls through */
          case LENGTH:
            if (state.wrap && state.flags) {
              //=== NEEDBITS(32);
              while (bits < 32) {
                if (have === 0) { break inf_leave; }
                have--;
                hold += input[next++] << bits;
                bits += 8;
              }
              //===//
              if ((state.wrap & 4) && hold !== (state.total & 0xffffffff)) {
                strm.msg = 'incorrect length check';
                state.mode = BAD;
                break;
              }
              //=== INITBITS();
              hold = 0;
              bits = 0;
              //===//
              //Tracev((stderr, "inflate:   length matches trailer\n"));
            }
            state.mode = DONE;
            /* falls through */
          case DONE:
            ret = Z_STREAM_END$1;
            break inf_leave;
          case BAD:
            ret = Z_DATA_ERROR$1;
            break inf_leave;
          case MEM:
            return Z_MEM_ERROR$1;
          case SYNC:
            /* falls through */
          default:
            return Z_STREAM_ERROR$1;
        }
      }

      // inf_leave <- here is real place for "goto inf_leave", emulated via "break inf_leave"

      /*
         Return from inflate(), updating the total counts and the check value.
         If there was no progress during the inflate() call, return a buffer
         error.  Call updatewindow() to create and/or update the window state.
         Note: a memory error from inflate() is non-recoverable.
       */

      //--- RESTORE() ---
      strm.next_out = put;
      strm.avail_out = left;
      strm.next_in = next;
      strm.avail_in = have;
      state.hold = hold;
      state.bits = bits;
      //---

      if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&
                          (state.mode < CHECK || flush !== Z_FINISH$1))) {
        if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) ;
      }
      _in -= strm.avail_in;
      _out -= strm.avail_out;
      strm.total_in += _in;
      strm.total_out += _out;
      state.total += _out;
      if ((state.wrap & 4) && _out) {
        strm.adler = state.check = /*UPDATE_CHECK(state.check, strm.next_out - _out, _out);*/
          (state.flags ? crc32_1(state.check, output, _out, strm.next_out - _out) : adler32_1(state.check, output, _out, strm.next_out - _out));
      }
      strm.data_type = state.bits + (state.last ? 64 : 0) +
                        (state.mode === TYPE ? 128 : 0) +
                        (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);
      if (((_in === 0 && _out === 0) || flush === Z_FINISH$1) && ret === Z_OK$1) {
        ret = Z_BUF_ERROR;
      }
      return ret;
    };


    const inflateEnd = (strm) => {

      if (inflateStateCheck(strm)) {
        return Z_STREAM_ERROR$1;
      }

      let state = strm.state;
      if (state.window) {
        state.window = null;
      }
      strm.state = null;
      return Z_OK$1;
    };


    const inflateGetHeader = (strm, head) => {

      /* check state */
      if (inflateStateCheck(strm)) { return Z_STREAM_ERROR$1; }
      const state = strm.state;
      if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR$1; }

      /* save header structure */
      state.head = head;
      head.done = false;
      return Z_OK$1;
    };


    const inflateSetDictionary = (strm, dictionary) => {
      const dictLength = dictionary.length;

      let state;
      let dictid;
      let ret;

      /* check state */
      if (inflateStateCheck(strm)) { return Z_STREAM_ERROR$1; }
      state = strm.state;

      if (state.wrap !== 0 && state.mode !== DICT) {
        return Z_STREAM_ERROR$1;
      }

      /* check for correct dictionary identifier */
      if (state.mode === DICT) {
        dictid = 1; /* adler32(0, null, 0)*/
        /* dictid = adler32(dictid, dictionary, dictLength); */
        dictid = adler32_1(dictid, dictionary, dictLength, 0);
        if (dictid !== state.check) {
          return Z_DATA_ERROR$1;
        }
      }
      /* copy dictionary to window using updatewindow(), which will amend the
       existing dictionary if appropriate */
      ret = updatewindow(strm, dictionary, dictLength, dictLength);
      if (ret) {
        state.mode = MEM;
        return Z_MEM_ERROR$1;
      }
      state.havedict = 1;
      // Tracev((stderr, "inflate:   dictionary set\n"));
      return Z_OK$1;
    };


    var inflateReset_1 = inflateReset;
    var inflateReset2_1 = inflateReset2;
    var inflateResetKeep_1 = inflateResetKeep;
    var inflateInit_1 = inflateInit;
    var inflateInit2_1 = inflateInit2;
    var inflate_2$1 = inflate$2;
    var inflateEnd_1 = inflateEnd;
    var inflateGetHeader_1 = inflateGetHeader;
    var inflateSetDictionary_1 = inflateSetDictionary;
    var inflateInfo = 'pako inflate (from Nodeca project)';

    /* Not implemented
    module.exports.inflateCodesUsed = inflateCodesUsed;
    module.exports.inflateCopy = inflateCopy;
    module.exports.inflateGetDictionary = inflateGetDictionary;
    module.exports.inflateMark = inflateMark;
    module.exports.inflatePrime = inflatePrime;
    module.exports.inflateSync = inflateSync;
    module.exports.inflateSyncPoint = inflateSyncPoint;
    module.exports.inflateUndermine = inflateUndermine;
    module.exports.inflateValidate = inflateValidate;
    */

    var inflate_1$2 = {
    	inflateReset: inflateReset_1,
    	inflateReset2: inflateReset2_1,
    	inflateResetKeep: inflateResetKeep_1,
    	inflateInit: inflateInit_1,
    	inflateInit2: inflateInit2_1,
    	inflate: inflate_2$1,
    	inflateEnd: inflateEnd_1,
    	inflateGetHeader: inflateGetHeader_1,
    	inflateSetDictionary: inflateSetDictionary_1,
    	inflateInfo: inflateInfo
    };

    // (C) 1995-2013 Jean-loup Gailly and Mark Adler
    // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin
    //
    // This software is provided 'as-is', without any express or implied
    // warranty. In no event will the authors be held liable for any damages
    // arising from the use of this software.
    //
    // Permission is granted to anyone to use this software for any purpose,
    // including commercial applications, and to alter it and redistribute it
    // freely, subject to the following restrictions:
    //
    // 1. The origin of this software must not be misrepresented; you must not
    //   claim that you wrote the original software. If you use this software
    //   in a product, an acknowledgment in the product documentation would be
    //   appreciated but is not required.
    // 2. Altered source versions must be plainly marked as such, and must not be
    //   misrepresented as being the original software.
    // 3. This notice may not be removed or altered from any source distribution.

    function GZheader() {
      /* true if compressed data believed to be text */
      this.text       = 0;
      /* modification time */
      this.time       = 0;
      /* extra flags (not used when writing a gzip file) */
      this.xflags     = 0;
      /* operating system */
      this.os         = 0;
      /* pointer to extra field or Z_NULL if none */
      this.extra      = null;
      /* extra field length (valid if extra != Z_NULL) */
      this.extra_len  = 0; // Actually, we don't need it in JS,
                           // but leave for few code modifications

      //
      // Setup limits is not necessary because in js we should not preallocate memory
      // for inflate use constant limit in 65536 bytes
      //

      /* space at extra (only when reading header) */
      // this.extra_max  = 0;
      /* pointer to zero-terminated file name or Z_NULL */
      this.name       = '';
      /* space at name (only when reading header) */
      // this.name_max   = 0;
      /* pointer to zero-terminated comment or Z_NULL */
      this.comment    = '';
      /* space at comment (only when reading header) */
      // this.comm_max   = 0;
      /* true if there was or will be a header crc */
      this.hcrc       = 0;
      /* true when done reading gzip header (not used when writing a gzip file) */
      this.done       = false;
    }

    var gzheader = GZheader;

    const toString = Object.prototype.toString;

    /* Public constants ==========================================================*/
    /* ===========================================================================*/

    const {
      Z_NO_FLUSH, Z_FINISH,
      Z_OK, Z_STREAM_END, Z_NEED_DICT, Z_STREAM_ERROR, Z_DATA_ERROR, Z_MEM_ERROR
    } = constants$2;

    /* ===========================================================================*/


    /**
     * class Inflate
     *
     * Generic JS-style wrapper for zlib calls. If you don't need
     * streaming behaviour - use more simple functions: [[inflate]]
     * and [[inflateRaw]].
     **/

    /* internal
     * inflate.chunks -> Array
     *
     * Chunks of output data, if [[Inflate#onData]] not overridden.
     **/

    /**
     * Inflate.result -> Uint8Array|String
     *
     * Uncompressed result, generated by default [[Inflate#onData]]
     * and [[Inflate#onEnd]] handlers. Filled after you push last chunk
     * (call [[Inflate#push]] with `Z_FINISH` / `true` param).
     **/

    /**
     * Inflate.err -> Number
     *
     * Error code after inflate finished. 0 (Z_OK) on success.
     * Should be checked if broken data possible.
     **/

    /**
     * Inflate.msg -> String
     *
     * Error message, if [[Inflate.err]] != 0
     **/


    /**
     * new Inflate(options)
     * - options (Object): zlib inflate options.
     *
     * Creates new inflator instance with specified params. Throws exception
     * on bad params. Supported options:
     *
     * - `windowBits`
     * - `dictionary`
     *
     * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
     * for more information on these.
     *
     * Additional options, for internal needs:
     *
     * - `chunkSize` - size of generated data chunks (16K by default)
     * - `raw` (Boolean) - do raw inflate
     * - `to` (String) - if equal to 'string', then result will be converted
     *   from utf8 to utf16 (javascript) string. When string output requested,
     *   chunk length can differ from `chunkSize`, depending on content.
     *
     * By default, when no options set, autodetect deflate/gzip data format via
     * wrapper header.
     *
     * ##### Example:
     *
     * ```javascript
     * const pako = require('pako')
     * const chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])
     * const chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);
     *
     * const inflate = new pako.Inflate({ level: 3});
     *
     * inflate.push(chunk1, false);
     * inflate.push(chunk2, true);  // true -> last chunk
     *
     * if (inflate.err) { throw new Error(inflate.err); }
     *
     * console.log(inflate.result);
     * ```
     **/
    function Inflate$1(options) {
      this.options = common.assign({
        chunkSize: 1024 * 64,
        windowBits: 15,
        to: ''
      }, options || {});

      const opt = this.options;

      // Force window size for `raw` data, if not set directly,
      // because we have no header for autodetect.
      if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {
        opt.windowBits = -opt.windowBits;
        if (opt.windowBits === 0) { opt.windowBits = -15; }
      }

      // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate
      if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&
          !(options && options.windowBits)) {
        opt.windowBits += 32;
      }

      // Gzip header has no info about windows size, we can do autodetect only
      // for deflate. So, if window size not set, force it to max when gzip possible
      if ((opt.windowBits > 15) && (opt.windowBits < 48)) {
        // bit 3 (16) -> gzipped data
        // bit 4 (32) -> autodetect gzip/deflate
        if ((opt.windowBits & 15) === 0) {
          opt.windowBits |= 15;
        }
      }

      this.err    = 0;      // error code, if happens (0 = Z_OK)
      this.msg    = '';     // error message
      this.ended  = false;  // used to avoid multiple onEnd() calls
      this.chunks = [];     // chunks of compressed data

      this.strm   = new zstream();
      this.strm.avail_out = 0;

      let status  = inflate_1$2.inflateInit2(
        this.strm,
        opt.windowBits
      );

      if (status !== Z_OK) {
        throw new Error(messages[status]);
      }

      this.header = new gzheader();

      inflate_1$2.inflateGetHeader(this.strm, this.header);

      // Setup dictionary
      if (opt.dictionary) {
        // Convert data if needed
        if (typeof opt.dictionary === 'string') {
          opt.dictionary = strings.string2buf(opt.dictionary);
        } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {
          opt.dictionary = new Uint8Array(opt.dictionary);
        }
        if (opt.raw) { //In raw mode we need to set the dictionary early
          status = inflate_1$2.inflateSetDictionary(this.strm, opt.dictionary);
          if (status !== Z_OK) {
            throw new Error(messages[status]);
          }
        }
      }
    }

    /**
     * Inflate#push(data[, flush_mode]) -> Boolean
     * - data (Uint8Array|ArrayBuffer): input data
     * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE
     *   flush modes. See constants. Skipped or `false` means Z_NO_FLUSH,
     *   `true` means Z_FINISH.
     *
     * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with
     * new output chunks. Returns `true` on success. If end of stream detected,
     * [[Inflate#onEnd]] will be called.
     *
     * `flush_mode` is not needed for normal operation, because end of stream
     * detected automatically. You may try to use it for advanced things, but
     * this functionality was not tested.
     *
     * On fail call [[Inflate#onEnd]] with error code and return false.
     *
     * ##### Example
     *
     * ```javascript
     * push(chunk, false); // push one of data chunks
     * ...
     * push(chunk, true);  // push last chunk
     * ```
     **/
    Inflate$1.prototype.push = function (data, flush_mode) {
      const strm = this.strm;
      const chunkSize = this.options.chunkSize;
      const dictionary = this.options.dictionary;
      let status, _flush_mode, last_avail_out;

      if (this.ended) return false;

      if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;
      else _flush_mode = flush_mode === true ? Z_FINISH : Z_NO_FLUSH;

      // Convert data if needed
      if (toString.call(data) === '[object ArrayBuffer]') {
        strm.input = new Uint8Array(data);
      } else {
        strm.input = data;
      }

      strm.next_in = 0;
      strm.avail_in = strm.input.length;

      for (;;) {
        if (strm.avail_out === 0) {
          strm.output = new Uint8Array(chunkSize);
          strm.next_out = 0;
          strm.avail_out = chunkSize;
        }

        status = inflate_1$2.inflate(strm, _flush_mode);

        if (status === Z_NEED_DICT && dictionary) {
          status = inflate_1$2.inflateSetDictionary(strm, dictionary);

          if (status === Z_OK) {
            status = inflate_1$2.inflate(strm, _flush_mode);
          } else if (status === Z_DATA_ERROR) {
            // Replace code with more verbose
            status = Z_NEED_DICT;
          }
        }

        // Skip snyc markers if more data follows and not raw mode
        while (strm.avail_in > 0 &&
               status === Z_STREAM_END &&
               strm.state.wrap > 0 &&
               data[strm.next_in] !== 0)
        {
          inflate_1$2.inflateReset(strm);
          status = inflate_1$2.inflate(strm, _flush_mode);
        }

        switch (status) {
          case Z_STREAM_ERROR:
          case Z_DATA_ERROR:
          case Z_NEED_DICT:
          case Z_MEM_ERROR:
            this.onEnd(status);
            this.ended = true;
            return false;
        }

        // Remember real `avail_out` value, because we may patch out buffer content
        // to align utf8 strings boundaries.
        last_avail_out = strm.avail_out;

        if (strm.next_out) {
          if (strm.avail_out === 0 || status === Z_STREAM_END) {

            if (this.options.to === 'string') {

              let next_out_utf8 = strings.utf8border(strm.output, strm.next_out);

              let tail = strm.next_out - next_out_utf8;
              let utf8str = strings.buf2string(strm.output, next_out_utf8);

              // move tail & realign counters
              strm.next_out = tail;
              strm.avail_out = chunkSize - tail;
              if (tail) strm.output.set(strm.output.subarray(next_out_utf8, next_out_utf8 + tail), 0);

              this.onData(utf8str);

            } else {
              this.onData(strm.output.length === strm.next_out ? strm.output : strm.output.subarray(0, strm.next_out));
            }
          }
        }

        // Must repeat iteration if out buffer is full
        if (status === Z_OK && last_avail_out === 0) continue;

        // Finalize if end of stream reached.
        if (status === Z_STREAM_END) {
          status = inflate_1$2.inflateEnd(this.strm);
          this.onEnd(status);
          this.ended = true;
          return true;
        }

        if (strm.avail_in === 0) break;
      }

      return true;
    };


    /**
     * Inflate#onData(chunk) -> Void
     * - chunk (Uint8Array|String): output data. When string output requested,
     *   each chunk will be string.
     *
     * By default, stores data blocks in `chunks[]` property and glue
     * those in `onEnd`. Override this handler, if you need another behaviour.
     **/
    Inflate$1.prototype.onData = function (chunk) {
      this.chunks.push(chunk);
    };


    /**
     * Inflate#onEnd(status) -> Void
     * - status (Number): inflate status. 0 (Z_OK) on success,
     *   other if not.
     *
     * Called either after you tell inflate that the input stream is
     * complete (Z_FINISH). By default - join collected chunks,
     * free memory and fill `results` / `err` properties.
     **/
    Inflate$1.prototype.onEnd = function (status) {
      // On success - join
      if (status === Z_OK) {
        if (this.options.to === 'string') {
          this.result = this.chunks.join('');
        } else {
          this.result = common.flattenChunks(this.chunks);
        }
      }
      this.chunks = [];
      this.err = status;
      this.msg = this.strm.msg;
    };


    /**
     * inflate(data[, options]) -> Uint8Array|String
     * - data (Uint8Array|ArrayBuffer): input data to decompress.
     * - options (Object): zlib inflate options.
     *
     * Decompress `data` with inflate/ungzip and `options`. Autodetect
     * format via wrapper header by default. That's why we don't provide
     * separate `ungzip` method.
     *
     * Supported options are:
     *
     * - windowBits
     *
     * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)
     * for more information.
     *
     * Sugar (options):
     *
     * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify
     *   negative windowBits implicitly.
     * - `to` (String) - if equal to 'string', then result will be converted
     *   from utf8 to utf16 (javascript) string. When string output requested,
     *   chunk length can differ from `chunkSize`, depending on content.
     *
     *
     * ##### Example:
     *
     * ```javascript
     * const pako = require('pako');
     * const input = pako.deflate(new Uint8Array([1,2,3,4,5,6,7,8,9]));
     * let output;
     *
     * try {
     *   output = pako.inflate(input);
     * } catch (err) {
     *   console.log(err);
     * }
     * ```
     **/
    function inflate$1(input, options) {
      const inflator = new Inflate$1(options);

      inflator.push(input);

      // That will never happens, if you don't cheat with options :)
      if (inflator.err) throw inflator.msg || messages[inflator.err];

      return inflator.result;
    }


    /**
     * inflateRaw(data[, options]) -> Uint8Array|String
     * - data (Uint8Array|ArrayBuffer): input data to decompress.
     * - options (Object): zlib inflate options.
     *
     * The same as [[inflate]], but creates raw data, without wrapper
     * (header and adler32 crc).
     **/
    function inflateRaw$1(input, options) {
      options = options || {};
      options.raw = true;
      return inflate$1(input, options);
    }


    /**
     * ungzip(data[, options]) -> Uint8Array|String
     * - data (Uint8Array|ArrayBuffer): input data to decompress.
     * - options (Object): zlib inflate options.
     *
     * Just shortcut to [[inflate]], because it autodetects format
     * by header.content. Done for convenience.
     **/


    var Inflate_1$1 = Inflate$1;
    var inflate_2 = inflate$1;
    var inflateRaw_1$1 = inflateRaw$1;
    var ungzip$1 = inflate$1;
    var constants = constants$2;

    var inflate_1$1 = {
    	Inflate: Inflate_1$1,
    	inflate: inflate_2,
    	inflateRaw: inflateRaw_1$1,
    	ungzip: ungzip$1,
    	constants: constants
    };

    const { Deflate, deflate, deflateRaw, gzip } = deflate_1$1;

    const { Inflate, inflate, inflateRaw, ungzip } = inflate_1$1;
    var gzip_1 = gzip;
    var ungzip_1 = ungzip;

    /* eslint-disable no-prototype-builtins */
    var g =
      (typeof globalThis !== 'undefined' && globalThis) ||
      (typeof self !== 'undefined' && self) ||
      // eslint-disable-next-line no-undef
      (typeof global$1 !== 'undefined' && global$1) ||
      {};

    var support = {
      searchParams: 'URLSearchParams' in g,
      iterable: 'Symbol' in g && 'iterator' in Symbol,
      blob:
        'FileReader' in g &&
        'Blob' in g &&
        (function() {
          try {
            new Blob();
            return true
          } catch (e) {
            return false
          }
        })(),
      formData: 'FormData' in g,
      arrayBuffer: 'ArrayBuffer' in g
    };

    function isDataView(obj) {
      return obj && DataView.prototype.isPrototypeOf(obj)
    }

    if (support.arrayBuffer) {
      var viewClasses = [
        '[object Int8Array]',
        '[object Uint8Array]',
        '[object Uint8ClampedArray]',
        '[object Int16Array]',
        '[object Uint16Array]',
        '[object Int32Array]',
        '[object Uint32Array]',
        '[object Float32Array]',
        '[object Float64Array]'
      ];

      var isArrayBufferView =
        ArrayBuffer.isView ||
        function(obj) {
          return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1
        };
    }

    function normalizeName(name) {
      if (typeof name !== 'string') {
        name = String(name);
      }
      if (/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(name) || name === '') {
        throw new TypeError('Invalid character in header field name: "' + name + '"')
      }
      return name.toLowerCase()
    }

    function normalizeValue(value) {
      if (typeof value !== 'string') {
        value = String(value);
      }
      return value
    }

    // Build a destructive iterator for the value list
    function iteratorFor(items) {
      var iterator = {
        next: function() {
          var value = items.shift();
          return {done: value === undefined, value: value}
        }
      };

      if (support.iterable) {
        iterator[Symbol.iterator] = function() {
          return iterator
        };
      }

      return iterator
    }

    function Headers(headers) {
      this.map = {};

      if (headers instanceof Headers) {
        headers.forEach(function(value, name) {
          this.append(name, value);
        }, this);
      } else if (Array.isArray(headers)) {
        headers.forEach(function(header) {
          if (header.length != 2) {
            throw new TypeError('Headers constructor: expected name/value pair to be length 2, found' + header.length)
          }
          this.append(header[0], header[1]);
        }, this);
      } else if (headers) {
        Object.getOwnPropertyNames(headers).forEach(function(name) {
          this.append(name, headers[name]);
        }, this);
      }
    }

    Headers.prototype.append = function(name, value) {
      name = normalizeName(name);
      value = normalizeValue(value);
      var oldValue = this.map[name];
      this.map[name] = oldValue ? oldValue + ', ' + value : value;
    };

    Headers.prototype['delete'] = function(name) {
      delete this.map[normalizeName(name)];
    };

    Headers.prototype.get = function(name) {
      name = normalizeName(name);
      return this.has(name) ? this.map[name] : null
    };

    Headers.prototype.has = function(name) {
      return this.map.hasOwnProperty(normalizeName(name))
    };

    Headers.prototype.set = function(name, value) {
      this.map[normalizeName(name)] = normalizeValue(value);
    };

    Headers.prototype.forEach = function(callback, thisArg) {
      for (var name in this.map) {
        if (this.map.hasOwnProperty(name)) {
          callback.call(thisArg, this.map[name], name, this);
        }
      }
    };

    Headers.prototype.keys = function() {
      var items = [];
      this.forEach(function(value, name) {
        items.push(name);
      });
      return iteratorFor(items)
    };

    Headers.prototype.values = function() {
      var items = [];
      this.forEach(function(value) {
        items.push(value);
      });
      return iteratorFor(items)
    };

    Headers.prototype.entries = function() {
      var items = [];
      this.forEach(function(value, name) {
        items.push([name, value]);
      });
      return iteratorFor(items)
    };

    if (support.iterable) {
      Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
    }

    function consumed(body) {
      if (body._noBody) return
      if (body.bodyUsed) {
        return Promise.reject(new TypeError('Already read'))
      }
      body.bodyUsed = true;
    }

    function fileReaderReady(reader) {
      return new Promise(function(resolve, reject) {
        reader.onload = function() {
          resolve(reader.result);
        };
        reader.onerror = function() {
          reject(reader.error);
        };
      })
    }

    function readBlobAsArrayBuffer(blob) {
      var reader = new FileReader();
      var promise = fileReaderReady(reader);
      reader.readAsArrayBuffer(blob);
      return promise
    }

    function readBlobAsText(blob) {
      var reader = new FileReader();
      var promise = fileReaderReady(reader);
      var match = /charset=([A-Za-z0-9_-]+)/.exec(blob.type);
      var encoding = match ? match[1] : 'utf-8';
      reader.readAsText(blob, encoding);
      return promise
    }

    function readArrayBufferAsText(buf) {
      var view = new Uint8Array(buf);
      var chars = new Array(view.length);

      for (var i = 0; i < view.length; i++) {
        chars[i] = String.fromCharCode(view[i]);
      }
      return chars.join('')
    }

    function bufferClone(buf) {
      if (buf.slice) {
        return buf.slice(0)
      } else {
        var view = new Uint8Array(buf.byteLength);
        view.set(new Uint8Array(buf));
        return view.buffer
      }
    }

    function Body() {
      this.bodyUsed = false;

      this._initBody = function(body) {
        /*
          fetch-mock wraps the Response object in an ES6 Proxy to
          provide useful test harness features such as flush. However, on
          ES5 browsers without fetch or Proxy support pollyfills must be used;
          the proxy-pollyfill is unable to proxy an attribute unless it exists
          on the object before the Proxy is created. This change ensures
          Response.bodyUsed exists on the instance, while maintaining the
          semantic of setting Request.bodyUsed in the constructor before
          _initBody is called.
        */
        // eslint-disable-next-line no-self-assign
        this.bodyUsed = this.bodyUsed;
        this._bodyInit = body;
        if (!body) {
          this._noBody = true;
          this._bodyText = '';
        } else if (typeof body === 'string') {
          this._bodyText = body;
        } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
          this._bodyBlob = body;
        } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
          this._bodyFormData = body;
        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
          this._bodyText = body.toString();
        } else if (support.arrayBuffer && support.blob && isDataView(body)) {
          this._bodyArrayBuffer = bufferClone(body.buffer);
          // IE 10-11 can't handle a DataView body.
          this._bodyInit = new Blob([this._bodyArrayBuffer]);
        } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
          this._bodyArrayBuffer = bufferClone(body);
        } else {
          this._bodyText = body = Object.prototype.toString.call(body);
        }

        if (!this.headers.get('content-type')) {
          if (typeof body === 'string') {
            this.headers.set('content-type', 'text/plain;charset=UTF-8');
          } else if (this._bodyBlob && this._bodyBlob.type) {
            this.headers.set('content-type', this._bodyBlob.type);
          } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
            this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
          }
        }
      };

      if (support.blob) {
        this.blob = function() {
          var rejected = consumed(this);
          if (rejected) {
            return rejected
          }

          if (this._bodyBlob) {
            return Promise.resolve(this._bodyBlob)
          } else if (this._bodyArrayBuffer) {
            return Promise.resolve(new Blob([this._bodyArrayBuffer]))
          } else if (this._bodyFormData) {
            throw new Error('could not read FormData body as blob')
          } else {
            return Promise.resolve(new Blob([this._bodyText]))
          }
        };
      }

      this.arrayBuffer = function() {
        if (this._bodyArrayBuffer) {
          var isConsumed = consumed(this);
          if (isConsumed) {
            return isConsumed
          } else if (ArrayBuffer.isView(this._bodyArrayBuffer)) {
            return Promise.resolve(
              this._bodyArrayBuffer.buffer.slice(
                this._bodyArrayBuffer.byteOffset,
                this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength
              )
            )
          } else {
            return Promise.resolve(this._bodyArrayBuffer)
          }
        } else if (support.blob) {
          return this.blob().then(readBlobAsArrayBuffer)
        } else {
          throw new Error('could not read as ArrayBuffer')
        }
      };

      this.text = function() {
        var rejected = consumed(this);
        if (rejected) {
          return rejected
        }

        if (this._bodyBlob) {
          return readBlobAsText(this._bodyBlob)
        } else if (this._bodyArrayBuffer) {
          return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))
        } else if (this._bodyFormData) {
          throw new Error('could not read FormData body as text')
        } else {
          return Promise.resolve(this._bodyText)
        }
      };

      if (support.formData) {
        this.formData = function() {
          return this.text().then(decode)
        };
      }

      this.json = function() {
        return this.text().then(JSON.parse)
      };

      return this
    }

    // HTTP methods whose capitalization should be normalized
    var methods = ['CONNECT', 'DELETE', 'GET', 'HEAD', 'OPTIONS', 'PATCH', 'POST', 'PUT', 'TRACE'];

    function normalizeMethod(method) {
      var upcased = method.toUpperCase();
      return methods.indexOf(upcased) > -1 ? upcased : method
    }

    function Request(input, options) {
      if (!(this instanceof Request)) {
        throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.')
      }

      options = options || {};
      var body = options.body;

      if (input instanceof Request) {
        if (input.bodyUsed) {
          throw new TypeError('Already read')
        }
        this.url = input.url;
        this.credentials = input.credentials;
        if (!options.headers) {
          this.headers = new Headers(input.headers);
        }
        this.method = input.method;
        this.mode = input.mode;
        this.signal = input.signal;
        if (!body && input._bodyInit != null) {
          body = input._bodyInit;
          input.bodyUsed = true;
        }
      } else {
        this.url = String(input);
      }

      this.credentials = options.credentials || this.credentials || 'same-origin';
      if (options.headers || !this.headers) {
        this.headers = new Headers(options.headers);
      }
      this.method = normalizeMethod(options.method || this.method || 'GET');
      this.mode = options.mode || this.mode || null;
      this.signal = options.signal || this.signal || (function () {
        if ('AbortController' in g) {
          var ctrl = new AbortController();
          return ctrl.signal;
        }
      }());
      this.referrer = null;

      if ((this.method === 'GET' || this.method === 'HEAD') && body) {
        throw new TypeError('Body not allowed for GET or HEAD requests')
      }
      this._initBody(body);

      if (this.method === 'GET' || this.method === 'HEAD') {
        if (options.cache === 'no-store' || options.cache === 'no-cache') {
          // Search for a '_' parameter in the query string
          var reParamSearch = /([?&])_=[^&]*/;
          if (reParamSearch.test(this.url)) {
            // If it already exists then set the value with the current time
            this.url = this.url.replace(reParamSearch, '$1_=' + new Date().getTime());
          } else {
            // Otherwise add a new '_' parameter to the end with the current time
            var reQueryString = /\?/;
            this.url += (reQueryString.test(this.url) ? '&' : '?') + '_=' + new Date().getTime();
          }
        }
      }
    }

    Request.prototype.clone = function() {
      return new Request(this, {body: this._bodyInit})
    };

    function decode(body) {
      var form = new FormData();
      body
        .trim()
        .split('&')
        .forEach(function(bytes) {
          if (bytes) {
            var split = bytes.split('=');
            var name = split.shift().replace(/\+/g, ' ');
            var value = split.join('=').replace(/\+/g, ' ');
            form.append(decodeURIComponent(name), decodeURIComponent(value));
          }
        });
      return form
    }

    function parseHeaders(rawHeaders) {
      var headers = new Headers();
      // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
      // https://tools.ietf.org/html/rfc7230#section-3.2
      var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ');
      // Avoiding split via regex to work around a common IE11 bug with the core-js 3.6.0 regex polyfill
      // https://github.com/github/fetch/issues/748
      // https://github.com/zloirock/core-js/issues/751
      preProcessedHeaders
        .split('\r')
        .map(function(header) {
          return header.indexOf('\n') === 0 ? header.substr(1, header.length) : header
        })
        .forEach(function(line) {
          var parts = line.split(':');
          var key = parts.shift().trim();
          if (key) {
            var value = parts.join(':').trim();
            try {
              headers.append(key, value);
            } catch (error) {
              console.warn('Response ' + error.message);
            }
          }
        });
      return headers
    }

    Body.call(Request.prototype);

    function Response(bodyInit, options) {
      if (!(this instanceof Response)) {
        throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.')
      }
      if (!options) {
        options = {};
      }

      this.type = 'default';
      this.status = options.status === undefined ? 200 : options.status;
      if (this.status < 200 || this.status > 599) {
        throw new RangeError("Failed to construct 'Response': The status provided (0) is outside the range [200, 599].")
      }
      this.ok = this.status >= 200 && this.status < 300;
      this.statusText = options.statusText === undefined ? '' : '' + options.statusText;
      this.headers = new Headers(options.headers);
      this.url = options.url || '';
      this._initBody(bodyInit);
    }

    Body.call(Response.prototype);

    Response.prototype.clone = function() {
      return new Response(this._bodyInit, {
        status: this.status,
        statusText: this.statusText,
        headers: new Headers(this.headers),
        url: this.url
      })
    };

    Response.error = function() {
      var response = new Response(null, {status: 200, statusText: ''});
      response.ok = false;
      response.status = 0;
      response.type = 'error';
      return response
    };

    var redirectStatuses = [301, 302, 303, 307, 308];

    Response.redirect = function(url, status) {
      if (redirectStatuses.indexOf(status) === -1) {
        throw new RangeError('Invalid status code')
      }

      return new Response(null, {status: status, headers: {location: url}})
    };

    var DOMException = g.DOMException;
    try {
      new DOMException();
    } catch (err) {
      DOMException = function(message, name) {
        this.message = message;
        this.name = name;
        var error = Error(message);
        this.stack = error.stack;
      };
      DOMException.prototype = Object.create(Error.prototype);
      DOMException.prototype.constructor = DOMException;
    }

    function fetch$1(input, init) {
      return new Promise(function(resolve, reject) {
        var request = new Request(input, init);

        if (request.signal && request.signal.aborted) {
          return reject(new DOMException('Aborted', 'AbortError'))
        }

        var xhr = new XMLHttpRequest();

        function abortXhr() {
          xhr.abort();
        }

        xhr.onload = function() {
          var options = {
            statusText: xhr.statusText,
            headers: parseHeaders(xhr.getAllResponseHeaders() || '')
          };
          // This check if specifically for when a user fetches a file locally from the file system
          // Only if the status is out of a normal range
          if (request.url.indexOf('file://') === 0 && (xhr.status < 200 || xhr.status > 599)) {
            options.status = 200;
          } else {
            options.status = xhr.status;
          }
          options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
          var body = 'response' in xhr ? xhr.response : xhr.responseText;
          setTimeout(function() {
            resolve(new Response(body, options));
          }, 0);
        };

        xhr.onerror = function() {
          setTimeout(function() {
            reject(new TypeError('Network request failed'));
          }, 0);
        };

        xhr.ontimeout = function() {
          setTimeout(function() {
            reject(new TypeError('Network request timed out'));
          }, 0);
        };

        xhr.onabort = function() {
          setTimeout(function() {
            reject(new DOMException('Aborted', 'AbortError'));
          }, 0);
        };

        function fixUrl(url) {
          try {
            return url === '' && g.location.href ? g.location.href : url
          } catch (e) {
            return url
          }
        }

        xhr.open(request.method, fixUrl(request.url), true);

        if (request.credentials === 'include') {
          xhr.withCredentials = true;
        } else if (request.credentials === 'omit') {
          xhr.withCredentials = false;
        }

        if ('responseType' in xhr) {
          if (support.blob) {
            xhr.responseType = 'blob';
          } else if (
            support.arrayBuffer
          ) {
            xhr.responseType = 'arraybuffer';
          }
        }

        if (init && typeof init.headers === 'object' && !(init.headers instanceof Headers || (g.Headers && init.headers instanceof g.Headers))) {
          var names = [];
          Object.getOwnPropertyNames(init.headers).forEach(function(name) {
            names.push(normalizeName(name));
            xhr.setRequestHeader(name, normalizeValue(init.headers[name]));
          });
          request.headers.forEach(function(value, name) {
            if (names.indexOf(name) === -1) {
              xhr.setRequestHeader(name, value);
            }
          });
        } else {
          request.headers.forEach(function(value, name) {
            xhr.setRequestHeader(name, value);
          });
        }

        if (request.signal) {
          request.signal.addEventListener('abort', abortXhr);

          xhr.onreadystatechange = function() {
            // DONE (success or failure)
            if (xhr.readyState === 4) {
              request.signal.removeEventListener('abort', abortXhr);
            }
          };
        }

        xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
      })
    }

    fetch$1.polyfill = true;

    if (!g.fetch) {
      g.fetch = fetch$1;
      g.Headers = Headers;
      g.Request = Request;
      g.Response = Response;
    }

    // the whatwg-fetch polyfill installs the fetch() function
    // on the global object (window or self)
    //
    // Return that as the export for use in Webpack, Browserify etc.

    var fetchNpmBrowserify = self.fetch.bind(self);

    var urlJoin = createCommonjsModule$1(function (module) {
    (function (name, context, definition) {
      if (module.exports) module.exports = definition();
      else context[name] = definition();
    })('urljoin', commonjsGlobal, function () {

      function normalize (strArray) {
        var resultArray = [];
        if (strArray.length === 0) { return ''; }

        if (typeof strArray[0] !== 'string') {
          throw new TypeError('Url must be a string. Received ' + strArray[0]);
        }

        // If the first part is a plain protocol, we combine it with the next part.
        if (strArray[0].match(/^[^/:]+:\/*$/) && strArray.length > 1) {
          var first = strArray.shift();
          strArray[0] = first + strArray[0];
        }

        // There must be two or three slashes in the file protocol, two slashes in anything else.
        if (strArray[0].match(/^file:\/\/\//)) {
          strArray[0] = strArray[0].replace(/^([^/:]+):\/*/, '$1:///');
        } else {
          strArray[0] = strArray[0].replace(/^([^/:]+):\/*/, '$1://');
        }

        for (var i = 0; i < strArray.length; i++) {
          var component = strArray[i];

          if (typeof component !== 'string') {
            throw new TypeError('Url must be a string. Received ' + component);
          }

          if (component === '') { continue; }

          if (i > 0) {
            // Removing the starting slashes for each component but the first.
            component = component.replace(/^[\/]+/, '');
          }
          if (i < strArray.length - 1) {
            // Removing the ending slashes for each component but the last.
            component = component.replace(/[\/]+$/, '');
          } else {
            // For the last component we will combine multiple slashes to a single one.
            component = component.replace(/[\/]+$/, '/');
          }

          resultArray.push(component);

        }

        var str = resultArray.join('/');
        // Each input component is now separated by a single slash except the possible first plain protocol part.

        // remove trailing slash before parameters or hash
        str = str.replace(/\/(\?|&|#[^!])/g, '$1');

        // replace ? in parameters with &
        var parts = str.split('?');
        str = parts.shift() + (parts.length > 0 ? '?': '') + parts.join('&');

        return str;
      }

      return function () {
        var input;

        if (typeof arguments[0] === 'object') {
          input = arguments[0];
        } else {
          input = [].slice.call(arguments);
        }

        return normalize(input);
      };

    });
    });

    var __defProp = Object.defineProperty;
    var __export = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };

    // src/constants.ts
    var constants_exports = {};
    __export(constants_exports, {
      ADDR_BOUND: () => ADDR_BOUND,
      API_VERSION: () => API_VERSION,
      BN_FEE_TRANSACTION_VERSION_1: () => BN_FEE_TRANSACTION_VERSION_1,
      BN_FEE_TRANSACTION_VERSION_2: () => BN_FEE_TRANSACTION_VERSION_2,
      BN_TRANSACTION_VERSION_1: () => BN_TRANSACTION_VERSION_1,
      BN_TRANSACTION_VERSION_2: () => BN_TRANSACTION_VERSION_2,
      BaseUrl: () => BaseUrl,
      HEX_STR_TRANSACTION_VERSION_1: () => HEX_STR_TRANSACTION_VERSION_1,
      HEX_STR_TRANSACTION_VERSION_2: () => HEX_STR_TRANSACTION_VERSION_2,
      IS_BROWSER: () => IS_BROWSER,
      MASK_250: () => MASK_250,
      MAX_STORAGE_ITEM_SIZE: () => MAX_STORAGE_ITEM_SIZE,
      NetworkName: () => NetworkName,
      RPC_DEFAULT_VERSION: () => RPC_DEFAULT_VERSION,
      RPC_NODES: () => RPC_NODES,
      StarknetChainId: () => StarknetChainId,
      TEXT_TO_FELT_MAX_LEN: () => TEXT_TO_FELT_MAX_LEN,
      TransactionHashPrefix: () => TransactionHashPrefix,
      UDC: () => UDC,
      ZERO: () => ZERO
    });

    // src/utils/encode.ts
    var encode_exports = {};
    __export(encode_exports, {
      IS_BROWSER: () => IS_BROWSER,
      addHexPrefix: () => addHexPrefix,
      arrayBufferToString: () => arrayBufferToString,
      atobUniversal: () => atobUniversal,
      btoaUniversal: () => btoaUniversal,
      buf2hex: () => buf2hex,
      calcByteLength: () => calcByteLength,
      padLeft: () => padLeft,
      pascalToSnake: () => pascalToSnake,
      removeHexPrefix: () => removeHexPrefix,
      sanitizeBytes: () => sanitizeBytes,
      sanitizeHex: () => sanitizeHex,
      stringToArrayBuffer: () => stringToArrayBuffer,
      utf8ToArray: () => utf8ToArray
    });
    var IS_BROWSER = typeof window !== "undefined";
    var STRING_ZERO = "0";
    function arrayBufferToString(array) {
      return new Uint8Array(array).reduce((data, byte) => data + String.fromCharCode(byte), "");
    }
    function utf8ToArray(str) {
      return new TextEncoder().encode(str);
    }
    function stringToArrayBuffer(str) {
      return utf8ToArray(str);
    }
    function atobUniversal(a) {
      return base64.decode(a);
    }
    function btoaUniversal(b) {
      return base64.encode(new Uint8Array(b));
    }
    function buf2hex(buffer) {
      return buffer.reduce((r, x) => r + x.toString(16).padStart(2, "0"), "");
    }
    function removeHexPrefix(hex) {
      return hex.replace(/^0x/i, "");
    }
    function addHexPrefix(hex) {
      return `0x${removeHexPrefix(hex)}`;
    }
    function padString(str, length, left, padding = STRING_ZERO) {
      const diff = length - str.length;
      let result = str;
      if (diff > 0) {
        const pad = padding.repeat(diff);
        result = left ? pad + str : str + pad;
      }
      return result;
    }
    function padLeft(str, length, padding = STRING_ZERO) {
      return padString(str, length, true, padding);
    }
    function calcByteLength(str, byteSize = 8) {
      const { length } = str;
      const remainder = length % byteSize;
      return remainder ? (length - remainder) / byteSize * byteSize + byteSize : length;
    }
    function sanitizeBytes(str, byteSize = 8, padding = STRING_ZERO) {
      return padLeft(str, calcByteLength(str, byteSize), padding);
    }
    function sanitizeHex(hex) {
      hex = removeHexPrefix(hex);
      hex = sanitizeBytes(hex, 2);
      if (hex) {
        hex = addHexPrefix(hex);
      }
      return hex;
    }
    var pascalToSnake = (text) => /[a-z]/.test(text) ? text.split(/(?=[A-Z])/).join("_").toUpperCase() : text;

    // src/constants.ts
    var TEXT_TO_FELT_MAX_LEN = 31;
    var HEX_STR_TRANSACTION_VERSION_1 = "0x1";
    var HEX_STR_TRANSACTION_VERSION_2 = "0x2";
    var BN_TRANSACTION_VERSION_1 = 1n;
    var BN_TRANSACTION_VERSION_2 = 2n;
    var BN_FEE_TRANSACTION_VERSION_1 = 2n ** 128n + BN_TRANSACTION_VERSION_1;
    var BN_FEE_TRANSACTION_VERSION_2 = 2n ** 128n + BN_TRANSACTION_VERSION_2;
    var ZERO = 0n;
    var MASK_250 = 2n ** 250n - 1n;
    var API_VERSION = ZERO;
    var MAX_STORAGE_ITEM_SIZE = 256n;
    var ADDR_BOUND = 2n ** 251n - MAX_STORAGE_ITEM_SIZE;
    var BaseUrl = /* @__PURE__ */ ((BaseUrl2) => {
      BaseUrl2["SN_MAIN"] = "https://alpha-mainnet.starknet.io";
      BaseUrl2["SN_GOERLI"] = "https://alpha4.starknet.io";
      BaseUrl2["SN_SEPOLIA"] = "https://alpha-sepolia.starknet.io";
      return BaseUrl2;
    })(BaseUrl || {});
    var NetworkName = /* @__PURE__ */ ((NetworkName2) => {
      NetworkName2["SN_MAIN"] = "SN_MAIN";
      NetworkName2["SN_GOERLI"] = "SN_GOERLI";
      NetworkName2["SN_SEPOLIA"] = "SN_SEPOLIA";
      return NetworkName2;
    })(NetworkName || {});
    var StarknetChainId = /* @__PURE__ */ ((StarknetChainId4) => {
      StarknetChainId4["SN_MAIN"] = "0x534e5f4d41494e";
      StarknetChainId4["SN_GOERLI"] = "0x534e5f474f45524c49";
      StarknetChainId4["SN_SEPOLIA"] = "0x534e5f5345504f4c4941";
      return StarknetChainId4;
    })(StarknetChainId || {});
    var TransactionHashPrefix = /* @__PURE__ */ ((TransactionHashPrefix2) => {
      TransactionHashPrefix2["DECLARE"] = "0x6465636c617265";
      TransactionHashPrefix2["DEPLOY"] = "0x6465706c6f79";
      TransactionHashPrefix2["DEPLOY_ACCOUNT"] = "0x6465706c6f795f6163636f756e74";
      TransactionHashPrefix2["INVOKE"] = "0x696e766f6b65";
      TransactionHashPrefix2["L1_HANDLER"] = "0x6c315f68616e646c6572";
      return TransactionHashPrefix2;
    })(TransactionHashPrefix || {});
    var UDC = {
      ADDRESS: "0x041a78e741e5af2fec34b695679bc6891742439f7afb8484ecd7766661ad02bf",
      ENTRYPOINT: "deployContract"
    };
    var RPC_DEFAULT_VERSION = "v0_5";
    var RPC_NODES = {
      SN_GOERLI: [
        `https://starknet-testnet.public.blastapi.io/rpc/`,
        `https://free-rpc.nethermind.io/goerli-juno/`
      ],
      SN_MAIN: [
        `https://starknet-mainnet.public.blastapi.io/rpc/`,
        `https://free-rpc.nethermind.io/mainnet-juno/`
      ],
      SN_SEPOLIA: [
        `https://starknet-sepolia.public.blastapi.io/rpc/`,
        `https://free-rpc.nethermind.io/sepolia-juno/`
      ]
    };

    // src/types/index.ts
    var types_exports = {};
    __export(types_exports, {
      BlockStatus: () => BlockStatus,
      BlockTag: () => BlockTag,
      EntryPointType: () => EntryPointType,
      Literal: () => Literal,
      RPC: () => rpc_exports,
      SIMULATION_FLAG: () => SIMULATION_FLAG,
      Sequencer: () => sequencer_exports,
      TransactionExecutionStatus: () => TransactionExecutionStatus,
      TransactionFinalityStatus: () => TransactionFinalityStatus,
      TransactionStatus: () => TransactionStatus,
      TransactionType: () => TransactionType,
      TypedDataRevision: () => TypedDataRevision,
      Uint: () => Uint,
      ValidateType: () => ValidateType
    });

    // src/types/account.ts
    var SIMULATION_FLAG = /* @__PURE__ */ ((SIMULATION_FLAG2) => {
      SIMULATION_FLAG2["SKIP_VALIDATE"] = "SKIP_VALIDATE";
      SIMULATION_FLAG2["SKIP_EXECUTE"] = "SKIP_EXECUTE";
      return SIMULATION_FLAG2;
    })(SIMULATION_FLAG || {});

    // src/types/calldata.ts
    var ValidateType = /* @__PURE__ */ ((ValidateType2) => {
      ValidateType2["DEPLOY"] = "DEPLOY";
      ValidateType2["CALL"] = "CALL";
      ValidateType2["INVOKE"] = "INVOKE";
      return ValidateType2;
    })(ValidateType || {});
    var Uint = /* @__PURE__ */ ((Uint2) => {
      Uint2["u8"] = "core::integer::u8";
      Uint2["u16"] = "core::integer::u16";
      Uint2["u32"] = "core::integer::u32";
      Uint2["u64"] = "core::integer::u64";
      Uint2["u128"] = "core::integer::u128";
      Uint2["u256"] = "core::integer::u256";
      return Uint2;
    })(Uint || {});
    var Literal = /* @__PURE__ */ ((Literal2) => {
      Literal2["ClassHash"] = "core::starknet::class_hash::ClassHash";
      Literal2["ContractAddress"] = "core::starknet::contract_address::ContractAddress";
      return Literal2;
    })(Literal || {});

    // src/types/lib/contract/index.ts
    var EntryPointType = /* @__PURE__ */ ((EntryPointType2) => {
      EntryPointType2["EXTERNAL"] = "EXTERNAL";
      EntryPointType2["L1_HANDLER"] = "L1_HANDLER";
      EntryPointType2["CONSTRUCTOR"] = "CONSTRUCTOR";
      return EntryPointType2;
    })(EntryPointType || {});

    // src/types/lib/index.ts
    var TransactionType = /* @__PURE__ */ ((TransactionType2) => {
      TransactionType2["DECLARE"] = "DECLARE";
      TransactionType2["DEPLOY"] = "DEPLOY";
      TransactionType2["DEPLOY_ACCOUNT"] = "DEPLOY_ACCOUNT";
      TransactionType2["INVOKE"] = "INVOKE_FUNCTION";
      return TransactionType2;
    })(TransactionType || {});
    var TransactionStatus = /* @__PURE__ */ ((TransactionStatus2) => {
      TransactionStatus2["NOT_RECEIVED"] = "NOT_RECEIVED";
      TransactionStatus2["RECEIVED"] = "RECEIVED";
      TransactionStatus2["ACCEPTED_ON_L2"] = "ACCEPTED_ON_L2";
      TransactionStatus2["ACCEPTED_ON_L1"] = "ACCEPTED_ON_L1";
      TransactionStatus2["REJECTED"] = "REJECTED";
      TransactionStatus2["REVERTED"] = "REVERTED";
      return TransactionStatus2;
    })(TransactionStatus || {});
    var TransactionFinalityStatus = /* @__PURE__ */ ((TransactionFinalityStatus2) => {
      TransactionFinalityStatus2["NOT_RECEIVED"] = "NOT_RECEIVED";
      TransactionFinalityStatus2["RECEIVED"] = "RECEIVED";
      TransactionFinalityStatus2["ACCEPTED_ON_L2"] = "ACCEPTED_ON_L2";
      TransactionFinalityStatus2["ACCEPTED_ON_L1"] = "ACCEPTED_ON_L1";
      return TransactionFinalityStatus2;
    })(TransactionFinalityStatus || {});
    var TransactionExecutionStatus = /* @__PURE__ */ ((TransactionExecutionStatus2) => {
      TransactionExecutionStatus2["REJECTED"] = "REJECTED";
      TransactionExecutionStatus2["REVERTED"] = "REVERTED";
      TransactionExecutionStatus2["SUCCEEDED"] = "SUCCEEDED";
      return TransactionExecutionStatus2;
    })(TransactionExecutionStatus || {});
    var BlockStatus = /* @__PURE__ */ ((BlockStatus2) => {
      BlockStatus2["PENDING"] = "PENDING";
      BlockStatus2["ACCEPTED_ON_L1"] = "ACCEPTED_ON_L1";
      BlockStatus2["ACCEPTED_ON_L2"] = "ACCEPTED_ON_L2";
      BlockStatus2["REJECTED"] = "REJECTED";
      return BlockStatus2;
    })(BlockStatus || {});
    var BlockTag = /* @__PURE__ */ ((BlockTag2) => {
      BlockTag2["pending"] = "pending";
      BlockTag2["latest"] = "latest";
      return BlockTag2;
    })(BlockTag || {});

    // src/types/typedData.ts
    var TypedDataRevision = /* @__PURE__ */ ((TypedDataRevision2) => {
      TypedDataRevision2["Active"] = "1";
      TypedDataRevision2["Legacy"] = "0";
      return TypedDataRevision2;
    })(TypedDataRevision || {});

    // src/types/api/rpc.ts
    var rpc_exports = {};
    __export(rpc_exports, {
      EBlockTag: () => EBlockTag,
      EDataAvailabilityMode: () => EDataAvailabilityMode,
      ESimulationFlag: () => ESimulationFlag,
      ETransactionExecutionStatus: () => ETransactionExecutionStatus,
      ETransactionFinalityStatus: () => ETransactionFinalityStatus,
      ETransactionStatus: () => ETransactionStatus,
      ETransactionType: () => ETransactionType,
      Errors: () => errors_exports,
      JRPC: () => jsonrpc_exports,
      SPEC: () => components_exports
    });

    // src/types/api/jsonrpc/index.ts
    var jsonrpc_exports = {};

    // src/types/api/rpcspec/errors.ts
    var errors_exports = {};

    // src/types/api/rpcspec/components.ts
    var components_exports = {};

    // src/types/api/rpcspec/nonspec.ts
    var ETransactionType = /* @__PURE__ */ ((ETransactionType2) => {
      ETransactionType2["DECLARE"] = "DECLARE";
      ETransactionType2["DEPLOY"] = "DEPLOY";
      ETransactionType2["DEPLOY_ACCOUNT"] = "DEPLOY_ACCOUNT";
      ETransactionType2["INVOKE"] = "INVOKE";
      ETransactionType2["L1_HANDLER"] = "L1_HANDLER";
      return ETransactionType2;
    })(ETransactionType || {});
    var ESimulationFlag = /* @__PURE__ */ ((ESimulationFlag2) => {
      ESimulationFlag2["SKIP_VALIDATE"] = "SKIP_VALIDATE";
      ESimulationFlag2["SKIP_FEE_CHARGE"] = "SKIP_FEE_CHARGE";
      return ESimulationFlag2;
    })(ESimulationFlag || {});
    var ETransactionStatus = /* @__PURE__ */ ((ETransactionStatus2) => {
      ETransactionStatus2["RECEIVED"] = "RECEIVED";
      ETransactionStatus2["REJECTED"] = "REJECTED";
      ETransactionStatus2["ACCEPTED_ON_L2"] = "ACCEPTED_ON_L2";
      ETransactionStatus2["ACCEPTED_ON_L1"] = "ACCEPTED_ON_L1";
      return ETransactionStatus2;
    })(ETransactionStatus || {});
    var ETransactionFinalityStatus = /* @__PURE__ */ ((ETransactionFinalityStatus2) => {
      ETransactionFinalityStatus2["ACCEPTED_ON_L2"] = "ACCEPTED_ON_L2";
      ETransactionFinalityStatus2["ACCEPTED_ON_L1"] = "ACCEPTED_ON_L1";
      return ETransactionFinalityStatus2;
    })(ETransactionFinalityStatus || {});
    var ETransactionExecutionStatus = /* @__PURE__ */ ((ETransactionExecutionStatus2) => {
      ETransactionExecutionStatus2["SUCCEEDED"] = "SUCCEEDED";
      ETransactionExecutionStatus2["REVERTED"] = "REVERTED";
      return ETransactionExecutionStatus2;
    })(ETransactionExecutionStatus || {});
    var EBlockTag = /* @__PURE__ */ ((EBlockTag2) => {
      EBlockTag2["LATEST"] = "latest";
      EBlockTag2["PENDING"] = "pending";
      return EBlockTag2;
    })(EBlockTag || {});
    var EDataAvailabilityMode = /* @__PURE__ */ ((EDataAvailabilityMode2) => {
      EDataAvailabilityMode2["L1"] = "L1";
      EDataAvailabilityMode2["L2"] = "L2";
      return EDataAvailabilityMode2;
    })(EDataAvailabilityMode || {});

    // src/types/api/sequencer.ts
    var sequencer_exports = {};

    // src/utils/assert.ts
    function assert(condition, message) {
      if (!condition) {
        throw new Error(message || "Assertion failure");
      }
    }

    // src/utils/num.ts
    var num_exports = {};
    __export(num_exports, {
      assertInRange: () => assertInRange,
      bigNumberishArrayToDecimalStringArray: () => bigNumberishArrayToDecimalStringArray,
      bigNumberishArrayToHexadecimalStringArray: () => bigNumberishArrayToHexadecimalStringArray,
      cleanHex: () => cleanHex,
      getDecimalString: () => getDecimalString,
      getHexString: () => getHexString,
      getHexStringArray: () => getHexStringArray,
      hexToBytes: () => hexToBytes,
      hexToDecimalString: () => hexToDecimalString,
      isBigInt: () => isBigInt,
      isHex: () => isHex,
      isStringWholeNumber: () => isStringWholeNumber,
      toBigInt: () => toBigInt,
      toCairoBool: () => toCairoBool,
      toHex: () => toHex,
      toHexString: () => toHexString,
      toStorageKey: () => toStorageKey
    });
    function isHex(hex) {
      return /^0x[0-9a-f]*$/i.test(hex);
    }
    function toBigInt(value) {
      return BigInt(value);
    }
    function isBigInt(value) {
      return typeof value === "bigint";
    }
    function toHex(number2) {
      return addHexPrefix(toBigInt(number2).toString(16));
    }
    var toHexString = toHex;
    function toStorageKey(number2) {
      const res = addHexPrefix(toBigInt(number2).toString(16).padStart(64, "0"));
      return res;
    }
    function hexToDecimalString(hex) {
      return BigInt(addHexPrefix(hex)).toString(10);
    }
    var cleanHex = (hex) => hex.toLowerCase().replace(/^(0x)0+/, "$1");
    function assertInRange(input, lowerBound, upperBound, inputName = "") {
      const messageSuffix = inputName === "" ? "invalid length" : `invalid ${inputName} length`;
      const inputBigInt = BigInt(input);
      const lowerBoundBigInt = BigInt(lowerBound);
      const upperBoundBigInt = BigInt(upperBound);
      assert(
        inputBigInt >= lowerBoundBigInt && inputBigInt <= upperBoundBigInt,
        `Message not signable, ${messageSuffix}.`
      );
    }
    function bigNumberishArrayToDecimalStringArray(rawCalldata) {
      return rawCalldata.map((x) => toBigInt(x).toString(10));
    }
    function bigNumberishArrayToHexadecimalStringArray(rawCalldata) {
      return rawCalldata.map((x) => toHex(x));
    }
    var isStringWholeNumber = (value) => /^\d+$/.test(value);
    function getDecimalString(value) {
      if (isHex(value)) {
        return hexToDecimalString(value);
      }
      if (isStringWholeNumber(value)) {
        return value;
      }
      throw new Error(`${value} need to be hex-string or whole-number-string`);
    }
    function getHexString(value) {
      if (isHex(value)) {
        return value;
      }
      if (isStringWholeNumber(value)) {
        return toHexString(value);
      }
      throw new Error(`${value} need to be hex-string or whole-number-string`);
    }
    function getHexStringArray(value) {
      return value.map((el) => getHexString(el));
    }
    var toCairoBool = (value) => (+value).toString();
    function hexToBytes(value) {
      if (!isHex(value))
        throw new Error(`${value} need to be a hex-string`);
      let adaptedValue = removeHexPrefix(value);
      if (adaptedValue.length % 2 !== 0) {
        adaptedValue = `0${adaptedValue}`;
      }
      return hexToBytes$1(adaptedValue);
    }

    // src/utils/selector.ts
    var selector_exports = {};
    __export(selector_exports, {
      getSelector: () => getSelector,
      getSelectorFromName: () => getSelectorFromName,
      keccakBn: () => keccakBn,
      starknetKeccak: () => starknetKeccak
    });
    function keccakBn(value) {
      const hexWithoutPrefix = removeHexPrefix(toHex(BigInt(value)));
      const evenHex = hexWithoutPrefix.length % 2 === 0 ? hexWithoutPrefix : `0${hexWithoutPrefix}`;
      return addHexPrefix(keccak(hexToBytes(addHexPrefix(evenHex))).toString(16));
    }
    function keccakHex(str) {
      return addHexPrefix(keccak(utf8ToArray(str)).toString(16));
    }
    function starknetKeccak(str) {
      const hash = BigInt(keccakHex(str));
      return hash & MASK_250;
    }
    function getSelectorFromName(funcName) {
      return toHex(starknetKeccak(funcName));
    }
    function getSelector(value) {
      if (isHex(value)) {
        return value;
      }
      if (isStringWholeNumber(value)) {
        return toHexString(value);
      }
      return getSelectorFromName(value);
    }

    // src/utils/shortString.ts
    var shortString_exports = {};
    __export(shortString_exports, {
      decodeShortString: () => decodeShortString,
      encodeShortString: () => encodeShortString,
      isASCII: () => isASCII,
      isDecimalString: () => isDecimalString,
      isLongText: () => isLongText,
      isShortString: () => isShortString,
      isShortText: () => isShortText,
      isText: () => isText,
      splitLongString: () => splitLongString
    });
    function isASCII(str) {
      return /^[\x00-\x7F]*$/.test(str);
    }
    function isShortString(str) {
      return str.length <= TEXT_TO_FELT_MAX_LEN;
    }
    function isDecimalString(str) {
      return /^[0-9]*$/i.test(str);
    }
    function isText(val) {
      return typeof val === "string" && !isHex(val) && !isStringWholeNumber(val);
    }
    var isShortText = (val) => isText(val) && isShortString(val);
    var isLongText = (val) => isText(val) && !isShortString(val);
    function splitLongString(longStr) {
      const regex = RegExp(`[^]{1,${TEXT_TO_FELT_MAX_LEN}}`, "g");
      return longStr.match(regex) || [];
    }
    function encodeShortString(str) {
      if (!isASCII(str))
        throw new Error(`${str} is not an ASCII string`);
      if (!isShortString(str))
        throw new Error(`${str} is too long`);
      return addHexPrefix(str.replace(/./g, (char) => char.charCodeAt(0).toString(16)));
    }
    function decodeShortString(str) {
      if (!isASCII(str))
        throw new Error(`${str} is not an ASCII string`);
      if (isHex(str)) {
        return removeHexPrefix(str).replace(/.{2}/g, (hex) => String.fromCharCode(parseInt(hex, 16)));
      }
      if (isDecimalString(str)) {
        return decodeShortString("0X".concat(BigInt(str).toString(16)));
      }
      throw new Error(`${str} is not Hex or decimal`);
    }

    // src/utils/calldata/cairo.ts
    var cairo_exports = {};
    __export(cairo_exports, {
      felt: () => felt,
      getAbiContractVersion: () => getAbiContractVersion,
      getArrayType: () => getArrayType,
      isCairo1Abi: () => isCairo1Abi,
      isCairo1Type: () => isCairo1Type,
      isLen: () => isLen,
      isTypeArray: () => isTypeArray,
      isTypeBool: () => isTypeBool,
      isTypeContractAddress: () => isTypeContractAddress,
      isTypeEnum: () => isTypeEnum,
      isTypeEthAddress: () => isTypeEthAddress,
      isTypeFelt: () => isTypeFelt,
      isTypeLiteral: () => isTypeLiteral,
      isTypeNamedTuple: () => isTypeNamedTuple,
      isTypeOption: () => isTypeOption,
      isTypeResult: () => isTypeResult,
      isTypeStruct: () => isTypeStruct,
      isTypeTuple: () => isTypeTuple,
      isTypeUint: () => isTypeUint,
      isTypeUint256: () => isTypeUint256,
      tuple: () => tuple,
      uint256: () => uint256
    });

    // src/utils/uint256.ts
    var uint256_exports = {};
    __export(uint256_exports, {
      UINT_128_MAX: () => UINT_128_MAX,
      UINT_256_MAX: () => UINT_256_MAX,
      bnToUint256: () => bnToUint256,
      isUint256: () => isUint256,
      uint256ToBN: () => uint256ToBN
    });
    var UINT_128_MAX = (1n << 128n) - 1n;
    var UINT_256_MAX = (1n << 256n) - 1n;
    function uint256ToBN(uint2562) {
      return (toBigInt(uint2562.high) << 128n) + toBigInt(uint2562.low);
    }
    function isUint256(bn) {
      return toBigInt(bn) <= UINT_256_MAX;
    }
    function bnToUint256(bn) {
      const bi = toBigInt(bn);
      if (!isUint256(bi))
        throw new Error("Number is too large");
      return {
        low: addHexPrefix((bi & UINT_128_MAX).toString(16)),
        high: addHexPrefix((bi >> 128n).toString(16))
      };
    }

    // src/utils/calldata/cairo.ts
    var isLen = (name) => /_len$/.test(name);
    var isTypeFelt = (type) => type === "felt" || type === "core::felt252";
    var isTypeArray = (type) => /\*/.test(type) || type.startsWith("core::array::Array::") || type.startsWith("core::array::Span::");
    var isTypeTuple = (type) => /^\(.*\)$/i.test(type);
    var isTypeNamedTuple = (type) => /\(.*\)/i.test(type) && type.includes(":");
    var isTypeStruct = (type, structs) => type in structs;
    var isTypeEnum = (type, enums) => type in enums;
    var isTypeOption = (type) => type.startsWith("core::option::Option::");
    var isTypeResult = (type) => type.startsWith("core::result::Result::");
    var isTypeUint = (type) => Object.values(Uint).includes(type);
    var isTypeLiteral = (type) => Object.values(Literal).includes(type);
    var isTypeUint256 = (type) => type === "core::integer::u256";
    var isTypeBool = (type) => type === "core::bool";
    var isTypeContractAddress = (type) => type === "core::starknet::contract_address::ContractAddress";
    var isTypeEthAddress = (type) => type === "core::starknet::eth_address::EthAddress";
    var isCairo1Type = (type) => type.includes("::");
    var getArrayType = (type) => {
      if (isCairo1Type(type)) {
        return type.substring(type.indexOf("<") + 1, type.lastIndexOf(">"));
      }
      return type.replace("*", "");
    };
    function isCairo1Abi(abi) {
      const { cairo } = getAbiContractVersion(abi);
      if (cairo === void 0) {
        throw Error("Unable to determine Cairo version");
      }
      return cairo === "1";
    }
    function getAbiContractVersion(abi) {
      if (abi.find((it) => it.type === "interface")) {
        return { cairo: "1", compiler: "2" };
      }
      const testFunction = abi.find(
        (it) => it.type === "function" && (it.inputs.length || it.outputs.length)
      );
      if (!testFunction) {
        return { cairo: void 0, compiler: void 0 };
      }
      const io = testFunction.inputs.length ? testFunction.inputs : testFunction.outputs;
      if (isCairo1Type(io[0].type)) {
        return { cairo: "1", compiler: "1" };
      }
      return { cairo: "0", compiler: "0" };
    }
    var uint256 = (it) => {
      const bn = BigInt(it);
      if (!isUint256(bn))
        throw new Error("Number is too large");
      return {
        // eslint-disable-next-line no-bitwise
        low: (bn & UINT_128_MAX).toString(10),
        // eslint-disable-next-line no-bitwise
        high: (bn >> 128n).toString(10)
      };
    };
    var tuple = (...args) => ({ ...args });
    function felt(it) {
      if (isBigInt(it) || typeof it === "number" && Number.isInteger(it)) {
        return it.toString();
      }
      if (isText(it)) {
        if (!isShortString(it))
          throw new Error(
            `${it} is a long string > 31 chars, felt can store short strings, split it to array of short strings`
          );
        const encoded = encodeShortString(it);
        return BigInt(encoded).toString();
      }
      if (typeof it === "string" && isHex(it)) {
        return BigInt(it).toString();
      }
      if (typeof it === "string" && isStringWholeNumber(it)) {
        return it;
      }
      if (typeof it === "boolean") {
        return `${+it}`;
      }
      throw new Error(`${it} can't be computed by felt()`);
    }

    // src/utils/calldata/enum/CairoCustomEnum.ts
    var CairoCustomEnum = class {
      /**
       * direct readonly access to variants of the Cairo Custom Enum.
       * @returns a value of type any
       * @example
       * ```typescript
       * const successValue = myCairoEnum.variant.Success;
       */
      variant;
      /**
       * @param enumContent an object with the variants as keys and the content as value. Only one content shall be defined.
       */
      constructor(enumContent) {
        const variantsList = Object.values(enumContent);
        if (variantsList.length === 0) {
          throw new Error("This Enum must have at least 1 variant");
        }
        const nbActiveVariants = variantsList.filter(
          (content) => typeof content !== "undefined"
        ).length;
        if (nbActiveVariants !== 1) {
          throw new Error("This Enum must have exactly one active variant");
        }
        this.variant = enumContent;
      }
      /**
       *
       * @returns the content of the valid variant of a Cairo custom Enum.
       */
      unwrap() {
        const variants = Object.entries(this.variant);
        const activeVariant = variants.find((item) => typeof item[1] !== "undefined");
        if (typeof activeVariant === "undefined") {
          return void 0;
        }
        return activeVariant[1];
      }
      /**
       *
       * @returns the name of the valid variant of a Cairo custom Enum.
       */
      activeVariant() {
        const variants = Object.entries(this.variant);
        const activeVariant = variants.find((item) => typeof item[1] !== "undefined");
        if (typeof activeVariant === "undefined") {
          return "";
        }
        return activeVariant[0];
      }
    };

    // src/utils/calldata/enum/CairoOption.ts
    var CairoOptionVariant = /* @__PURE__ */ ((CairoOptionVariant2) => {
      CairoOptionVariant2[CairoOptionVariant2["Some"] = 0] = "Some";
      CairoOptionVariant2[CairoOptionVariant2["None"] = 1] = "None";
      return CairoOptionVariant2;
    })(CairoOptionVariant || {});
    var CairoOption = class {
      Some;
      None;
      constructor(variant, someContent) {
        if (!(variant in CairoOptionVariant)) {
          throw new Error("Wrong variant : should be CairoOptionVariant.Some or .None.");
        }
        if (variant === 0 /* Some */) {
          if (typeof someContent === "undefined") {
            throw new Error(
              'The creation of a Cairo Option with "Some" variant needs a content as input.'
            );
          }
          this.Some = someContent;
          this.None = void 0;
        } else {
          this.Some = void 0;
          this.None = true;
        }
      }
      /**
       *
       * @returns the content of the valid variant of a Cairo custom Enum.
       *  If None, returns 'undefined'.
       */
      unwrap() {
        if (this.None) {
          return void 0;
        }
        return this.Some;
      }
      /**
       *
       * @returns true if the valid variant is 'isSome'.
       */
      isSome() {
        return !(typeof this.Some === "undefined");
      }
      /**
       *
       * @returns true if the valid variant is 'isNone'.
       */
      isNone() {
        return this.None === true;
      }
    };

    // src/utils/calldata/enum/CairoResult.ts
    var CairoResultVariant = /* @__PURE__ */ ((CairoResultVariant2) => {
      CairoResultVariant2[CairoResultVariant2["Ok"] = 0] = "Ok";
      CairoResultVariant2[CairoResultVariant2["Err"] = 1] = "Err";
      return CairoResultVariant2;
    })(CairoResultVariant || {});
    var CairoResult = class {
      Ok;
      Err;
      constructor(variant, resultContent) {
        if (!(variant in CairoResultVariant)) {
          throw new Error("Wrong variant : should be CairoResultVariant.Ok or .Err.");
        }
        if (variant === 0 /* Ok */) {
          this.Ok = resultContent;
          this.Err = void 0;
        } else {
          this.Ok = void 0;
          this.Err = resultContent;
        }
      }
      /**
       *
       * @returns the content of the valid variant of a Cairo Result.
       */
      unwrap() {
        if (typeof this.Ok !== "undefined") {
          return this.Ok;
        }
        if (typeof this.Err !== "undefined") {
          return this.Err;
        }
        throw new Error("Both Result.Ok and .Err are undefined. Not authorized.");
      }
      /**
       *
       * @returns true if the valid variant is 'Ok'.
       */
      isOk() {
        return !(typeof this.Ok === "undefined");
      }
      /**
       *
       * @returns true if the valid variant is 'isErr'.
       */
      isErr() {
        return !(typeof this.Err === "undefined");
      }
    };

    // src/utils/calldata/formatter.ts
    var guard = {
      isBN: (data, type, key) => {
        if (!isBigInt(data[key]))
          throw new Error(
            `Data and formatter mismatch on ${key}:${type[key]}, expected response data ${key}:${data[key]} to be BN instead it is ${typeof data[key]}`
          );
      },
      unknown: (data, type, key) => {
        throw new Error(`Unhandled formatter type on ${key}:${type[key]} for data ${key}:${data[key]}`);
      }
    };
    function formatter(data, type, sameType) {
      return Object.entries(data).reduce((acc, [key, value]) => {
        const elType = sameType ?? type[key];
        if (!(key in type) && !sameType) {
          acc[key] = value;
          return acc;
        }
        if (elType === "string") {
          if (Array.isArray(data[key])) {
            const arrayStr = formatter(
              data[key],
              data[key].map((_) => elType)
            );
            acc[key] = Object.values(arrayStr).join("");
            return acc;
          }
          guard.isBN(data, type, key);
          acc[key] = decodeShortString(value);
          return acc;
        }
        if (elType === "number") {
          guard.isBN(data, type, key);
          acc[key] = Number(value);
          return acc;
        }
        if (typeof elType === "function") {
          acc[key] = elType(value);
          return acc;
        }
        if (Array.isArray(elType)) {
          const arrayObj = formatter(data[key], elType, elType[0]);
          acc[key] = Object.values(arrayObj);
          return acc;
        }
        if (typeof elType === "object") {
          acc[key] = formatter(data[key], elType);
          return acc;
        }
        guard.unknown(data, type, key);
        return acc;
      }, {});
    }

    // src/utils/calldata/parser/parser-0-1.1.0.ts
    var AbiParser1 = class {
      abi;
      constructor(abi) {
        this.abi = abi;
      }
      /**
       * abi method inputs length without '_len' inputs
       * cairo 0 reducer
       * @param abiMethod FunctionAbi
       * @returns number
       */
      methodInputsLength(abiMethod) {
        return abiMethod.inputs.reduce((acc, input) => !isLen(input.name) ? acc + 1 : acc, 0);
      }
      /**
       * get method definition from abi
       * @param name string
       * @returns FunctionAbi | undefined
       */
      getMethod(name) {
        return this.abi.find((it) => it.name === name);
      }
      /**
       * Get Abi in legacy format
       * @returns Abi
       */
      getLegacyFormat() {
        return this.abi;
      }
    };

    // src/utils/calldata/parser/parser-2.0.0.ts
    var AbiParser2 = class {
      abi;
      constructor(abi) {
        this.abi = abi;
      }
      /**
       * abi method inputs length
       * @param abiMethod FunctionAbi
       * @returns number
       */
      methodInputsLength(abiMethod) {
        return abiMethod.inputs.length;
      }
      /**
       * get method definition from abi
       * @param name string
       * @returns FunctionAbi | undefined
       */
      getMethod(name) {
        const intf = this.abi.find((it) => it.type === "interface");
        return intf.items.find((it) => it.name === name);
      }
      /**
       * Get Abi in legacy format
       * @returns Abi
       */
      getLegacyFormat() {
        return this.abi.flatMap((e) => {
          if (e.type === "interface") {
            return e.items;
          }
          return e;
        });
      }
    };

    // src/utils/calldata/parser/index.ts
    function createAbiParser(abi) {
      const version = getAbiVersion(abi);
      if (version === 0 || version === 1) {
        return new AbiParser1(abi);
      }
      if (version === 2) {
        return new AbiParser2(abi);
      }
      throw Error(`Unsupported ABI version ${version}`);
    }
    function getAbiVersion(abi) {
      if (abi.find((it) => it.type === "interface"))
        return 2;
      if (isCairo1Abi(abi))
        return 1;
      return 0;
    }
    function isNoConstructorValid(method, argsCalldata, abiMethod) {
      return method === "constructor" && !abiMethod && !argsCalldata.length;
    }

    // src/utils/calldata/tuple.ts
    function parseNamedTuple(namedTuple) {
      const name = namedTuple.substring(0, namedTuple.indexOf(":"));
      const type = namedTuple.substring(name.length + ":".length);
      return { name, type };
    }
    function parseSubTuple(s) {
      if (!s.includes("("))
        return { subTuple: [], result: s };
      const subTuple = [];
      let result = "";
      let i = 0;
      while (i < s.length) {
        if (s[i] === "(") {
          let counter = 1;
          const lBracket = i;
          i++;
          while (counter) {
            if (s[i] === ")")
              counter--;
            if (s[i] === "(")
              counter++;
            i++;
          }
          subTuple.push(s.substring(lBracket, i));
          result += " ";
          i--;
        } else {
          result += s[i];
        }
        i++;
      }
      return {
        subTuple,
        result
      };
    }
    function extractCairo0Tuple(type) {
      const cleanType = type.replace(/\s/g, "").slice(1, -1);
      const { subTuple, result } = parseSubTuple(cleanType);
      let recomposed = result.split(",").map((it) => {
        return subTuple.length ? it.replace(" ", subTuple.shift()) : it;
      });
      if (isTypeNamedTuple(type)) {
        recomposed = recomposed.reduce((acc, it) => {
          return acc.concat(parseNamedTuple(it));
        }, []);
      }
      return recomposed;
    }
    function extractCairo1Tuple(type) {
      const cleanType = type.replace(/\s/g, "").slice(1, -1);
      const { subTuple, result } = parseSubTuple(cleanType);
      const recomposed = result.split(",").map((it) => {
        return subTuple.length ? it.replace(" ", subTuple.shift()) : it;
      });
      return recomposed;
    }
    function extractTupleMemberTypes(type) {
      if (isCairo1Type(type)) {
        return extractCairo1Tuple(type);
      }
      return extractCairo0Tuple(type);
    }

    // src/utils/calldata/propertyOrder.ts
    function errorU256(key) {
      return Error(
        `Your object includes the property : ${key}, containing an Uint256 object without the 'low' and 'high' keys.`
      );
    }
    function orderPropsByAbi(unorderedObject, abiOfObject, structs, enums) {
      const orderInput = (unorderedItem, abiType) => {
        if (isTypeArray(abiType)) {
          return orderArray(unorderedItem, abiType);
        }
        if (isTypeEnum(abiType, enums)) {
          const abiObj = enums[abiType];
          return orderEnum(unorderedItem, abiObj);
        }
        if (isTypeTuple(abiType)) {
          return orderTuple(unorderedItem, abiType);
        }
        if (isTypeEthAddress(abiType)) {
          return unorderedItem;
        }
        if (isTypeUint256(abiType)) {
          const u256 = unorderedItem;
          if (typeof u256 !== "object") {
            return u256;
          }
          if (!("low" in u256 && "high" in u256)) {
            throw errorU256(abiType);
          }
          return { low: u256.low, high: u256.high };
        }
        if (isTypeStruct(abiType, structs)) {
          const abiOfStruct = structs[abiType].members;
          return orderStruct(unorderedItem, abiOfStruct);
        }
        return unorderedItem;
      };
      const orderStruct = (unorderedObject2, abiObject) => {
        const orderedObject2 = abiObject.reduce((orderedObject, abiParam) => {
          const setProperty = (value) => Object.defineProperty(orderedObject, abiParam.name, {
            enumerable: true,
            value: value ?? unorderedObject2[abiParam.name]
          });
          if (unorderedObject2[abiParam.name] === "undefined") {
            if (isCairo1Type(abiParam.type) || !isLen(abiParam.name)) {
              throw Error(`Your object needs a property with key : ${abiParam.name} .`);
            }
          }
          setProperty(orderInput(unorderedObject2[abiParam.name], abiParam.type));
          return orderedObject;
        }, {});
        return orderedObject2;
      };
      function orderArray(myArray, abiParam) {
        const typeInArray = getArrayType(abiParam);
        if (typeof myArray === "string") {
          return myArray;
        }
        return myArray.map((myElem) => orderInput(myElem, typeInArray));
      }
      function orderTuple(unorderedObject2, abiParam) {
        const typeList = extractTupleMemberTypes(abiParam);
        const orderedObject2 = typeList.reduce((orderedObject, abiTypeCairoX, index) => {
          const myObjKeys = Object.keys(unorderedObject2);
          const setProperty = (value) => Object.defineProperty(orderedObject, index.toString(), {
            enumerable: true,
            value: value ?? unorderedObject2[myObjKeys[index]]
          });
          const abiType = abiTypeCairoX?.type ? abiTypeCairoX.type : abiTypeCairoX;
          setProperty(orderInput(unorderedObject2[myObjKeys[index]], abiType));
          return orderedObject;
        }, {});
        return orderedObject2;
      }
      const orderEnum = (unorderedObject2, abiObject) => {
        if (isTypeResult(abiObject.name)) {
          const unorderedResult = unorderedObject2;
          const resultOkType = abiObject.name.substring(
            abiObject.name.indexOf("<") + 1,
            abiObject.name.lastIndexOf(",")
          );
          const resultErrType = abiObject.name.substring(
            abiObject.name.indexOf(",") + 1,
            abiObject.name.lastIndexOf(">")
          );
          if (unorderedResult.isOk()) {
            return new CairoResult(
              0 /* Ok */,
              orderInput(unorderedObject2.unwrap(), resultOkType)
            );
          }
          return new CairoResult(
            1 /* Err */,
            orderInput(unorderedObject2.unwrap(), resultErrType)
          );
        }
        if (isTypeOption(abiObject.name)) {
          const unorderedOption = unorderedObject2;
          const resultSomeType = abiObject.name.substring(
            abiObject.name.indexOf("<") + 1,
            abiObject.name.lastIndexOf(">")
          );
          if (unorderedOption.isSome()) {
            return new CairoOption(
              0 /* Some */,
              orderInput(unorderedOption.unwrap(), resultSomeType)
            );
          }
          return new CairoOption(1 /* None */, {});
        }
        const unorderedCustomEnum = unorderedObject2;
        const variants = Object.entries(unorderedCustomEnum.variant);
        const newEntries = variants.map((variant) => {
          if (typeof variant[1] === "undefined") {
            return variant;
          }
          const variantType = abiObject.type.substring(
            abiObject.type.lastIndexOf("<") + 1,
            abiObject.type.lastIndexOf(">")
          );
          if (variantType === "()") {
            return variant;
          }
          return [variant[0], orderInput(unorderedCustomEnum.unwrap(), variantType)];
        });
        return new CairoCustomEnum(Object.fromEntries(newEntries));
      };
      const finalOrderedObject = abiOfObject.reduce((orderedObject, abiParam) => {
        const setProperty = (value) => Object.defineProperty(orderedObject, abiParam.name, {
          enumerable: true,
          value
        });
        if (isLen(abiParam.name) && !isCairo1Type(abiParam.type)) {
          return orderedObject;
        }
        setProperty(orderInput(unorderedObject[abiParam.name], abiParam.type));
        return orderedObject;
      }, {});
      return finalOrderedObject;
    }

    // src/utils/calldata/requestParser.ts
    function parseBaseTypes(type, val) {
      switch (true) {
        case isTypeUint256(type):
          const el_uint256 = uint256(val);
          return [felt(el_uint256.low), felt(el_uint256.high)];
        default:
          return felt(val);
      }
    }
    function parseTuple(element, typeStr) {
      const memberTypes = extractTupleMemberTypes(typeStr);
      const elements = Object.values(element);
      if (elements.length !== memberTypes.length) {
        throw Error(
          `ParseTuple: provided and expected abi tuple size do not match.
      provided: ${elements} 
      expected: ${memberTypes}`
        );
      }
      return memberTypes.map((it, dx) => {
        return {
          element: elements[dx],
          type: it.type ?? it
        };
      });
    }
    function parseUint256(element) {
      if (typeof element === "object") {
        const { low, high } = element;
        return [felt(low), felt(high)];
      }
      const el_uint256 = uint256(element);
      return [felt(el_uint256.low), felt(el_uint256.high)];
    }
    function parseCalldataValue(element, type, structs, enums) {
      if (element === void 0) {
        throw Error(`Missing parameter for type ${type}`);
      }
      if (Array.isArray(element)) {
        const result = [];
        result.push(felt(element.length));
        const arrayType = getArrayType(type);
        return element.reduce((acc, it) => {
          return acc.concat(parseCalldataValue(it, arrayType, structs, enums));
        }, result);
      }
      if (structs[type] && structs[type].members.length) {
        if (isTypeUint256(type)) {
          return parseUint256(element);
        }
        if (type === "core::starknet::eth_address::EthAddress")
          return parseBaseTypes(type, element);
        const { members } = structs[type];
        const subElement = element;
        return members.reduce((acc, it) => {
          return acc.concat(parseCalldataValue(subElement[it.name], it.type, structs, enums));
        }, []);
      }
      if (isTypeTuple(type)) {
        const tupled = parseTuple(element, type);
        return tupled.reduce((acc, it) => {
          const parsedData = parseCalldataValue(it.element, it.type, structs, enums);
          return acc.concat(parsedData);
        }, []);
      }
      if (isTypeUint256(type)) {
        return parseUint256(element);
      }
      if (isTypeEnum(type, enums)) {
        const { variants } = enums[type];
        if (isTypeOption(type)) {
          const myOption = element;
          if (myOption.isSome()) {
            const listTypeVariant2 = variants.find((variant) => variant.name === "Some");
            if (typeof listTypeVariant2 === "undefined") {
              throw Error(`Error in abi : Option has no 'Some' variant.`);
            }
            const typeVariantSome = listTypeVariant2.type;
            if (typeVariantSome === "()") {
              return 0 /* Some */.toString();
            }
            const parsedParameter2 = parseCalldataValue(
              myOption.unwrap(),
              typeVariantSome,
              structs,
              enums
            );
            if (Array.isArray(parsedParameter2)) {
              return [0 /* Some */.toString(), ...parsedParameter2];
            }
            return [0 /* Some */.toString(), parsedParameter2];
          }
          return 1 /* None */.toString();
        }
        if (isTypeResult(type)) {
          const myResult = element;
          if (myResult.isOk()) {
            const listTypeVariant3 = variants.find((variant) => variant.name === "Ok");
            if (typeof listTypeVariant3 === "undefined") {
              throw Error(`Error in abi : Result has no 'Ok' variant.`);
            }
            const typeVariantOk = listTypeVariant3.type;
            if (typeVariantOk === "()") {
              return 0 /* Ok */.toString();
            }
            const parsedParameter3 = parseCalldataValue(
              myResult.unwrap(),
              typeVariantOk,
              structs,
              enums
            );
            if (Array.isArray(parsedParameter3)) {
              return [0 /* Ok */.toString(), ...parsedParameter3];
            }
            return [0 /* Ok */.toString(), parsedParameter3];
          }
          const listTypeVariant2 = variants.find((variant) => variant.name === "Err");
          if (typeof listTypeVariant2 === "undefined") {
            throw Error(`Error in abi : Result has no 'Err' variant.`);
          }
          const typeVariantErr = listTypeVariant2.type;
          if (typeVariantErr === "()") {
            return 1 /* Err */.toString();
          }
          const parsedParameter2 = parseCalldataValue(myResult.unwrap(), typeVariantErr, structs, enums);
          if (Array.isArray(parsedParameter2)) {
            return [1 /* Err */.toString(), ...parsedParameter2];
          }
          return [1 /* Err */.toString(), parsedParameter2];
        }
        const myEnum = element;
        const activeVariant = myEnum.activeVariant();
        const listTypeVariant = variants.find((variant) => variant.name === activeVariant);
        if (typeof listTypeVariant === "undefined") {
          throw Error(`Not find in abi : Enum has no '${activeVariant}' variant.`);
        }
        const typeActiveVariant = listTypeVariant.type;
        const numActiveVariant = variants.findIndex((variant) => variant.name === activeVariant);
        if (typeActiveVariant === "()") {
          return numActiveVariant.toString();
        }
        const parsedParameter = parseCalldataValue(myEnum.unwrap(), typeActiveVariant, structs, enums);
        if (Array.isArray(parsedParameter)) {
          return [numActiveVariant.toString(), ...parsedParameter];
        }
        return [numActiveVariant.toString(), parsedParameter];
      }
      if (typeof element === "object") {
        throw Error(`Parameter ${element} do not align with abi parameter ${type}`);
      }
      return parseBaseTypes(type, element);
    }
    function parseCalldataField(argsIterator, input, structs, enums) {
      const { name, type } = input;
      let { value } = argsIterator.next();
      switch (true) {
        case isTypeArray(type):
          if (!Array.isArray(value) && !isText(value)) {
            throw Error(`ABI expected parameter ${name} to be array or long string, got ${value}`);
          }
          if (typeof value === "string") {
            value = splitLongString(value);
          }
          return parseCalldataValue(value, input.type, structs, enums);
        case type === "core::starknet::eth_address::EthAddress":
          return parseBaseTypes(type, value);
        case (isTypeStruct(type, structs) || isTypeTuple(type) || isTypeUint256(type)):
          return parseCalldataValue(value, type, structs, enums);
        case isTypeEnum(type, enums):
          return parseCalldataValue(
            value,
            type,
            structs,
            enums
          );
        default:
          return parseBaseTypes(type, value);
      }
    }

    // src/utils/calldata/responseParser.ts
    function parseBaseTypes2(type, it) {
      let temp;
      switch (true) {
        case isTypeBool(type):
          temp = it.next().value;
          return Boolean(BigInt(temp));
        case isTypeUint256(type):
          const low = it.next().value;
          const high = it.next().value;
          return uint256ToBN({ low, high });
        case type === "core::starknet::eth_address::EthAddress":
          temp = it.next().value;
          return BigInt(temp);
        default:
          temp = it.next().value;
          return BigInt(temp);
      }
    }
    function parseResponseValue(responseIterator, element, structs, enums) {
      if (element.type === "()") {
        return {};
      }
      if (isTypeUint256(element.type)) {
        const low = responseIterator.next().value;
        const high = responseIterator.next().value;
        return uint256ToBN({ low, high });
      }
      if (isTypeArray(element.type)) {
        const parsedDataArr = [];
        const el = { name: "", type: getArrayType(element.type) };
        const len = BigInt(responseIterator.next().value);
        while (parsedDataArr.length < len) {
          parsedDataArr.push(parseResponseValue(responseIterator, el, structs, enums));
        }
        return parsedDataArr;
      }
      if (structs && element.type in structs && structs[element.type]) {
        if (element.type === "core::starknet::eth_address::EthAddress") {
          return parseBaseTypes2(element.type, responseIterator);
        }
        return structs[element.type].members.reduce((acc, el) => {
          acc[el.name] = parseResponseValue(responseIterator, el, structs, enums);
          return acc;
        }, {});
      }
      if (enums && element.type in enums && enums[element.type]) {
        const variantNum = Number(responseIterator.next().value);
        const rawEnum = enums[element.type].variants.reduce((acc, variant, num) => {
          if (num === variantNum) {
            acc[variant.name] = parseResponseValue(
              responseIterator,
              { name: "", type: variant.type },
              structs,
              enums
            );
            return acc;
          }
          acc[variant.name] = void 0;
          return acc;
        }, {});
        if (element.type.startsWith("core::option::Option")) {
          const content = variantNum === 0 /* Some */ ? rawEnum.Some : void 0;
          return new CairoOption(variantNum, content);
        }
        if (element.type.startsWith("core::result::Result")) {
          let content;
          if (variantNum === 0 /* Ok */) {
            content = rawEnum.Ok;
          } else {
            content = rawEnum.Err;
          }
          return new CairoResult(variantNum, content);
        }
        const customEnum = new CairoCustomEnum(rawEnum);
        return customEnum;
      }
      if (isTypeTuple(element.type)) {
        const memberTypes = extractTupleMemberTypes(element.type);
        return memberTypes.reduce((acc, it, idx) => {
          const name = it?.name ? it.name : idx;
          const type = it?.type ? it.type : it;
          const el = { name, type };
          acc[name] = parseResponseValue(responseIterator, el, structs, enums);
          return acc;
        }, {});
      }
      if (isTypeArray(element.type)) {
        const parsedDataArr = [];
        const el = { name: "", type: getArrayType(element.type) };
        const len = BigInt(responseIterator.next().value);
        while (parsedDataArr.length < len) {
          parsedDataArr.push(parseResponseValue(responseIterator, el, structs, enums));
        }
        return parsedDataArr;
      }
      return parseBaseTypes2(element.type, responseIterator);
    }
    function responseParser(responseIterator, output, structs, enums, parsedResult) {
      const { name, type } = output;
      let temp;
      switch (true) {
        case isLen(name):
          temp = responseIterator.next().value;
          return BigInt(temp);
        case (structs && type in structs || isTypeTuple(type)):
          return parseResponseValue(responseIterator, output, structs, enums);
        case (enums && isTypeEnum(type, enums)):
          return parseResponseValue(responseIterator, output, structs, enums);
        case isTypeArray(type):
          if (isCairo1Type(type)) {
            return parseResponseValue(responseIterator, output, structs, enums);
          }
          const parsedDataArr = [];
          if (parsedResult && parsedResult[`${name}_len`]) {
            const arrLen = parsedResult[`${name}_len`];
            while (parsedDataArr.length < arrLen) {
              parsedDataArr.push(
                parseResponseValue(
                  responseIterator,
                  { name, type: output.type.replace("*", "") },
                  structs,
                  enums
                )
              );
            }
          }
          return parsedDataArr;
        default:
          return parseBaseTypes2(type, responseIterator);
      }
    }

    // src/utils/calldata/validate.ts
    var validateFelt = (parameter, input) => {
      assert(
        typeof parameter === "string" || typeof parameter === "number" || typeof parameter === "bigint",
        `Validate: arg ${input.name} should be a felt typed as (String, Number or BigInt)`
      );
      if (typeof parameter === "string" && !isHex(parameter))
        return;
      const param = BigInt(parameter.toString(10));
      assert(
        // from : https://github.com/starkware-libs/starknet-specs/blob/29bab650be6b1847c92d4461d4c33008b5e50b1a/api/starknet_api_openrpc.json#L1266
        param >= 0n && param <= 2n ** 252n - 1n,
        `Validate: arg ${input.name} cairo typed ${input.type} should be in range [0, 2^252-1]`
      );
    };
    var validateUint = (parameter, input) => {
      if (typeof parameter === "number") {
        assert(
          parameter <= Number.MAX_SAFE_INTEGER,
          `Validation: Parameter is to large to be typed as Number use (BigInt or String)`
        );
      }
      assert(
        typeof parameter === "string" || typeof parameter === "number" || typeof parameter === "bigint" || typeof parameter === "object" && "low" in parameter && "high" in parameter,
        `Validate: arg ${input.name} of cairo type ${input.type} should be type (String, Number or BigInt), but is ${typeof parameter} ${parameter}.`
      );
      const param = typeof parameter === "object" ? uint256ToBN(parameter) : toBigInt(parameter);
      switch (input.type) {
        case "core::integer::u8" /* u8 */:
          assert(
            param >= 0n && param <= 255n,
            `Validate: arg ${input.name} cairo typed ${input.type} should be in range [0 - 255]`
          );
          break;
        case "core::integer::u16" /* u16 */:
          assert(
            param >= 0n && param <= 65535n,
            `Validate: arg ${input.name} cairo typed ${input.type} should be in range [0, 65535]`
          );
          break;
        case "core::integer::u32" /* u32 */:
          assert(
            param >= 0n && param <= 4294967295n,
            `Validate: arg ${input.name} cairo typed ${input.type} should be in range [0, 4294967295]`
          );
          break;
        case "core::integer::u64" /* u64 */:
          assert(
            param >= 0n && param <= 2n ** 64n - 1n,
            `Validate: arg ${input.name} cairo typed ${input.type} should be in range [0, 2^64-1]`
          );
          break;
        case "core::integer::u128" /* u128 */:
          assert(
            param >= 0n && param <= 2n ** 128n - 1n,
            `Validate: arg ${input.name} cairo typed ${input.type} should be in range [0, 2^128-1]`
          );
          break;
        case "core::integer::u256" /* u256 */:
          assert(
            param >= 0n && param <= 2n ** 256n - 1n,
            `Validate: arg ${input.name} is ${input.type} 0 - 2^256-1`
          );
          break;
        case "core::starknet::class_hash::ClassHash" /* ClassHash */:
          assert(
            // from : https://github.com/starkware-libs/starknet-specs/blob/29bab650be6b1847c92d4461d4c33008b5e50b1a/api/starknet_api_openrpc.json#L1670
            param >= 0n && param <= 2n ** 252n - 1n,
            `Validate: arg ${input.name} cairo typed ${input.type} should be in range [0, 2^252-1]`
          );
          break;
        case "core::starknet::contract_address::ContractAddress" /* ContractAddress */:
          assert(
            // from : https://github.com/starkware-libs/starknet-specs/blob/29bab650be6b1847c92d4461d4c33008b5e50b1a/api/starknet_api_openrpc.json#L1245
            param >= 0n && param <= 2n ** 252n - 1n,
            `Validate: arg ${input.name} cairo typed ${input.type} should be in range [0, 2^252-1]`
          );
          break;
      }
    };
    var validateBool = (parameter, input) => {
      assert(
        typeof parameter === "boolean",
        `Validate: arg ${input.name} of cairo type ${input.type} should be type (Boolean)`
      );
    };
    var validateStruct = (parameter, input, structs) => {
      if (input.type === "core::integer::u256" /* u256 */) {
        validateUint(parameter, input);
        return;
      }
      if (input.type === "core::starknet::eth_address::EthAddress") {
        assert(
          typeof parameter !== "object",
          `EthAddress type is waiting a BigNumberish. Got ${parameter}`
        );
        const param = BigInt(parameter.toString(10));
        assert(
          // from : https://github.com/starkware-libs/starknet-specs/blob/29bab650be6b1847c92d4461d4c33008b5e50b1a/api/starknet_api_openrpc.json#L1259
          param >= 0n && param <= 2n ** 160n - 1n,
          `Validate: arg ${input.name} cairo typed ${input.type} should be in range [0, 2^160-1]`
        );
        return;
      }
      assert(
        typeof parameter === "object" && !Array.isArray(parameter),
        `Validate: arg ${input.name} is cairo type struct (${input.type}), and should be defined as js object (not array)`
      );
      structs[input.type].members.forEach(({ name }) => {
        assert(
          Object.keys(parameter).includes(name),
          `Validate: arg ${input.name} should have a property ${name}`
        );
      });
    };
    var validateEnum = (parameter, input) => {
      assert(
        typeof parameter === "object" && !Array.isArray(parameter),
        `Validate: arg ${input.name} is cairo type Enum (${input.type}), and should be defined as js object (not array)`
      );
      const methodsKeys = Object.getOwnPropertyNames(Object.getPrototypeOf(parameter));
      const keys = [...Object.getOwnPropertyNames(parameter), ...methodsKeys];
      if (isTypeOption(input.type) && keys.includes("isSome") && keys.includes("isNone")) {
        return;
      }
      if (isTypeResult(input.type) && keys.includes("isOk") && keys.includes("isErr")) {
        return;
      }
      if (keys.includes("variant") && keys.includes("activeVariant")) {
        return;
      }
      throw new Error(
        `Validate Enum: argument ${input.name}, type ${input.type}, value received ${parameter}, is not an Enum.`
      );
    };
    var validateTuple = (parameter, input) => {
      assert(
        typeof parameter === "object" && !Array.isArray(parameter),
        `Validate: arg ${input.name} should be a tuple (defined as object)`
      );
    };
    var validateArray = (parameter, input, structs, enums) => {
      const baseType = getArrayType(input.type);
      if (isTypeFelt(baseType) && isLongText(parameter)) {
        return;
      }
      assert(Array.isArray(parameter), `Validate: arg ${input.name} should be an Array`);
      switch (true) {
        case isTypeFelt(baseType):
          parameter.forEach((param) => validateFelt(param, input));
          break;
        case isTypeTuple(baseType):
          parameter.forEach((it) => validateTuple(it, { name: input.name, type: baseType }));
          break;
        case isTypeArray(baseType):
          parameter.forEach(
            (param) => validateArray(param, { name: "", type: baseType }, structs, enums)
          );
          break;
        case isTypeStruct(baseType, structs):
          parameter.forEach(
            (it) => validateStruct(it, { name: input.name, type: baseType }, structs)
          );
          break;
        case isTypeEnum(baseType, enums):
          parameter.forEach((it) => validateEnum(it, { name: input.name, type: baseType }));
          break;
        case (isTypeUint(baseType) || isTypeLiteral(baseType)):
          parameter.forEach((param) => validateUint(param, input));
          break;
        case isTypeBool(baseType):
          parameter.forEach((param) => validateBool(param, input));
          break;
        default:
          throw new Error(
            `Validate Unhandled: argument ${input.name}, type ${input.type}, value ${parameter}`
          );
      }
    };
    function validateFields(abiMethod, args, structs, enums) {
      abiMethod.inputs.reduce((acc, input) => {
        const parameter = args[acc];
        switch (true) {
          case isLen(input.name):
            return acc;
          case isTypeFelt(input.type):
            validateFelt(parameter, input);
            break;
          case (isTypeUint(input.type) || isTypeLiteral(input.type)):
            validateUint(parameter, input);
            break;
          case isTypeBool(input.type):
            validateBool(parameter, input);
            break;
          case isTypeArray(input.type):
            validateArray(parameter, input, structs, enums);
            break;
          case isTypeStruct(input.type, structs):
            validateStruct(parameter, input, structs);
            break;
          case isTypeEnum(input.type, enums):
            validateEnum(parameter, input);
            break;
          case isTypeTuple(input.type):
            validateTuple(parameter, input);
            break;
          default:
            throw new Error(
              `Validate Unhandled: argument ${input.name}, type ${input.type}, value ${parameter}`
            );
        }
        return acc + 1;
      }, 0);
    }

    // src/utils/calldata/index.ts
    var CallData = class {
      abi;
      parser;
      structs;
      enums;
      constructor(abi) {
        this.structs = CallData.getAbiStruct(abi);
        this.enums = CallData.getAbiEnum(abi);
        this.parser = createAbiParser(abi);
        this.abi = this.parser.getLegacyFormat();
      }
      /**
       * Validate arguments passed to the method as corresponding to the ones in the abi
       * @param type ValidateType - type of the method
       * @param method string - name of the method
       * @param args ArgsOrCalldata - arguments that are passed to the method
       */
      validate(type, method, args = []) {
        if (type !== "DEPLOY" /* DEPLOY */) {
          const invocableFunctionNames = this.abi.filter((abi) => {
            if (abi.type !== "function")
              return false;
            const isView = abi.stateMutability === "view" || abi.state_mutability === "view";
            return type === "INVOKE" /* INVOKE */ ? !isView : isView;
          }).map((abi) => abi.name);
          assert(
            invocableFunctionNames.includes(method),
            `${type === "INVOKE" /* INVOKE */ ? "invocable" : "viewable"} method not found in abi`
          );
        }
        const abiMethod = this.abi.find(
          (abi) => type === "DEPLOY" /* DEPLOY */ ? abi.name === method && abi.type === "constructor" : abi.name === method && abi.type === "function"
        );
        if (isNoConstructorValid(method, args, abiMethod)) {
          return;
        }
        const inputsLength = this.parser.methodInputsLength(abiMethod);
        if (args.length !== inputsLength) {
          throw Error(
            `Invalid number of arguments, expected ${inputsLength} arguments, but got ${args.length}`
          );
        }
        validateFields(abiMethod, args, this.structs, this.enums);
      }
      /**
       * Compile contract callData with abi
       * Parse the calldata by using input fields from the abi for that method
       * @param method string - method name
       * @param args RawArgs - arguments passed to the method. Can be an array of arguments (in the order of abi definition), or an object constructed in conformity with abi (in this case, the parameter can be in a wrong order).
       * @return Calldata - parsed arguments in format that contract is expecting
       * @example
       * ```typescript
       * const calldata = myCallData.compile("constructor", ["0x34a", [1, 3n]]);
       * ```
       * ```typescript
       * const calldata2 = myCallData.compile("constructor", {list:[1, 3n], balance:"0x34"}); // wrong order is valid
       * ```
       */
      compile(method, argsCalldata) {
        const abiMethod = this.abi.find((abiFunction) => abiFunction.name === method);
        if (isNoConstructorValid(method, argsCalldata, abiMethod)) {
          return [];
        }
        let args;
        if (Array.isArray(argsCalldata)) {
          args = argsCalldata;
        } else {
          const orderedObject = orderPropsByAbi(
            argsCalldata,
            abiMethod.inputs,
            this.structs,
            this.enums
          );
          args = Object.values(orderedObject);
          validateFields(abiMethod, args, this.structs, this.enums);
        }
        const argsIterator = args[Symbol.iterator]();
        const callArray = abiMethod.inputs.reduce(
          (acc, input) => isLen(input.name) && !isCairo1Type(input.type) ? acc : acc.concat(parseCalldataField(argsIterator, input, this.structs, this.enums)),
          []
        );
        Object.defineProperty(callArray, "__compiled__", {
          enumerable: false,
          writable: false,
          value: true
        });
        return callArray;
      }
      /**
       * Compile contract callData without abi
       * @param rawArgs RawArgs representing cairo method arguments or string array of compiled data
       * @returns Calldata
       */
      static compile(rawArgs) {
        const createTree = (obj) => {
          const getEntries = (o, prefix = ".") => {
            const oe = Array.isArray(o) ? [o.length.toString(), ...o] : o;
            return Object.entries(oe).flatMap(([k, v]) => {
              let value = v;
              if (k === "entrypoint")
                value = getSelectorFromName(value);
              else if (isLongText(value))
                value = splitLongString(value);
              const kk = Array.isArray(oe) && k === "0" ? "$$len" : k;
              if (isBigInt(value))
                return [[`${prefix}${kk}`, felt(value)]];
              if (Object(value) === value) {
                const methodsKeys = Object.getOwnPropertyNames(Object.getPrototypeOf(value));
                const keys = [...Object.getOwnPropertyNames(value), ...methodsKeys];
                if (keys.includes("isSome") && keys.includes("isNone")) {
                  const myOption = value;
                  const variantNb = myOption.isSome() ? 0 /* Some */ : 1 /* None */;
                  if (myOption.isSome())
                    return getEntries({ 0: variantNb, 1: myOption.unwrap() }, `${prefix}${kk}.`);
                  return [[`${prefix}${kk}`, felt(variantNb)]];
                }
                if (keys.includes("isOk") && keys.includes("isErr")) {
                  const myResult = value;
                  const variantNb = myResult.isOk() ? 0 /* Ok */ : 1 /* Err */;
                  return getEntries({ 0: variantNb, 1: myResult.unwrap() }, `${prefix}${kk}.`);
                }
                if (keys.includes("variant") && keys.includes("activeVariant")) {
                  const myEnum = value;
                  const activeVariant = myEnum.activeVariant();
                  const listVariants = Object.keys(myEnum.variant);
                  const activeVariantNb = listVariants.findIndex(
                    (variant) => variant === activeVariant
                  );
                  if (typeof myEnum.unwrap() === "object" && Object.keys(myEnum.unwrap()).length === 0) {
                    return [[`${prefix}${kk}`, felt(activeVariantNb)]];
                  }
                  return getEntries({ 0: activeVariantNb, 1: myEnum.unwrap() }, `${prefix}${kk}.`);
                }
                return getEntries(value, `${prefix}${kk}.`);
              }
              return [[`${prefix}${kk}`, felt(value)]];
            });
          };
          const result = Object.fromEntries(getEntries(obj));
          return result;
        };
        let callTreeArray;
        if (!Array.isArray(rawArgs)) {
          const callTree = createTree(rawArgs);
          callTreeArray = Object.values(callTree);
        } else {
          const callObj = { ...rawArgs };
          const callTree = createTree(callObj);
          callTreeArray = Object.values(callTree);
        }
        Object.defineProperty(callTreeArray, "__compiled__", {
          enumerable: false,
          writable: false,
          value: true
        });
        return callTreeArray;
      }
      /**
       * Parse elements of the response array and structuring them into response object
       * @param method string - method name
       * @param response string[] - response from the method
       * @return Result - parsed response corresponding to the abi
       */
      parse(method, response) {
        const { outputs } = this.abi.find((abi) => abi.name === method);
        const responseIterator = response.flat()[Symbol.iterator]();
        const parsed = outputs.flat().reduce((acc, output, idx) => {
          const propName = output.name ?? idx;
          acc[propName] = responseParser(responseIterator, output, this.structs, this.enums, acc);
          if (acc[propName] && acc[`${propName}_len`]) {
            delete acc[`${propName}_len`];
          }
          return acc;
        }, {});
        return Object.keys(parsed).length === 1 && 0 in parsed ? parsed[0] : parsed;
      }
      /**
       * Format cairo method response data to native js values based on provided format schema
       * @param method string - cairo method name
       * @param response string[] - cairo method response
       * @param format object - formatter object schema
       * @returns Result - parsed and formatted response object
       */
      format(method, response, format) {
        const parsed = this.parse(method, response);
        return formatter(parsed, format);
      }
      /**
       * Helper to extract structs from abi
       * @param abi Abi
       * @returns AbiStructs - structs from abi
       */
      static getAbiStruct(abi) {
        return abi.filter((abiEntry) => abiEntry.type === "struct").reduce(
          (acc, abiEntry) => ({
            ...acc,
            [abiEntry.name]: abiEntry
          }),
          {}
        );
      }
      /**
       * Helper to extract enums from abi
       * @param abi Abi
       * @returns AbiEnums - enums from abi
       */
      static getAbiEnum(abi) {
        const fullEnumList = abi.filter((abiEntry) => abiEntry.type === "enum").reduce(
          (acc, abiEntry) => ({
            ...acc,
            [abiEntry.name]: abiEntry
          }),
          {}
        );
        delete fullEnumList["core::bool"];
        return fullEnumList;
      }
      /**
       * Helper: Compile HexCalldata | RawCalldata | RawArgs
       * @param rawCalldata HexCalldata | RawCalldata | RawArgs
       * @returns Calldata
       */
      static toCalldata(rawCalldata = []) {
        return CallData.compile(rawCalldata);
      }
      /**
       * Helper: Convert raw to HexCalldata
       * @param raw HexCalldata | RawCalldata | RawArgs
       * @returns HexCalldata
       */
      static toHex(raw = []) {
        const calldata = CallData.compile(raw);
        return calldata.map((it) => toHex(it));
      }
      /**
       * Parse the elements of a contract response and structure them into one or several Result.
       * In Cairo 0, arrays are not supported.
       * @param typeCairo string or string[] - Cairo type name, ex : "hello::hello::UserData"
       * @param response string[] - serialized data corresponding to typeCairo.
       * @return Result or Result[] - parsed response corresponding to typeData.
       * @example
       * const res2=helloCallData.decodeParameters("hello::hello::UserData",["0x123456","0x1"]);
       * result = { address: 1193046n, is_claimed: true }
       */
      decodeParameters(typeCairo, response) {
        const typeCairoArray = Array.isArray(typeCairo) ? typeCairo : [typeCairo];
        const responseIterator = response.flat()[Symbol.iterator]();
        const decodedArray = typeCairoArray.map(
          (typeParam) => responseParser(
            responseIterator,
            { name: "", type: typeParam },
            this.structs,
            this.enums
          )
        );
        return decodedArray.length === 1 ? decodedArray[0] : decodedArray;
      }
    };

    // src/utils/hash.ts
    var hash_exports = {};
    __export(hash_exports, {
      calculateContractAddressFromHash: () => calculateContractAddressFromHash,
      calculateDeclareTransactionHash: () => calculateDeclareTransactionHash,
      calculateDeployAccountTransactionHash: () => calculateDeployAccountTransactionHash,
      calculateDeployTransactionHash: () => calculateDeployTransactionHash,
      calculateTransactionHash: () => calculateTransactionHash,
      calculateTransactionHashCommon: () => calculateTransactionHashCommon,
      computeCompiledClassHash: () => computeCompiledClassHash,
      computeContractClassHash: () => computeContractClassHash,
      computeHashOnElements: () => computeHashOnElements,
      computeLegacyContractClassHash: () => computeLegacyContractClassHash,
      computePedersenHash: () => computePedersenHash,
      computePedersenHashOnElements: () => computePedersenHashOnElements,
      computePoseidonHash: () => computePoseidonHash,
      computePoseidonHashOnElements: () => computePoseidonHashOnElements,
      computeSierraContractClassHash: () => computeSierraContractClassHash,
      default: () => computeHintedClassHash,
      feeTransactionVersion: () => feeTransactionVersion,
      feeTransactionVersion_2: () => feeTransactionVersion_2,
      formatSpaces: () => formatSpaces,
      getSelector: () => getSelector,
      getSelectorFromName: () => getSelectorFromName,
      getVersionsByType: () => getVersionsByType,
      keccakBn: () => keccakBn,
      poseidon: () => poseidon$1,
      starknetKeccak: () => starknetKeccak,
      transactionVersion: () => transactionVersion,
      transactionVersion_2: () => transactionVersion_2
    });

    // src/utils/ec.ts
    var ec_exports = {};
    __export(ec_exports, {
      starkCurve: () => starkCurve,
      weierstrass: () => weierstrass$1
    });

    // src/utils/json.ts
    var json_exports = {};
    __export(json_exports, {
      parse: () => parse2,
      parseAlwaysAsBig: () => parseAlwaysAsBig,
      stringify: () => stringify2,
      stringifyAlwaysAsBig: () => stringifyAlwaysAsBig
    });
    var parseIntAsNumberOrBigInt = (x) => {
      if (!isInteger(x))
        return parseFloat(x);
      const v = parseInt(x, 10);
      return Number.isSafeInteger(v) ? v : BigInt(x);
    };
    var parse2 = (x) => parse(String(x), void 0, parseIntAsNumberOrBigInt);
    var parseAlwaysAsBig = (x) => parse(String(x), void 0, parseNumberAndBigInt);
    var stringify2 = (value, replacer, space, numberStringifiers) => stringify(value, replacer, space, numberStringifiers);
    var stringifyAlwaysAsBig = stringify2;
    var transactionVersion = BN_TRANSACTION_VERSION_1;
    var transactionVersion_2 = BN_TRANSACTION_VERSION_2;
    var feeTransactionVersion = BN_FEE_TRANSACTION_VERSION_1;
    var feeTransactionVersion_2 = BN_FEE_TRANSACTION_VERSION_2;
    function getVersionsByType(versionType) {
      return versionType === "fee" ? { v1: feeTransactionVersion, v2: feeTransactionVersion_2 } : { v1: transactionVersion, v2: transactionVersion_2 };
    }
    function computePedersenHash(a, b) {
      return pedersen(BigInt(a), BigInt(b));
    }
    function computePoseidonHash(a, b) {
      return toHex(poseidonHash(BigInt(a), BigInt(b)));
    }
    function computeHashOnElements(data) {
      return [...data, data.length].reduce((x, y) => pedersen(BigInt(x), BigInt(y)), 0).toString();
    }
    var computePedersenHashOnElements = computeHashOnElements;
    function computePoseidonHashOnElements(data) {
      return toHex(poseidonHashMany(data.map((x) => BigInt(x))));
    }
    function calculateTransactionHashCommon(txHashPrefix, version, contractAddress, entryPointSelector, calldata, maxFee, chainId, additionalData = []) {
      const calldataHash = computeHashOnElements(calldata);
      const dataToHash = [
        txHashPrefix,
        version,
        contractAddress,
        entryPointSelector,
        calldataHash,
        maxFee,
        chainId,
        ...additionalData
      ];
      return computeHashOnElements(dataToHash);
    }
    function calculateDeployTransactionHash(contractAddress, constructorCalldata, version, chainId, constructorName = "constructor") {
      return calculateTransactionHashCommon(
        "0x6465706c6f79" /* DEPLOY */,
        version,
        contractAddress,
        getSelectorFromName(constructorName),
        constructorCalldata,
        0,
        chainId
      );
    }
    function calculateDeclareTransactionHash(classHash, senderAddress, version, maxFee, chainId, nonce, compiledClassHash) {
      return calculateTransactionHashCommon(
        "0x6465636c617265" /* DECLARE */,
        version,
        senderAddress,
        0,
        [classHash],
        maxFee,
        chainId,
        [nonce, ...compiledClassHash ? [compiledClassHash] : []]
      );
    }
    function calculateDeployAccountTransactionHash(contractAddress, classHash, constructorCalldata, salt, version, maxFee, chainId, nonce) {
      const calldata = [classHash, salt, ...constructorCalldata];
      return calculateTransactionHashCommon(
        "0x6465706c6f795f6163636f756e74" /* DEPLOY_ACCOUNT */,
        version,
        contractAddress,
        0,
        calldata,
        maxFee,
        chainId,
        [nonce]
      );
    }
    function calculateTransactionHash(contractAddress, version, calldata, maxFee, chainId, nonce) {
      return calculateTransactionHashCommon(
        "0x696e766f6b65" /* INVOKE */,
        version,
        contractAddress,
        0,
        calldata,
        maxFee,
        chainId,
        [nonce]
      );
    }
    function calculateContractAddressFromHash(salt, classHash, constructorCalldata, deployerAddress) {
      const compiledCalldata = CallData.compile(constructorCalldata);
      const constructorCalldataHash = computeHashOnElements(compiledCalldata);
      const CONTRACT_ADDRESS_PREFIX = felt("0x535441524b4e45545f434f4e54524143545f41444452455353");
      const hash = computeHashOnElements([
        CONTRACT_ADDRESS_PREFIX,
        deployerAddress,
        salt,
        classHash,
        constructorCalldataHash
      ]);
      return toHex(BigInt(hash) % ADDR_BOUND);
    }
    function nullSkipReplacer(key, value) {
      if (key === "attributes" || key === "accessible_scopes") {
        return Array.isArray(value) && value.length === 0 ? void 0 : value;
      }
      if (key === "debug_info") {
        return null;
      }
      return value === null ? void 0 : value;
    }
    function formatSpaces(json2) {
      let insideQuotes = false;
      const newString = [];
      for (const char of json2) {
        if (char === '"' && (newString.length > 0 && newString.slice(-1)[0] === "\\") === false) {
          insideQuotes = !insideQuotes;
        }
        if (insideQuotes) {
          newString.push(char);
        } else {
          newString.push(char === ":" ? ": " : char === "," ? ", " : char);
        }
      }
      return newString.join("");
    }
    function computeHintedClassHash(compiledContract) {
      const { abi, program } = compiledContract;
      const contractClass = { abi, program };
      const serializedJson = formatSpaces(stringify2(contractClass, nullSkipReplacer));
      return addHexPrefix(keccak(utf8ToArray(serializedJson)).toString(16));
    }
    function computeLegacyContractClassHash(contract) {
      const compiledContract = typeof contract === "string" ? parse2(contract) : contract;
      const apiVersion = toHex(API_VERSION);
      const externalEntryPointsHash = computeHashOnElements(
        compiledContract.entry_points_by_type.EXTERNAL.flatMap((e) => [e.selector, e.offset])
      );
      const l1HandlerEntryPointsHash = computeHashOnElements(
        compiledContract.entry_points_by_type.L1_HANDLER.flatMap((e) => [e.selector, e.offset])
      );
      const constructorEntryPointHash = computeHashOnElements(
        compiledContract.entry_points_by_type.CONSTRUCTOR.flatMap((e) => [e.selector, e.offset])
      );
      const builtinsHash = computeHashOnElements(
        compiledContract.program.builtins.map((s) => encodeShortString(s))
      );
      const hintedClassHash = computeHintedClassHash(compiledContract);
      const dataHash = computeHashOnElements(compiledContract.program.data);
      return computeHashOnElements([
        apiVersion,
        externalEntryPointsHash,
        l1HandlerEntryPointsHash,
        constructorEntryPointHash,
        builtinsHash,
        hintedClassHash,
        dataHash
      ]);
    }
    function hashBuiltins(builtins) {
      return poseidonHashMany(
        builtins.flatMap((it) => {
          return BigInt(encodeShortString(it));
        })
      );
    }
    function hashEntryPoint(data) {
      const base = data.flatMap((it) => {
        return [BigInt(it.selector), BigInt(it.offset), hashBuiltins(it.builtins)];
      });
      return poseidonHashMany(base);
    }
    function computeCompiledClassHash(casm) {
      const COMPILED_CLASS_VERSION = "COMPILED_CLASS_V1";
      const compiledClassVersion = BigInt(encodeShortString(COMPILED_CLASS_VERSION));
      const externalEntryPointsHash = hashEntryPoint(casm.entry_points_by_type.EXTERNAL);
      const l1Handlers = hashEntryPoint(casm.entry_points_by_type.L1_HANDLER);
      const constructor = hashEntryPoint(casm.entry_points_by_type.CONSTRUCTOR);
      const bytecode = poseidonHashMany(casm.bytecode.map((it) => BigInt(it)));
      return toHex(
        poseidonHashMany([
          compiledClassVersion,
          externalEntryPointsHash,
          l1Handlers,
          constructor,
          bytecode
        ])
      );
    }
    function hashEntryPointSierra(data) {
      const base = data.flatMap((it) => {
        return [BigInt(it.selector), BigInt(it.function_idx)];
      });
      return poseidonHashMany(base);
    }
    function hashAbi(sierra) {
      const indentString = formatSpaces(stringify2(sierra.abi, null));
      return BigInt(addHexPrefix(keccak(utf8ToArray(indentString)).toString(16)));
    }
    function computeSierraContractClassHash(sierra) {
      const CONTRACT_CLASS_VERSION = "CONTRACT_CLASS_V0.1.0";
      const compiledClassVersion = BigInt(encodeShortString(CONTRACT_CLASS_VERSION));
      const externalEntryPointsHash = hashEntryPointSierra(sierra.entry_points_by_type.EXTERNAL);
      const l1Handlers = hashEntryPointSierra(sierra.entry_points_by_type.L1_HANDLER);
      const constructor = hashEntryPointSierra(sierra.entry_points_by_type.CONSTRUCTOR);
      const abiHash = hashAbi(sierra);
      const sierraProgram = poseidonHashMany(sierra.sierra_program.map((it) => BigInt(it)));
      return toHex(
        poseidonHashMany([
          compiledClassVersion,
          externalEntryPointsHash,
          l1Handlers,
          constructor,
          abiHash,
          sierraProgram
        ])
      );
    }
    function computeContractClassHash(contract) {
      const compiledContract = typeof contract === "string" ? parse2(contract) : contract;
      if ("sierra_program" in compiledContract) {
        return computeSierraContractClassHash(compiledContract);
      }
      return computeLegacyContractClassHash(compiledContract);
    }

    // src/utils/stark.ts
    var stark_exports = {};
    __export(stark_exports, {
      compressProgram: () => compressProgram,
      decompressProgram: () => decompressProgram,
      estimatedFeeToMaxFee: () => estimatedFeeToMaxFee,
      formatSignature: () => formatSignature,
      makeAddress: () => makeAddress,
      randomAddress: () => randomAddress,
      signatureToDecimalArray: () => signatureToDecimalArray,
      signatureToHexArray: () => signatureToHexArray
    });
    function compressProgram(jsonProgram) {
      const stringified = typeof jsonProgram === "string" ? jsonProgram : stringify2(jsonProgram);
      const compressedProgram = gzip_1(stringified);
      return btoaUniversal(compressedProgram);
    }
    function decompressProgram(base642) {
      if (Array.isArray(base642))
        return base642;
      const decompressed = arrayBufferToString(ungzip_1(atobUniversal(base642)));
      return parse2(decompressed);
    }
    function randomAddress() {
      const randomKeyPair = utils$1.randomPrivateKey();
      return getStarkKey(randomKeyPair);
    }
    function makeAddress(input) {
      return addHexPrefix(input).toLowerCase();
    }
    function formatSignature(sig) {
      if (!sig)
        throw Error("formatSignature: provided signature is undefined");
      if (Array.isArray(sig)) {
        return sig.map((it) => toHex(it));
      }
      try {
        const { r, s } = sig;
        return [toHex(r), toHex(s)];
      } catch (e) {
        throw new Error("Signature need to be weierstrass.SignatureType or an array for custom");
      }
    }
    function signatureToDecimalArray(sig) {
      return bigNumberishArrayToDecimalStringArray(formatSignature(sig));
    }
    function signatureToHexArray(sig) {
      return bigNumberishArrayToHexadecimalStringArray(formatSignature(sig));
    }
    function estimatedFeeToMaxFee(estimatedFee, overhead = 0.5) {
      const overHeadPercent = Math.round((1 + overhead) * 100);
      return toBigInt(estimatedFee) * toBigInt(overHeadPercent) / 100n;
    }

    // src/utils/contract.ts
    function isSierra(contract) {
      const compiledContract = typeof contract === "string" ? parse2(contract) : contract;
      return "sierra_program" in compiledContract;
    }
    var fetchPonyfill_default = typeof window !== "undefined" && window.fetch || // use buildin fetch in browser if available
    typeof global !== "undefined" && global.fetch || // use buildin fetch in node, react-native and service worker if available
    fetchNpmBrowserify;

    // src/utils/provider.ts
    var provider_exports = {};
    __export(provider_exports, {
      createSierraContractClass: () => createSierraContractClass,
      parseContract: () => parseContract,
      wait: () => wait
    });
    function wait(delay) {
      return new Promise((res) => {
        setTimeout(res, delay);
      });
    }
    function createSierraContractClass(contract) {
      const result = { ...contract };
      delete result.sierra_program_debug_info;
      result.abi = formatSpaces(stringify2(contract.abi));
      result.sierra_program = formatSpaces(stringify2(contract.sierra_program));
      result.sierra_program = compressProgram(result.sierra_program);
      return result;
    }
    function parseContract(contract) {
      const parsedContract = typeof contract === "string" ? parse2(contract) : contract;
      if (!isSierra(contract)) {
        return {
          ...parsedContract,
          ..."program" in parsedContract && { program: compressProgram(parsedContract.program) }
        };
      }
      return createSierraContractClass(parsedContract);
    }

    // src/utils/responseParser/rpc.ts
    var RPCResponseParser = class {
      parseGetBlockResponse(res) {
        return {
          timestamp: res.timestamp,
          block_hash: "block_hash" in res ? res.block_hash : "",
          block_number: "block_number" in res ? res.block_number : -1,
          new_root: "new_root" in res ? res.new_root : "",
          parent_hash: res.parent_hash,
          status: "status" in res ? res.status : "PENDING" /* PENDING */,
          transactions: res.transactions
        };
      }
      parseGetTransactionResponse(res) {
        return {
          calldata: "calldata" in res ? res.calldata : [],
          contract_address: "contract_address" in res ? res.contract_address : "",
          sender_address: "sender_address" in res ? res.sender_address : "",
          max_fee: "max_fee" in res ? res.max_fee : "",
          nonce: "nonce" in res ? res.nonce : "",
          signature: "signature" in res ? res.signature : [],
          transaction_hash: res.transaction_hash,
          version: res.version
        };
      }
      parseFeeEstimateResponse(res) {
        return {
          overall_fee: toBigInt(res[0].overall_fee),
          gas_consumed: toBigInt(res[0].gas_consumed),
          gas_price: toBigInt(res[0].gas_price)
        };
      }
      parseFeeEstimateBulkResponse(res) {
        return res.map((val) => ({
          overall_fee: toBigInt(val.overall_fee),
          gas_consumed: toBigInt(val.gas_consumed),
          gas_price: toBigInt(val.gas_price)
        }));
      }
      parseCallContractResponse(res) {
        return {
          result: res
        };
      }
      parseSimulateTransactionResponse(res) {
        return res.map((it) => {
          return {
            ...it,
            suggestedMaxFee: estimatedFeeToMaxFee(BigInt(it.fee_estimation.overall_fee))
          };
        });
      }
      parseContractClassResponse(res) {
        return {
          ...res,
          abi: typeof res.abi === "string" ? JSON.parse(res.abi) : res.abi
        };
      }
    };

    // src/provider/errors.ts
    function fixStack(target, fn = target.constructor) {
      const { captureStackTrace } = Error;
      captureStackTrace && captureStackTrace(target, fn);
    }
    function fixProto(target, prototype) {
      const { setPrototypeOf } = Object;
      setPrototypeOf ? setPrototypeOf(target, prototype) : target.__proto__ = prototype;
    }
    var CustomError = class extends Error {
      name;
      constructor(message) {
        super(message);
        Object.defineProperty(this, "name", {
          value: new.target.name,
          enumerable: false,
          configurable: true
        });
        fixProto(this, new.target.prototype);
        fixStack(this);
      }
    };
    var LibraryError = class extends CustomError {
    };
    var GatewayError = class extends LibraryError {
      constructor(message, errorCode) {
        super(message);
        this.errorCode = errorCode;
      }
    };
    var HttpError = class extends LibraryError {
      constructor(message, errorCode) {
        super(message);
        this.errorCode = errorCode;
      }
    };

    // src/utils/starknetId.ts
    var starknetId_exports = {};
    __export(starknetId_exports, {
      StarknetIdContract: () => StarknetIdContract,
      getStarknetIdContract: () => getStarknetIdContract,
      useDecoded: () => useDecoded,
      useEncoded: () => useEncoded
    });
    var basicAlphabet = "abcdefghijklmnopqrstuvwxyz0123456789-";
    var basicSizePlusOne = BigInt(basicAlphabet.length + 1);
    var bigAlphabet = "\u8FD9\u6765";
    var basicAlphabetSize = BigInt(basicAlphabet.length);
    var bigAlphabetSize = BigInt(bigAlphabet.length);
    var bigAlphabetSizePlusOne = BigInt(bigAlphabet.length + 1);
    function extractStars(str) {
      let k = 0;
      while (str.endsWith(bigAlphabet[bigAlphabet.length - 1])) {
        str = str.substring(0, str.length - 1);
        k += 1;
      }
      return [str, k];
    }
    function useDecoded(encoded) {
      let decoded = "";
      encoded.forEach((subdomain) => {
        while (subdomain !== ZERO) {
          const code = subdomain % basicSizePlusOne;
          subdomain /= basicSizePlusOne;
          if (code === BigInt(basicAlphabet.length)) {
            const nextSubdomain = subdomain / bigAlphabetSizePlusOne;
            if (nextSubdomain === ZERO) {
              const code2 = subdomain % bigAlphabetSizePlusOne;
              subdomain = nextSubdomain;
              if (code2 === ZERO)
                decoded += basicAlphabet[0];
              else
                decoded += bigAlphabet[Number(code2) - 1];
            } else {
              const code2 = subdomain % bigAlphabetSize;
              decoded += bigAlphabet[Number(code2)];
              subdomain /= bigAlphabetSize;
            }
          } else
            decoded += basicAlphabet[Number(code)];
        }
        const [str, k] = extractStars(decoded);
        if (k)
          decoded = str + (k % 2 === 0 ? bigAlphabet[bigAlphabet.length - 1].repeat(k / 2 - 1) + bigAlphabet[0] + basicAlphabet[1] : bigAlphabet[bigAlphabet.length - 1].repeat((k - 1) / 2 + 1));
        decoded += ".";
      });
      if (!decoded) {
        return decoded;
      }
      return decoded.concat("stark");
    }
    function useEncoded(decoded) {
      let encoded = BigInt(0);
      let multiplier = BigInt(1);
      if (decoded.endsWith(bigAlphabet[0] + basicAlphabet[1])) {
        const [str, k] = extractStars(decoded.substring(0, decoded.length - 2));
        decoded = str + bigAlphabet[bigAlphabet.length - 1].repeat(2 * (k + 1));
      } else {
        const [str, k] = extractStars(decoded);
        if (k)
          decoded = str + bigAlphabet[bigAlphabet.length - 1].repeat(1 + 2 * (k - 1));
      }
      for (let i = 0; i < decoded.length; i += 1) {
        const char = decoded[i];
        const index = basicAlphabet.indexOf(char);
        const bnIndex = BigInt(basicAlphabet.indexOf(char));
        if (index !== -1) {
          if (i === decoded.length - 1 && decoded[i] === basicAlphabet[0]) {
            encoded += multiplier * basicAlphabetSize;
            multiplier *= basicSizePlusOne;
            multiplier *= basicSizePlusOne;
          } else {
            encoded += multiplier * bnIndex;
            multiplier *= basicSizePlusOne;
          }
        } else if (bigAlphabet.indexOf(char) !== -1) {
          encoded += multiplier * basicAlphabetSize;
          multiplier *= basicSizePlusOne;
          const newid = (i === decoded.length - 1 ? 1 : 0) + bigAlphabet.indexOf(char);
          encoded += multiplier * BigInt(newid);
          multiplier *= bigAlphabetSize;
        }
      }
      return encoded;
    }
    var StarknetIdContract = /* @__PURE__ */ ((StarknetIdContract2) => {
      StarknetIdContract2["MAINNET"] = "0x6ac597f8116f886fa1c97a23fa4e08299975ecaf6b598873ca6792b9bbfb678";
      StarknetIdContract2["TESTNET"] = "0x3bab268e932d2cecd1946f100ae67ce3dff9fd234119ea2f6da57d16d29fce";
      return StarknetIdContract2;
    })(StarknetIdContract || {});
    function getStarknetIdContract(chainId) {
      switch (chainId) {
        case "0x534e5f4d41494e" /* SN_MAIN */:
          return "0x6ac597f8116f886fa1c97a23fa4e08299975ecaf6b598873ca6792b9bbfb678" /* MAINNET */;
        case "0x534e5f474f45524c49" /* SN_GOERLI */:
          return "0x3bab268e932d2cecd1946f100ae67ce3dff9fd234119ea2f6da57d16d29fce" /* TESTNET */;
        default:
          throw new Error("Starknet.id is not yet deployed on this network");
      }
    }

    // src/provider/starknetId.ts
    async function getStarkName(provider, address, StarknetIdContract2) {
      const chainId = await provider.getChainId();
      const contract = StarknetIdContract2 ?? getStarknetIdContract(chainId);
      try {
        const hexDomain = await provider.callContract({
          contractAddress: contract,
          entrypoint: "address_to_domain",
          calldata: CallData.compile({
            address
          })
        });
        const decimalDomain = hexDomain.result.map((element) => BigInt(element)).slice(1);
        const stringDomain = useDecoded(decimalDomain);
        if (!stringDomain) {
          throw Error("Starkname not found");
        }
        return stringDomain;
      } catch (e) {
        if (e instanceof Error && e.message === "Starkname not found") {
          throw e;
        }
        throw Error("Could not get stark name");
      }
    }
    async function getAddressFromStarkName(provider, name, StarknetIdContract2) {
      const chainId = await provider.getChainId();
      const contract = StarknetIdContract2 ?? getStarknetIdContract(chainId);
      try {
        const addressData = await provider.callContract({
          contractAddress: contract,
          entrypoint: "domain_to_address",
          calldata: CallData.compile({
            domain: [useEncoded(name.replace(".stark", "")).toString(10)]
          })
        });
        return addressData.result[0];
      } catch {
        throw Error("Could not get address from stark name");
      }
    }

    // src/provider/utils.ts
    var validBlockTags = Object.values(BlockTag);
    var Block = class {
      hash = null;
      number = null;
      tag = null;
      setIdentifier(__identifier) {
        if (typeof __identifier === "string" && isHex(__identifier)) {
          this.hash = __identifier;
        } else if (typeof __identifier === "bigint") {
          this.hash = toHex(__identifier);
        } else if (typeof __identifier === "number") {
          this.number = __identifier;
        } else if (typeof __identifier === "string" && validBlockTags.includes(__identifier)) {
          this.tag = __identifier;
        } else {
          this.tag = "pending" /* pending */;
        }
      }
      constructor(_identifier) {
        this.setIdentifier(_identifier);
      }
      // TODO: fix any
      get queryIdentifier() {
        if (this.number !== null) {
          return `blockNumber=${this.number}`;
        }
        if (this.hash !== null) {
          return `blockHash=${this.hash}`;
        }
        return `blockNumber=${this.tag}`;
      }
      // TODO: fix any
      get identifier() {
        if (this.number !== null) {
          return { block_number: this.number };
        }
        if (this.hash !== null) {
          return { block_hash: this.hash };
        }
        return this.tag;
      }
      set identifier(_identifier) {
        this.setIdentifier(_identifier);
      }
      valueOf = () => this.number;
      toString = () => this.hash;
      get sequencerIdentifier() {
        return this.hash !== null ? { blockHash: this.hash } : { blockNumber: this.number ?? this.tag };
      }
    };

    // src/provider/rpc.ts
    var getDefaultNodeUrl = (networkName, mute = false, version = RPC_DEFAULT_VERSION) => {
      if (!mute)
        console.warn("Using default public node url, please provide nodeUrl in provider options!");
      const nodes = RPC_NODES[networkName ?? "SN_GOERLI" /* SN_GOERLI */];
      const randIdx = Math.floor(Math.random() * nodes.length);
      return `${nodes[randIdx]}${version}`;
    };
    var defaultOptions = {
      headers: { "Content-Type": "application/json" },
      blockIdentifier: "pending" /* pending */,
      retries: 200
    };
    var RpcProvider = class {
      nodeUrl;
      headers;
      responseParser = new RPCResponseParser();
      retries;
      blockIdentifier;
      chainId;
      constructor(optionsOrProvider) {
        const { nodeUrl, retries, headers, blockIdentifier, chainId, rpcVersion } = optionsOrProvider || {};
        if (Object.values(NetworkName).includes(nodeUrl)) {
          this.nodeUrl = getDefaultNodeUrl(
            nodeUrl,
            optionsOrProvider?.default,
            rpcVersion
          );
        } else if (nodeUrl) {
          this.nodeUrl = nodeUrl;
        } else {
          this.nodeUrl = getDefaultNodeUrl(void 0, optionsOrProvider?.default, rpcVersion);
        }
        this.retries = retries || defaultOptions.retries;
        this.headers = { ...defaultOptions.headers, ...headers };
        this.blockIdentifier = blockIdentifier || defaultOptions.blockIdentifier;
        this.chainId = chainId;
      }
      fetch(method, params, id = 0) {
        const rpcRequestBody = {
          id,
          jsonrpc: "2.0",
          method,
          ...params && { params }
        };
        return fetchPonyfill_default(this.nodeUrl, {
          method: "POST",
          body: stringify2(rpcRequestBody),
          headers: this.headers
        });
      }
      errorHandler(method, params, rpcError, otherError) {
        if (rpcError) {
          const { code, message, data } = rpcError;
          throw new LibraryError(
            `RPC: ${method} with params ${stringify2(params)}
 ${code}: ${message}: ${stringify2(data)}`
          );
        }
        if (otherError instanceof LibraryError) {
          throw otherError;
        }
        if (otherError) {
          throw Error(otherError.message);
        }
      }
      async fetchEndpoint(method, params) {
        try {
          const rawResult = await this.fetch(method, params);
          const { error, result } = await rawResult.json();
          this.errorHandler(method, params, error);
          return result;
        } catch (error) {
          this.errorHandler(method, params, error?.response?.data, error);
          throw error;
        }
      }
      async getChainId() {
        this.chainId ??= await this.fetchEndpoint("starknet_chainId");
        return this.chainId;
      }
      /**
       * NEW: Returns the version of the Starknet JSON-RPC specification being used
       */
      async getSpecVersion() {
        return this.fetchEndpoint("starknet_specVersion");
      }
      async getNonceForAddress(contractAddress, blockIdentifier = this.blockIdentifier) {
        const contract_address = toHex(contractAddress);
        const block_id = new Block(blockIdentifier).identifier;
        return this.fetchEndpoint("starknet_getNonce", {
          contract_address,
          block_id
        });
      }
      /**
       * @deprecated use getBlockWithTxHashes or getBlockWithTxs (will be removed on sequencer deprecation)
       */
      async getBlock(blockIdentifier = this.blockIdentifier) {
        return this.getBlockWithTxHashes(blockIdentifier).then(
          this.responseParser.parseGetBlockResponse
        );
      }
      /**
       * @deprecated renamed to getBlockLatestAccepted(); (will be removed in next minor version)
       */
      getBlockHashAndNumber = this.getBlockLatestAccepted;
      /**
       * Get the most recent accepted block hash and number
       */
      async getBlockLatestAccepted() {
        return this.fetchEndpoint("starknet_blockHashAndNumber");
      }
      /**
       * @deprecated redundant use getBlockLatestAccepted();
       * Get the most recent accepted block number
       * @returns Number of the latest block
       */
      async getBlockNumber() {
        return this.fetchEndpoint("starknet_blockNumber");
      }
      async getBlockWithTxHashes(blockIdentifier = this.blockIdentifier) {
        const block_id = new Block(blockIdentifier).identifier;
        return this.fetchEndpoint("starknet_getBlockWithTxHashes", { block_id });
      }
      async getBlockWithTxs(blockIdentifier = this.blockIdentifier) {
        const block_id = new Block(blockIdentifier).identifier;
        return this.fetchEndpoint("starknet_getBlockWithTxs", { block_id });
      }
      async getBlockStateUpdate(blockIdentifier = this.blockIdentifier) {
        const block_id = new Block(blockIdentifier).identifier;
        return this.fetchEndpoint("starknet_getStateUpdate", { block_id });
      }
      /**
       * @deprecated renamed to getBlockStateUpdate();
       */
      getStateUpdate = this.getBlockStateUpdate;
      async getBlockTransactionsTraces(blockIdentifier = this.blockIdentifier) {
        const block_id = new Block(blockIdentifier).identifier;
        return this.fetchEndpoint("starknet_traceBlockTransactions", { block_id });
      }
      /**
       * Returns the execution traces of all transactions included in the given block
       * @deprecated renamed to getBlockTransactionsTraces()
       */
      traceBlockTransactions = this.getBlockTransactionsTraces;
      async getBlockTransactionCount(blockIdentifier = this.blockIdentifier) {
        const block_id = new Block(blockIdentifier).identifier;
        return this.fetchEndpoint("starknet_getBlockTransactionCount", { block_id });
      }
      /**
       * Get the number of transactions in a block given a block id
       * @deprecated renamed to getBlockTransactionCount()
       * @returns Number of transactions
       */
      getTransactionCount = this.getBlockTransactionCount;
      /**
       * Return transactions from pending block
       * @deprecated Instead use getBlock(BlockTag.pending); (will be removed in next minor version)
       */
      async getPendingTransactions() {
        const { transactions } = await this.getBlock("pending" /* pending */);
        return Promise.all(transactions.map((it) => this.getTransactionByHash(it)));
      }
      /**
       * @deprecated use getTransactionByHash or getTransactionByBlockIdAndIndex (will be removed on sequencer deprecation)
       */
      async getTransaction(txHash) {
        return this.getTransactionByHash(txHash).then(this.responseParser.parseGetTransactionResponse);
      }
      async getTransactionByHash(txHash) {
        const transaction_hash = toHex(txHash);
        return this.fetchEndpoint("starknet_getTransactionByHash", {
          transaction_hash
        });
      }
      async getTransactionByBlockIdAndIndex(blockIdentifier, index) {
        const block_id = new Block(blockIdentifier).identifier;
        return this.fetchEndpoint("starknet_getTransactionByBlockIdAndIndex", { block_id, index });
      }
      async getTransactionReceipt(txHash) {
        const transaction_hash = toHex(txHash);
        return this.fetchEndpoint("starknet_getTransactionReceipt", { transaction_hash });
      }
      async getTransactionTrace(txHash) {
        const transaction_hash = toHex(txHash);
        return this.fetchEndpoint("starknet_traceTransaction", { transaction_hash });
      }
      /**
       * @deprecated renamed to getTransactionTrace();
       * For a given executed transaction, return the trace of its execution, including internal calls
       */
      traceTransaction = this.getTransactionTrace;
      /**
       * NEW: Get the status of a transaction
       */
      async getTransactionStatus(transactionHash) {
        const transaction_hash = toHex(transactionHash);
        return this.fetchEndpoint("starknet_getTransactionStatus", { transaction_hash });
      }
      /**
       * @deprecated renamed to simulateTransaction();
       */
      getSimulateTransaction = this.simulateTransaction;
      /**
       * @param invocations AccountInvocations
       * @param simulateTransactionOptions blockIdentifier and flags to skip validation and fee charge<br/>
       * - blockIdentifier<br/>
       * - skipValidate (default false)<br/>
       * - skipFeeCharge (default true)<br/>
       */
      async simulateTransaction(invocations, {
        blockIdentifier = this.blockIdentifier,
        skipValidate = false,
        skipFeeCharge = true
      }) {
        const block_id = new Block(blockIdentifier).identifier;
        const simulationFlags = [];
        if (skipValidate)
          simulationFlags.push(rpc_exports.ESimulationFlag.SKIP_VALIDATE);
        if (skipFeeCharge)
          simulationFlags.push(rpc_exports.ESimulationFlag.SKIP_FEE_CHARGE);
        return this.fetchEndpoint("starknet_simulateTransactions", {
          block_id,
          transactions: invocations.map((it) => this.buildTransaction(it)),
          simulation_flags: simulationFlags
        }).then(this.responseParser.parseSimulateTransactionResponse);
      }
      async waitForTransaction(txHash, options) {
        const transactionHash = toHex(txHash);
        let { retries } = this;
        let onchain = false;
        let isErrorState = false;
        const retryInterval = options?.retryInterval ?? 5e3;
        const errorStates = options?.errorStates ?? [
          rpc_exports.ETransactionStatus.REJECTED
          // TODO: commented out to preserve the long-standing behavior of "reverted" not being treated as an error by default
          // should decide which behavior to keep in the future
          // RPC.ETransactionExecutionStatus.REVERTED,
        ];
        const successStates = options?.successStates ?? [
          rpc_exports.ETransactionExecutionStatus.SUCCEEDED,
          rpc_exports.ETransactionStatus.ACCEPTED_ON_L2,
          rpc_exports.ETransactionStatus.ACCEPTED_ON_L1
        ];
        let txStatus;
        while (!onchain) {
          await wait(retryInterval);
          try {
            txStatus = await this.getTransactionStatus(transactionHash);
            const executionStatus = txStatus.execution_status;
            const finalityStatus = txStatus.finality_status;
            if (!finalityStatus) {
              const error = new Error("waiting for transaction status");
              throw error;
            }
            if (errorStates.includes(executionStatus) || errorStates.includes(finalityStatus)) {
              const message = `${executionStatus}: ${finalityStatus}`;
              const error = new Error(message);
              error.response = txStatus;
              isErrorState = true;
              throw error;
            } else if (successStates.includes(executionStatus) || successStates.includes(finalityStatus)) {
              onchain = true;
            }
          } catch (error) {
            if (error instanceof Error && isErrorState) {
              throw error;
            }
            if (retries <= 0) {
              throw new Error(`waitForTransaction timed-out with retries ${this.retries}`);
            }
          }
          retries -= 1;
        }
        let txReceipt = null;
        while (txReceipt === null) {
          try {
            txReceipt = await this.getTransactionReceipt(transactionHash);
          } catch (error) {
            if (retries <= 0) {
              throw new Error(`waitForTransaction timed-out with retries ${this.retries}`);
            }
          }
          retries -= 1;
          await wait(retryInterval);
        }
        return txReceipt;
      }
      async getStorageAt(contractAddress, key, blockIdentifier = this.blockIdentifier) {
        const contract_address = toHex(contractAddress);
        const parsedKey = toStorageKey(key);
        const block_id = new Block(blockIdentifier).identifier;
        return this.fetchEndpoint("starknet_getStorageAt", {
          contract_address,
          key: parsedKey,
          block_id
        });
      }
      async getClassHashAt(contractAddress, blockIdentifier = this.blockIdentifier) {
        const contract_address = toHex(contractAddress);
        const block_id = new Block(blockIdentifier).identifier;
        return this.fetchEndpoint("starknet_getClassHashAt", {
          block_id,
          contract_address
        });
      }
      async getClassByHash(classHash) {
        return this.getClass(classHash);
      }
      async getClass(classHash, blockIdentifier = this.blockIdentifier) {
        const class_hash = toHex(classHash);
        const block_id = new Block(blockIdentifier).identifier;
        return this.fetchEndpoint("starknet_getClass", {
          class_hash,
          block_id
        }).then(this.responseParser.parseContractClassResponse);
      }
      async getClassAt(contractAddress, blockIdentifier = this.blockIdentifier) {
        const contract_address = toHex(contractAddress);
        const block_id = new Block(blockIdentifier).identifier;
        return this.fetchEndpoint("starknet_getClassAt", {
          block_id,
          contract_address
        }).then(this.responseParser.parseContractClassResponse);
      }
      async getCode(_contractAddress, _blockIdentifier) {
        throw new Error("RPC does not implement getCode function");
      }
      async getContractVersion(contractAddress, classHash, { blockIdentifier = this.blockIdentifier, compiler = true } = {}) {
        let contractClass;
        if (contractAddress) {
          contractClass = await this.getClassAt(contractAddress, blockIdentifier);
        } else if (classHash) {
          contractClass = await this.getClass(classHash, blockIdentifier);
        } else {
          throw Error("getContractVersion require contractAddress or classHash");
        }
        if (isSierra(contractClass)) {
          if (compiler) {
            const abiTest = getAbiContractVersion(contractClass.abi);
            return { cairo: "1", compiler: abiTest.compiler };
          }
          return { cairo: "1", compiler: void 0 };
        }
        return { cairo: "0", compiler: "0" };
      }
      /**
       * @deprecated use get*type*EstimateFee (will be refactored based on type after sequencer deprecation)
       */
      async getEstimateFee(invocation, invocationDetails, blockIdentifier = this.blockIdentifier) {
        return this.getInvokeEstimateFee(invocation, invocationDetails, blockIdentifier);
      }
      async getInvokeEstimateFee(invocation, invocationDetails, blockIdentifier = this.blockIdentifier) {
        const block_id = new Block(blockIdentifier).identifier;
        const transaction = this.buildTransaction(
          {
            type: "INVOKE_FUNCTION" /* INVOKE */,
            ...invocation,
            ...invocationDetails
          },
          "fee"
        );
        return this.fetchEndpoint("starknet_estimateFee", {
          request: [transaction],
          block_id
        }).then(this.responseParser.parseFeeEstimateResponse);
      }
      async getDeclareEstimateFee(invocation, details, blockIdentifier = this.blockIdentifier) {
        const block_id = new Block(blockIdentifier).identifier;
        const transaction = this.buildTransaction(
          {
            type: "DECLARE" /* DECLARE */,
            ...invocation,
            ...details
          },
          "fee"
        );
        return this.fetchEndpoint("starknet_estimateFee", {
          request: [transaction],
          block_id
        }).then(this.responseParser.parseFeeEstimateResponse);
      }
      async getDeployAccountEstimateFee(invocation, details, blockIdentifier = this.blockIdentifier) {
        const block_id = new Block(blockIdentifier).identifier;
        const transaction = this.buildTransaction(
          {
            type: "DEPLOY_ACCOUNT" /* DEPLOY_ACCOUNT */,
            ...invocation,
            ...details
          },
          "fee"
        );
        return this.fetchEndpoint("starknet_estimateFee", {
          request: [transaction],
          block_id
        }).then(this.responseParser.parseFeeEstimateResponse);
      }
      async getEstimateFeeBulk(invocations, { blockIdentifier = this.blockIdentifier, skipValidate = false }) {
        if (skipValidate) {
          console.warn("getEstimateFeeBulk RPC does not support skipValidate");
        }
        const block_id = new Block(blockIdentifier).identifier;
        return this.fetchEndpoint("starknet_estimateFee", {
          request: invocations.map((it) => this.buildTransaction(it, "fee")),
          block_id
        }).then(this.responseParser.parseFeeEstimateBulkResponse);
      }
      async invokeFunction(functionInvocation, details) {
        return this.fetchEndpoint("starknet_addInvokeTransaction", {
          invoke_transaction: {
            sender_address: functionInvocation.contractAddress,
            calldata: CallData.toHex(functionInvocation.calldata),
            type: rpc_exports.ETransactionType.INVOKE,
            max_fee: toHex(details.maxFee || 0),
            version: "0x1",
            signature: signatureToHexArray(functionInvocation.signature),
            nonce: toHex(details.nonce)
          }
        });
      }
      async declareContract({ contract, signature, senderAddress, compiledClassHash }, details) {
        if (!isSierra(contract)) {
          return this.fetchEndpoint("starknet_addDeclareTransaction", {
            declare_transaction: {
              type: rpc_exports.ETransactionType.DECLARE,
              contract_class: {
                program: contract.program,
                entry_points_by_type: contract.entry_points_by_type,
                abi: contract.abi
              },
              version: HEX_STR_TRANSACTION_VERSION_1,
              max_fee: toHex(details.maxFee || 0),
              signature: signatureToHexArray(signature),
              sender_address: senderAddress,
              nonce: toHex(details.nonce)
            }
          });
        }
        return this.fetchEndpoint("starknet_addDeclareTransaction", {
          declare_transaction: {
            type: rpc_exports.ETransactionType.DECLARE,
            contract_class: {
              sierra_program: decompressProgram(contract.sierra_program),
              contract_class_version: contract.contract_class_version,
              entry_points_by_type: contract.entry_points_by_type,
              abi: contract.abi
            },
            compiled_class_hash: compiledClassHash || "",
            version: HEX_STR_TRANSACTION_VERSION_2,
            max_fee: toHex(details.maxFee || 0),
            signature: signatureToHexArray(signature),
            sender_address: senderAddress,
            nonce: toHex(details.nonce)
          }
        });
      }
      async deployAccountContract({ classHash, constructorCalldata, addressSalt, signature }, details) {
        return this.fetchEndpoint("starknet_addDeployAccountTransaction", {
          deploy_account_transaction: {
            constructor_calldata: CallData.toHex(constructorCalldata || []),
            class_hash: toHex(classHash),
            contract_address_salt: toHex(addressSalt || 0),
            type: rpc_exports.ETransactionType.DEPLOY_ACCOUNT,
            max_fee: toHex(details.maxFee || 0),
            version: toHex(details.version || 0),
            signature: signatureToHexArray(signature),
            nonce: toHex(details.nonce)
          }
        });
      }
      async callContract(call, blockIdentifier = this.blockIdentifier) {
        const block_id = new Block(blockIdentifier).identifier;
        const result = await this.fetchEndpoint("starknet_call", {
          request: {
            contract_address: call.contractAddress,
            entry_point_selector: getSelectorFromName(call.entrypoint),
            calldata: CallData.toHex(call.calldata)
          },
          block_id
        });
        return this.responseParser.parseCallContractResponse(result);
      }
      /**
       * NEW: Estimate the fee for a message from L1
       * @param message Message From L1
       */
      async estimateMessageFee(message, blockIdentifier = this.blockIdentifier) {
        const { from_address, to_address, entry_point_selector, payload } = message;
        const formattedMessage = {
          from_address: toHex(from_address),
          to_address: toHex(to_address),
          entry_point_selector: getSelector(entry_point_selector),
          payload: getHexStringArray(payload)
        };
        const block_id = new Block(blockIdentifier).identifier;
        return this.fetchEndpoint("starknet_estimateMessageFee", {
          message: formattedMessage,
          block_id
        });
      }
      /**
       * Returns an object about the sync status, or false if the node is not synching
       * @returns Object with the stats data
       */
      async getSyncingStats() {
        return this.fetchEndpoint("starknet_syncing");
      }
      /**
       * Returns all events matching the given filter
       * @returns events and the pagination of the events
       */
      async getEvents(eventFilter) {
        return this.fetchEndpoint("starknet_getEvents", { filter: eventFilter });
      }
      /**
       * StarknetId Endpoint (get name from address)
       */
      async getStarkName(address, StarknetIdContract2) {
        return getStarkName(this, address, StarknetIdContract2);
      }
      /**
       * StarknetId Endpoint (get address from name)
       */
      async getAddressFromStarkName(name, StarknetIdContract2) {
        return getAddressFromStarkName(this, name, StarknetIdContract2);
      }
      buildTransaction(invocation, versionType) {
        const defaultVersions = getVersionsByType(versionType);
        const details = {
          signature: signatureToHexArray(invocation.signature),
          nonce: toHex(invocation.nonce),
          max_fee: toHex(invocation.maxFee || 0)
        };
        if (invocation.type === "INVOKE_FUNCTION" /* INVOKE */) {
          return {
            type: rpc_exports.ETransactionType.INVOKE,
            // Diff between sequencer and rpc invoke type
            sender_address: invocation.contractAddress,
            calldata: CallData.toHex(invocation.calldata),
            version: toHex(invocation.version || defaultVersions.v1),
            ...details
          };
        }
        if (invocation.type === "DECLARE" /* DECLARE */) {
          if (!isSierra(invocation.contract)) {
            return {
              type: invocation.type,
              contract_class: invocation.contract,
              sender_address: invocation.senderAddress,
              version: toHex(invocation.version || defaultVersions.v1),
              ...details
            };
          }
          return {
            // compiled_class_hash
            type: invocation.type,
            contract_class: {
              ...invocation.contract,
              sierra_program: decompressProgram(invocation.contract.sierra_program)
            },
            compiled_class_hash: invocation.compiledClassHash || "",
            sender_address: invocation.senderAddress,
            version: toHex(invocation.version || defaultVersions.v2),
            ...details
          };
        }
        if (invocation.type === "DEPLOY_ACCOUNT" /* DEPLOY_ACCOUNT */) {
          return {
            type: invocation.type,
            constructor_calldata: CallData.toHex(invocation.constructorCalldata || []),
            class_hash: toHex(invocation.classHash),
            contract_address_salt: toHex(invocation.addressSalt || 0),
            version: toHex(invocation.version || defaultVersions.v1),
            ...details
          };
        }
        throw Error("RPC buildTransaction received unknown TransactionType");
      }
    };

    // src/utils/responseParser/index.ts
    var ResponseParser = class {
    };

    // src/utils/responseParser/sequencer.ts
    var SequencerAPIResponseParser = class extends ResponseParser {
      parseGetBlockResponse(res) {
        return {
          ...res,
          new_root: res.state_root,
          parent_hash: res.parent_block_hash,
          transactions: Object.values(res.transactions).map((value) => "transaction_hash" in value && value.transaction_hash).filter(Boolean)
        };
      }
      parseGetTransactionResponse(res) {
        if (res.status === "NOT_RECEIVED" /* NOT_RECEIVED */ && res.finality_status === "NOT_RECEIVED" /* NOT_RECEIVED */) {
          throw new LibraryError();
        }
        return {
          ...res,
          calldata: "calldata" in res.transaction ? res.transaction.calldata : [],
          contract_class: "contract_class" in res.transaction ? res.transaction.contract_class : void 0,
          entry_point_selector: "entry_point_selector" in res.transaction ? res.transaction.entry_point_selector : void 0,
          max_fee: "max_fee" in res.transaction ? res.transaction.max_fee : void 0,
          nonce: res.transaction.nonce,
          sender_address: "sender_address" in res.transaction ? res.transaction.sender_address : void 0,
          signature: "signature" in res.transaction ? res.transaction.signature : void 0,
          transaction_hash: "transaction_hash" in res.transaction ? res.transaction.transaction_hash : void 0,
          version: "version" in res.transaction ? res.transaction.version : void 0
        };
      }
      parseGetTransactionReceiptResponse(res) {
        return {
          ...res,
          messages_sent: res.l2_to_l1_messages,
          ..."revert_error" in res && { revert_reason: res.revert_error }
        };
      }
      parseFeeEstimateResponse(res) {
        if ("overall_fee" in res) {
          let gasInfo = {};
          try {
            gasInfo = {
              gas_consumed: toBigInt(res.gas_usage),
              gas_price: toBigInt(res.gas_price)
            };
          } catch {
          }
          return {
            overall_fee: toBigInt(res.overall_fee),
            ...gasInfo
          };
        }
        return {
          overall_fee: toBigInt(res.amount)
        };
      }
      parseFeeEstimateBulkResponse(res) {
        return [].concat(res).map((item) => {
          if ("overall_fee" in item) {
            let gasInfo = {};
            try {
              gasInfo = {
                gas_consumed: toBigInt(item.gas_usage),
                gas_price: toBigInt(item.gas_price)
              };
            } catch {
            }
            return {
              overall_fee: toBigInt(item.overall_fee),
              ...gasInfo
            };
          }
          return {
            overall_fee: toBigInt(item.amount)
          };
        });
      }
      parseSimulateTransactionResponse(res) {
        const suggestedMaxFee = "overall_fee" in res.fee_estimation ? res.fee_estimation.overall_fee : res.fee_estimation.amount;
        return [
          {
            transaction_trace: res.trace,
            fee_estimation: res.fee_estimation,
            suggestedMaxFee: estimatedFeeToMaxFee(BigInt(suggestedMaxFee))
          }
        ];
      }
      parseCallContractResponse(res) {
        return {
          result: res.result
        };
      }
      parseInvokeFunctionResponse(res) {
        return {
          transaction_hash: res.transaction_hash
        };
      }
      parseDeployContractResponse(res) {
        return {
          transaction_hash: res.transaction_hash,
          contract_address: res.address
        };
      }
      parseDeclareContractResponse(res) {
        return {
          transaction_hash: res.transaction_hash,
          class_hash: res.class_hash
        };
      }
      parseGetStateUpdateResponse(res) {
        const nonces = Object.entries(res.state_diff.nonces).map(([contract_address, nonce]) => ({
          contract_address,
          nonce
        }));
        const storage_diffs = Object.entries(res.state_diff.storage_diffs).map(
          ([address, storage_entries]) => ({ address, storage_entries })
        );
        return {
          ...res,
          state_diff: {
            ...res.state_diff,
            storage_diffs,
            nonces
          }
        };
      }
      parseContractClassResponse(res) {
        const response = isSierra(res) ? res : parseContract(res);
        return {
          ...response,
          abi: typeof response.abi === "string" ? JSON.parse(response.abi) : response.abi
        };
      }
    };
    var protocolAndDomainRE = /^(?:\w+:)?\/\/(\S+)$/;
    var localhostDomainRE = /^localhost[:?\d]*(?:[^:?\d]\S*)?$/;
    var nonLocalhostDomainRE = /^[^\s.]+\.\S{2,}$/;
    function isUrl(s) {
      if (!s) {
        return false;
      }
      if (typeof s !== "string") {
        return false;
      }
      const match = s.match(protocolAndDomainRE);
      if (!match) {
        return false;
      }
      const everythingAfterProtocol = match[1];
      if (!everythingAfterProtocol) {
        return false;
      }
      if (localhostDomainRE.test(everythingAfterProtocol) || nonLocalhostDomainRE.test(everythingAfterProtocol)) {
        return true;
      }
      return false;
    }
    function buildUrl(baseUrl, defaultPath, urlOrPath) {
      return isUrl(urlOrPath) ? urlOrPath : urlJoin(baseUrl, urlOrPath ?? defaultPath);
    }

    // src/provider/sequencer.ts
    function isEmptyQueryObject(obj) {
      return obj === void 0 || Object.keys(obj).length === 0 || Object.keys(obj).length === 1 && Object.entries(obj).every(([k, v]) => k === "blockIdentifier" && v === null);
    }
    var defaultOptions2 = {
      network: "SN_GOERLI" /* SN_GOERLI */,
      blockIdentifier: "pending" /* pending */
    };
    var SequencerProvider = class {
      baseUrl;
      feederGatewayUrl;
      gatewayUrl;
      headers;
      blockIdentifier;
      chainId;
      responseParser = new SequencerAPIResponseParser();
      constructor(optionsOrProvider = defaultOptions2) {
        if ("network" in optionsOrProvider) {
          this.baseUrl = SequencerProvider.getNetworkFromName(optionsOrProvider.network);
          this.feederGatewayUrl = buildUrl(this.baseUrl, "feeder_gateway");
          this.gatewayUrl = buildUrl(this.baseUrl, "gateway");
        } else {
          this.baseUrl = optionsOrProvider.baseUrl;
          this.feederGatewayUrl = buildUrl(
            this.baseUrl,
            "feeder_gateway",
            optionsOrProvider.feederGatewayUrl
          );
          this.gatewayUrl = buildUrl(this.baseUrl, "gateway", optionsOrProvider.gatewayUrl);
        }
        this.chainId = optionsOrProvider?.chainId ?? SequencerProvider.getChainIdFromBaseUrl(this.baseUrl);
        this.headers = optionsOrProvider.headers;
        this.blockIdentifier = optionsOrProvider?.blockIdentifier || defaultOptions2.blockIdentifier;
      }
      static getNetworkFromName(name) {
        switch (name) {
          case "SN_MAIN" /* SN_MAIN */:
          case "0x534e5f4d41494e" /* SN_MAIN */:
            return "https://alpha-mainnet.starknet.io" /* SN_MAIN */;
          case "SN_GOERLI" /* SN_GOERLI */:
          case "0x534e5f474f45524c49" /* SN_GOERLI */:
            return "https://alpha4.starknet.io" /* SN_GOERLI */;
          default:
            throw new Error("Could not detect base url from NetworkName");
        }
      }
      static getChainIdFromBaseUrl(baseUrl) {
        try {
          const url = new URL(baseUrl);
          if (url.host.includes("mainnet.starknet.io")) {
            return "0x534e5f4d41494e" /* SN_MAIN */;
          }
          return "0x534e5f474f45524c49" /* SN_GOERLI */;
        } catch {
          console.error(`Could not parse baseUrl: ${baseUrl}`);
          return "0x534e5f474f45524c49" /* SN_GOERLI */;
        }
      }
      getFetchUrl(endpoint) {
        const gatewayUrlEndpoints = ["add_transaction"];
        return gatewayUrlEndpoints.includes(endpoint) ? this.gatewayUrl : this.feederGatewayUrl;
      }
      getFetchMethod(endpoint) {
        const postMethodEndpoints = [
          "add_transaction",
          "call_contract",
          "estimate_fee",
          "estimate_message_fee",
          "estimate_fee_bulk",
          "simulate_transaction"
        ];
        return postMethodEndpoints.includes(endpoint) ? "POST" : "GET";
      }
      getQueryString(query) {
        if (isEmptyQueryObject(query)) {
          return "";
        }
        const queryString = Object.entries(query).map(([key, value]) => {
          if (key === "blockIdentifier") {
            const block = new Block(value);
            return `${block.queryIdentifier}`;
          }
          return `${key}=${value}`;
        }).join("&");
        return `?${queryString}`;
      }
      getHeaders(method) {
        if (method === "POST") {
          return {
            "Content-Type": "application/json",
            ...this.headers
          };
        }
        return this.headers;
      }
      // typesafe fetch
      async fetchEndpoint(endpoint, ...[query, request]) {
        const baseUrl = this.getFetchUrl(endpoint);
        const method = this.getFetchMethod(endpoint);
        const queryString = this.getQueryString(query);
        const url = urlJoin(baseUrl, endpoint, queryString);
        return this.fetch(url, {
          method,
          body: request
        });
      }
      async fetch(endpoint, options) {
        const url = buildUrl(this.baseUrl, "", endpoint);
        const method = options?.method ?? "GET";
        const headers = this.getHeaders(method);
        const body = stringify2(options?.body);
        try {
          const response = await fetchPonyfill_default(url, {
            method,
            body,
            headers
          });
          const textResponse = await response.text();
          if (!response.ok) {
            let responseBody;
            try {
              responseBody = parse2(textResponse);
            } catch {
              throw new HttpError(response.statusText, response.status);
            }
            throw new GatewayError(responseBody.message, responseBody.code);
          }
          const parseChoice = options?.parseAlwaysAsBigInt ? parseAlwaysAsBig : parse2;
          return parseChoice(textResponse);
        } catch (error) {
          if (error instanceof Error && !(error instanceof LibraryError))
            throw Error(`Could not ${method} from endpoint \`${url}\`: ${error.message}`);
          throw error;
        }
      }
      async getChainId() {
        return Promise.resolve(this.chainId);
      }
      async callContract({ contractAddress, entrypoint: entryPointSelector, calldata = [] }, blockIdentifier = this.blockIdentifier) {
        return this.fetchEndpoint(
          "call_contract",
          { blockIdentifier },
          {
            // TODO - determine best choice once both are fully supported in devnet
            // signature: [],
            // sender_address: contractAddress,
            contract_address: contractAddress,
            entry_point_selector: getSelectorFromName(entryPointSelector),
            calldata: CallData.compile(calldata)
          }
        ).then(this.responseParser.parseCallContractResponse);
      }
      async getBlock(blockIdentifier = this.blockIdentifier) {
        return this.fetchEndpoint("get_block", { blockIdentifier }).then(
          this.responseParser.parseGetBlockResponse
        );
      }
      async getNonceForAddress(contractAddress, blockIdentifier = this.blockIdentifier) {
        return this.fetchEndpoint("get_nonce", { contractAddress, blockIdentifier });
      }
      async getStorageAt(contractAddress, key, blockIdentifier = this.blockIdentifier) {
        const parsedKey = toBigInt(key).toString(10);
        return this.fetchEndpoint("get_storage_at", {
          blockIdentifier,
          contractAddress,
          key: parsedKey
        });
      }
      async getTransaction(txHash) {
        const txHashHex = toHex(txHash);
        return this.fetchEndpoint("get_transaction", { transactionHash: txHashHex }).then((result) => {
          if (Object.values(result).length === 1)
            throw new LibraryError(result.status);
          return this.responseParser.parseGetTransactionResponse(result);
        });
      }
      async getTransactionReceipt(txHash) {
        const txHashHex = toHex(txHash);
        return this.fetchEndpoint("get_transaction_receipt", { transactionHash: txHashHex }).then(
          this.responseParser.parseGetTransactionReceiptResponse
        );
      }
      async getClassAt(contractAddress, blockIdentifier = this.blockIdentifier) {
        return this.fetchEndpoint("get_full_contract", { blockIdentifier, contractAddress }).then(
          this.responseParser.parseContractClassResponse
        );
      }
      async getClassHashAt(contractAddress, blockIdentifier = this.blockIdentifier) {
        return this.fetchEndpoint("get_class_hash_at", { blockIdentifier, contractAddress });
      }
      async getClassByHash(classHash, blockIdentifier = this.blockIdentifier) {
        return this.fetchEndpoint("get_class_by_hash", { classHash, blockIdentifier }).then(
          this.responseParser.parseContractClassResponse
        );
      }
      async getCompiledClassByClassHash(classHash, blockIdentifier = this.blockIdentifier) {
        return this.fetchEndpoint("get_compiled_class_by_class_hash", { classHash, blockIdentifier });
      }
      async getContractVersion(contractAddress, classHash, { blockIdentifier = this.blockIdentifier, compiler = true } = {}) {
        let contractClass;
        if (contractAddress) {
          contractClass = await this.getClassAt(contractAddress, blockIdentifier);
        } else if (classHash) {
          contractClass = await this.getClassByHash(classHash, blockIdentifier);
        } else {
          throw Error("getContractVersion requires contractAddress or classHash");
        }
        if (isSierra(contractClass)) {
          if (compiler) {
            const abiTest = getAbiContractVersion(contractClass.abi);
            return { cairo: "1", compiler: abiTest.compiler };
          }
          return { cairo: "1", compiler: void 0 };
        }
        return { cairo: "0", compiler: "0" };
      }
      async invokeFunction(functionInvocation, details) {
        return this.fetchEndpoint("add_transaction", void 0, {
          type: "INVOKE_FUNCTION" /* INVOKE */,
          sender_address: functionInvocation.contractAddress,
          calldata: CallData.compile(functionInvocation.calldata ?? []),
          signature: signatureToDecimalArray(functionInvocation.signature),
          nonce: toHex(details.nonce),
          max_fee: toHex(details.maxFee || 0),
          version: "0x1"
        }).then(this.responseParser.parseInvokeFunctionResponse);
      }
      async deployAccountContract({ classHash, constructorCalldata, addressSalt, signature }, details) {
        return this.fetchEndpoint("add_transaction", void 0, {
          type: "DEPLOY_ACCOUNT" /* DEPLOY_ACCOUNT */,
          contract_address_salt: addressSalt ?? randomAddress(),
          constructor_calldata: CallData.compile(constructorCalldata ?? []),
          class_hash: toHex(classHash),
          max_fee: toHex(details.maxFee || 0),
          version: toHex(details.version || 0),
          nonce: toHex(details.nonce),
          signature: signatureToDecimalArray(signature)
        }).then(this.responseParser.parseDeployContractResponse);
      }
      async declareContract({ senderAddress, contract, signature, compiledClassHash }, details) {
        if (!isSierra(contract)) {
          return this.fetchEndpoint("add_transaction", void 0, {
            type: "DECLARE" /* DECLARE */,
            contract_class: contract,
            nonce: toHex(details.nonce),
            signature: signatureToDecimalArray(signature),
            sender_address: senderAddress,
            max_fee: toHex(details.maxFee || 0),
            version: toHex(transactionVersion)
          }).then(this.responseParser.parseDeclareContractResponse);
        }
        return this.fetchEndpoint("add_transaction", void 0, {
          type: "DECLARE" /* DECLARE */,
          sender_address: senderAddress,
          compiled_class_hash: compiledClassHash,
          contract_class: contract,
          nonce: toHex(details.nonce),
          signature: signatureToDecimalArray(signature),
          max_fee: toHex(details.maxFee || 0),
          version: toHex(transactionVersion_2)
        }).then(this.responseParser.parseDeclareContractResponse);
      }
      async getEstimateFee(invocation, invocationDetails, blockIdentifier = this.blockIdentifier, skipValidate = false) {
        return this.getInvokeEstimateFee(invocation, invocationDetails, blockIdentifier, skipValidate);
      }
      async getInvokeEstimateFee(invocation, invocationDetails, blockIdentifier = this.blockIdentifier, skipValidate = false) {
        const transaction = this.buildTransaction(
          {
            type: "INVOKE_FUNCTION" /* INVOKE */,
            ...invocation,
            ...invocationDetails
          },
          "fee"
        );
        return this.fetchEndpoint("estimate_fee", { blockIdentifier, skipValidate }, transaction).then(
          this.responseParser.parseFeeEstimateResponse
        );
      }
      async getDeclareEstimateFee(invocation, details, blockIdentifier = this.blockIdentifier, skipValidate = false) {
        const transaction = this.buildTransaction(
          {
            type: "DECLARE" /* DECLARE */,
            ...invocation,
            ...details
          },
          "fee"
        );
        return this.fetchEndpoint("estimate_fee", { blockIdentifier, skipValidate }, transaction).then(
          this.responseParser.parseFeeEstimateResponse
        );
      }
      async getDeployAccountEstimateFee(invocation, details, blockIdentifier = this.blockIdentifier, skipValidate = false) {
        const transaction = this.buildTransaction(
          {
            type: "DEPLOY_ACCOUNT" /* DEPLOY_ACCOUNT */,
            ...invocation,
            ...details
          },
          "fee"
        );
        return this.fetchEndpoint("estimate_fee", { blockIdentifier, skipValidate }, transaction).then(
          this.responseParser.parseFeeEstimateResponse
        );
      }
      async getEstimateFeeBulk(invocations, { blockIdentifier = this.blockIdentifier, skipValidate = false }) {
        const transactions = invocations.map((it) => this.buildTransaction(it, "fee"));
        return this.fetchEndpoint(
          "estimate_fee_bulk",
          { blockIdentifier, skipValidate },
          transactions
        ).then(this.responseParser.parseFeeEstimateBulkResponse);
      }
      async getCode(contractAddress, blockIdentifier = this.blockIdentifier) {
        return this.fetchEndpoint("get_code", { contractAddress, blockIdentifier });
      }
      async waitForTransaction(txHash, options) {
        let res;
        let completed = false;
        let retries = 0;
        const retryInterval = options?.retryInterval ?? 5e3;
        const errorStates = options?.errorStates ?? [
          "REJECTED" /* REJECTED */,
          "NOT_RECEIVED" /* NOT_RECEIVED */,
          "REVERTED" /* REVERTED */
        ];
        const successStates = options?.successStates ?? [
          "SUCCEEDED" /* SUCCEEDED */,
          "ACCEPTED_ON_L1" /* ACCEPTED_ON_L1 */,
          "ACCEPTED_ON_L2" /* ACCEPTED_ON_L2 */
        ];
        while (!completed) {
          await wait(retryInterval);
          res = await this.getTransactionStatus(txHash);
          if ("NOT_RECEIVED" /* NOT_RECEIVED */ === res.finality_status && retries < 3) {
            retries += 1;
          } else if (successStates.includes(res.finality_status) || successStates.includes(res.execution_status)) {
            completed = true;
          } else if (errorStates.includes(res.finality_status) || errorStates.includes(res.execution_status)) {
            let message;
            if (res.tx_failure_reason) {
              message = `${res.tx_status}: ${res.tx_failure_reason.code}
${res.tx_failure_reason.error_message}`;
            } else if (res.tx_revert_reason) {
              message = `${res.tx_status}: ${res.tx_revert_reason}`;
            } else {
              message = res.tx_status;
            }
            const error = new Error(message);
            error.response = res;
            throw error;
          }
        }
        const txReceipt = await this.getTransactionReceipt(txHash);
        return txReceipt;
      }
      /**
       * Gets the status of a transaction.
       * @param txHash BigNumberish
       * @returns GetTransactionStatusResponse - the transaction status object
       */
      async getTransactionStatus(txHash) {
        const txHashHex = toHex(txHash);
        return this.fetchEndpoint("get_transaction_status", { transactionHash: txHashHex });
      }
      /**
       * Gets the smart contract address on the goerli testnet.
       * @returns GetContractAddressesResponse - starknet smart contract addresses
       */
      async getContractAddresses() {
        return this.fetchEndpoint("get_contract_addresses");
      }
      /**
       * Gets the transaction trace from a tx id.
       * @param txHash BigNumberish
       * @returns TransactionTraceResponse - the transaction trace
       */
      async getTransactionTrace(txHash) {
        const txHashHex = toHex(txHash);
        return this.fetchEndpoint("get_transaction_trace", { transactionHash: txHashHex });
      }
      async estimateMessageFee({ from_address, to_address, entry_point_selector, payload }, blockIdentifier = this.blockIdentifier) {
        const validCallL1Handler = {
          from_address: getDecimalString(from_address),
          to_address: getHexString(to_address),
          entry_point_selector: getSelector(entry_point_selector),
          payload: getHexStringArray(payload)
        };
        return this.fetchEndpoint("estimate_message_fee", { blockIdentifier }, validCallL1Handler);
      }
      /**
       * Simulate transaction using Sequencer provider
       * WARNING!: Sequencer will process only first element from invocations array
       *
       * @param invocations Array of invocations, but only first invocation will be processed
       * @param blockIdentifier block identifier, default 'latest'
       * @param skipValidate Skip Account __validate__ method
       * @returns
       */
      async getSimulateTransaction(invocations, {
        blockIdentifier = this.blockIdentifier,
        skipValidate = false,
        skipExecute = false
      }) {
        if (invocations.length > 1) {
          console.warn("Sequencer simulate process only first element from invocations list");
        }
        if (skipExecute) {
          console.warn("Sequencer can't skip account __execute__");
        }
        const transaction = this.buildTransaction(invocations[0]);
        return this.fetchEndpoint(
          "simulate_transaction",
          {
            blockIdentifier,
            skipValidate: skipValidate ?? false
          },
          transaction
        ).then(this.responseParser.parseSimulateTransactionResponse);
      }
      async getStateUpdate(blockIdentifier = this.blockIdentifier) {
        const args = new Block(blockIdentifier).sequencerIdentifier;
        return this.fetchEndpoint("get_state_update", { ...args }).then(
          this.responseParser.parseGetStateUpdateResponse
        );
      }
      // consider adding an optional trace retrieval parameter to the getBlock method
      async getBlockTraces(blockIdentifier = this.blockIdentifier) {
        const args = new Block(blockIdentifier).sequencerIdentifier;
        return this.fetchEndpoint("get_block_traces", { ...args });
      }
      async getStarkName(address, StarknetIdContract2) {
        return getStarkName(this, address, StarknetIdContract2);
      }
      async getAddressFromStarkName(name, StarknetIdContract2) {
        return getAddressFromStarkName(this, name, StarknetIdContract2);
      }
      /**
       * Build Single AccountTransaction from Single AccountInvocation
       * @param invocation AccountInvocationItem
       * @param versionType 'fee' | 'transaction' - used to determine default versions
       * @returns AccountTransactionItem
       */
      buildTransaction(invocation, versionType) {
        const defaultVersions = getVersionsByType(versionType);
        const details = {
          signature: signatureToDecimalArray(invocation.signature),
          nonce: toHex(invocation.nonce)
        };
        if (invocation.type === "INVOKE_FUNCTION" /* INVOKE */) {
          return {
            type: invocation.type,
            sender_address: invocation.contractAddress,
            calldata: CallData.compile(invocation.calldata ?? []),
            version: toHex(invocation.version || defaultVersions.v1),
            ...details
          };
        }
        if (invocation.type === "DECLARE" /* DECLARE */) {
          if (!isSierra(invocation.contract)) {
            return {
              type: invocation.type,
              contract_class: invocation.contract,
              sender_address: invocation.senderAddress,
              version: toHex(invocation.version || defaultVersions.v1),
              // fee from getDeclareEstimateFee use t.v. instead of feet.v.
              ...details
            };
          }
          return {
            type: invocation.type,
            contract_class: invocation.contract,
            compiled_class_hash: invocation.compiledClassHash,
            sender_address: invocation.senderAddress,
            version: toHex(invocation.version || defaultVersions.v2),
            // fee on getDeclareEstimateFee use t.v. instead of feet.v.
            ...details
          };
        }
        if (invocation.type === "DEPLOY_ACCOUNT" /* DEPLOY_ACCOUNT */) {
          return {
            type: invocation.type,
            constructor_calldata: CallData.compile(invocation.constructorCalldata || []),
            class_hash: toHex(invocation.classHash),
            contract_address_salt: toHex(invocation.addressSalt || 0),
            version: toHex(invocation.version || defaultVersions.v1),
            ...details
          };
        }
        throw Error("Sequencer buildTransaction received unknown TransactionType");
      }
    };

    // src/provider/default.ts
    var Provider = class {
      provider;
      constructor(providerOrOptions) {
        if (providerOrOptions instanceof Provider) {
          this.provider = providerOrOptions.provider;
        } else if (providerOrOptions instanceof RpcProvider || providerOrOptions instanceof SequencerProvider) {
          this.provider = providerOrOptions;
        } else if (providerOrOptions && "rpc" in providerOrOptions) {
          this.provider = new RpcProvider(providerOrOptions.rpc);
        } else if (providerOrOptions && "sequencer" in providerOrOptions) {
          this.provider = new SequencerProvider(providerOrOptions.sequencer);
        } else {
          this.provider = new RpcProvider();
        }
      }
      async getChainId() {
        return this.provider.getChainId();
      }
      async getBlock(blockIdentifier) {
        return this.provider.getBlock(blockIdentifier);
      }
      async getClassAt(contractAddress, blockIdentifier) {
        return this.provider.getClassAt(contractAddress, blockIdentifier);
      }
      async getClassHashAt(contractAddress, blockIdentifier) {
        return this.provider.getClassHashAt(contractAddress, blockIdentifier);
      }
      getClassByHash(classHash) {
        return this.provider.getClassByHash(classHash);
      }
      async getEstimateFee(invocationWithTxType, invocationDetails, blockIdentifier) {
        return this.provider.getEstimateFee(invocationWithTxType, invocationDetails, blockIdentifier);
      }
      async getInvokeEstimateFee(invocationWithTxType, invocationDetails, blockIdentifier, skipValidate) {
        return this.provider.getInvokeEstimateFee(
          invocationWithTxType,
          invocationDetails,
          blockIdentifier,
          skipValidate
        );
      }
      async getEstimateFeeBulk(invocations, options) {
        return this.provider.getEstimateFeeBulk(invocations, options);
      }
      async getNonceForAddress(contractAddress, blockIdentifier) {
        return this.provider.getNonceForAddress(contractAddress, blockIdentifier);
      }
      async getStorageAt(contractAddress, key, blockIdentifier) {
        return this.provider.getStorageAt(contractAddress, key, blockIdentifier);
      }
      async getTransaction(txHash) {
        return this.provider.getTransaction(txHash);
      }
      async getTransactionReceipt(txHash) {
        return this.provider.getTransactionReceipt(txHash);
      }
      async callContract(request, blockIdentifier) {
        return this.provider.callContract(request, blockIdentifier);
      }
      async invokeFunction(functionInvocation, details) {
        return this.provider.invokeFunction(functionInvocation, details);
      }
      async deployAccountContract(payload, details) {
        return this.provider.deployAccountContract(payload, details);
      }
      async declareContract(transaction, details) {
        return this.provider.declareContract(transaction, details);
      }
      async getDeclareEstimateFee(transaction, details, blockIdentifier, skipValidate) {
        return this.provider.getDeclareEstimateFee(transaction, details, blockIdentifier, skipValidate);
      }
      getDeployAccountEstimateFee(transaction, details, blockIdentifier, skipValidate) {
        return this.provider.getDeployAccountEstimateFee(
          transaction,
          details,
          blockIdentifier,
          skipValidate
        );
      }
      async getCode(contractAddress, blockIdentifier) {
        return this.provider.getCode(contractAddress, blockIdentifier);
      }
      async waitForTransaction(txHash, options) {
        return this.provider.waitForTransaction(txHash, options);
      }
      async getSimulateTransaction(invocations, options) {
        return this.provider.getSimulateTransaction(invocations, options);
      }
      async getStateUpdate(blockIdentifier) {
        return this.provider.getStateUpdate(blockIdentifier);
      }
      async getStarkName(address, StarknetIdContract2) {
        return getStarkName(this, address, StarknetIdContract2);
      }
      async getAddressFromStarkName(name, StarknetIdContract2) {
        return getAddressFromStarkName(this, name, StarknetIdContract2);
      }
      async getContractVersion(contractAddress, classHash, options) {
        return this.provider.getContractVersion(contractAddress, classHash, options);
      }
    };

    // src/utils/transaction.ts
    var transaction_exports = {};
    __export(transaction_exports, {
      fromCallsToExecuteCalldata: () => fromCallsToExecuteCalldata,
      fromCallsToExecuteCalldataWithNonce: () => fromCallsToExecuteCalldataWithNonce,
      fromCallsToExecuteCalldata_cairo1: () => fromCallsToExecuteCalldata_cairo1,
      getExecuteCalldata: () => getExecuteCalldata,
      transformCallsToMulticallArrays: () => transformCallsToMulticallArrays,
      transformCallsToMulticallArrays_cairo1: () => transformCallsToMulticallArrays_cairo1
    });
    var transformCallsToMulticallArrays = (calls) => {
      const callArray = [];
      const calldata = [];
      calls.forEach((call) => {
        const data = CallData.compile(call.calldata || []);
        callArray.push({
          to: toBigInt(call.contractAddress).toString(10),
          selector: toBigInt(getSelectorFromName(call.entrypoint)).toString(10),
          data_offset: calldata.length.toString(),
          data_len: data.length.toString()
        });
        calldata.push(...data);
      });
      return {
        callArray,
        calldata: CallData.compile({ calldata })
      };
    };
    var fromCallsToExecuteCalldata = (calls) => {
      const { callArray, calldata } = transformCallsToMulticallArrays(calls);
      const compiledCalls = CallData.compile({ callArray });
      return [...compiledCalls, ...calldata];
    };
    var fromCallsToExecuteCalldataWithNonce = (calls, nonce) => {
      return [...fromCallsToExecuteCalldata(calls), toBigInt(nonce).toString()];
    };
    var transformCallsToMulticallArrays_cairo1 = (calls) => {
      const callArray = calls.map((call) => ({
        to: toBigInt(call.contractAddress).toString(10),
        selector: toBigInt(getSelectorFromName(call.entrypoint)).toString(10),
        calldata: CallData.compile(call.calldata || [])
      }));
      return callArray;
    };
    var fromCallsToExecuteCalldata_cairo1 = (calls) => {
      const orderCalls = calls.map((call) => ({
        contractAddress: call.contractAddress,
        entrypoint: call.entrypoint,
        calldata: Array.isArray(call.calldata) && "__compiled__" in call.calldata ? call.calldata : CallData.compile(call.calldata)
        // RawArgsObject | RawArgsArray type
      }));
      return CallData.compile({ orderCalls });
    };
    var getExecuteCalldata = (calls, cairoVersion = "0") => {
      if (cairoVersion === "1") {
        return fromCallsToExecuteCalldata_cairo1(calls);
      }
      return fromCallsToExecuteCalldata(calls);
    };

    // src/utils/typedData.ts
    var typedData_exports = {};
    __export(typedData_exports, {
      TypedDataRevision: () => TypedDataRevision,
      byteArrayFromString: () => byteArrayFromString,
      encodeData: () => encodeData,
      encodeType: () => encodeType,
      encodeValue: () => encodeValue,
      getDependencies: () => getDependencies,
      getMessageHash: () => getMessageHash,
      getStructHash: () => getStructHash,
      getTypeHash: () => getTypeHash,
      isMerkleTreeType: () => isMerkleTreeType,
      prepareSelector: () => prepareSelector
    });

    // src/utils/merkle.ts
    var merkle_exports = {};
    __export(merkle_exports, {
      MerkleTree: () => MerkleTree,
      proofMerklePath: () => proofMerklePath
    });
    var MerkleTree = class {
      leaves;
      branches = [];
      root;
      hashMethod;
      constructor(leafHashes, hashMethod = computePedersenHash) {
        this.hashMethod = hashMethod;
        this.leaves = leafHashes;
        this.root = this.build(leafHashes);
      }
      /**
       * Create Merkle tree
       * @param leaves hex-string array
       * @returns format: hex-string; Merkle tree root
       */
      build(leaves) {
        if (leaves.length === 1) {
          return leaves[0];
        }
        if (leaves.length !== this.leaves.length) {
          this.branches.push(leaves);
        }
        const newLeaves = [];
        for (let i = 0; i < leaves.length; i += 2) {
          if (i + 1 === leaves.length) {
            newLeaves.push(MerkleTree.hash(leaves[i], "0x0", this.hashMethod));
          } else {
            newLeaves.push(MerkleTree.hash(leaves[i], leaves[i + 1], this.hashMethod));
          }
        }
        return this.build(newLeaves);
      }
      /**
       * Create hash from ordered a and b, Pedersen hash default
       * @returns format: hex-string
       */
      static hash(a, b, hashMethod = computePedersenHash) {
        const [aSorted, bSorted] = [BigInt(a), BigInt(b)].sort((x, y) => x >= y ? 1 : -1);
        return hashMethod(aSorted, bSorted);
      }
      /**
       * Return path to leaf
       * @param leaf hex-string
       * @param branch hex-string array
       * @param hashPath hex-string array
       * @returns format: hex-string array
       */
      getProof(leaf, branch = this.leaves, hashPath = []) {
        const index = branch.indexOf(leaf);
        if (index === -1) {
          throw new Error("leaf not found");
        }
        if (branch.length === 1) {
          return hashPath;
        }
        const isLeft = index % 2 === 0;
        const neededBranch = (isLeft ? branch[index + 1] : branch[index - 1]) ?? "0x0";
        const newHashPath = [...hashPath, neededBranch];
        const currentBranchLevelIndex = this.leaves.length === branch.length ? -1 : this.branches.findIndex((b) => b.length === branch.length);
        const nextBranch = this.branches[currentBranchLevelIndex + 1] ?? [this.root];
        return this.getProof(
          MerkleTree.hash(isLeft ? leaf : neededBranch, isLeft ? neededBranch : leaf, this.hashMethod),
          nextBranch,
          newHashPath
        );
      }
    };
    function proofMerklePath(root, leaf, path, hashMethod = computePedersenHash) {
      if (path.length === 0) {
        return root === leaf;
      }
      const [next, ...rest] = path;
      return proofMerklePath(root, MerkleTree.hash(leaf, next, hashMethod), rest, hashMethod);
    }

    // src/utils/typedData.ts
    var presetTypes = {
      u256: JSON.parse('[{ "name": "low", "type": "u128" }, { "name": "high", "type": "u128" }]'),
      TokenAmount: JSON.parse(
        '[{ "name": "token_address", "type": "ContractAddress" }, { "name": "amount", "type": "u256" }]'
      ),
      NftId: JSON.parse(
        '[{ "name": "collection_address", "type": "ContractAddress" }, { "name": "token_id", "type": "u256" }]'
      )
    };
    var revisionConfiguration = {
      ["1" /* Active */]: {
        domain: "StarknetDomain",
        hashMethod: computePoseidonHashOnElements,
        hashMerkleMethod: computePoseidonHash,
        escapeTypeString: (s) => `"${s}"`,
        presetTypes
      },
      ["0" /* Legacy */]: {
        domain: "StarkNetDomain",
        hashMethod: computePedersenHashOnElements,
        hashMerkleMethod: computePedersenHash,
        escapeTypeString: (s) => s,
        presetTypes: {}
      }
    };
    function byteArrayFromString(targetString) {
      const shortStrings = splitLongString(targetString);
      const remainder = shortStrings[shortStrings.length - 1];
      const shortStringsEncoded = shortStrings.map(encodeShortString);
      const [pendingWord, pendingWordLength] = remainder === void 0 || remainder.length === 31 ? ["0x00", 0] : [shortStringsEncoded.pop(), remainder.length];
      return {
        data: shortStringsEncoded.length === 0 ? ["0x00"] : shortStringsEncoded,
        pending_word: pendingWord,
        pending_word_len: pendingWordLength
      };
    }
    function identifyRevision({ types, domain }) {
      if (revisionConfiguration["1" /* Active */].domain in types && domain.revision === "1" /* Active */)
        return "1" /* Active */;
      if (revisionConfiguration["0" /* Legacy */].domain in types && (domain.revision ?? "0" /* Legacy */) === "0" /* Legacy */)
        return "0" /* Legacy */;
      return void 0;
    }
    function getHex(value) {
      try {
        return toHex(value);
      } catch (e) {
        if (typeof value === "string") {
          return toHex(encodeShortString(value));
        }
        throw new Error(`Invalid BigNumberish: ${value}`);
      }
    }
    function validateTypedData(data) {
      const typedData = data;
      return Boolean(
        typedData.message && typedData.primaryType && typedData.types && identifyRevision(typedData)
      );
    }
    function prepareSelector(selector) {
      return isHex(selector) ? selector : getSelectorFromName(selector);
    }
    function isMerkleTreeType(type) {
      return type.type === "merkletree";
    }
    function getDependencies(types, type, dependencies = [], contains = "", revision = "0" /* Legacy */) {
      if (type[type.length - 1] === "*") {
        type = type.slice(0, -1);
      } else if (revision === "1" /* Active */) {
        if (type === "enum") {
          type = contains;
        } else if (type.match(/^\(.*\)$/)) {
          type = type.slice(1, -1);
        }
      }
      if (dependencies.includes(type) || !types[type]) {
        return dependencies;
      }
      return [
        type,
        ...types[type].reduce(
          (previous, t) => [
            ...previous,
            ...getDependencies(types, t.type, previous, t.contains, revision).filter(
              (dependency) => !previous.includes(dependency)
            )
          ],
          []
        )
      ];
    }
    function getMerkleTreeType(types, ctx) {
      if (ctx.parent && ctx.key) {
        const parentType = types[ctx.parent];
        const merkleType = parentType.find((t) => t.name === ctx.key);
        const isMerkleTree = isMerkleTreeType(merkleType);
        if (!isMerkleTree) {
          throw new Error(`${ctx.key} is not a merkle tree`);
        }
        if (merkleType.contains.endsWith("*")) {
          throw new Error(`Merkle tree contain property must not be an array but was given ${ctx.key}`);
        }
        return merkleType.contains;
      }
      return "raw";
    }
    function encodeType(types, type, revision = "0" /* Legacy */) {
      const [primary, ...dependencies] = getDependencies(types, type, void 0, void 0, revision);
      const newTypes = !primary ? [] : [primary, ...dependencies.sort()];
      const esc = revisionConfiguration[revision].escapeTypeString;
      return newTypes.map((dependency) => {
        const dependencyElements = types[dependency].map((t) => {
          const targetType = t.type === "enum" && revision === "1" /* Active */ ? t.contains : t.type;
          const typeString = targetType.match(/^\(.*\)$/) ? `(${targetType.slice(1, -1).split(",").map((e) => e ? esc(e) : e).join(",")})` : esc(targetType);
          return `${esc(t.name)}:${typeString}`;
        });
        return `${esc(dependency)}(${dependencyElements})`;
      }).join("");
    }
    function getTypeHash(types, type, revision = "0" /* Legacy */) {
      return getSelectorFromName(encodeType(types, type, revision));
    }
    function encodeValue(types, type, data, ctx = {}, revision = "0" /* Legacy */) {
      if (types[type]) {
        return [type, getStructHash(types, type, data, revision)];
      }
      if (revisionConfiguration[revision].presetTypes[type]) {
        return [
          type,
          getStructHash(
            revisionConfiguration[revision].presetTypes,
            type,
            data,
            revision
          )
        ];
      }
      if (type.endsWith("*")) {
        const hashes = data.map(
          (entry) => encodeValue(types, type.slice(0, -1), entry, void 0, revision)[1]
        );
        return [type, revisionConfiguration[revision].hashMethod(hashes)];
      }
      switch (type) {
        case "enum": {
          if (revision === "1" /* Active */) {
            const [variantKey, variantData] = Object.entries(data)[0];
            const parentType = types[ctx.parent][0];
            const enumType = types[parentType.contains];
            const variantType = enumType.find((t) => t.name === variantKey);
            const variantIndex = enumType.indexOf(variantType);
            const encodedSubtypes = variantType.type.slice(1, -1).split(",").map((subtype, index) => {
              if (!subtype)
                return subtype;
              const subtypeData = variantData[index];
              return encodeValue(types, subtype, subtypeData, void 0, revision)[1];
            });
            return [
              type,
              revisionConfiguration[revision].hashMethod([variantIndex, ...encodedSubtypes])
            ];
          }
          return [type, getHex(data)];
        }
        case "merkletree": {
          const merkleTreeType = getMerkleTreeType(types, ctx);
          const structHashes = data.map((struct) => {
            return encodeValue(types, merkleTreeType, struct, void 0, revision)[1];
          });
          const { root } = new MerkleTree(
            structHashes,
            revisionConfiguration[revision].hashMerkleMethod
          );
          return ["felt", root];
        }
        case "selector": {
          return ["felt", prepareSelector(data)];
        }
        case "string": {
          if (revision === "1" /* Active */) {
            const byteArray = byteArrayFromString(data);
            const elements = [
              byteArray.data.length,
              ...byteArray.data,
              byteArray.pending_word,
              byteArray.pending_word_len
            ];
            return [type, revisionConfiguration[revision].hashMethod(elements)];
          }
          return [type, getHex(data)];
        }
        case "felt":
        case "bool":
        case "u128":
        case "i128":
        case "ContractAddress":
        case "ClassHash":
        case "timestamp":
        case "shortstring":
          return [type, getHex(data)];
        default: {
          if (revision === "1" /* Active */) {
            throw new Error(`Unsupported type: ${type}`);
          }
          return [type, getHex(data)];
        }
      }
    }
    function encodeData(types, type, data, revision = "0" /* Legacy */) {
      const targetType = types[type] ?? revisionConfiguration[revision].presetTypes[type];
      const [returnTypes, values] = targetType.reduce(
        ([ts, vs], field) => {
          if (data[field.name] === void 0 || data[field.name] === null && field.type !== "enum") {
            throw new Error(`Cannot encode data: missing data for '${field.name}'`);
          }
          const value = data[field.name];
          const ctx = { parent: type, key: field.name };
          const [t, encodedValue] = encodeValue(types, field.type, value, ctx, revision);
          return [
            [...ts, t],
            [...vs, encodedValue]
          ];
        },
        [["felt"], [getTypeHash(types, type, revision)]]
      );
      return [returnTypes, values];
    }
    function getStructHash(types, type, data, revision = "0" /* Legacy */) {
      return revisionConfiguration[revision].hashMethod(encodeData(types, type, data, revision)[1]);
    }
    function getMessageHash(typedData, account) {
      if (!validateTypedData(typedData)) {
        throw new Error("Typed data does not match JSON schema");
      }
      const revision = identifyRevision(typedData);
      const { domain, hashMethod } = revisionConfiguration[revision];
      const message = [
        encodeShortString("StarkNet Message"),
        getStructHash(typedData.types, domain, typedData.domain, revision),
        account,
        getStructHash(typedData.types, typedData.primaryType, typedData.message, revision)
      ];
      return hashMethod(message);
    }

    // src/provider/index.ts
    var defaultProvider = new Provider({ rpc: { default: true } });

    // src/utils/events/index.ts
    var events_exports = {};
    __export(events_exports, {
      getAbiEvents: () => getAbiEvents,
      parseEvents: () => parseEvents
    });
    function getAbiEvents(abi) {
      return abi.filter((abiEntry) => abiEntry.type === "event" && (abiEntry.size || abiEntry.kind !== "enum")).reduce((acc, abiEntry) => {
        const entryName = abiEntry.name.slice(abiEntry.name.lastIndexOf(":") + 1);
        const abiEntryMod = { ...abiEntry };
        abiEntryMod.name = entryName;
        return {
          ...acc,
          [addHexPrefix(keccak(utf8ToArray(entryName)).toString(16))]: abiEntryMod
        };
      }, {});
    }
    function parseEvents(providerReceivedEvents, abiEvents, abiStructs, abiEnums) {
      const ret = providerReceivedEvents.flat().reduce((acc, recEvent) => {
        const abiEvent = abiEvents[recEvent.keys[0]];
        if (!abiEvent) {
          return acc;
        }
        const parsedEvent = {};
        parsedEvent[abiEvent.name] = {};
        recEvent.keys.shift();
        const keysIter = recEvent.keys[Symbol.iterator]();
        const dataIter = recEvent.data[Symbol.iterator]();
        const abiEventKeys = abiEvent.members?.filter((it) => it.kind === "key") || abiEvent.keys;
        const abiEventData = abiEvent.members?.filter((it) => it.kind === "data") || abiEvent.data;
        abiEventKeys.forEach((key) => {
          parsedEvent[abiEvent.name][key.name] = responseParser(
            keysIter,
            key,
            abiStructs,
            abiEnums,
            parsedEvent[abiEvent.name]
          );
        });
        abiEventData.forEach((data) => {
          parsedEvent[abiEvent.name][data.name] = responseParser(
            dataIter,
            data,
            abiStructs,
            abiEnums,
            parsedEvent[abiEvent.name]
          );
        });
        acc.push(parsedEvent);
        return acc;
      }, []);
      return ret;
    }

    // src/contract/default.ts
    var splitArgsAndOptions = (args) => {
      const options = [
        "blockIdentifier",
        "parseRequest",
        "parseResponse",
        "formatResponse",
        "maxFee",
        "nonce",
        "signature",
        "addressSalt"
      ];
      const lastArg = args[args.length - 1];
      if (typeof lastArg === "object" && options.some((x) => x in lastArg)) {
        return { args, options: args.pop() };
      }
      return { args };
    };
    function buildCall(contract, functionAbi) {
      return async function(...args) {
        const params = splitArgsAndOptions(args);
        return contract.call(functionAbi.name, params.args, {
          parseRequest: true,
          parseResponse: true,
          ...params.options
        });
      };
    }
    function buildInvoke(contract, functionAbi) {
      return async function(...args) {
        const params = splitArgsAndOptions(args);
        return contract.invoke(functionAbi.name, params.args, {
          parseRequest: true,
          ...params.options
        });
      };
    }
    function buildDefault(contract, functionAbi) {
      if (functionAbi.stateMutability === "view" || functionAbi.state_mutability === "view") {
        return buildCall(contract, functionAbi);
      }
      return buildInvoke(contract, functionAbi);
    }
    function buildPopulate(contract, functionAbi) {
      return function(...args) {
        return contract.populate(functionAbi.name, args);
      };
    }
    function buildEstimate(contract, functionAbi) {
      return function(...args) {
        return contract.estimate(functionAbi.name, args);
      };
    }
    function getCalldata(args, callback) {
      if (Array.isArray(args) && "__compiled__" in args)
        return args;
      if (Array.isArray(args) && Array.isArray(args[0]) && "__compiled__" in args[0])
        return args[0];
      return callback();
    }
    var Contract = class {
      abi;
      address;
      providerOrAccount;
      deployTransactionHash;
      structs;
      events;
      functions;
      callStatic;
      populateTransaction;
      estimateFee;
      callData;
      /**
       * Contract class to handle contract methods
       *
       * @param abi - Abi of the contract object
       * @param address (optional) - address to connect to
       * @param providerOrAccount (optional) - Provider or Account to attach to
       */
      constructor(abi, address, providerOrAccount = defaultProvider) {
        this.address = address && address.toLowerCase();
        this.providerOrAccount = providerOrAccount;
        this.callData = new CallData(abi);
        this.structs = CallData.getAbiStruct(abi);
        this.events = getAbiEvents(abi);
        const parser = createAbiParser(abi);
        this.abi = parser.getLegacyFormat();
        const options = { enumerable: true, value: {}, writable: false };
        Object.defineProperties(this, {
          functions: { enumerable: true, value: {}, writable: false },
          callStatic: { enumerable: true, value: {}, writable: false },
          populateTransaction: { enumerable: true, value: {}, writable: false },
          estimateFee: { enumerable: true, value: {}, writable: false }
        });
        this.abi.forEach((abiElement) => {
          if (abiElement.type !== "function")
            return;
          const signature = abiElement.name;
          if (!this[signature]) {
            Object.defineProperty(this, signature, {
              ...options,
              value: buildDefault(this, abiElement)
            });
          }
          if (!this.functions[signature]) {
            Object.defineProperty(this.functions, signature, {
              ...options,
              value: buildDefault(this, abiElement)
            });
          }
          if (!this.callStatic[signature]) {
            Object.defineProperty(this.callStatic, signature, {
              ...options,
              value: buildCall(this, abiElement)
            });
          }
          if (!this.populateTransaction[signature]) {
            Object.defineProperty(this.populateTransaction, signature, {
              ...options,
              value: buildPopulate(this, abiElement)
            });
          }
          if (!this.estimateFee[signature]) {
            Object.defineProperty(this.estimateFee, signature, {
              ...options,
              value: buildEstimate(this, abiElement)
            });
          }
        });
      }
      attach(address) {
        this.address = address;
      }
      connect(providerOrAccount) {
        this.providerOrAccount = providerOrAccount;
      }
      async deployed() {
        if (this.deployTransactionHash) {
          await this.providerOrAccount.waitForTransaction(this.deployTransactionHash);
          this.deployTransactionHash = void 0;
        }
        return this;
      }
      async call(method, args = [], {
        parseRequest = true,
        parseResponse = true,
        formatResponse = void 0,
        blockIdentifier = void 0
      } = {}) {
        assert(this.address !== null, "contract is not connected to an address");
        const calldata = getCalldata(args, () => {
          if (parseRequest) {
            this.callData.validate("CALL" /* CALL */, method, args);
            return this.callData.compile(method, args);
          }
          console.warn("Call skipped parsing but provided rawArgs, possible malfunction request");
          return args;
        });
        return this.providerOrAccount.callContract(
          {
            contractAddress: this.address,
            calldata,
            entrypoint: method
          },
          blockIdentifier
        ).then((x) => {
          if (!parseResponse) {
            return x.result;
          }
          if (formatResponse) {
            return this.callData.format(method, x.result, formatResponse);
          }
          return this.callData.parse(method, x.result);
        });
      }
      invoke(method, args = [], { parseRequest = true, maxFee, nonce, signature } = {}) {
        assert(this.address !== null, "contract is not connected to an address");
        const calldata = getCalldata(args, () => {
          if (parseRequest) {
            this.callData.validate("INVOKE" /* INVOKE */, method, args);
            return this.callData.compile(method, args);
          }
          console.warn("Invoke skipped parsing but provided rawArgs, possible malfunction request");
          return args;
        });
        const invocation = {
          contractAddress: this.address,
          calldata,
          entrypoint: method
        };
        if ("execute" in this.providerOrAccount) {
          return this.providerOrAccount.execute(invocation, void 0, {
            maxFee,
            nonce
          });
        }
        if (!nonce)
          throw new Error(`Nonce is required when invoking a function without an account`);
        console.warn(`Invoking ${method} without an account. This will not work on a public node.`);
        return this.providerOrAccount.invokeFunction(
          {
            ...invocation,
            signature
          },
          {
            nonce
          }
        );
      }
      async estimate(method, args = []) {
        assert(this.address !== null, "contract is not connected to an address");
        if (!getCalldata(args, () => false)) {
          this.callData.validate("INVOKE" /* INVOKE */, method, args);
        }
        const invocation = this.populate(method, args);
        if ("estimateInvokeFee" in this.providerOrAccount) {
          return this.providerOrAccount.estimateInvokeFee(invocation);
        }
        throw Error("Contract must be connected to the account contract to estimate");
      }
      populate(method, args = []) {
        const calldata = getCalldata(args, () => this.callData.compile(method, args));
        return {
          contractAddress: this.address,
          entrypoint: method,
          calldata
        };
      }
      parseEvents(receipt) {
        return parseEvents(
          receipt.events?.filter(
            (event) => cleanHex(event.from_address) === cleanHex(this.address),
            []
          ) || [],
          this.events,
          this.structs,
          CallData.getAbiEnum(this.abi)
        );
      }
      isCairo1() {
        return cairo_exports.isCairo1Abi(this.abi);
      }
      async getVersion() {
        return this.providerOrAccount.getContractVersion(this.address);
      }
      typedv1(tAbi) {
        return this;
      }
      typedv2(tAbi) {
        return this;
      }
    };
    function addAddressPadding(address) {
      return addHexPrefix(removeHexPrefix(toHex(address)).padStart(64, "0"));
    }
    function validateAndParseAddress(address) {
      assertInRange(address, ZERO, ADDR_BOUND - 1n, "Starknet Address");
      const result = addAddressPadding(address);
      if (!result.match(/^(0x)?[0-9a-fA-F]{64}$/)) {
        throw new Error("Invalid Address Format");
      }
      return result;
    }

    const RPC_URLS = {
        SN_MAIN: 'https://starknet-mainnet.public.blastapi.io',
        SN_SEPOLIA: 'https://starknet-sepolia.public.blastapi.io'
    };
    const ABI = [
        {
            name: 'argent::common::account::IAccount',
            type: 'interface',
            items: [
                {
                    name: 'is_valid_signature',
                    type: 'function',
                    inputs: [
                        {
                            name: 'hash',
                            type: 'core::felt252'
                        },
                        {
                            name: 'signature',
                            type: 'core::array::Array::<core::felt252>'
                        }
                    ],
                    outputs: [
                        {
                            type: 'core::felt252'
                        }
                    ],
                    state_mutability: 'view'
                }
            ]
        }
    ];
    function getProvider(network, options) {
        var _a;
        if (!RPC_URLS[network])
            throw new Error('Invalid network');
        return new RpcProvider({
            nodeUrl: (_a = options === null || options === void 0 ? void 0 : options.broviderUrl) !== null && _a !== void 0 ? _a : RPC_URLS[network]
        });
    }
    function isStarknetMessage(data) {
        return !!data.primaryType && !!data.types.StarkNetDomain;
    }
    function getHash$2(data, address) {
        const { domain, types, primaryType, message } = data;
        return typedData_exports.getMessageHash({ types, primaryType, domain, message }, address);
    }
    function verify$2(address_1, sig_1, data_1) {
        return __awaiter$c(this, arguments, void 0, function* (address, sig, data, network = 'SN_MAIN', options = {}) {
            try {
                const contractAccount = new Contract(ABI, address, getProvider(network, options));
                if (sig.length < 2) {
                    throw new Error('Invalid signature format');
                }
                const result = yield contractAccount.is_valid_signature(getHash$2(data, address), sig.slice(-2));
                return BigNumber.from(result).eq(BigNumber.from('370462705988'));
            }
            catch (e) {
                if (e.message.includes('Contract not found')) {
                    throw new Error('Contract not deployed');
                }
                throw e;
            }
        });
    }

    var starknet = /*#__PURE__*/Object.freeze({
        __proto__: null,
        isStarknetMessage: isStarknetMessage,
        getHash: getHash$2,
        'default': verify$2
    });

    function pbkdf2$1(password, salt, iterations, keylen, hashAlgorithm) {
        password = arrayify(password);
        salt = arrayify(salt);
        let hLen;
        let l = 1;
        const DK = new Uint8Array(keylen);
        const block1 = new Uint8Array(salt.length + 4);
        block1.set(salt);
        //salt.copy(block1, 0, 0, salt.length)
        let r;
        let T;
        for (let i = 1; i <= l; i++) {
            //block1.writeUInt32BE(i, salt.length)
            block1[salt.length] = (i >> 24) & 0xff;
            block1[salt.length + 1] = (i >> 16) & 0xff;
            block1[salt.length + 2] = (i >> 8) & 0xff;
            block1[salt.length + 3] = i & 0xff;
            //let U = createHmac(password).update(block1).digest();
            let U = arrayify(computeHmac(hashAlgorithm, password, block1));
            if (!hLen) {
                hLen = U.length;
                T = new Uint8Array(hLen);
                l = Math.ceil(keylen / hLen);
                r = keylen - (l - 1) * hLen;
            }
            //U.copy(T, 0, 0, hLen)
            T.set(U);
            for (let j = 1; j < iterations; j++) {
                //U = createHmac(password).update(U).digest();
                U = arrayify(computeHmac(hashAlgorithm, password, U));
                for (let k = 0; k < hLen; k++)
                    T[k] ^= U[k];
            }
            const destPos = (i - 1) * hLen;
            const len = (i === l ? r : hLen);
            //T.copy(DK, destPos, 0, len)
            DK.set(arrayify(T).slice(0, len), destPos);
        }
        return hexlify(DK);
    }

    const version$3 = "wordlists/5.7.0";

    const logger$4 = new Logger(version$3);
    class Wordlist {
        constructor(locale) {
            logger$4.checkAbstract(new.target, Wordlist);
            defineReadOnly(this, "locale", locale);
        }
        // Subclasses may override this
        split(mnemonic) {
            return mnemonic.toLowerCase().split(/ +/g);
        }
        // Subclasses may override this
        join(words) {
            return words.join(" ");
        }
        static check(wordlist) {
            const words = [];
            for (let i = 0; i < 2048; i++) {
                const word = wordlist.getWord(i);
                /* istanbul ignore if */
                if (i !== wordlist.getWordIndex(word)) {
                    return "0x";
                }
                words.push(word);
            }
            return id(words.join("\n") + "\n");
        }
        static register(lang, name) {
            if (!name) {
                name = lang.locale;
            }
        }
    }

    const words = "AbandonAbilityAbleAboutAboveAbsentAbsorbAbstractAbsurdAbuseAccessAccidentAccountAccuseAchieveAcidAcousticAcquireAcrossActActionActorActressActualAdaptAddAddictAddressAdjustAdmitAdultAdvanceAdviceAerobicAffairAffordAfraidAgainAgeAgentAgreeAheadAimAirAirportAisleAlarmAlbumAlcoholAlertAlienAllAlleyAllowAlmostAloneAlphaAlreadyAlsoAlterAlwaysAmateurAmazingAmongAmountAmusedAnalystAnchorAncientAngerAngleAngryAnimalAnkleAnnounceAnnualAnotherAnswerAntennaAntiqueAnxietyAnyApartApologyAppearAppleApproveAprilArchArcticAreaArenaArgueArmArmedArmorArmyAroundArrangeArrestArriveArrowArtArtefactArtistArtworkAskAspectAssaultAssetAssistAssumeAsthmaAthleteAtomAttackAttendAttitudeAttractAuctionAuditAugustAuntAuthorAutoAutumnAverageAvocadoAvoidAwakeAwareAwayAwesomeAwfulAwkwardAxisBabyBachelorBaconBadgeBagBalanceBalconyBallBambooBananaBannerBarBarelyBargainBarrelBaseBasicBasketBattleBeachBeanBeautyBecauseBecomeBeefBeforeBeginBehaveBehindBelieveBelowBeltBenchBenefitBestBetrayBetterBetweenBeyondBicycleBidBikeBindBiologyBirdBirthBitterBlackBladeBlameBlanketBlastBleakBlessBlindBloodBlossomBlouseBlueBlurBlushBoardBoatBodyBoilBombBoneBonusBookBoostBorderBoringBorrowBossBottomBounceBoxBoyBracketBrainBrandBrassBraveBreadBreezeBrickBridgeBriefBrightBringBriskBroccoliBrokenBronzeBroomBrotherBrownBrushBubbleBuddyBudgetBuffaloBuildBulbBulkBulletBundleBunkerBurdenBurgerBurstBusBusinessBusyButterBuyerBuzzCabbageCabinCableCactusCageCakeCallCalmCameraCampCanCanalCancelCandyCannonCanoeCanvasCanyonCapableCapitalCaptainCarCarbonCardCargoCarpetCarryCartCaseCashCasinoCastleCasualCatCatalogCatchCategoryCattleCaughtCauseCautionCaveCeilingCeleryCementCensusCenturyCerealCertainChairChalkChampionChangeChaosChapterChargeChaseChatCheapCheckCheeseChefCherryChestChickenChiefChildChimneyChoiceChooseChronicChuckleChunkChurnCigarCinnamonCircleCitizenCityCivilClaimClapClarifyClawClayCleanClerkCleverClickClientCliffClimbClinicClipClockClogCloseClothCloudClownClubClumpClusterClutchCoachCoastCoconutCodeCoffeeCoilCoinCollectColorColumnCombineComeComfortComicCommonCompanyConcertConductConfirmCongressConnectConsiderControlConvinceCookCoolCopperCopyCoralCoreCornCorrectCostCottonCouchCountryCoupleCourseCousinCoverCoyoteCrackCradleCraftCramCraneCrashCraterCrawlCrazyCreamCreditCreekCrewCricketCrimeCrispCriticCropCrossCrouchCrowdCrucialCruelCruiseCrumbleCrunchCrushCryCrystalCubeCultureCupCupboardCuriousCurrentCurtainCurveCushionCustomCuteCycleDadDamageDampDanceDangerDaringDashDaughterDawnDayDealDebateDebrisDecadeDecemberDecideDeclineDecorateDecreaseDeerDefenseDefineDefyDegreeDelayDeliverDemandDemiseDenialDentistDenyDepartDependDepositDepthDeputyDeriveDescribeDesertDesignDeskDespairDestroyDetailDetectDevelopDeviceDevoteDiagramDialDiamondDiaryDiceDieselDietDifferDigitalDignityDilemmaDinnerDinosaurDirectDirtDisagreeDiscoverDiseaseDishDismissDisorderDisplayDistanceDivertDivideDivorceDizzyDoctorDocumentDogDollDolphinDomainDonateDonkeyDonorDoorDoseDoubleDoveDraftDragonDramaDrasticDrawDreamDressDriftDrillDrinkDripDriveDropDrumDryDuckDumbDuneDuringDustDutchDutyDwarfDynamicEagerEagleEarlyEarnEarthEasilyEastEasyEchoEcologyEconomyEdgeEditEducateEffortEggEightEitherElbowElderElectricElegantElementElephantElevatorEliteElseEmbarkEmbodyEmbraceEmergeEmotionEmployEmpowerEmptyEnableEnactEndEndlessEndorseEnemyEnergyEnforceEngageEngineEnhanceEnjoyEnlistEnoughEnrichEnrollEnsureEnterEntireEntryEnvelopeEpisodeEqualEquipEraEraseErodeErosionErrorEruptEscapeEssayEssenceEstateEternalEthicsEvidenceEvilEvokeEvolveExactExampleExcessExchangeExciteExcludeExcuseExecuteExerciseExhaustExhibitExileExistExitExoticExpandExpectExpireExplainExposeExpressExtendExtraEyeEyebrowFabricFaceFacultyFadeFaintFaithFallFalseFameFamilyFamousFanFancyFantasyFarmFashionFatFatalFatherFatigueFaultFavoriteFeatureFebruaryFederalFeeFeedFeelFemaleFenceFestivalFetchFeverFewFiberFictionFieldFigureFileFilmFilterFinalFindFineFingerFinishFireFirmFirstFiscalFishFitFitnessFixFlagFlameFlashFlatFlavorFleeFlightFlipFloatFlockFloorFlowerFluidFlushFlyFoamFocusFogFoilFoldFollowFoodFootForceForestForgetForkFortuneForumForwardFossilFosterFoundFoxFragileFrameFrequentFreshFriendFringeFrogFrontFrostFrownFrozenFruitFuelFunFunnyFurnaceFuryFutureGadgetGainGalaxyGalleryGameGapGarageGarbageGardenGarlicGarmentGasGaspGateGatherGaugeGazeGeneralGeniusGenreGentleGenuineGestureGhostGiantGiftGiggleGingerGiraffeGirlGiveGladGlanceGlareGlassGlideGlimpseGlobeGloomGloryGloveGlowGlueGoatGoddessGoldGoodGooseGorillaGospelGossipGovernGownGrabGraceGrainGrantGrapeGrassGravityGreatGreenGridGriefGritGroceryGroupGrowGruntGuardGuessGuideGuiltGuitarGunGymHabitHairHalfHammerHamsterHandHappyHarborHardHarshHarvestHatHaveHawkHazardHeadHealthHeartHeavyHedgehogHeightHelloHelmetHelpHenHeroHiddenHighHillHintHipHireHistoryHobbyHockeyHoldHoleHolidayHollowHomeHoneyHoodHopeHornHorrorHorseHospitalHostHotelHourHoverHubHugeHumanHumbleHumorHundredHungryHuntHurdleHurryHurtHusbandHybridIceIconIdeaIdentifyIdleIgnoreIllIllegalIllnessImageImitateImmenseImmuneImpactImposeImproveImpulseInchIncludeIncomeIncreaseIndexIndicateIndoorIndustryInfantInflictInformInhaleInheritInitialInjectInjuryInmateInnerInnocentInputInquiryInsaneInsectInsideInspireInstallIntactInterestIntoInvestInviteInvolveIronIslandIsolateIssueItemIvoryJacketJaguarJarJazzJealousJeansJellyJewelJobJoinJokeJourneyJoyJudgeJuiceJumpJungleJuniorJunkJustKangarooKeenKeepKetchupKeyKickKidKidneyKindKingdomKissKitKitchenKiteKittenKiwiKneeKnifeKnockKnowLabLabelLaborLadderLadyLakeLampLanguageLaptopLargeLaterLatinLaughLaundryLavaLawLawnLawsuitLayerLazyLeaderLeafLearnLeaveLectureLeftLegLegalLegendLeisureLemonLendLengthLensLeopardLessonLetterLevelLiarLibertyLibraryLicenseLifeLiftLightLikeLimbLimitLinkLionLiquidListLittleLiveLizardLoadLoanLobsterLocalLockLogicLonelyLongLoopLotteryLoudLoungeLoveLoyalLuckyLuggageLumberLunarLunchLuxuryLyricsMachineMadMagicMagnetMaidMailMainMajorMakeMammalManManageMandateMangoMansionManualMapleMarbleMarchMarginMarineMarketMarriageMaskMassMasterMatchMaterialMathMatrixMatterMaximumMazeMeadowMeanMeasureMeatMechanicMedalMediaMelodyMeltMemberMemoryMentionMenuMercyMergeMeritMerryMeshMessageMetalMethodMiddleMidnightMilkMillionMimicMindMinimumMinorMinuteMiracleMirrorMiseryMissMistakeMixMixedMixtureMobileModelModifyMomMomentMonitorMonkeyMonsterMonthMoonMoralMoreMorningMosquitoMotherMotionMotorMountainMouseMoveMovieMuchMuffinMuleMultiplyMuscleMuseumMushroomMusicMustMutualMyselfMysteryMythNaiveNameNapkinNarrowNastyNationNatureNearNeckNeedNegativeNeglectNeitherNephewNerveNestNetNetworkNeutralNeverNewsNextNiceNightNobleNoiseNomineeNoodleNormalNorthNoseNotableNoteNothingNoticeNovelNowNuclearNumberNurseNutOakObeyObjectObligeObscureObserveObtainObviousOccurOceanOctoberOdorOffOfferOfficeOftenOilOkayOldOliveOlympicOmitOnceOneOnionOnlineOnlyOpenOperaOpinionOpposeOptionOrangeOrbitOrchardOrderOrdinaryOrganOrientOriginalOrphanOstrichOtherOutdoorOuterOutputOutsideOvalOvenOverOwnOwnerOxygenOysterOzonePactPaddlePagePairPalacePalmPandaPanelPanicPantherPaperParadeParentParkParrotPartyPassPatchPathPatientPatrolPatternPausePavePaymentPeacePeanutPearPeasantPelicanPenPenaltyPencilPeoplePepperPerfectPermitPersonPetPhonePhotoPhrasePhysicalPianoPicnicPicturePiecePigPigeonPillPilotPinkPioneerPipePistolPitchPizzaPlacePlanetPlasticPlatePlayPleasePledgePluckPlugPlungePoemPoetPointPolarPolePolicePondPonyPoolPopularPortionPositionPossiblePostPotatoPotteryPovertyPowderPowerPracticePraisePredictPreferPreparePresentPrettyPreventPricePridePrimaryPrintPriorityPrisonPrivatePrizeProblemProcessProduceProfitProgramProjectPromoteProofPropertyProsperProtectProudProvidePublicPuddingPullPulpPulsePumpkinPunchPupilPuppyPurchasePurityPurposePursePushPutPuzzlePyramidQualityQuantumQuarterQuestionQuickQuitQuizQuoteRabbitRaccoonRaceRackRadarRadioRailRainRaiseRallyRampRanchRandomRangeRapidRareRateRatherRavenRawRazorReadyRealReasonRebelRebuildRecallReceiveRecipeRecordRecycleReduceReflectReformRefuseRegionRegretRegularRejectRelaxReleaseReliefRelyRemainRememberRemindRemoveRenderRenewRentReopenRepairRepeatReplaceReportRequireRescueResembleResistResourceResponseResultRetireRetreatReturnReunionRevealReviewRewardRhythmRibRibbonRiceRichRideRidgeRifleRightRigidRingRiotRippleRiskRitualRivalRiverRoadRoastRobotRobustRocketRomanceRoofRookieRoomRoseRotateRoughRoundRouteRoyalRubberRudeRugRuleRunRunwayRuralSadSaddleSadnessSafeSailSaladSalmonSalonSaltSaluteSameSampleSandSatisfySatoshiSauceSausageSaveSayScaleScanScareScatterSceneSchemeSchoolScienceScissorsScorpionScoutScrapScreenScriptScrubSeaSearchSeasonSeatSecondSecretSectionSecuritySeedSeekSegmentSelectSellSeminarSeniorSenseSentenceSeriesServiceSessionSettleSetupSevenShadowShaftShallowShareShedShellSheriffShieldShiftShineShipShiverShockShoeShootShopShortShoulderShoveShrimpShrugShuffleShySiblingSickSideSiegeSightSignSilentSilkSillySilverSimilarSimpleSinceSingSirenSisterSituateSixSizeSkateSketchSkiSkillSkinSkirtSkullSlabSlamSleepSlenderSliceSlideSlightSlimSloganSlotSlowSlushSmallSmartSmileSmokeSmoothSnackSnakeSnapSniffSnowSoapSoccerSocialSockSodaSoftSolarSoldierSolidSolutionSolveSomeoneSongSoonSorrySortSoulSoundSoupSourceSouthSpaceSpareSpatialSpawnSpeakSpecialSpeedSpellSpendSphereSpiceSpiderSpikeSpinSpiritSplitSpoilSponsorSpoonSportSpotSpraySpreadSpringSpySquareSqueezeSquirrelStableStadiumStaffStageStairsStampStandStartStateStaySteakSteelStemStepStereoStickStillStingStockStomachStoneStoolStoryStoveStrategyStreetStrikeStrongStruggleStudentStuffStumbleStyleSubjectSubmitSubwaySuccessSuchSuddenSufferSugarSuggestSuitSummerSunSunnySunsetSuperSupplySupremeSureSurfaceSurgeSurpriseSurroundSurveySuspectSustainSwallowSwampSwapSwarmSwearSweetSwiftSwimSwingSwitchSwordSymbolSymptomSyrupSystemTableTackleTagTailTalentTalkTankTapeTargetTaskTasteTattooTaxiTeachTeamTellTenTenantTennisTentTermTestTextThankThatThemeThenTheoryThereTheyThingThisThoughtThreeThriveThrowThumbThunderTicketTideTigerTiltTimberTimeTinyTipTiredTissueTitleToastTobaccoTodayToddlerToeTogetherToiletTokenTomatoTomorrowToneTongueTonightToolToothTopTopicToppleTorchTornadoTortoiseTossTotalTouristTowardTowerTownToyTrackTradeTrafficTragicTrainTransferTrapTrashTravelTrayTreatTreeTrendTrialTribeTrickTriggerTrimTripTrophyTroubleTruckTrueTrulyTrumpetTrustTruthTryTubeTuitionTumbleTunaTunnelTurkeyTurnTurtleTwelveTwentyTwiceTwinTwistTwoTypeTypicalUglyUmbrellaUnableUnawareUncleUncoverUnderUndoUnfairUnfoldUnhappyUniformUniqueUnitUniverseUnknownUnlockUntilUnusualUnveilUpdateUpgradeUpholdUponUpperUpsetUrbanUrgeUsageUseUsedUsefulUselessUsualUtilityVacantVacuumVagueValidValleyValveVanVanishVaporVariousVastVaultVehicleVelvetVendorVentureVenueVerbVerifyVersionVeryVesselVeteranViableVibrantViciousVictoryVideoViewVillageVintageViolinVirtualVirusVisaVisitVisualVitalVividVocalVoiceVoidVolcanoVolumeVoteVoyageWageWagonWaitWalkWallWalnutWantWarfareWarmWarriorWashWaspWasteWaterWaveWayWealthWeaponWearWeaselWeatherWebWeddingWeekendWeirdWelcomeWestWetWhaleWhatWheatWheelWhenWhereWhipWhisperWideWidthWifeWildWillWinWindowWineWingWinkWinnerWinterWireWisdomWiseWishWitnessWolfWomanWonderWoodWoolWordWorkWorldWorryWorthWrapWreckWrestleWristWriteWrongYardYearYellowYouYoungYouthZebraZeroZoneZoo";
    let wordlist = null;
    function loadWords(lang) {
        if (wordlist != null) {
            return;
        }
        wordlist = words.replace(/([A-Z])/g, " $1").toLowerCase().substring(1).split(" ");
        // Verify the computed list matches the official list
        /* istanbul ignore if */
        if (Wordlist.check(lang) !== "0x3c8acc1e7b08d8e76f9fda015ef48dc8c710a73cb7e0f77b2c18a9b5a7adde60") {
            wordlist = null;
            throw new Error("BIP39 Wordlist for en (English) FAILED");
        }
    }
    class LangEn extends Wordlist {
        constructor() {
            super("en");
        }
        getWord(index) {
            loadWords(this);
            return wordlist[index];
        }
        getWordIndex(word) {
            loadWords(this);
            return wordlist.indexOf(word);
        }
    }
    const langEn = new LangEn();
    Wordlist.register(langEn);

    const wordlists = {
        en: langEn
    };

    const version$2 = "hdnode/5.7.0";

    const logger$3 = new Logger(version$2);
    const N = BigNumber.from("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
    // "Bitcoin seed"
    const MasterSecret = toUtf8Bytes("Bitcoin seed");
    const HardenedBit = 0x80000000;
    // Returns a byte with the MSB bits set
    function getUpperMask(bits) {
        return ((1 << bits) - 1) << (8 - bits);
    }
    // Returns a byte with the LSB bits set
    function getLowerMask(bits) {
        return (1 << bits) - 1;
    }
    function bytes32(value) {
        return hexZeroPad(hexlify(value), 32);
    }
    function base58check(data) {
        return Base58.encode(concat([data, hexDataSlice(sha256$1(sha256$1(data)), 0, 4)]));
    }
    function getWordlist(wordlist) {
        if (wordlist == null) {
            return wordlists["en"];
        }
        if (typeof (wordlist) === "string") {
            const words = wordlists[wordlist];
            if (words == null) {
                logger$3.throwArgumentError("unknown locale", "wordlist", wordlist);
            }
            return words;
        }
        return wordlist;
    }
    const _constructorGuard = {};
    const defaultPath = "m/44'/60'/0'/0/0";
    class HDNode {
        /**
         *  This constructor should not be called directly.
         *
         *  Please use:
         *   - fromMnemonic
         *   - fromSeed
         */
        constructor(constructorGuard, privateKey, publicKey, parentFingerprint, chainCode, index, depth, mnemonicOrPath) {
            /* istanbul ignore if */
            if (constructorGuard !== _constructorGuard) {
                throw new Error("HDNode constructor cannot be called directly");
            }
            if (privateKey) {
                const signingKey = new SigningKey(privateKey);
                defineReadOnly(this, "privateKey", signingKey.privateKey);
                defineReadOnly(this, "publicKey", signingKey.compressedPublicKey);
            }
            else {
                defineReadOnly(this, "privateKey", null);
                defineReadOnly(this, "publicKey", hexlify(publicKey));
            }
            defineReadOnly(this, "parentFingerprint", parentFingerprint);
            defineReadOnly(this, "fingerprint", hexDataSlice(ripemd160(sha256$1(this.publicKey)), 0, 4));
            defineReadOnly(this, "address", computeAddress(this.publicKey));
            defineReadOnly(this, "chainCode", chainCode);
            defineReadOnly(this, "index", index);
            defineReadOnly(this, "depth", depth);
            if (mnemonicOrPath == null) {
                // From a source that does not preserve the path (e.g. extended keys)
                defineReadOnly(this, "mnemonic", null);
                defineReadOnly(this, "path", null);
            }
            else if (typeof (mnemonicOrPath) === "string") {
                // From a source that does not preserve the mnemonic (e.g. neutered)
                defineReadOnly(this, "mnemonic", null);
                defineReadOnly(this, "path", mnemonicOrPath);
            }
            else {
                // From a fully qualified source
                defineReadOnly(this, "mnemonic", mnemonicOrPath);
                defineReadOnly(this, "path", mnemonicOrPath.path);
            }
        }
        get extendedKey() {
            // We only support the mainnet values for now, but if anyone needs
            // testnet values, let me know. I believe current sentiment is that
            // we should always use mainnet, and use BIP-44 to derive the network
            //   - Mainnet: public=0x0488B21E, private=0x0488ADE4
            //   - Testnet: public=0x043587CF, private=0x04358394
            if (this.depth >= 256) {
                throw new Error("Depth too large!");
            }
            return base58check(concat([
                ((this.privateKey != null) ? "0x0488ADE4" : "0x0488B21E"),
                hexlify(this.depth),
                this.parentFingerprint,
                hexZeroPad(hexlify(this.index), 4),
                this.chainCode,
                ((this.privateKey != null) ? concat(["0x00", this.privateKey]) : this.publicKey),
            ]));
        }
        neuter() {
            return new HDNode(_constructorGuard, null, this.publicKey, this.parentFingerprint, this.chainCode, this.index, this.depth, this.path);
        }
        _derive(index) {
            if (index > 0xffffffff) {
                throw new Error("invalid index - " + String(index));
            }
            // Base path
            let path = this.path;
            if (path) {
                path += "/" + (index & ~HardenedBit);
            }
            const data = new Uint8Array(37);
            if (index & HardenedBit) {
                if (!this.privateKey) {
                    throw new Error("cannot derive child of neutered node");
                }
                // Data = 0x00 || ser_256(k_par)
                data.set(arrayify(this.privateKey), 1);
                // Hardened path
                if (path) {
                    path += "'";
                }
            }
            else {
                // Data = ser_p(point(k_par))
                data.set(arrayify(this.publicKey));
            }
            // Data += ser_32(i)
            for (let i = 24; i >= 0; i -= 8) {
                data[33 + (i >> 3)] = ((index >> (24 - i)) & 0xff);
            }
            const I = arrayify(computeHmac(SupportedAlgorithm.sha512, this.chainCode, data));
            const IL = I.slice(0, 32);
            const IR = I.slice(32);
            // The private key
            let ki = null;
            // The public key
            let Ki = null;
            if (this.privateKey) {
                ki = bytes32(BigNumber.from(IL).add(this.privateKey).mod(N));
            }
            else {
                const ek = new SigningKey(hexlify(IL));
                Ki = ek._addPoint(this.publicKey);
            }
            let mnemonicOrPath = path;
            const srcMnemonic = this.mnemonic;
            if (srcMnemonic) {
                mnemonicOrPath = Object.freeze({
                    phrase: srcMnemonic.phrase,
                    path: path,
                    locale: (srcMnemonic.locale || "en")
                });
            }
            return new HDNode(_constructorGuard, ki, Ki, this.fingerprint, bytes32(IR), index, this.depth + 1, mnemonicOrPath);
        }
        derivePath(path) {
            const components = path.split("/");
            if (components.length === 0 || (components[0] === "m" && this.depth !== 0)) {
                throw new Error("invalid path - " + path);
            }
            if (components[0] === "m") {
                components.shift();
            }
            let result = this;
            for (let i = 0; i < components.length; i++) {
                const component = components[i];
                if (component.match(/^[0-9]+'$/)) {
                    const index = parseInt(component.substring(0, component.length - 1));
                    if (index >= HardenedBit) {
                        throw new Error("invalid path index - " + component);
                    }
                    result = result._derive(HardenedBit + index);
                }
                else if (component.match(/^[0-9]+$/)) {
                    const index = parseInt(component);
                    if (index >= HardenedBit) {
                        throw new Error("invalid path index - " + component);
                    }
                    result = result._derive(index);
                }
                else {
                    throw new Error("invalid path component - " + component);
                }
            }
            return result;
        }
        static _fromSeed(seed, mnemonic) {
            const seedArray = arrayify(seed);
            if (seedArray.length < 16 || seedArray.length > 64) {
                throw new Error("invalid seed");
            }
            const I = arrayify(computeHmac(SupportedAlgorithm.sha512, MasterSecret, seedArray));
            return new HDNode(_constructorGuard, bytes32(I.slice(0, 32)), null, "0x00000000", bytes32(I.slice(32)), 0, 0, mnemonic);
        }
        static fromMnemonic(mnemonic, password, wordlist) {
            // If a locale name was passed in, find the associated wordlist
            wordlist = getWordlist(wordlist);
            // Normalize the case and spacing in the mnemonic (throws if the mnemonic is invalid)
            mnemonic = entropyToMnemonic(mnemonicToEntropy(mnemonic, wordlist), wordlist);
            return HDNode._fromSeed(mnemonicToSeed(mnemonic, password), {
                phrase: mnemonic,
                path: "m",
                locale: wordlist.locale
            });
        }
        static fromSeed(seed) {
            return HDNode._fromSeed(seed, null);
        }
        static fromExtendedKey(extendedKey) {
            const bytes = Base58.decode(extendedKey);
            if (bytes.length !== 82 || base58check(bytes.slice(0, 78)) !== extendedKey) {
                logger$3.throwArgumentError("invalid extended key", "extendedKey", "[REDACTED]");
            }
            const depth = bytes[4];
            const parentFingerprint = hexlify(bytes.slice(5, 9));
            const index = parseInt(hexlify(bytes.slice(9, 13)).substring(2), 16);
            const chainCode = hexlify(bytes.slice(13, 45));
            const key = bytes.slice(45, 78);
            switch (hexlify(bytes.slice(0, 4))) {
                // Public Key
                case "0x0488b21e":
                case "0x043587cf":
                    return new HDNode(_constructorGuard, null, hexlify(key), parentFingerprint, chainCode, index, depth, null);
                // Private Key
                case "0x0488ade4":
                case "0x04358394 ":
                    if (key[0] !== 0) {
                        break;
                    }
                    return new HDNode(_constructorGuard, hexlify(key.slice(1)), null, parentFingerprint, chainCode, index, depth, null);
            }
            return logger$3.throwArgumentError("invalid extended key", "extendedKey", "[REDACTED]");
        }
    }
    function mnemonicToSeed(mnemonic, password) {
        if (!password) {
            password = "";
        }
        const salt = toUtf8Bytes("mnemonic" + password, UnicodeNormalizationForm.NFKD);
        return pbkdf2$1(toUtf8Bytes(mnemonic, UnicodeNormalizationForm.NFKD), salt, 2048, 64, "sha512");
    }
    function mnemonicToEntropy(mnemonic, wordlist) {
        wordlist = getWordlist(wordlist);
        logger$3.checkNormalize();
        const words = wordlist.split(mnemonic);
        if ((words.length % 3) !== 0) {
            throw new Error("invalid mnemonic");
        }
        const entropy = arrayify(new Uint8Array(Math.ceil(11 * words.length / 8)));
        let offset = 0;
        for (let i = 0; i < words.length; i++) {
            let index = wordlist.getWordIndex(words[i].normalize("NFKD"));
            if (index === -1) {
                throw new Error("invalid mnemonic");
            }
            for (let bit = 0; bit < 11; bit++) {
                if (index & (1 << (10 - bit))) {
                    entropy[offset >> 3] |= (1 << (7 - (offset % 8)));
                }
                offset++;
            }
        }
        const entropyBits = 32 * words.length / 3;
        const checksumBits = words.length / 3;
        const checksumMask = getUpperMask(checksumBits);
        const checksum = arrayify(sha256$1(entropy.slice(0, entropyBits / 8)))[0] & checksumMask;
        if (checksum !== (entropy[entropy.length - 1] & checksumMask)) {
            throw new Error("invalid checksum");
        }
        return hexlify(entropy.slice(0, entropyBits / 8));
    }
    function entropyToMnemonic(entropy, wordlist) {
        wordlist = getWordlist(wordlist);
        entropy = arrayify(entropy);
        if ((entropy.length % 4) !== 0 || entropy.length < 16 || entropy.length > 32) {
            throw new Error("invalid entropy");
        }
        const indices = [0];
        let remainingBits = 11;
        for (let i = 0; i < entropy.length; i++) {
            // Consume the whole byte (with still more to go)
            if (remainingBits > 8) {
                indices[indices.length - 1] <<= 8;
                indices[indices.length - 1] |= entropy[i];
                remainingBits -= 8;
                // This byte will complete an 11-bit index
            }
            else {
                indices[indices.length - 1] <<= remainingBits;
                indices[indices.length - 1] |= entropy[i] >> (8 - remainingBits);
                // Start the next word
                indices.push(entropy[i] & getLowerMask(8 - remainingBits));
                remainingBits += 3;
            }
        }
        // Compute the checksum bits
        const checksumBits = entropy.length / 4;
        const checksum = arrayify(sha256$1(entropy))[0] & getUpperMask(checksumBits);
        // Shift the checksum into the word indices
        indices[indices.length - 1] <<= checksumBits;
        indices[indices.length - 1] |= (checksum >> (8 - checksumBits));
        return wordlist.join(indices.map((index) => wordlist.getWord(index)));
    }

    var aesJs = createCommonjsModule$1(function (module, exports) {

    (function(root) {

        function checkInt(value) {
            return (parseInt(value) === value);
        }

        function checkInts(arrayish) {
            if (!checkInt(arrayish.length)) { return false; }

            for (var i = 0; i < arrayish.length; i++) {
                if (!checkInt(arrayish[i]) || arrayish[i] < 0 || arrayish[i] > 255) {
                    return false;
                }
            }

            return true;
        }

        function coerceArray(arg, copy) {

            // ArrayBuffer view
            if (arg.buffer && ArrayBuffer.isView(arg) && arg.name === 'Uint8Array') {

                if (copy) {
                    if (arg.slice) {
                        arg = arg.slice();
                    } else {
                        arg = Array.prototype.slice.call(arg);
                    }
                }

                return arg;
            }

            // It's an array; check it is a valid representation of a byte
            if (Array.isArray(arg)) {
                if (!checkInts(arg)) {
                    throw new Error('Array contains invalid value: ' + arg);
                }

                return new Uint8Array(arg);
            }

            // Something else, but behaves like an array (maybe a Buffer? Arguments?)
            if (checkInt(arg.length) && checkInts(arg)) {
                return new Uint8Array(arg);
            }

            throw new Error('unsupported array-like object');
        }

        function createArray(length) {
            return new Uint8Array(length);
        }

        function copyArray(sourceArray, targetArray, targetStart, sourceStart, sourceEnd) {
            if (sourceStart != null || sourceEnd != null) {
                if (sourceArray.slice) {
                    sourceArray = sourceArray.slice(sourceStart, sourceEnd);
                } else {
                    sourceArray = Array.prototype.slice.call(sourceArray, sourceStart, sourceEnd);
                }
            }
            targetArray.set(sourceArray, targetStart);
        }



        var convertUtf8 = (function() {
            function toBytes(text) {
                var result = [], i = 0;
                text = encodeURI(text);
                while (i < text.length) {
                    var c = text.charCodeAt(i++);

                    // if it is a % sign, encode the following 2 bytes as a hex value
                    if (c === 37) {
                        result.push(parseInt(text.substr(i, 2), 16));
                        i += 2;

                    // otherwise, just the actual byte
                    } else {
                        result.push(c);
                    }
                }

                return coerceArray(result);
            }

            function fromBytes(bytes) {
                var result = [], i = 0;

                while (i < bytes.length) {
                    var c = bytes[i];

                    if (c < 128) {
                        result.push(String.fromCharCode(c));
                        i++;
                    } else if (c > 191 && c < 224) {
                        result.push(String.fromCharCode(((c & 0x1f) << 6) | (bytes[i + 1] & 0x3f)));
                        i += 2;
                    } else {
                        result.push(String.fromCharCode(((c & 0x0f) << 12) | ((bytes[i + 1] & 0x3f) << 6) | (bytes[i + 2] & 0x3f)));
                        i += 3;
                    }
                }

                return result.join('');
            }

            return {
                toBytes: toBytes,
                fromBytes: fromBytes,
            }
        })();

        var convertHex = (function() {
            function toBytes(text) {
                var result = [];
                for (var i = 0; i < text.length; i += 2) {
                    result.push(parseInt(text.substr(i, 2), 16));
                }

                return result;
            }

            // http://ixti.net/development/javascript/2011/11/11/base64-encodedecode-of-utf8-in-browser-with-js.html
            var Hex = '0123456789abcdef';

            function fromBytes(bytes) {
                    var result = [];
                    for (var i = 0; i < bytes.length; i++) {
                        var v = bytes[i];
                        result.push(Hex[(v & 0xf0) >> 4] + Hex[v & 0x0f]);
                    }
                    return result.join('');
            }

            return {
                toBytes: toBytes,
                fromBytes: fromBytes,
            }
        })();


        // Number of rounds by keysize
        var numberOfRounds = {16: 10, 24: 12, 32: 14};

        // Round constant words
        var rcon = [0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91];

        // S-box and Inverse S-box (S is for Substitution)
        var S = [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16];
        var Si =[0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d];

        // Transformations for encryption
        var T1 = [0xc66363a5, 0xf87c7c84, 0xee777799, 0xf67b7b8d, 0xfff2f20d, 0xd66b6bbd, 0xde6f6fb1, 0x91c5c554, 0x60303050, 0x02010103, 0xce6767a9, 0x562b2b7d, 0xe7fefe19, 0xb5d7d762, 0x4dababe6, 0xec76769a, 0x8fcaca45, 0x1f82829d, 0x89c9c940, 0xfa7d7d87, 0xeffafa15, 0xb25959eb, 0x8e4747c9, 0xfbf0f00b, 0x41adadec, 0xb3d4d467, 0x5fa2a2fd, 0x45afafea, 0x239c9cbf, 0x53a4a4f7, 0xe4727296, 0x9bc0c05b, 0x75b7b7c2, 0xe1fdfd1c, 0x3d9393ae, 0x4c26266a, 0x6c36365a, 0x7e3f3f41, 0xf5f7f702, 0x83cccc4f, 0x6834345c, 0x51a5a5f4, 0xd1e5e534, 0xf9f1f108, 0xe2717193, 0xabd8d873, 0x62313153, 0x2a15153f, 0x0804040c, 0x95c7c752, 0x46232365, 0x9dc3c35e, 0x30181828, 0x379696a1, 0x0a05050f, 0x2f9a9ab5, 0x0e070709, 0x24121236, 0x1b80809b, 0xdfe2e23d, 0xcdebeb26, 0x4e272769, 0x7fb2b2cd, 0xea75759f, 0x1209091b, 0x1d83839e, 0x582c2c74, 0x341a1a2e, 0x361b1b2d, 0xdc6e6eb2, 0xb45a5aee, 0x5ba0a0fb, 0xa45252f6, 0x763b3b4d, 0xb7d6d661, 0x7db3b3ce, 0x5229297b, 0xdde3e33e, 0x5e2f2f71, 0x13848497, 0xa65353f5, 0xb9d1d168, 0x00000000, 0xc1eded2c, 0x40202060, 0xe3fcfc1f, 0x79b1b1c8, 0xb65b5bed, 0xd46a6abe, 0x8dcbcb46, 0x67bebed9, 0x7239394b, 0x944a4ade, 0x984c4cd4, 0xb05858e8, 0x85cfcf4a, 0xbbd0d06b, 0xc5efef2a, 0x4faaaae5, 0xedfbfb16, 0x864343c5, 0x9a4d4dd7, 0x66333355, 0x11858594, 0x8a4545cf, 0xe9f9f910, 0x04020206, 0xfe7f7f81, 0xa05050f0, 0x783c3c44, 0x259f9fba, 0x4ba8a8e3, 0xa25151f3, 0x5da3a3fe, 0x804040c0, 0x058f8f8a, 0x3f9292ad, 0x219d9dbc, 0x70383848, 0xf1f5f504, 0x63bcbcdf, 0x77b6b6c1, 0xafdada75, 0x42212163, 0x20101030, 0xe5ffff1a, 0xfdf3f30e, 0xbfd2d26d, 0x81cdcd4c, 0x180c0c14, 0x26131335, 0xc3ecec2f, 0xbe5f5fe1, 0x359797a2, 0x884444cc, 0x2e171739, 0x93c4c457, 0x55a7a7f2, 0xfc7e7e82, 0x7a3d3d47, 0xc86464ac, 0xba5d5de7, 0x3219192b, 0xe6737395, 0xc06060a0, 0x19818198, 0x9e4f4fd1, 0xa3dcdc7f, 0x44222266, 0x542a2a7e, 0x3b9090ab, 0x0b888883, 0x8c4646ca, 0xc7eeee29, 0x6bb8b8d3, 0x2814143c, 0xa7dede79, 0xbc5e5ee2, 0x160b0b1d, 0xaddbdb76, 0xdbe0e03b, 0x64323256, 0x743a3a4e, 0x140a0a1e, 0x924949db, 0x0c06060a, 0x4824246c, 0xb85c5ce4, 0x9fc2c25d, 0xbdd3d36e, 0x43acacef, 0xc46262a6, 0x399191a8, 0x319595a4, 0xd3e4e437, 0xf279798b, 0xd5e7e732, 0x8bc8c843, 0x6e373759, 0xda6d6db7, 0x018d8d8c, 0xb1d5d564, 0x9c4e4ed2, 0x49a9a9e0, 0xd86c6cb4, 0xac5656fa, 0xf3f4f407, 0xcfeaea25, 0xca6565af, 0xf47a7a8e, 0x47aeaee9, 0x10080818, 0x6fbabad5, 0xf0787888, 0x4a25256f, 0x5c2e2e72, 0x381c1c24, 0x57a6a6f1, 0x73b4b4c7, 0x97c6c651, 0xcbe8e823, 0xa1dddd7c, 0xe874749c, 0x3e1f1f21, 0x964b4bdd, 0x61bdbddc, 0x0d8b8b86, 0x0f8a8a85, 0xe0707090, 0x7c3e3e42, 0x71b5b5c4, 0xcc6666aa, 0x904848d8, 0x06030305, 0xf7f6f601, 0x1c0e0e12, 0xc26161a3, 0x6a35355f, 0xae5757f9, 0x69b9b9d0, 0x17868691, 0x99c1c158, 0x3a1d1d27, 0x279e9eb9, 0xd9e1e138, 0xebf8f813, 0x2b9898b3, 0x22111133, 0xd26969bb, 0xa9d9d970, 0x078e8e89, 0x339494a7, 0x2d9b9bb6, 0x3c1e1e22, 0x15878792, 0xc9e9e920, 0x87cece49, 0xaa5555ff, 0x50282878, 0xa5dfdf7a, 0x038c8c8f, 0x59a1a1f8, 0x09898980, 0x1a0d0d17, 0x65bfbfda, 0xd7e6e631, 0x844242c6, 0xd06868b8, 0x824141c3, 0x299999b0, 0x5a2d2d77, 0x1e0f0f11, 0x7bb0b0cb, 0xa85454fc, 0x6dbbbbd6, 0x2c16163a];
        var T2 = [0xa5c66363, 0x84f87c7c, 0x99ee7777, 0x8df67b7b, 0x0dfff2f2, 0xbdd66b6b, 0xb1de6f6f, 0x5491c5c5, 0x50603030, 0x03020101, 0xa9ce6767, 0x7d562b2b, 0x19e7fefe, 0x62b5d7d7, 0xe64dabab, 0x9aec7676, 0x458fcaca, 0x9d1f8282, 0x4089c9c9, 0x87fa7d7d, 0x15effafa, 0xebb25959, 0xc98e4747, 0x0bfbf0f0, 0xec41adad, 0x67b3d4d4, 0xfd5fa2a2, 0xea45afaf, 0xbf239c9c, 0xf753a4a4, 0x96e47272, 0x5b9bc0c0, 0xc275b7b7, 0x1ce1fdfd, 0xae3d9393, 0x6a4c2626, 0x5a6c3636, 0x417e3f3f, 0x02f5f7f7, 0x4f83cccc, 0x5c683434, 0xf451a5a5, 0x34d1e5e5, 0x08f9f1f1, 0x93e27171, 0x73abd8d8, 0x53623131, 0x3f2a1515, 0x0c080404, 0x5295c7c7, 0x65462323, 0x5e9dc3c3, 0x28301818, 0xa1379696, 0x0f0a0505, 0xb52f9a9a, 0x090e0707, 0x36241212, 0x9b1b8080, 0x3ddfe2e2, 0x26cdebeb, 0x694e2727, 0xcd7fb2b2, 0x9fea7575, 0x1b120909, 0x9e1d8383, 0x74582c2c, 0x2e341a1a, 0x2d361b1b, 0xb2dc6e6e, 0xeeb45a5a, 0xfb5ba0a0, 0xf6a45252, 0x4d763b3b, 0x61b7d6d6, 0xce7db3b3, 0x7b522929, 0x3edde3e3, 0x715e2f2f, 0x97138484, 0xf5a65353, 0x68b9d1d1, 0x00000000, 0x2cc1eded, 0x60402020, 0x1fe3fcfc, 0xc879b1b1, 0xedb65b5b, 0xbed46a6a, 0x468dcbcb, 0xd967bebe, 0x4b723939, 0xde944a4a, 0xd4984c4c, 0xe8b05858, 0x4a85cfcf, 0x6bbbd0d0, 0x2ac5efef, 0xe54faaaa, 0x16edfbfb, 0xc5864343, 0xd79a4d4d, 0x55663333, 0x94118585, 0xcf8a4545, 0x10e9f9f9, 0x06040202, 0x81fe7f7f, 0xf0a05050, 0x44783c3c, 0xba259f9f, 0xe34ba8a8, 0xf3a25151, 0xfe5da3a3, 0xc0804040, 0x8a058f8f, 0xad3f9292, 0xbc219d9d, 0x48703838, 0x04f1f5f5, 0xdf63bcbc, 0xc177b6b6, 0x75afdada, 0x63422121, 0x30201010, 0x1ae5ffff, 0x0efdf3f3, 0x6dbfd2d2, 0x4c81cdcd, 0x14180c0c, 0x35261313, 0x2fc3ecec, 0xe1be5f5f, 0xa2359797, 0xcc884444, 0x392e1717, 0x5793c4c4, 0xf255a7a7, 0x82fc7e7e, 0x477a3d3d, 0xacc86464, 0xe7ba5d5d, 0x2b321919, 0x95e67373, 0xa0c06060, 0x98198181, 0xd19e4f4f, 0x7fa3dcdc, 0x66442222, 0x7e542a2a, 0xab3b9090, 0x830b8888, 0xca8c4646, 0x29c7eeee, 0xd36bb8b8, 0x3c281414, 0x79a7dede, 0xe2bc5e5e, 0x1d160b0b, 0x76addbdb, 0x3bdbe0e0, 0x56643232, 0x4e743a3a, 0x1e140a0a, 0xdb924949, 0x0a0c0606, 0x6c482424, 0xe4b85c5c, 0x5d9fc2c2, 0x6ebdd3d3, 0xef43acac, 0xa6c46262, 0xa8399191, 0xa4319595, 0x37d3e4e4, 0x8bf27979, 0x32d5e7e7, 0x438bc8c8, 0x596e3737, 0xb7da6d6d, 0x8c018d8d, 0x64b1d5d5, 0xd29c4e4e, 0xe049a9a9, 0xb4d86c6c, 0xfaac5656, 0x07f3f4f4, 0x25cfeaea, 0xafca6565, 0x8ef47a7a, 0xe947aeae, 0x18100808, 0xd56fbaba, 0x88f07878, 0x6f4a2525, 0x725c2e2e, 0x24381c1c, 0xf157a6a6, 0xc773b4b4, 0x5197c6c6, 0x23cbe8e8, 0x7ca1dddd, 0x9ce87474, 0x213e1f1f, 0xdd964b4b, 0xdc61bdbd, 0x860d8b8b, 0x850f8a8a, 0x90e07070, 0x427c3e3e, 0xc471b5b5, 0xaacc6666, 0xd8904848, 0x05060303, 0x01f7f6f6, 0x121c0e0e, 0xa3c26161, 0x5f6a3535, 0xf9ae5757, 0xd069b9b9, 0x91178686, 0x5899c1c1, 0x273a1d1d, 0xb9279e9e, 0x38d9e1e1, 0x13ebf8f8, 0xb32b9898, 0x33221111, 0xbbd26969, 0x70a9d9d9, 0x89078e8e, 0xa7339494, 0xb62d9b9b, 0x223c1e1e, 0x92158787, 0x20c9e9e9, 0x4987cece, 0xffaa5555, 0x78502828, 0x7aa5dfdf, 0x8f038c8c, 0xf859a1a1, 0x80098989, 0x171a0d0d, 0xda65bfbf, 0x31d7e6e6, 0xc6844242, 0xb8d06868, 0xc3824141, 0xb0299999, 0x775a2d2d, 0x111e0f0f, 0xcb7bb0b0, 0xfca85454, 0xd66dbbbb, 0x3a2c1616];
        var T3 = [0x63a5c663, 0x7c84f87c, 0x7799ee77, 0x7b8df67b, 0xf20dfff2, 0x6bbdd66b, 0x6fb1de6f, 0xc55491c5, 0x30506030, 0x01030201, 0x67a9ce67, 0x2b7d562b, 0xfe19e7fe, 0xd762b5d7, 0xabe64dab, 0x769aec76, 0xca458fca, 0x829d1f82, 0xc94089c9, 0x7d87fa7d, 0xfa15effa, 0x59ebb259, 0x47c98e47, 0xf00bfbf0, 0xadec41ad, 0xd467b3d4, 0xa2fd5fa2, 0xafea45af, 0x9cbf239c, 0xa4f753a4, 0x7296e472, 0xc05b9bc0, 0xb7c275b7, 0xfd1ce1fd, 0x93ae3d93, 0x266a4c26, 0x365a6c36, 0x3f417e3f, 0xf702f5f7, 0xcc4f83cc, 0x345c6834, 0xa5f451a5, 0xe534d1e5, 0xf108f9f1, 0x7193e271, 0xd873abd8, 0x31536231, 0x153f2a15, 0x040c0804, 0xc75295c7, 0x23654623, 0xc35e9dc3, 0x18283018, 0x96a13796, 0x050f0a05, 0x9ab52f9a, 0x07090e07, 0x12362412, 0x809b1b80, 0xe23ddfe2, 0xeb26cdeb, 0x27694e27, 0xb2cd7fb2, 0x759fea75, 0x091b1209, 0x839e1d83, 0x2c74582c, 0x1a2e341a, 0x1b2d361b, 0x6eb2dc6e, 0x5aeeb45a, 0xa0fb5ba0, 0x52f6a452, 0x3b4d763b, 0xd661b7d6, 0xb3ce7db3, 0x297b5229, 0xe33edde3, 0x2f715e2f, 0x84971384, 0x53f5a653, 0xd168b9d1, 0x00000000, 0xed2cc1ed, 0x20604020, 0xfc1fe3fc, 0xb1c879b1, 0x5bedb65b, 0x6abed46a, 0xcb468dcb, 0xbed967be, 0x394b7239, 0x4ade944a, 0x4cd4984c, 0x58e8b058, 0xcf4a85cf, 0xd06bbbd0, 0xef2ac5ef, 0xaae54faa, 0xfb16edfb, 0x43c58643, 0x4dd79a4d, 0x33556633, 0x85941185, 0x45cf8a45, 0xf910e9f9, 0x02060402, 0x7f81fe7f, 0x50f0a050, 0x3c44783c, 0x9fba259f, 0xa8e34ba8, 0x51f3a251, 0xa3fe5da3, 0x40c08040, 0x8f8a058f, 0x92ad3f92, 0x9dbc219d, 0x38487038, 0xf504f1f5, 0xbcdf63bc, 0xb6c177b6, 0xda75afda, 0x21634221, 0x10302010, 0xff1ae5ff, 0xf30efdf3, 0xd26dbfd2, 0xcd4c81cd, 0x0c14180c, 0x13352613, 0xec2fc3ec, 0x5fe1be5f, 0x97a23597, 0x44cc8844, 0x17392e17, 0xc45793c4, 0xa7f255a7, 0x7e82fc7e, 0x3d477a3d, 0x64acc864, 0x5de7ba5d, 0x192b3219, 0x7395e673, 0x60a0c060, 0x81981981, 0x4fd19e4f, 0xdc7fa3dc, 0x22664422, 0x2a7e542a, 0x90ab3b90, 0x88830b88, 0x46ca8c46, 0xee29c7ee, 0xb8d36bb8, 0x143c2814, 0xde79a7de, 0x5ee2bc5e, 0x0b1d160b, 0xdb76addb, 0xe03bdbe0, 0x32566432, 0x3a4e743a, 0x0a1e140a, 0x49db9249, 0x060a0c06, 0x246c4824, 0x5ce4b85c, 0xc25d9fc2, 0xd36ebdd3, 0xacef43ac, 0x62a6c462, 0x91a83991, 0x95a43195, 0xe437d3e4, 0x798bf279, 0xe732d5e7, 0xc8438bc8, 0x37596e37, 0x6db7da6d, 0x8d8c018d, 0xd564b1d5, 0x4ed29c4e, 0xa9e049a9, 0x6cb4d86c, 0x56faac56, 0xf407f3f4, 0xea25cfea, 0x65afca65, 0x7a8ef47a, 0xaee947ae, 0x08181008, 0xbad56fba, 0x7888f078, 0x256f4a25, 0x2e725c2e, 0x1c24381c, 0xa6f157a6, 0xb4c773b4, 0xc65197c6, 0xe823cbe8, 0xdd7ca1dd, 0x749ce874, 0x1f213e1f, 0x4bdd964b, 0xbddc61bd, 0x8b860d8b, 0x8a850f8a, 0x7090e070, 0x3e427c3e, 0xb5c471b5, 0x66aacc66, 0x48d89048, 0x03050603, 0xf601f7f6, 0x0e121c0e, 0x61a3c261, 0x355f6a35, 0x57f9ae57, 0xb9d069b9, 0x86911786, 0xc15899c1, 0x1d273a1d, 0x9eb9279e, 0xe138d9e1, 0xf813ebf8, 0x98b32b98, 0x11332211, 0x69bbd269, 0xd970a9d9, 0x8e89078e, 0x94a73394, 0x9bb62d9b, 0x1e223c1e, 0x87921587, 0xe920c9e9, 0xce4987ce, 0x55ffaa55, 0x28785028, 0xdf7aa5df, 0x8c8f038c, 0xa1f859a1, 0x89800989, 0x0d171a0d, 0xbfda65bf, 0xe631d7e6, 0x42c68442, 0x68b8d068, 0x41c38241, 0x99b02999, 0x2d775a2d, 0x0f111e0f, 0xb0cb7bb0, 0x54fca854, 0xbbd66dbb, 0x163a2c16];
        var T4 = [0x6363a5c6, 0x7c7c84f8, 0x777799ee, 0x7b7b8df6, 0xf2f20dff, 0x6b6bbdd6, 0x6f6fb1de, 0xc5c55491, 0x30305060, 0x01010302, 0x6767a9ce, 0x2b2b7d56, 0xfefe19e7, 0xd7d762b5, 0xababe64d, 0x76769aec, 0xcaca458f, 0x82829d1f, 0xc9c94089, 0x7d7d87fa, 0xfafa15ef, 0x5959ebb2, 0x4747c98e, 0xf0f00bfb, 0xadadec41, 0xd4d467b3, 0xa2a2fd5f, 0xafafea45, 0x9c9cbf23, 0xa4a4f753, 0x727296e4, 0xc0c05b9b, 0xb7b7c275, 0xfdfd1ce1, 0x9393ae3d, 0x26266a4c, 0x36365a6c, 0x3f3f417e, 0xf7f702f5, 0xcccc4f83, 0x34345c68, 0xa5a5f451, 0xe5e534d1, 0xf1f108f9, 0x717193e2, 0xd8d873ab, 0x31315362, 0x15153f2a, 0x04040c08, 0xc7c75295, 0x23236546, 0xc3c35e9d, 0x18182830, 0x9696a137, 0x05050f0a, 0x9a9ab52f, 0x0707090e, 0x12123624, 0x80809b1b, 0xe2e23ddf, 0xebeb26cd, 0x2727694e, 0xb2b2cd7f, 0x75759fea, 0x09091b12, 0x83839e1d, 0x2c2c7458, 0x1a1a2e34, 0x1b1b2d36, 0x6e6eb2dc, 0x5a5aeeb4, 0xa0a0fb5b, 0x5252f6a4, 0x3b3b4d76, 0xd6d661b7, 0xb3b3ce7d, 0x29297b52, 0xe3e33edd, 0x2f2f715e, 0x84849713, 0x5353f5a6, 0xd1d168b9, 0x00000000, 0xeded2cc1, 0x20206040, 0xfcfc1fe3, 0xb1b1c879, 0x5b5bedb6, 0x6a6abed4, 0xcbcb468d, 0xbebed967, 0x39394b72, 0x4a4ade94, 0x4c4cd498, 0x5858e8b0, 0xcfcf4a85, 0xd0d06bbb, 0xefef2ac5, 0xaaaae54f, 0xfbfb16ed, 0x4343c586, 0x4d4dd79a, 0x33335566, 0x85859411, 0x4545cf8a, 0xf9f910e9, 0x02020604, 0x7f7f81fe, 0x5050f0a0, 0x3c3c4478, 0x9f9fba25, 0xa8a8e34b, 0x5151f3a2, 0xa3a3fe5d, 0x4040c080, 0x8f8f8a05, 0x9292ad3f, 0x9d9dbc21, 0x38384870, 0xf5f504f1, 0xbcbcdf63, 0xb6b6c177, 0xdada75af, 0x21216342, 0x10103020, 0xffff1ae5, 0xf3f30efd, 0xd2d26dbf, 0xcdcd4c81, 0x0c0c1418, 0x13133526, 0xecec2fc3, 0x5f5fe1be, 0x9797a235, 0x4444cc88, 0x1717392e, 0xc4c45793, 0xa7a7f255, 0x7e7e82fc, 0x3d3d477a, 0x6464acc8, 0x5d5de7ba, 0x19192b32, 0x737395e6, 0x6060a0c0, 0x81819819, 0x4f4fd19e, 0xdcdc7fa3, 0x22226644, 0x2a2a7e54, 0x9090ab3b, 0x8888830b, 0x4646ca8c, 0xeeee29c7, 0xb8b8d36b, 0x14143c28, 0xdede79a7, 0x5e5ee2bc, 0x0b0b1d16, 0xdbdb76ad, 0xe0e03bdb, 0x32325664, 0x3a3a4e74, 0x0a0a1e14, 0x4949db92, 0x06060a0c, 0x24246c48, 0x5c5ce4b8, 0xc2c25d9f, 0xd3d36ebd, 0xacacef43, 0x6262a6c4, 0x9191a839, 0x9595a431, 0xe4e437d3, 0x79798bf2, 0xe7e732d5, 0xc8c8438b, 0x3737596e, 0x6d6db7da, 0x8d8d8c01, 0xd5d564b1, 0x4e4ed29c, 0xa9a9e049, 0x6c6cb4d8, 0x5656faac, 0xf4f407f3, 0xeaea25cf, 0x6565afca, 0x7a7a8ef4, 0xaeaee947, 0x08081810, 0xbabad56f, 0x787888f0, 0x25256f4a, 0x2e2e725c, 0x1c1c2438, 0xa6a6f157, 0xb4b4c773, 0xc6c65197, 0xe8e823cb, 0xdddd7ca1, 0x74749ce8, 0x1f1f213e, 0x4b4bdd96, 0xbdbddc61, 0x8b8b860d, 0x8a8a850f, 0x707090e0, 0x3e3e427c, 0xb5b5c471, 0x6666aacc, 0x4848d890, 0x03030506, 0xf6f601f7, 0x0e0e121c, 0x6161a3c2, 0x35355f6a, 0x5757f9ae, 0xb9b9d069, 0x86869117, 0xc1c15899, 0x1d1d273a, 0x9e9eb927, 0xe1e138d9, 0xf8f813eb, 0x9898b32b, 0x11113322, 0x6969bbd2, 0xd9d970a9, 0x8e8e8907, 0x9494a733, 0x9b9bb62d, 0x1e1e223c, 0x87879215, 0xe9e920c9, 0xcece4987, 0x5555ffaa, 0x28287850, 0xdfdf7aa5, 0x8c8c8f03, 0xa1a1f859, 0x89898009, 0x0d0d171a, 0xbfbfda65, 0xe6e631d7, 0x4242c684, 0x6868b8d0, 0x4141c382, 0x9999b029, 0x2d2d775a, 0x0f0f111e, 0xb0b0cb7b, 0x5454fca8, 0xbbbbd66d, 0x16163a2c];

        // Transformations for decryption
        var T5 = [0x51f4a750, 0x7e416553, 0x1a17a4c3, 0x3a275e96, 0x3bab6bcb, 0x1f9d45f1, 0xacfa58ab, 0x4be30393, 0x2030fa55, 0xad766df6, 0x88cc7691, 0xf5024c25, 0x4fe5d7fc, 0xc52acbd7, 0x26354480, 0xb562a38f, 0xdeb15a49, 0x25ba1b67, 0x45ea0e98, 0x5dfec0e1, 0xc32f7502, 0x814cf012, 0x8d4697a3, 0x6bd3f9c6, 0x038f5fe7, 0x15929c95, 0xbf6d7aeb, 0x955259da, 0xd4be832d, 0x587421d3, 0x49e06929, 0x8ec9c844, 0x75c2896a, 0xf48e7978, 0x99583e6b, 0x27b971dd, 0xbee14fb6, 0xf088ad17, 0xc920ac66, 0x7dce3ab4, 0x63df4a18, 0xe51a3182, 0x97513360, 0x62537f45, 0xb16477e0, 0xbb6bae84, 0xfe81a01c, 0xf9082b94, 0x70486858, 0x8f45fd19, 0x94de6c87, 0x527bf8b7, 0xab73d323, 0x724b02e2, 0xe31f8f57, 0x6655ab2a, 0xb2eb2807, 0x2fb5c203, 0x86c57b9a, 0xd33708a5, 0x302887f2, 0x23bfa5b2, 0x02036aba, 0xed16825c, 0x8acf1c2b, 0xa779b492, 0xf307f2f0, 0x4e69e2a1, 0x65daf4cd, 0x0605bed5, 0xd134621f, 0xc4a6fe8a, 0x342e539d, 0xa2f355a0, 0x058ae132, 0xa4f6eb75, 0x0b83ec39, 0x4060efaa, 0x5e719f06, 0xbd6e1051, 0x3e218af9, 0x96dd063d, 0xdd3e05ae, 0x4de6bd46, 0x91548db5, 0x71c45d05, 0x0406d46f, 0x605015ff, 0x1998fb24, 0xd6bde997, 0x894043cc, 0x67d99e77, 0xb0e842bd, 0x07898b88, 0xe7195b38, 0x79c8eedb, 0xa17c0a47, 0x7c420fe9, 0xf8841ec9, 0x00000000, 0x09808683, 0x322bed48, 0x1e1170ac, 0x6c5a724e, 0xfd0efffb, 0x0f853856, 0x3daed51e, 0x362d3927, 0x0a0fd964, 0x685ca621, 0x9b5b54d1, 0x24362e3a, 0x0c0a67b1, 0x9357e70f, 0xb4ee96d2, 0x1b9b919e, 0x80c0c54f, 0x61dc20a2, 0x5a774b69, 0x1c121a16, 0xe293ba0a, 0xc0a02ae5, 0x3c22e043, 0x121b171d, 0x0e090d0b, 0xf28bc7ad, 0x2db6a8b9, 0x141ea9c8, 0x57f11985, 0xaf75074c, 0xee99ddbb, 0xa37f60fd, 0xf701269f, 0x5c72f5bc, 0x44663bc5, 0x5bfb7e34, 0x8b432976, 0xcb23c6dc, 0xb6edfc68, 0xb8e4f163, 0xd731dcca, 0x42638510, 0x13972240, 0x84c61120, 0x854a247d, 0xd2bb3df8, 0xaef93211, 0xc729a16d, 0x1d9e2f4b, 0xdcb230f3, 0x0d8652ec, 0x77c1e3d0, 0x2bb3166c, 0xa970b999, 0x119448fa, 0x47e96422, 0xa8fc8cc4, 0xa0f03f1a, 0x567d2cd8, 0x223390ef, 0x87494ec7, 0xd938d1c1, 0x8ccaa2fe, 0x98d40b36, 0xa6f581cf, 0xa57ade28, 0xdab78e26, 0x3fadbfa4, 0x2c3a9de4, 0x5078920d, 0x6a5fcc9b, 0x547e4662, 0xf68d13c2, 0x90d8b8e8, 0x2e39f75e, 0x82c3aff5, 0x9f5d80be, 0x69d0937c, 0x6fd52da9, 0xcf2512b3, 0xc8ac993b, 0x10187da7, 0xe89c636e, 0xdb3bbb7b, 0xcd267809, 0x6e5918f4, 0xec9ab701, 0x834f9aa8, 0xe6956e65, 0xaaffe67e, 0x21bccf08, 0xef15e8e6, 0xbae79bd9, 0x4a6f36ce, 0xea9f09d4, 0x29b07cd6, 0x31a4b2af, 0x2a3f2331, 0xc6a59430, 0x35a266c0, 0x744ebc37, 0xfc82caa6, 0xe090d0b0, 0x33a7d815, 0xf104984a, 0x41ecdaf7, 0x7fcd500e, 0x1791f62f, 0x764dd68d, 0x43efb04d, 0xccaa4d54, 0xe49604df, 0x9ed1b5e3, 0x4c6a881b, 0xc12c1fb8, 0x4665517f, 0x9d5eea04, 0x018c355d, 0xfa877473, 0xfb0b412e, 0xb3671d5a, 0x92dbd252, 0xe9105633, 0x6dd64713, 0x9ad7618c, 0x37a10c7a, 0x59f8148e, 0xeb133c89, 0xcea927ee, 0xb761c935, 0xe11ce5ed, 0x7a47b13c, 0x9cd2df59, 0x55f2733f, 0x1814ce79, 0x73c737bf, 0x53f7cdea, 0x5ffdaa5b, 0xdf3d6f14, 0x7844db86, 0xcaaff381, 0xb968c43e, 0x3824342c, 0xc2a3405f, 0x161dc372, 0xbce2250c, 0x283c498b, 0xff0d9541, 0x39a80171, 0x080cb3de, 0xd8b4e49c, 0x6456c190, 0x7bcb8461, 0xd532b670, 0x486c5c74, 0xd0b85742];
        var T6 = [0x5051f4a7, 0x537e4165, 0xc31a17a4, 0x963a275e, 0xcb3bab6b, 0xf11f9d45, 0xabacfa58, 0x934be303, 0x552030fa, 0xf6ad766d, 0x9188cc76, 0x25f5024c, 0xfc4fe5d7, 0xd7c52acb, 0x80263544, 0x8fb562a3, 0x49deb15a, 0x6725ba1b, 0x9845ea0e, 0xe15dfec0, 0x02c32f75, 0x12814cf0, 0xa38d4697, 0xc66bd3f9, 0xe7038f5f, 0x9515929c, 0xebbf6d7a, 0xda955259, 0x2dd4be83, 0xd3587421, 0x2949e069, 0x448ec9c8, 0x6a75c289, 0x78f48e79, 0x6b99583e, 0xdd27b971, 0xb6bee14f, 0x17f088ad, 0x66c920ac, 0xb47dce3a, 0x1863df4a, 0x82e51a31, 0x60975133, 0x4562537f, 0xe0b16477, 0x84bb6bae, 0x1cfe81a0, 0x94f9082b, 0x58704868, 0x198f45fd, 0x8794de6c, 0xb7527bf8, 0x23ab73d3, 0xe2724b02, 0x57e31f8f, 0x2a6655ab, 0x07b2eb28, 0x032fb5c2, 0x9a86c57b, 0xa5d33708, 0xf2302887, 0xb223bfa5, 0xba02036a, 0x5ced1682, 0x2b8acf1c, 0x92a779b4, 0xf0f307f2, 0xa14e69e2, 0xcd65daf4, 0xd50605be, 0x1fd13462, 0x8ac4a6fe, 0x9d342e53, 0xa0a2f355, 0x32058ae1, 0x75a4f6eb, 0x390b83ec, 0xaa4060ef, 0x065e719f, 0x51bd6e10, 0xf93e218a, 0x3d96dd06, 0xaedd3e05, 0x464de6bd, 0xb591548d, 0x0571c45d, 0x6f0406d4, 0xff605015, 0x241998fb, 0x97d6bde9, 0xcc894043, 0x7767d99e, 0xbdb0e842, 0x8807898b, 0x38e7195b, 0xdb79c8ee, 0x47a17c0a, 0xe97c420f, 0xc9f8841e, 0x00000000, 0x83098086, 0x48322bed, 0xac1e1170, 0x4e6c5a72, 0xfbfd0eff, 0x560f8538, 0x1e3daed5, 0x27362d39, 0x640a0fd9, 0x21685ca6, 0xd19b5b54, 0x3a24362e, 0xb10c0a67, 0x0f9357e7, 0xd2b4ee96, 0x9e1b9b91, 0x4f80c0c5, 0xa261dc20, 0x695a774b, 0x161c121a, 0x0ae293ba, 0xe5c0a02a, 0x433c22e0, 0x1d121b17, 0x0b0e090d, 0xadf28bc7, 0xb92db6a8, 0xc8141ea9, 0x8557f119, 0x4caf7507, 0xbbee99dd, 0xfda37f60, 0x9ff70126, 0xbc5c72f5, 0xc544663b, 0x345bfb7e, 0x768b4329, 0xdccb23c6, 0x68b6edfc, 0x63b8e4f1, 0xcad731dc, 0x10426385, 0x40139722, 0x2084c611, 0x7d854a24, 0xf8d2bb3d, 0x11aef932, 0x6dc729a1, 0x4b1d9e2f, 0xf3dcb230, 0xec0d8652, 0xd077c1e3, 0x6c2bb316, 0x99a970b9, 0xfa119448, 0x2247e964, 0xc4a8fc8c, 0x1aa0f03f, 0xd8567d2c, 0xef223390, 0xc787494e, 0xc1d938d1, 0xfe8ccaa2, 0x3698d40b, 0xcfa6f581, 0x28a57ade, 0x26dab78e, 0xa43fadbf, 0xe42c3a9d, 0x0d507892, 0x9b6a5fcc, 0x62547e46, 0xc2f68d13, 0xe890d8b8, 0x5e2e39f7, 0xf582c3af, 0xbe9f5d80, 0x7c69d093, 0xa96fd52d, 0xb3cf2512, 0x3bc8ac99, 0xa710187d, 0x6ee89c63, 0x7bdb3bbb, 0x09cd2678, 0xf46e5918, 0x01ec9ab7, 0xa8834f9a, 0x65e6956e, 0x7eaaffe6, 0x0821bccf, 0xe6ef15e8, 0xd9bae79b, 0xce4a6f36, 0xd4ea9f09, 0xd629b07c, 0xaf31a4b2, 0x312a3f23, 0x30c6a594, 0xc035a266, 0x37744ebc, 0xa6fc82ca, 0xb0e090d0, 0x1533a7d8, 0x4af10498, 0xf741ecda, 0x0e7fcd50, 0x2f1791f6, 0x8d764dd6, 0x4d43efb0, 0x54ccaa4d, 0xdfe49604, 0xe39ed1b5, 0x1b4c6a88, 0xb8c12c1f, 0x7f466551, 0x049d5eea, 0x5d018c35, 0x73fa8774, 0x2efb0b41, 0x5ab3671d, 0x5292dbd2, 0x33e91056, 0x136dd647, 0x8c9ad761, 0x7a37a10c, 0x8e59f814, 0x89eb133c, 0xeecea927, 0x35b761c9, 0xede11ce5, 0x3c7a47b1, 0x599cd2df, 0x3f55f273, 0x791814ce, 0xbf73c737, 0xea53f7cd, 0x5b5ffdaa, 0x14df3d6f, 0x867844db, 0x81caaff3, 0x3eb968c4, 0x2c382434, 0x5fc2a340, 0x72161dc3, 0x0cbce225, 0x8b283c49, 0x41ff0d95, 0x7139a801, 0xde080cb3, 0x9cd8b4e4, 0x906456c1, 0x617bcb84, 0x70d532b6, 0x74486c5c, 0x42d0b857];
        var T7 = [0xa75051f4, 0x65537e41, 0xa4c31a17, 0x5e963a27, 0x6bcb3bab, 0x45f11f9d, 0x58abacfa, 0x03934be3, 0xfa552030, 0x6df6ad76, 0x769188cc, 0x4c25f502, 0xd7fc4fe5, 0xcbd7c52a, 0x44802635, 0xa38fb562, 0x5a49deb1, 0x1b6725ba, 0x0e9845ea, 0xc0e15dfe, 0x7502c32f, 0xf012814c, 0x97a38d46, 0xf9c66bd3, 0x5fe7038f, 0x9c951592, 0x7aebbf6d, 0x59da9552, 0x832dd4be, 0x21d35874, 0x692949e0, 0xc8448ec9, 0x896a75c2, 0x7978f48e, 0x3e6b9958, 0x71dd27b9, 0x4fb6bee1, 0xad17f088, 0xac66c920, 0x3ab47dce, 0x4a1863df, 0x3182e51a, 0x33609751, 0x7f456253, 0x77e0b164, 0xae84bb6b, 0xa01cfe81, 0x2b94f908, 0x68587048, 0xfd198f45, 0x6c8794de, 0xf8b7527b, 0xd323ab73, 0x02e2724b, 0x8f57e31f, 0xab2a6655, 0x2807b2eb, 0xc2032fb5, 0x7b9a86c5, 0x08a5d337, 0x87f23028, 0xa5b223bf, 0x6aba0203, 0x825ced16, 0x1c2b8acf, 0xb492a779, 0xf2f0f307, 0xe2a14e69, 0xf4cd65da, 0xbed50605, 0x621fd134, 0xfe8ac4a6, 0x539d342e, 0x55a0a2f3, 0xe132058a, 0xeb75a4f6, 0xec390b83, 0xefaa4060, 0x9f065e71, 0x1051bd6e, 0x8af93e21, 0x063d96dd, 0x05aedd3e, 0xbd464de6, 0x8db59154, 0x5d0571c4, 0xd46f0406, 0x15ff6050, 0xfb241998, 0xe997d6bd, 0x43cc8940, 0x9e7767d9, 0x42bdb0e8, 0x8b880789, 0x5b38e719, 0xeedb79c8, 0x0a47a17c, 0x0fe97c42, 0x1ec9f884, 0x00000000, 0x86830980, 0xed48322b, 0x70ac1e11, 0x724e6c5a, 0xfffbfd0e, 0x38560f85, 0xd51e3dae, 0x3927362d, 0xd9640a0f, 0xa621685c, 0x54d19b5b, 0x2e3a2436, 0x67b10c0a, 0xe70f9357, 0x96d2b4ee, 0x919e1b9b, 0xc54f80c0, 0x20a261dc, 0x4b695a77, 0x1a161c12, 0xba0ae293, 0x2ae5c0a0, 0xe0433c22, 0x171d121b, 0x0d0b0e09, 0xc7adf28b, 0xa8b92db6, 0xa9c8141e, 0x198557f1, 0x074caf75, 0xddbbee99, 0x60fda37f, 0x269ff701, 0xf5bc5c72, 0x3bc54466, 0x7e345bfb, 0x29768b43, 0xc6dccb23, 0xfc68b6ed, 0xf163b8e4, 0xdccad731, 0x85104263, 0x22401397, 0x112084c6, 0x247d854a, 0x3df8d2bb, 0x3211aef9, 0xa16dc729, 0x2f4b1d9e, 0x30f3dcb2, 0x52ec0d86, 0xe3d077c1, 0x166c2bb3, 0xb999a970, 0x48fa1194, 0x642247e9, 0x8cc4a8fc, 0x3f1aa0f0, 0x2cd8567d, 0x90ef2233, 0x4ec78749, 0xd1c1d938, 0xa2fe8cca, 0x0b3698d4, 0x81cfa6f5, 0xde28a57a, 0x8e26dab7, 0xbfa43fad, 0x9de42c3a, 0x920d5078, 0xcc9b6a5f, 0x4662547e, 0x13c2f68d, 0xb8e890d8, 0xf75e2e39, 0xaff582c3, 0x80be9f5d, 0x937c69d0, 0x2da96fd5, 0x12b3cf25, 0x993bc8ac, 0x7da71018, 0x636ee89c, 0xbb7bdb3b, 0x7809cd26, 0x18f46e59, 0xb701ec9a, 0x9aa8834f, 0x6e65e695, 0xe67eaaff, 0xcf0821bc, 0xe8e6ef15, 0x9bd9bae7, 0x36ce4a6f, 0x09d4ea9f, 0x7cd629b0, 0xb2af31a4, 0x23312a3f, 0x9430c6a5, 0x66c035a2, 0xbc37744e, 0xcaa6fc82, 0xd0b0e090, 0xd81533a7, 0x984af104, 0xdaf741ec, 0x500e7fcd, 0xf62f1791, 0xd68d764d, 0xb04d43ef, 0x4d54ccaa, 0x04dfe496, 0xb5e39ed1, 0x881b4c6a, 0x1fb8c12c, 0x517f4665, 0xea049d5e, 0x355d018c, 0x7473fa87, 0x412efb0b, 0x1d5ab367, 0xd25292db, 0x5633e910, 0x47136dd6, 0x618c9ad7, 0x0c7a37a1, 0x148e59f8, 0x3c89eb13, 0x27eecea9, 0xc935b761, 0xe5ede11c, 0xb13c7a47, 0xdf599cd2, 0x733f55f2, 0xce791814, 0x37bf73c7, 0xcdea53f7, 0xaa5b5ffd, 0x6f14df3d, 0xdb867844, 0xf381caaf, 0xc43eb968, 0x342c3824, 0x405fc2a3, 0xc372161d, 0x250cbce2, 0x498b283c, 0x9541ff0d, 0x017139a8, 0xb3de080c, 0xe49cd8b4, 0xc1906456, 0x84617bcb, 0xb670d532, 0x5c74486c, 0x5742d0b8];
        var T8 = [0xf4a75051, 0x4165537e, 0x17a4c31a, 0x275e963a, 0xab6bcb3b, 0x9d45f11f, 0xfa58abac, 0xe303934b, 0x30fa5520, 0x766df6ad, 0xcc769188, 0x024c25f5, 0xe5d7fc4f, 0x2acbd7c5, 0x35448026, 0x62a38fb5, 0xb15a49de, 0xba1b6725, 0xea0e9845, 0xfec0e15d, 0x2f7502c3, 0x4cf01281, 0x4697a38d, 0xd3f9c66b, 0x8f5fe703, 0x929c9515, 0x6d7aebbf, 0x5259da95, 0xbe832dd4, 0x7421d358, 0xe0692949, 0xc9c8448e, 0xc2896a75, 0x8e7978f4, 0x583e6b99, 0xb971dd27, 0xe14fb6be, 0x88ad17f0, 0x20ac66c9, 0xce3ab47d, 0xdf4a1863, 0x1a3182e5, 0x51336097, 0x537f4562, 0x6477e0b1, 0x6bae84bb, 0x81a01cfe, 0x082b94f9, 0x48685870, 0x45fd198f, 0xde6c8794, 0x7bf8b752, 0x73d323ab, 0x4b02e272, 0x1f8f57e3, 0x55ab2a66, 0xeb2807b2, 0xb5c2032f, 0xc57b9a86, 0x3708a5d3, 0x2887f230, 0xbfa5b223, 0x036aba02, 0x16825ced, 0xcf1c2b8a, 0x79b492a7, 0x07f2f0f3, 0x69e2a14e, 0xdaf4cd65, 0x05bed506, 0x34621fd1, 0xa6fe8ac4, 0x2e539d34, 0xf355a0a2, 0x8ae13205, 0xf6eb75a4, 0x83ec390b, 0x60efaa40, 0x719f065e, 0x6e1051bd, 0x218af93e, 0xdd063d96, 0x3e05aedd, 0xe6bd464d, 0x548db591, 0xc45d0571, 0x06d46f04, 0x5015ff60, 0x98fb2419, 0xbde997d6, 0x4043cc89, 0xd99e7767, 0xe842bdb0, 0x898b8807, 0x195b38e7, 0xc8eedb79, 0x7c0a47a1, 0x420fe97c, 0x841ec9f8, 0x00000000, 0x80868309, 0x2bed4832, 0x1170ac1e, 0x5a724e6c, 0x0efffbfd, 0x8538560f, 0xaed51e3d, 0x2d392736, 0x0fd9640a, 0x5ca62168, 0x5b54d19b, 0x362e3a24, 0x0a67b10c, 0x57e70f93, 0xee96d2b4, 0x9b919e1b, 0xc0c54f80, 0xdc20a261, 0x774b695a, 0x121a161c, 0x93ba0ae2, 0xa02ae5c0, 0x22e0433c, 0x1b171d12, 0x090d0b0e, 0x8bc7adf2, 0xb6a8b92d, 0x1ea9c814, 0xf1198557, 0x75074caf, 0x99ddbbee, 0x7f60fda3, 0x01269ff7, 0x72f5bc5c, 0x663bc544, 0xfb7e345b, 0x4329768b, 0x23c6dccb, 0xedfc68b6, 0xe4f163b8, 0x31dccad7, 0x63851042, 0x97224013, 0xc6112084, 0x4a247d85, 0xbb3df8d2, 0xf93211ae, 0x29a16dc7, 0x9e2f4b1d, 0xb230f3dc, 0x8652ec0d, 0xc1e3d077, 0xb3166c2b, 0x70b999a9, 0x9448fa11, 0xe9642247, 0xfc8cc4a8, 0xf03f1aa0, 0x7d2cd856, 0x3390ef22, 0x494ec787, 0x38d1c1d9, 0xcaa2fe8c, 0xd40b3698, 0xf581cfa6, 0x7ade28a5, 0xb78e26da, 0xadbfa43f, 0x3a9de42c, 0x78920d50, 0x5fcc9b6a, 0x7e466254, 0x8d13c2f6, 0xd8b8e890, 0x39f75e2e, 0xc3aff582, 0x5d80be9f, 0xd0937c69, 0xd52da96f, 0x2512b3cf, 0xac993bc8, 0x187da710, 0x9c636ee8, 0x3bbb7bdb, 0x267809cd, 0x5918f46e, 0x9ab701ec, 0x4f9aa883, 0x956e65e6, 0xffe67eaa, 0xbccf0821, 0x15e8e6ef, 0xe79bd9ba, 0x6f36ce4a, 0x9f09d4ea, 0xb07cd629, 0xa4b2af31, 0x3f23312a, 0xa59430c6, 0xa266c035, 0x4ebc3774, 0x82caa6fc, 0x90d0b0e0, 0xa7d81533, 0x04984af1, 0xecdaf741, 0xcd500e7f, 0x91f62f17, 0x4dd68d76, 0xefb04d43, 0xaa4d54cc, 0x9604dfe4, 0xd1b5e39e, 0x6a881b4c, 0x2c1fb8c1, 0x65517f46, 0x5eea049d, 0x8c355d01, 0x877473fa, 0x0b412efb, 0x671d5ab3, 0xdbd25292, 0x105633e9, 0xd647136d, 0xd7618c9a, 0xa10c7a37, 0xf8148e59, 0x133c89eb, 0xa927eece, 0x61c935b7, 0x1ce5ede1, 0x47b13c7a, 0xd2df599c, 0xf2733f55, 0x14ce7918, 0xc737bf73, 0xf7cdea53, 0xfdaa5b5f, 0x3d6f14df, 0x44db8678, 0xaff381ca, 0x68c43eb9, 0x24342c38, 0xa3405fc2, 0x1dc37216, 0xe2250cbc, 0x3c498b28, 0x0d9541ff, 0xa8017139, 0x0cb3de08, 0xb4e49cd8, 0x56c19064, 0xcb84617b, 0x32b670d5, 0x6c5c7448, 0xb85742d0];

        // Transformations for decryption key expansion
        var U1 = [0x00000000, 0x0e090d0b, 0x1c121a16, 0x121b171d, 0x3824342c, 0x362d3927, 0x24362e3a, 0x2a3f2331, 0x70486858, 0x7e416553, 0x6c5a724e, 0x62537f45, 0x486c5c74, 0x4665517f, 0x547e4662, 0x5a774b69, 0xe090d0b0, 0xee99ddbb, 0xfc82caa6, 0xf28bc7ad, 0xd8b4e49c, 0xd6bde997, 0xc4a6fe8a, 0xcaaff381, 0x90d8b8e8, 0x9ed1b5e3, 0x8ccaa2fe, 0x82c3aff5, 0xa8fc8cc4, 0xa6f581cf, 0xb4ee96d2, 0xbae79bd9, 0xdb3bbb7b, 0xd532b670, 0xc729a16d, 0xc920ac66, 0xe31f8f57, 0xed16825c, 0xff0d9541, 0xf104984a, 0xab73d323, 0xa57ade28, 0xb761c935, 0xb968c43e, 0x9357e70f, 0x9d5eea04, 0x8f45fd19, 0x814cf012, 0x3bab6bcb, 0x35a266c0, 0x27b971dd, 0x29b07cd6, 0x038f5fe7, 0x0d8652ec, 0x1f9d45f1, 0x119448fa, 0x4be30393, 0x45ea0e98, 0x57f11985, 0x59f8148e, 0x73c737bf, 0x7dce3ab4, 0x6fd52da9, 0x61dc20a2, 0xad766df6, 0xa37f60fd, 0xb16477e0, 0xbf6d7aeb, 0x955259da, 0x9b5b54d1, 0x894043cc, 0x87494ec7, 0xdd3e05ae, 0xd33708a5, 0xc12c1fb8, 0xcf2512b3, 0xe51a3182, 0xeb133c89, 0xf9082b94, 0xf701269f, 0x4de6bd46, 0x43efb04d, 0x51f4a750, 0x5ffdaa5b, 0x75c2896a, 0x7bcb8461, 0x69d0937c, 0x67d99e77, 0x3daed51e, 0x33a7d815, 0x21bccf08, 0x2fb5c203, 0x058ae132, 0x0b83ec39, 0x1998fb24, 0x1791f62f, 0x764dd68d, 0x7844db86, 0x6a5fcc9b, 0x6456c190, 0x4e69e2a1, 0x4060efaa, 0x527bf8b7, 0x5c72f5bc, 0x0605bed5, 0x080cb3de, 0x1a17a4c3, 0x141ea9c8, 0x3e218af9, 0x302887f2, 0x223390ef, 0x2c3a9de4, 0x96dd063d, 0x98d40b36, 0x8acf1c2b, 0x84c61120, 0xaef93211, 0xa0f03f1a, 0xb2eb2807, 0xbce2250c, 0xe6956e65, 0xe89c636e, 0xfa877473, 0xf48e7978, 0xdeb15a49, 0xd0b85742, 0xc2a3405f, 0xccaa4d54, 0x41ecdaf7, 0x4fe5d7fc, 0x5dfec0e1, 0x53f7cdea, 0x79c8eedb, 0x77c1e3d0, 0x65daf4cd, 0x6bd3f9c6, 0x31a4b2af, 0x3fadbfa4, 0x2db6a8b9, 0x23bfa5b2, 0x09808683, 0x07898b88, 0x15929c95, 0x1b9b919e, 0xa17c0a47, 0xaf75074c, 0xbd6e1051, 0xb3671d5a, 0x99583e6b, 0x97513360, 0x854a247d, 0x8b432976, 0xd134621f, 0xdf3d6f14, 0xcd267809, 0xc32f7502, 0xe9105633, 0xe7195b38, 0xf5024c25, 0xfb0b412e, 0x9ad7618c, 0x94de6c87, 0x86c57b9a, 0x88cc7691, 0xa2f355a0, 0xacfa58ab, 0xbee14fb6, 0xb0e842bd, 0xea9f09d4, 0xe49604df, 0xf68d13c2, 0xf8841ec9, 0xd2bb3df8, 0xdcb230f3, 0xcea927ee, 0xc0a02ae5, 0x7a47b13c, 0x744ebc37, 0x6655ab2a, 0x685ca621, 0x42638510, 0x4c6a881b, 0x5e719f06, 0x5078920d, 0x0a0fd964, 0x0406d46f, 0x161dc372, 0x1814ce79, 0x322bed48, 0x3c22e043, 0x2e39f75e, 0x2030fa55, 0xec9ab701, 0xe293ba0a, 0xf088ad17, 0xfe81a01c, 0xd4be832d, 0xdab78e26, 0xc8ac993b, 0xc6a59430, 0x9cd2df59, 0x92dbd252, 0x80c0c54f, 0x8ec9c844, 0xa4f6eb75, 0xaaffe67e, 0xb8e4f163, 0xb6edfc68, 0x0c0a67b1, 0x02036aba, 0x10187da7, 0x1e1170ac, 0x342e539d, 0x3a275e96, 0x283c498b, 0x26354480, 0x7c420fe9, 0x724b02e2, 0x605015ff, 0x6e5918f4, 0x44663bc5, 0x4a6f36ce, 0x587421d3, 0x567d2cd8, 0x37a10c7a, 0x39a80171, 0x2bb3166c, 0x25ba1b67, 0x0f853856, 0x018c355d, 0x13972240, 0x1d9e2f4b, 0x47e96422, 0x49e06929, 0x5bfb7e34, 0x55f2733f, 0x7fcd500e, 0x71c45d05, 0x63df4a18, 0x6dd64713, 0xd731dcca, 0xd938d1c1, 0xcb23c6dc, 0xc52acbd7, 0xef15e8e6, 0xe11ce5ed, 0xf307f2f0, 0xfd0efffb, 0xa779b492, 0xa970b999, 0xbb6bae84, 0xb562a38f, 0x9f5d80be, 0x91548db5, 0x834f9aa8, 0x8d4697a3];
        var U2 = [0x00000000, 0x0b0e090d, 0x161c121a, 0x1d121b17, 0x2c382434, 0x27362d39, 0x3a24362e, 0x312a3f23, 0x58704868, 0x537e4165, 0x4e6c5a72, 0x4562537f, 0x74486c5c, 0x7f466551, 0x62547e46, 0x695a774b, 0xb0e090d0, 0xbbee99dd, 0xa6fc82ca, 0xadf28bc7, 0x9cd8b4e4, 0x97d6bde9, 0x8ac4a6fe, 0x81caaff3, 0xe890d8b8, 0xe39ed1b5, 0xfe8ccaa2, 0xf582c3af, 0xc4a8fc8c, 0xcfa6f581, 0xd2b4ee96, 0xd9bae79b, 0x7bdb3bbb, 0x70d532b6, 0x6dc729a1, 0x66c920ac, 0x57e31f8f, 0x5ced1682, 0x41ff0d95, 0x4af10498, 0x23ab73d3, 0x28a57ade, 0x35b761c9, 0x3eb968c4, 0x0f9357e7, 0x049d5eea, 0x198f45fd, 0x12814cf0, 0xcb3bab6b, 0xc035a266, 0xdd27b971, 0xd629b07c, 0xe7038f5f, 0xec0d8652, 0xf11f9d45, 0xfa119448, 0x934be303, 0x9845ea0e, 0x8557f119, 0x8e59f814, 0xbf73c737, 0xb47dce3a, 0xa96fd52d, 0xa261dc20, 0xf6ad766d, 0xfda37f60, 0xe0b16477, 0xebbf6d7a, 0xda955259, 0xd19b5b54, 0xcc894043, 0xc787494e, 0xaedd3e05, 0xa5d33708, 0xb8c12c1f, 0xb3cf2512, 0x82e51a31, 0x89eb133c, 0x94f9082b, 0x9ff70126, 0x464de6bd, 0x4d43efb0, 0x5051f4a7, 0x5b5ffdaa, 0x6a75c289, 0x617bcb84, 0x7c69d093, 0x7767d99e, 0x1e3daed5, 0x1533a7d8, 0x0821bccf, 0x032fb5c2, 0x32058ae1, 0x390b83ec, 0x241998fb, 0x2f1791f6, 0x8d764dd6, 0x867844db, 0x9b6a5fcc, 0x906456c1, 0xa14e69e2, 0xaa4060ef, 0xb7527bf8, 0xbc5c72f5, 0xd50605be, 0xde080cb3, 0xc31a17a4, 0xc8141ea9, 0xf93e218a, 0xf2302887, 0xef223390, 0xe42c3a9d, 0x3d96dd06, 0x3698d40b, 0x2b8acf1c, 0x2084c611, 0x11aef932, 0x1aa0f03f, 0x07b2eb28, 0x0cbce225, 0x65e6956e, 0x6ee89c63, 0x73fa8774, 0x78f48e79, 0x49deb15a, 0x42d0b857, 0x5fc2a340, 0x54ccaa4d, 0xf741ecda, 0xfc4fe5d7, 0xe15dfec0, 0xea53f7cd, 0xdb79c8ee, 0xd077c1e3, 0xcd65daf4, 0xc66bd3f9, 0xaf31a4b2, 0xa43fadbf, 0xb92db6a8, 0xb223bfa5, 0x83098086, 0x8807898b, 0x9515929c, 0x9e1b9b91, 0x47a17c0a, 0x4caf7507, 0x51bd6e10, 0x5ab3671d, 0x6b99583e, 0x60975133, 0x7d854a24, 0x768b4329, 0x1fd13462, 0x14df3d6f, 0x09cd2678, 0x02c32f75, 0x33e91056, 0x38e7195b, 0x25f5024c, 0x2efb0b41, 0x8c9ad761, 0x8794de6c, 0x9a86c57b, 0x9188cc76, 0xa0a2f355, 0xabacfa58, 0xb6bee14f, 0xbdb0e842, 0xd4ea9f09, 0xdfe49604, 0xc2f68d13, 0xc9f8841e, 0xf8d2bb3d, 0xf3dcb230, 0xeecea927, 0xe5c0a02a, 0x3c7a47b1, 0x37744ebc, 0x2a6655ab, 0x21685ca6, 0x10426385, 0x1b4c6a88, 0x065e719f, 0x0d507892, 0x640a0fd9, 0x6f0406d4, 0x72161dc3, 0x791814ce, 0x48322bed, 0x433c22e0, 0x5e2e39f7, 0x552030fa, 0x01ec9ab7, 0x0ae293ba, 0x17f088ad, 0x1cfe81a0, 0x2dd4be83, 0x26dab78e, 0x3bc8ac99, 0x30c6a594, 0x599cd2df, 0x5292dbd2, 0x4f80c0c5, 0x448ec9c8, 0x75a4f6eb, 0x7eaaffe6, 0x63b8e4f1, 0x68b6edfc, 0xb10c0a67, 0xba02036a, 0xa710187d, 0xac1e1170, 0x9d342e53, 0x963a275e, 0x8b283c49, 0x80263544, 0xe97c420f, 0xe2724b02, 0xff605015, 0xf46e5918, 0xc544663b, 0xce4a6f36, 0xd3587421, 0xd8567d2c, 0x7a37a10c, 0x7139a801, 0x6c2bb316, 0x6725ba1b, 0x560f8538, 0x5d018c35, 0x40139722, 0x4b1d9e2f, 0x2247e964, 0x2949e069, 0x345bfb7e, 0x3f55f273, 0x0e7fcd50, 0x0571c45d, 0x1863df4a, 0x136dd647, 0xcad731dc, 0xc1d938d1, 0xdccb23c6, 0xd7c52acb, 0xe6ef15e8, 0xede11ce5, 0xf0f307f2, 0xfbfd0eff, 0x92a779b4, 0x99a970b9, 0x84bb6bae, 0x8fb562a3, 0xbe9f5d80, 0xb591548d, 0xa8834f9a, 0xa38d4697];
        var U3 = [0x00000000, 0x0d0b0e09, 0x1a161c12, 0x171d121b, 0x342c3824, 0x3927362d, 0x2e3a2436, 0x23312a3f, 0x68587048, 0x65537e41, 0x724e6c5a, 0x7f456253, 0x5c74486c, 0x517f4665, 0x4662547e, 0x4b695a77, 0xd0b0e090, 0xddbbee99, 0xcaa6fc82, 0xc7adf28b, 0xe49cd8b4, 0xe997d6bd, 0xfe8ac4a6, 0xf381caaf, 0xb8e890d8, 0xb5e39ed1, 0xa2fe8cca, 0xaff582c3, 0x8cc4a8fc, 0x81cfa6f5, 0x96d2b4ee, 0x9bd9bae7, 0xbb7bdb3b, 0xb670d532, 0xa16dc729, 0xac66c920, 0x8f57e31f, 0x825ced16, 0x9541ff0d, 0x984af104, 0xd323ab73, 0xde28a57a, 0xc935b761, 0xc43eb968, 0xe70f9357, 0xea049d5e, 0xfd198f45, 0xf012814c, 0x6bcb3bab, 0x66c035a2, 0x71dd27b9, 0x7cd629b0, 0x5fe7038f, 0x52ec0d86, 0x45f11f9d, 0x48fa1194, 0x03934be3, 0x0e9845ea, 0x198557f1, 0x148e59f8, 0x37bf73c7, 0x3ab47dce, 0x2da96fd5, 0x20a261dc, 0x6df6ad76, 0x60fda37f, 0x77e0b164, 0x7aebbf6d, 0x59da9552, 0x54d19b5b, 0x43cc8940, 0x4ec78749, 0x05aedd3e, 0x08a5d337, 0x1fb8c12c, 0x12b3cf25, 0x3182e51a, 0x3c89eb13, 0x2b94f908, 0x269ff701, 0xbd464de6, 0xb04d43ef, 0xa75051f4, 0xaa5b5ffd, 0x896a75c2, 0x84617bcb, 0x937c69d0, 0x9e7767d9, 0xd51e3dae, 0xd81533a7, 0xcf0821bc, 0xc2032fb5, 0xe132058a, 0xec390b83, 0xfb241998, 0xf62f1791, 0xd68d764d, 0xdb867844, 0xcc9b6a5f, 0xc1906456, 0xe2a14e69, 0xefaa4060, 0xf8b7527b, 0xf5bc5c72, 0xbed50605, 0xb3de080c, 0xa4c31a17, 0xa9c8141e, 0x8af93e21, 0x87f23028, 0x90ef2233, 0x9de42c3a, 0x063d96dd, 0x0b3698d4, 0x1c2b8acf, 0x112084c6, 0x3211aef9, 0x3f1aa0f0, 0x2807b2eb, 0x250cbce2, 0x6e65e695, 0x636ee89c, 0x7473fa87, 0x7978f48e, 0x5a49deb1, 0x5742d0b8, 0x405fc2a3, 0x4d54ccaa, 0xdaf741ec, 0xd7fc4fe5, 0xc0e15dfe, 0xcdea53f7, 0xeedb79c8, 0xe3d077c1, 0xf4cd65da, 0xf9c66bd3, 0xb2af31a4, 0xbfa43fad, 0xa8b92db6, 0xa5b223bf, 0x86830980, 0x8b880789, 0x9c951592, 0x919e1b9b, 0x0a47a17c, 0x074caf75, 0x1051bd6e, 0x1d5ab367, 0x3e6b9958, 0x33609751, 0x247d854a, 0x29768b43, 0x621fd134, 0x6f14df3d, 0x7809cd26, 0x7502c32f, 0x5633e910, 0x5b38e719, 0x4c25f502, 0x412efb0b, 0x618c9ad7, 0x6c8794de, 0x7b9a86c5, 0x769188cc, 0x55a0a2f3, 0x58abacfa, 0x4fb6bee1, 0x42bdb0e8, 0x09d4ea9f, 0x04dfe496, 0x13c2f68d, 0x1ec9f884, 0x3df8d2bb, 0x30f3dcb2, 0x27eecea9, 0x2ae5c0a0, 0xb13c7a47, 0xbc37744e, 0xab2a6655, 0xa621685c, 0x85104263, 0x881b4c6a, 0x9f065e71, 0x920d5078, 0xd9640a0f, 0xd46f0406, 0xc372161d, 0xce791814, 0xed48322b, 0xe0433c22, 0xf75e2e39, 0xfa552030, 0xb701ec9a, 0xba0ae293, 0xad17f088, 0xa01cfe81, 0x832dd4be, 0x8e26dab7, 0x993bc8ac, 0x9430c6a5, 0xdf599cd2, 0xd25292db, 0xc54f80c0, 0xc8448ec9, 0xeb75a4f6, 0xe67eaaff, 0xf163b8e4, 0xfc68b6ed, 0x67b10c0a, 0x6aba0203, 0x7da71018, 0x70ac1e11, 0x539d342e, 0x5e963a27, 0x498b283c, 0x44802635, 0x0fe97c42, 0x02e2724b, 0x15ff6050, 0x18f46e59, 0x3bc54466, 0x36ce4a6f, 0x21d35874, 0x2cd8567d, 0x0c7a37a1, 0x017139a8, 0x166c2bb3, 0x1b6725ba, 0x38560f85, 0x355d018c, 0x22401397, 0x2f4b1d9e, 0x642247e9, 0x692949e0, 0x7e345bfb, 0x733f55f2, 0x500e7fcd, 0x5d0571c4, 0x4a1863df, 0x47136dd6, 0xdccad731, 0xd1c1d938, 0xc6dccb23, 0xcbd7c52a, 0xe8e6ef15, 0xe5ede11c, 0xf2f0f307, 0xfffbfd0e, 0xb492a779, 0xb999a970, 0xae84bb6b, 0xa38fb562, 0x80be9f5d, 0x8db59154, 0x9aa8834f, 0x97a38d46];
        var U4 = [0x00000000, 0x090d0b0e, 0x121a161c, 0x1b171d12, 0x24342c38, 0x2d392736, 0x362e3a24, 0x3f23312a, 0x48685870, 0x4165537e, 0x5a724e6c, 0x537f4562, 0x6c5c7448, 0x65517f46, 0x7e466254, 0x774b695a, 0x90d0b0e0, 0x99ddbbee, 0x82caa6fc, 0x8bc7adf2, 0xb4e49cd8, 0xbde997d6, 0xa6fe8ac4, 0xaff381ca, 0xd8b8e890, 0xd1b5e39e, 0xcaa2fe8c, 0xc3aff582, 0xfc8cc4a8, 0xf581cfa6, 0xee96d2b4, 0xe79bd9ba, 0x3bbb7bdb, 0x32b670d5, 0x29a16dc7, 0x20ac66c9, 0x1f8f57e3, 0x16825ced, 0x0d9541ff, 0x04984af1, 0x73d323ab, 0x7ade28a5, 0x61c935b7, 0x68c43eb9, 0x57e70f93, 0x5eea049d, 0x45fd198f, 0x4cf01281, 0xab6bcb3b, 0xa266c035, 0xb971dd27, 0xb07cd629, 0x8f5fe703, 0x8652ec0d, 0x9d45f11f, 0x9448fa11, 0xe303934b, 0xea0e9845, 0xf1198557, 0xf8148e59, 0xc737bf73, 0xce3ab47d, 0xd52da96f, 0xdc20a261, 0x766df6ad, 0x7f60fda3, 0x6477e0b1, 0x6d7aebbf, 0x5259da95, 0x5b54d19b, 0x4043cc89, 0x494ec787, 0x3e05aedd, 0x3708a5d3, 0x2c1fb8c1, 0x2512b3cf, 0x1a3182e5, 0x133c89eb, 0x082b94f9, 0x01269ff7, 0xe6bd464d, 0xefb04d43, 0xf4a75051, 0xfdaa5b5f, 0xc2896a75, 0xcb84617b, 0xd0937c69, 0xd99e7767, 0xaed51e3d, 0xa7d81533, 0xbccf0821, 0xb5c2032f, 0x8ae13205, 0x83ec390b, 0x98fb2419, 0x91f62f17, 0x4dd68d76, 0x44db8678, 0x5fcc9b6a, 0x56c19064, 0x69e2a14e, 0x60efaa40, 0x7bf8b752, 0x72f5bc5c, 0x05bed506, 0x0cb3de08, 0x17a4c31a, 0x1ea9c814, 0x218af93e, 0x2887f230, 0x3390ef22, 0x3a9de42c, 0xdd063d96, 0xd40b3698, 0xcf1c2b8a, 0xc6112084, 0xf93211ae, 0xf03f1aa0, 0xeb2807b2, 0xe2250cbc, 0x956e65e6, 0x9c636ee8, 0x877473fa, 0x8e7978f4, 0xb15a49de, 0xb85742d0, 0xa3405fc2, 0xaa4d54cc, 0xecdaf741, 0xe5d7fc4f, 0xfec0e15d, 0xf7cdea53, 0xc8eedb79, 0xc1e3d077, 0xdaf4cd65, 0xd3f9c66b, 0xa4b2af31, 0xadbfa43f, 0xb6a8b92d, 0xbfa5b223, 0x80868309, 0x898b8807, 0x929c9515, 0x9b919e1b, 0x7c0a47a1, 0x75074caf, 0x6e1051bd, 0x671d5ab3, 0x583e6b99, 0x51336097, 0x4a247d85, 0x4329768b, 0x34621fd1, 0x3d6f14df, 0x267809cd, 0x2f7502c3, 0x105633e9, 0x195b38e7, 0x024c25f5, 0x0b412efb, 0xd7618c9a, 0xde6c8794, 0xc57b9a86, 0xcc769188, 0xf355a0a2, 0xfa58abac, 0xe14fb6be, 0xe842bdb0, 0x9f09d4ea, 0x9604dfe4, 0x8d13c2f6, 0x841ec9f8, 0xbb3df8d2, 0xb230f3dc, 0xa927eece, 0xa02ae5c0, 0x47b13c7a, 0x4ebc3774, 0x55ab2a66, 0x5ca62168, 0x63851042, 0x6a881b4c, 0x719f065e, 0x78920d50, 0x0fd9640a, 0x06d46f04, 0x1dc37216, 0x14ce7918, 0x2bed4832, 0x22e0433c, 0x39f75e2e, 0x30fa5520, 0x9ab701ec, 0x93ba0ae2, 0x88ad17f0, 0x81a01cfe, 0xbe832dd4, 0xb78e26da, 0xac993bc8, 0xa59430c6, 0xd2df599c, 0xdbd25292, 0xc0c54f80, 0xc9c8448e, 0xf6eb75a4, 0xffe67eaa, 0xe4f163b8, 0xedfc68b6, 0x0a67b10c, 0x036aba02, 0x187da710, 0x1170ac1e, 0x2e539d34, 0x275e963a, 0x3c498b28, 0x35448026, 0x420fe97c, 0x4b02e272, 0x5015ff60, 0x5918f46e, 0x663bc544, 0x6f36ce4a, 0x7421d358, 0x7d2cd856, 0xa10c7a37, 0xa8017139, 0xb3166c2b, 0xba1b6725, 0x8538560f, 0x8c355d01, 0x97224013, 0x9e2f4b1d, 0xe9642247, 0xe0692949, 0xfb7e345b, 0xf2733f55, 0xcd500e7f, 0xc45d0571, 0xdf4a1863, 0xd647136d, 0x31dccad7, 0x38d1c1d9, 0x23c6dccb, 0x2acbd7c5, 0x15e8e6ef, 0x1ce5ede1, 0x07f2f0f3, 0x0efffbfd, 0x79b492a7, 0x70b999a9, 0x6bae84bb, 0x62a38fb5, 0x5d80be9f, 0x548db591, 0x4f9aa883, 0x4697a38d];

        function convertToInt32(bytes) {
            var result = [];
            for (var i = 0; i < bytes.length; i += 4) {
                result.push(
                    (bytes[i    ] << 24) |
                    (bytes[i + 1] << 16) |
                    (bytes[i + 2] <<  8) |
                     bytes[i + 3]
                );
            }
            return result;
        }

        var AES = function(key) {
            if (!(this instanceof AES)) {
                throw Error('AES must be instanitated with `new`');
            }

            Object.defineProperty(this, 'key', {
                value: coerceArray(key, true)
            });

            this._prepare();
        };


        AES.prototype._prepare = function() {

            var rounds = numberOfRounds[this.key.length];
            if (rounds == null) {
                throw new Error('invalid key size (must be 16, 24 or 32 bytes)');
            }

            // encryption round keys
            this._Ke = [];

            // decryption round keys
            this._Kd = [];

            for (var i = 0; i <= rounds; i++) {
                this._Ke.push([0, 0, 0, 0]);
                this._Kd.push([0, 0, 0, 0]);
            }

            var roundKeyCount = (rounds + 1) * 4;
            var KC = this.key.length / 4;

            // convert the key into ints
            var tk = convertToInt32(this.key);

            // copy values into round key arrays
            var index;
            for (var i = 0; i < KC; i++) {
                index = i >> 2;
                this._Ke[index][i % 4] = tk[i];
                this._Kd[rounds - index][i % 4] = tk[i];
            }

            // key expansion (fips-197 section 5.2)
            var rconpointer = 0;
            var t = KC, tt;
            while (t < roundKeyCount) {
                tt = tk[KC - 1];
                tk[0] ^= ((S[(tt >> 16) & 0xFF] << 24) ^
                          (S[(tt >>  8) & 0xFF] << 16) ^
                          (S[ tt        & 0xFF] <<  8) ^
                           S[(tt >> 24) & 0xFF]        ^
                          (rcon[rconpointer] << 24));
                rconpointer += 1;

                // key expansion (for non-256 bit)
                if (KC != 8) {
                    for (var i = 1; i < KC; i++) {
                        tk[i] ^= tk[i - 1];
                    }

                // key expansion for 256-bit keys is "slightly different" (fips-197)
                } else {
                    for (var i = 1; i < (KC / 2); i++) {
                        tk[i] ^= tk[i - 1];
                    }
                    tt = tk[(KC / 2) - 1];

                    tk[KC / 2] ^= (S[ tt        & 0xFF]        ^
                                  (S[(tt >>  8) & 0xFF] <<  8) ^
                                  (S[(tt >> 16) & 0xFF] << 16) ^
                                  (S[(tt >> 24) & 0xFF] << 24));

                    for (var i = (KC / 2) + 1; i < KC; i++) {
                        tk[i] ^= tk[i - 1];
                    }
                }

                // copy values into round key arrays
                var i = 0, r, c;
                while (i < KC && t < roundKeyCount) {
                    r = t >> 2;
                    c = t % 4;
                    this._Ke[r][c] = tk[i];
                    this._Kd[rounds - r][c] = tk[i++];
                    t++;
                }
            }

            // inverse-cipher-ify the decryption round key (fips-197 section 5.3)
            for (var r = 1; r < rounds; r++) {
                for (var c = 0; c < 4; c++) {
                    tt = this._Kd[r][c];
                    this._Kd[r][c] = (U1[(tt >> 24) & 0xFF] ^
                                      U2[(tt >> 16) & 0xFF] ^
                                      U3[(tt >>  8) & 0xFF] ^
                                      U4[ tt        & 0xFF]);
                }
            }
        };

        AES.prototype.encrypt = function(plaintext) {
            if (plaintext.length != 16) {
                throw new Error('invalid plaintext size (must be 16 bytes)');
            }

            var rounds = this._Ke.length - 1;
            var a = [0, 0, 0, 0];

            // convert plaintext to (ints ^ key)
            var t = convertToInt32(plaintext);
            for (var i = 0; i < 4; i++) {
                t[i] ^= this._Ke[0][i];
            }

            // apply round transforms
            for (var r = 1; r < rounds; r++) {
                for (var i = 0; i < 4; i++) {
                    a[i] = (T1[(t[ i         ] >> 24) & 0xff] ^
                            T2[(t[(i + 1) % 4] >> 16) & 0xff] ^
                            T3[(t[(i + 2) % 4] >>  8) & 0xff] ^
                            T4[ t[(i + 3) % 4]        & 0xff] ^
                            this._Ke[r][i]);
                }
                t = a.slice();
            }

            // the last round is special
            var result = createArray(16), tt;
            for (var i = 0; i < 4; i++) {
                tt = this._Ke[rounds][i];
                result[4 * i    ] = (S[(t[ i         ] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;
                result[4 * i + 1] = (S[(t[(i + 1) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;
                result[4 * i + 2] = (S[(t[(i + 2) % 4] >>  8) & 0xff] ^ (tt >>  8)) & 0xff;
                result[4 * i + 3] = (S[ t[(i + 3) % 4]        & 0xff] ^  tt       ) & 0xff;
            }

            return result;
        };

        AES.prototype.decrypt = function(ciphertext) {
            if (ciphertext.length != 16) {
                throw new Error('invalid ciphertext size (must be 16 bytes)');
            }

            var rounds = this._Kd.length - 1;
            var a = [0, 0, 0, 0];

            // convert plaintext to (ints ^ key)
            var t = convertToInt32(ciphertext);
            for (var i = 0; i < 4; i++) {
                t[i] ^= this._Kd[0][i];
            }

            // apply round transforms
            for (var r = 1; r < rounds; r++) {
                for (var i = 0; i < 4; i++) {
                    a[i] = (T5[(t[ i          ] >> 24) & 0xff] ^
                            T6[(t[(i + 3) % 4] >> 16) & 0xff] ^
                            T7[(t[(i + 2) % 4] >>  8) & 0xff] ^
                            T8[ t[(i + 1) % 4]        & 0xff] ^
                            this._Kd[r][i]);
                }
                t = a.slice();
            }

            // the last round is special
            var result = createArray(16), tt;
            for (var i = 0; i < 4; i++) {
                tt = this._Kd[rounds][i];
                result[4 * i    ] = (Si[(t[ i         ] >> 24) & 0xff] ^ (tt >> 24)) & 0xff;
                result[4 * i + 1] = (Si[(t[(i + 3) % 4] >> 16) & 0xff] ^ (tt >> 16)) & 0xff;
                result[4 * i + 2] = (Si[(t[(i + 2) % 4] >>  8) & 0xff] ^ (tt >>  8)) & 0xff;
                result[4 * i + 3] = (Si[ t[(i + 1) % 4]        & 0xff] ^  tt       ) & 0xff;
            }

            return result;
        };


        /**
         *  Mode Of Operation - Electonic Codebook (ECB)
         */
        var ModeOfOperationECB = function(key) {
            if (!(this instanceof ModeOfOperationECB)) {
                throw Error('AES must be instanitated with `new`');
            }

            this.description = "Electronic Code Block";
            this.name = "ecb";

            this._aes = new AES(key);
        };

        ModeOfOperationECB.prototype.encrypt = function(plaintext) {
            plaintext = coerceArray(plaintext);

            if ((plaintext.length % 16) !== 0) {
                throw new Error('invalid plaintext size (must be multiple of 16 bytes)');
            }

            var ciphertext = createArray(plaintext.length);
            var block = createArray(16);

            for (var i = 0; i < plaintext.length; i += 16) {
                copyArray(plaintext, block, 0, i, i + 16);
                block = this._aes.encrypt(block);
                copyArray(block, ciphertext, i);
            }

            return ciphertext;
        };

        ModeOfOperationECB.prototype.decrypt = function(ciphertext) {
            ciphertext = coerceArray(ciphertext);

            if ((ciphertext.length % 16) !== 0) {
                throw new Error('invalid ciphertext size (must be multiple of 16 bytes)');
            }

            var plaintext = createArray(ciphertext.length);
            var block = createArray(16);

            for (var i = 0; i < ciphertext.length; i += 16) {
                copyArray(ciphertext, block, 0, i, i + 16);
                block = this._aes.decrypt(block);
                copyArray(block, plaintext, i);
            }

            return plaintext;
        };


        /**
         *  Mode Of Operation - Cipher Block Chaining (CBC)
         */
        var ModeOfOperationCBC = function(key, iv) {
            if (!(this instanceof ModeOfOperationCBC)) {
                throw Error('AES must be instanitated with `new`');
            }

            this.description = "Cipher Block Chaining";
            this.name = "cbc";

            if (!iv) {
                iv = createArray(16);

            } else if (iv.length != 16) {
                throw new Error('invalid initialation vector size (must be 16 bytes)');
            }

            this._lastCipherblock = coerceArray(iv, true);

            this._aes = new AES(key);
        };

        ModeOfOperationCBC.prototype.encrypt = function(plaintext) {
            plaintext = coerceArray(plaintext);

            if ((plaintext.length % 16) !== 0) {
                throw new Error('invalid plaintext size (must be multiple of 16 bytes)');
            }

            var ciphertext = createArray(plaintext.length);
            var block = createArray(16);

            for (var i = 0; i < plaintext.length; i += 16) {
                copyArray(plaintext, block, 0, i, i + 16);

                for (var j = 0; j < 16; j++) {
                    block[j] ^= this._lastCipherblock[j];
                }

                this._lastCipherblock = this._aes.encrypt(block);
                copyArray(this._lastCipherblock, ciphertext, i);
            }

            return ciphertext;
        };

        ModeOfOperationCBC.prototype.decrypt = function(ciphertext) {
            ciphertext = coerceArray(ciphertext);

            if ((ciphertext.length % 16) !== 0) {
                throw new Error('invalid ciphertext size (must be multiple of 16 bytes)');
            }

            var plaintext = createArray(ciphertext.length);
            var block = createArray(16);

            for (var i = 0; i < ciphertext.length; i += 16) {
                copyArray(ciphertext, block, 0, i, i + 16);
                block = this._aes.decrypt(block);

                for (var j = 0; j < 16; j++) {
                    plaintext[i + j] = block[j] ^ this._lastCipherblock[j];
                }

                copyArray(ciphertext, this._lastCipherblock, 0, i, i + 16);
            }

            return plaintext;
        };


        /**
         *  Mode Of Operation - Cipher Feedback (CFB)
         */
        var ModeOfOperationCFB = function(key, iv, segmentSize) {
            if (!(this instanceof ModeOfOperationCFB)) {
                throw Error('AES must be instanitated with `new`');
            }

            this.description = "Cipher Feedback";
            this.name = "cfb";

            if (!iv) {
                iv = createArray(16);

            } else if (iv.length != 16) {
                throw new Error('invalid initialation vector size (must be 16 size)');
            }

            if (!segmentSize) { segmentSize = 1; }

            this.segmentSize = segmentSize;

            this._shiftRegister = coerceArray(iv, true);

            this._aes = new AES(key);
        };

        ModeOfOperationCFB.prototype.encrypt = function(plaintext) {
            if ((plaintext.length % this.segmentSize) != 0) {
                throw new Error('invalid plaintext size (must be segmentSize bytes)');
            }

            var encrypted = coerceArray(plaintext, true);

            var xorSegment;
            for (var i = 0; i < encrypted.length; i += this.segmentSize) {
                xorSegment = this._aes.encrypt(this._shiftRegister);
                for (var j = 0; j < this.segmentSize; j++) {
                    encrypted[i + j] ^= xorSegment[j];
                }

                // Shift the register
                copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);
                copyArray(encrypted, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);
            }

            return encrypted;
        };

        ModeOfOperationCFB.prototype.decrypt = function(ciphertext) {
            if ((ciphertext.length % this.segmentSize) != 0) {
                throw new Error('invalid ciphertext size (must be segmentSize bytes)');
            }

            var plaintext = coerceArray(ciphertext, true);

            var xorSegment;
            for (var i = 0; i < plaintext.length; i += this.segmentSize) {
                xorSegment = this._aes.encrypt(this._shiftRegister);

                for (var j = 0; j < this.segmentSize; j++) {
                    plaintext[i + j] ^= xorSegment[j];
                }

                // Shift the register
                copyArray(this._shiftRegister, this._shiftRegister, 0, this.segmentSize);
                copyArray(ciphertext, this._shiftRegister, 16 - this.segmentSize, i, i + this.segmentSize);
            }

            return plaintext;
        };

        /**
         *  Mode Of Operation - Output Feedback (OFB)
         */
        var ModeOfOperationOFB = function(key, iv) {
            if (!(this instanceof ModeOfOperationOFB)) {
                throw Error('AES must be instanitated with `new`');
            }

            this.description = "Output Feedback";
            this.name = "ofb";

            if (!iv) {
                iv = createArray(16);

            } else if (iv.length != 16) {
                throw new Error('invalid initialation vector size (must be 16 bytes)');
            }

            this._lastPrecipher = coerceArray(iv, true);
            this._lastPrecipherIndex = 16;

            this._aes = new AES(key);
        };

        ModeOfOperationOFB.prototype.encrypt = function(plaintext) {
            var encrypted = coerceArray(plaintext, true);

            for (var i = 0; i < encrypted.length; i++) {
                if (this._lastPrecipherIndex === 16) {
                    this._lastPrecipher = this._aes.encrypt(this._lastPrecipher);
                    this._lastPrecipherIndex = 0;
                }
                encrypted[i] ^= this._lastPrecipher[this._lastPrecipherIndex++];
            }

            return encrypted;
        };

        // Decryption is symetric
        ModeOfOperationOFB.prototype.decrypt = ModeOfOperationOFB.prototype.encrypt;


        /**
         *  Counter object for CTR common mode of operation
         */
        var Counter = function(initialValue) {
            if (!(this instanceof Counter)) {
                throw Error('Counter must be instanitated with `new`');
            }

            // We allow 0, but anything false-ish uses the default 1
            if (initialValue !== 0 && !initialValue) { initialValue = 1; }

            if (typeof(initialValue) === 'number') {
                this._counter = createArray(16);
                this.setValue(initialValue);

            } else {
                this.setBytes(initialValue);
            }
        };

        Counter.prototype.setValue = function(value) {
            if (typeof(value) !== 'number' || parseInt(value) != value) {
                throw new Error('invalid counter value (must be an integer)');
            }

            for (var index = 15; index >= 0; --index) {
                this._counter[index] = value % 256;
                value = value >> 8;
            }
        };

        Counter.prototype.setBytes = function(bytes) {
            bytes = coerceArray(bytes, true);

            if (bytes.length != 16) {
                throw new Error('invalid counter bytes size (must be 16 bytes)');
            }

            this._counter = bytes;
        };

        Counter.prototype.increment = function() {
            for (var i = 15; i >= 0; i--) {
                if (this._counter[i] === 255) {
                    this._counter[i] = 0;
                } else {
                    this._counter[i]++;
                    break;
                }
            }
        };


        /**
         *  Mode Of Operation - Counter (CTR)
         */
        var ModeOfOperationCTR = function(key, counter) {
            if (!(this instanceof ModeOfOperationCTR)) {
                throw Error('AES must be instanitated with `new`');
            }

            this.description = "Counter";
            this.name = "ctr";

            if (!(counter instanceof Counter)) {
                counter = new Counter(counter);
            }

            this._counter = counter;

            this._remainingCounter = null;
            this._remainingCounterIndex = 16;

            this._aes = new AES(key);
        };

        ModeOfOperationCTR.prototype.encrypt = function(plaintext) {
            var encrypted = coerceArray(plaintext, true);

            for (var i = 0; i < encrypted.length; i++) {
                if (this._remainingCounterIndex === 16) {
                    this._remainingCounter = this._aes.encrypt(this._counter._counter);
                    this._remainingCounterIndex = 0;
                    this._counter.increment();
                }
                encrypted[i] ^= this._remainingCounter[this._remainingCounterIndex++];
            }

            return encrypted;
        };

        // Decryption is symetric
        ModeOfOperationCTR.prototype.decrypt = ModeOfOperationCTR.prototype.encrypt;


        ///////////////////////
        // Padding

        // See:https://tools.ietf.org/html/rfc2315
        function pkcs7pad(data) {
            data = coerceArray(data, true);
            var padder = 16 - (data.length % 16);
            var result = createArray(data.length + padder);
            copyArray(data, result);
            for (var i = data.length; i < result.length; i++) {
                result[i] = padder;
            }
            return result;
        }

        function pkcs7strip(data) {
            data = coerceArray(data, true);
            if (data.length < 16) { throw new Error('PKCS#7 invalid length'); }

            var padder = data[data.length - 1];
            if (padder > 16) { throw new Error('PKCS#7 padding byte out of range'); }

            var length = data.length - padder;
            for (var i = 0; i < padder; i++) {
                if (data[length + i] !== padder) {
                    throw new Error('PKCS#7 invalid padding byte');
                }
            }

            var result = createArray(length);
            copyArray(data, result, 0, 0, length);
            return result;
        }

        ///////////////////////
        // Exporting


        // The block cipher
        var aesjs = {
            AES: AES,
            Counter: Counter,

            ModeOfOperation: {
                ecb: ModeOfOperationECB,
                cbc: ModeOfOperationCBC,
                cfb: ModeOfOperationCFB,
                ofb: ModeOfOperationOFB,
                ctr: ModeOfOperationCTR
            },

            utils: {
                hex: convertHex,
                utf8: convertUtf8
            },

            padding: {
                pkcs7: {
                    pad: pkcs7pad,
                    strip: pkcs7strip
                }
            },

            _arrayTest: {
                coerceArray: coerceArray,
                createArray: createArray,
                copyArray: copyArray,
            }
        };


        // node.js
        {
            module.exports = aesjs;

        // RequireJS/AMD
        // http://www.requirejs.org/docs/api.html
        // https://github.com/amdjs/amdjs-api/wiki/AMD
        }


    })();
    });

    const version$1 = "json-wallets/5.7.0";

    function looseArrayify(hexString) {
        if (typeof (hexString) === 'string' && hexString.substring(0, 2) !== '0x') {
            hexString = '0x' + hexString;
        }
        return arrayify(hexString);
    }
    function zpad(value, length) {
        value = String(value);
        while (value.length < length) {
            value = '0' + value;
        }
        return value;
    }
    function getPassword(password) {
        if (typeof (password) === 'string') {
            return toUtf8Bytes(password, UnicodeNormalizationForm.NFKC);
        }
        return arrayify(password);
    }
    function searchPath(object, path) {
        let currentChild = object;
        const comps = path.toLowerCase().split('/');
        for (let i = 0; i < comps.length; i++) {
            // Search for a child object with a case-insensitive matching key
            let matchingChild = null;
            for (const key in currentChild) {
                if (key.toLowerCase() === comps[i]) {
                    matchingChild = currentChild[key];
                    break;
                }
            }
            // Didn't find one. :'(
            if (matchingChild === null) {
                return null;
            }
            // Now check this child...
            currentChild = matchingChild;
        }
        return currentChild;
    }
    // See: https://www.ietf.org/rfc/rfc4122.txt (Section 4.4)
    function uuidV4(randomBytes) {
        const bytes = arrayify(randomBytes);
        // Section: 4.1.3:
        // - time_hi_and_version[12:16] = 0b0100
        bytes[6] = (bytes[6] & 0x0f) | 0x40;
        // Section 4.4
        // - clock_seq_hi_and_reserved[6] = 0b0
        // - clock_seq_hi_and_reserved[7] = 0b1
        bytes[8] = (bytes[8] & 0x3f) | 0x80;
        const value = hexlify(bytes);
        return [
            value.substring(2, 10),
            value.substring(10, 14),
            value.substring(14, 18),
            value.substring(18, 22),
            value.substring(22, 34),
        ].join("-");
    }

    const logger$2 = new Logger(version$1);
    class CrowdsaleAccount extends Description {
        isCrowdsaleAccount(value) {
            return !!(value && value._isCrowdsaleAccount);
        }
    }
    // See: https://github.com/ethereum/pyethsaletool
    function decrypt$1(json, password) {
        const data = JSON.parse(json);
        password = getPassword(password);
        // Ethereum Address
        const ethaddr = getAddress(searchPath(data, "ethaddr"));
        // Encrypted Seed
        const encseed = looseArrayify(searchPath(data, "encseed"));
        if (!encseed || (encseed.length % 16) !== 0) {
            logger$2.throwArgumentError("invalid encseed", "json", json);
        }
        const key = arrayify(pbkdf2$1(password, password, 2000, 32, "sha256")).slice(0, 16);
        const iv = encseed.slice(0, 16);
        const encryptedSeed = encseed.slice(16);
        // Decrypt the seed
        const aesCbc = new aesJs.ModeOfOperation.cbc(key, iv);
        const seed = aesJs.padding.pkcs7.strip(arrayify(aesCbc.decrypt(encryptedSeed)));
        // This wallet format is weird... Convert the binary encoded hex to a string.
        let seedHex = "";
        for (let i = 0; i < seed.length; i++) {
            seedHex += String.fromCharCode(seed[i]);
        }
        const seedHexBytes = toUtf8Bytes(seedHex);
        const privateKey = keccak256(seedHexBytes);
        return new CrowdsaleAccount({
            _isCrowdsaleAccount: true,
            address: ethaddr,
            privateKey: privateKey
        });
    }

    function isCrowdsaleWallet(json) {
        let data = null;
        try {
            data = JSON.parse(json);
        }
        catch (error) {
            return false;
        }
        return (data.encseed && data.ethaddr);
    }
    function isKeystoreWallet(json) {
        let data = null;
        try {
            data = JSON.parse(json);
        }
        catch (error) {
            return false;
        }
        if (!data.version || parseInt(data.version) !== data.version || parseInt(data.version) !== 3) {
            return false;
        }
        // @TODO: Put more checks to make sure it has kdf, iv and all that good stuff
        return true;
    }

    var scrypt = createCommonjsModule$1(function (module, exports) {

    (function(root) {
        const MAX_VALUE = 0x7fffffff;

        // The SHA256 and PBKDF2 implementation are from scrypt-async-js:
        // See: https://github.com/dchest/scrypt-async-js
        function SHA256(m) {
            const K = new Uint32Array([
               0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b,
               0x59f111f1, 0x923f82a4, 0xab1c5ed5, 0xd807aa98, 0x12835b01,
               0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7,
               0xc19bf174, 0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
               0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da, 0x983e5152,
               0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147,
               0x06ca6351, 0x14292967, 0x27b70a85, 0x2e1b2138, 0x4d2c6dfc,
               0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
               0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819,
               0xd6990624, 0xf40e3585, 0x106aa070, 0x19a4c116, 0x1e376c08,
               0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f,
               0x682e6ff3, 0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
               0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
           ]);

            let h0 = 0x6a09e667, h1 = 0xbb67ae85, h2 = 0x3c6ef372, h3 = 0xa54ff53a;
            let h4 = 0x510e527f, h5 = 0x9b05688c, h6 = 0x1f83d9ab, h7 = 0x5be0cd19;
            const w = new Uint32Array(64);

            function blocks(p) {
                let off = 0, len = p.length;
                while (len >= 64) {
                    let a = h0, b = h1, c = h2, d = h3, e = h4, f = h5, g = h6, h = h7, u, i, j, t1, t2;

                    for (i = 0; i < 16; i++) {
                        j = off + i*4;
                        w[i] = ((p[j] & 0xff)<<24) | ((p[j+1] & 0xff)<<16) |
                        ((p[j+2] & 0xff)<<8) | (p[j+3] & 0xff);
                    }

                    for (i = 16; i < 64; i++) {
                        u = w[i-2];
                        t1 = ((u>>>17) | (u<<(32-17))) ^ ((u>>>19) | (u<<(32-19))) ^ (u>>>10);

                        u = w[i-15];
                        t2 = ((u>>>7) | (u<<(32-7))) ^ ((u>>>18) | (u<<(32-18))) ^ (u>>>3);

                        w[i] = (((t1 + w[i-7]) | 0) + ((t2 + w[i-16]) | 0)) | 0;
                    }

                    for (i = 0; i < 64; i++) {
                        t1 = ((((((e>>>6) | (e<<(32-6))) ^ ((e>>>11) | (e<<(32-11))) ^
                                 ((e>>>25) | (e<<(32-25)))) + ((e & f) ^ (~e & g))) | 0) +
                              ((h + ((K[i] + w[i]) | 0)) | 0)) | 0;

                        t2 = ((((a>>>2) | (a<<(32-2))) ^ ((a>>>13) | (a<<(32-13))) ^
                               ((a>>>22) | (a<<(32-22)))) + ((a & b) ^ (a & c) ^ (b & c))) | 0;

                        h = g;
                        g = f;
                        f = e;
                        e = (d + t1) | 0;
                        d = c;
                        c = b;
                        b = a;
                        a = (t1 + t2) | 0;
                    }

                    h0 = (h0 + a) | 0;
                    h1 = (h1 + b) | 0;
                    h2 = (h2 + c) | 0;
                    h3 = (h3 + d) | 0;
                    h4 = (h4 + e) | 0;
                    h5 = (h5 + f) | 0;
                    h6 = (h6 + g) | 0;
                    h7 = (h7 + h) | 0;

                    off += 64;
                    len -= 64;
                }
            }

            blocks(m);

            let i, bytesLeft = m.length % 64,
            bitLenHi = (m.length / 0x20000000) | 0,
            bitLenLo = m.length << 3,
            numZeros = (bytesLeft < 56) ? 56 : 120,
            p = m.slice(m.length - bytesLeft, m.length);

            p.push(0x80);
            for (i = bytesLeft + 1; i < numZeros; i++) { p.push(0); }
            p.push((bitLenHi >>> 24) & 0xff);
            p.push((bitLenHi >>> 16) & 0xff);
            p.push((bitLenHi >>> 8)  & 0xff);
            p.push((bitLenHi >>> 0)  & 0xff);
            p.push((bitLenLo >>> 24) & 0xff);
            p.push((bitLenLo >>> 16) & 0xff);
            p.push((bitLenLo >>> 8)  & 0xff);
            p.push((bitLenLo >>> 0)  & 0xff);

            blocks(p);

            return [
                (h0 >>> 24) & 0xff, (h0 >>> 16) & 0xff, (h0 >>> 8) & 0xff, (h0 >>> 0) & 0xff,
                (h1 >>> 24) & 0xff, (h1 >>> 16) & 0xff, (h1 >>> 8) & 0xff, (h1 >>> 0) & 0xff,
                (h2 >>> 24) & 0xff, (h2 >>> 16) & 0xff, (h2 >>> 8) & 0xff, (h2 >>> 0) & 0xff,
                (h3 >>> 24) & 0xff, (h3 >>> 16) & 0xff, (h3 >>> 8) & 0xff, (h3 >>> 0) & 0xff,
                (h4 >>> 24) & 0xff, (h4 >>> 16) & 0xff, (h4 >>> 8) & 0xff, (h4 >>> 0) & 0xff,
                (h5 >>> 24) & 0xff, (h5 >>> 16) & 0xff, (h5 >>> 8) & 0xff, (h5 >>> 0) & 0xff,
                (h6 >>> 24) & 0xff, (h6 >>> 16) & 0xff, (h6 >>> 8) & 0xff, (h6 >>> 0) & 0xff,
                (h7 >>> 24) & 0xff, (h7 >>> 16) & 0xff, (h7 >>> 8) & 0xff, (h7 >>> 0) & 0xff
            ];
        }

        function PBKDF2_HMAC_SHA256_OneIter(password, salt, dkLen) {
            // compress password if it's longer than hash block length
            password = (password.length <= 64) ? password : SHA256(password);

            const innerLen = 64 + salt.length + 4;
            const inner = new Array(innerLen);
            const outerKey = new Array(64);

            let i;
            let dk = [];

            // inner = (password ^ ipad) || salt || counter
            for (i = 0; i < 64; i++) { inner[i] = 0x36; }
            for (i = 0; i < password.length; i++) { inner[i] ^= password[i]; }
            for (i = 0; i < salt.length; i++) { inner[64 + i] = salt[i]; }
            for (i = innerLen - 4; i < innerLen; i++) { inner[i] = 0; }

            // outerKey = password ^ opad
            for (i = 0; i < 64; i++) outerKey[i] = 0x5c;
            for (i = 0; i < password.length; i++) outerKey[i] ^= password[i];

            // increments counter inside inner
            function incrementCounter() {
                for (let i = innerLen - 1; i >= innerLen - 4; i--) {
                    inner[i]++;
                    if (inner[i] <= 0xff) return;
                    inner[i] = 0;
                }
            }

            // output blocks = SHA256(outerKey || SHA256(inner)) ...
            while (dkLen >= 32) {
                incrementCounter();
                dk = dk.concat(SHA256(outerKey.concat(SHA256(inner))));
                dkLen -= 32;
            }
            if (dkLen > 0) {
                incrementCounter();
                dk = dk.concat(SHA256(outerKey.concat(SHA256(inner))).slice(0, dkLen));
            }

            return dk;
        }

        // The following is an adaptation of scryptsy
        // See: https://www.npmjs.com/package/scryptsy
        function blockmix_salsa8(BY, Yi, r, x, _X) {
            let i;

            arraycopy(BY, (2 * r - 1) * 16, _X, 0, 16);
            for (i = 0; i < 2 * r; i++) {
                blockxor(BY, i * 16, _X, 16);
                salsa20_8(_X, x);
                arraycopy(_X, 0, BY, Yi + (i * 16), 16);
            }

            for (i = 0; i < r; i++) {
                arraycopy(BY, Yi + (i * 2) * 16, BY, (i * 16), 16);
            }

            for (i = 0; i < r; i++) {
                arraycopy(BY, Yi + (i * 2 + 1) * 16, BY, (i + r) * 16, 16);
            }
        }

        function R(a, b) {
            return (a << b) | (a >>> (32 - b));
        }

        function salsa20_8(B, x) {
            arraycopy(B, 0, x, 0, 16);

            for (let i = 8; i > 0; i -= 2) {
                x[ 4] ^= R(x[ 0] + x[12], 7);
                x[ 8] ^= R(x[ 4] + x[ 0], 9);
                x[12] ^= R(x[ 8] + x[ 4], 13);
                x[ 0] ^= R(x[12] + x[ 8], 18);
                x[ 9] ^= R(x[ 5] + x[ 1], 7);
                x[13] ^= R(x[ 9] + x[ 5], 9);
                x[ 1] ^= R(x[13] + x[ 9], 13);
                x[ 5] ^= R(x[ 1] + x[13], 18);
                x[14] ^= R(x[10] + x[ 6], 7);
                x[ 2] ^= R(x[14] + x[10], 9);
                x[ 6] ^= R(x[ 2] + x[14], 13);
                x[10] ^= R(x[ 6] + x[ 2], 18);
                x[ 3] ^= R(x[15] + x[11], 7);
                x[ 7] ^= R(x[ 3] + x[15], 9);
                x[11] ^= R(x[ 7] + x[ 3], 13);
                x[15] ^= R(x[11] + x[ 7], 18);
                x[ 1] ^= R(x[ 0] + x[ 3], 7);
                x[ 2] ^= R(x[ 1] + x[ 0], 9);
                x[ 3] ^= R(x[ 2] + x[ 1], 13);
                x[ 0] ^= R(x[ 3] + x[ 2], 18);
                x[ 6] ^= R(x[ 5] + x[ 4], 7);
                x[ 7] ^= R(x[ 6] + x[ 5], 9);
                x[ 4] ^= R(x[ 7] + x[ 6], 13);
                x[ 5] ^= R(x[ 4] + x[ 7], 18);
                x[11] ^= R(x[10] + x[ 9], 7);
                x[ 8] ^= R(x[11] + x[10], 9);
                x[ 9] ^= R(x[ 8] + x[11], 13);
                x[10] ^= R(x[ 9] + x[ 8], 18);
                x[12] ^= R(x[15] + x[14], 7);
                x[13] ^= R(x[12] + x[15], 9);
                x[14] ^= R(x[13] + x[12], 13);
                x[15] ^= R(x[14] + x[13], 18);
            }

            for (let i = 0; i < 16; ++i) {
                B[i] += x[i];
            }
        }

        // naive approach... going back to loop unrolling may yield additional performance
        function blockxor(S, Si, D, len) {
            for (let i = 0; i < len; i++) {
                D[i] ^= S[Si + i];
            }
        }

        function arraycopy(src, srcPos, dest, destPos, length) {
            while (length--) {
                dest[destPos++] = src[srcPos++];
            }
        }

        function checkBufferish(o) {
            if (!o || typeof(o.length) !== 'number') { return false; }

            for (let i = 0; i < o.length; i++) {
                const v = o[i];
                if (typeof(v) !== 'number' || v % 1 || v < 0 || v >= 256) {
                    return false;
                }
            }

            return true;
        }

        function ensureInteger(value, name) {
            if (typeof(value) !== "number" || (value % 1)) { throw new Error('invalid ' + name); }
            return value;
        }

        // N = Cpu cost, r = Memory cost, p = parallelization cost
        // callback(error, progress, key)
        function _scrypt(password, salt, N, r, p, dkLen, callback) {

            N = ensureInteger(N, 'N');
            r = ensureInteger(r, 'r');
            p = ensureInteger(p, 'p');

            dkLen = ensureInteger(dkLen, 'dkLen');

            if (N === 0 || (N & (N - 1)) !== 0) { throw new Error('N must be power of 2'); }

            if (N > MAX_VALUE / 128 / r) { throw new Error('N too large'); }
            if (r > MAX_VALUE / 128 / p) { throw new Error('r too large'); }

            if (!checkBufferish(password)) {
                throw new Error('password must be an array or buffer');
            }
            password = Array.prototype.slice.call(password);

            if (!checkBufferish(salt)) {
                throw new Error('salt must be an array or buffer');
            }
            salt = Array.prototype.slice.call(salt);

            let b = PBKDF2_HMAC_SHA256_OneIter(password, salt, p * 128 * r);
            const B = new Uint32Array(p * 32 * r);
            for (let i = 0; i < B.length; i++) {
                const j = i * 4;
                B[i] = ((b[j + 3] & 0xff) << 24) |
                       ((b[j + 2] & 0xff) << 16) |
                       ((b[j + 1] & 0xff) << 8) |
                       ((b[j + 0] & 0xff) << 0);
            }

            const XY = new Uint32Array(64 * r);
            const V = new Uint32Array(32 * r * N);

            const Yi = 32 * r;

            // scratch space
            const x = new Uint32Array(16);       // salsa20_8
            const _X = new Uint32Array(16);      // blockmix_salsa8

            const totalOps = p * N * 2;
            let currentOp = 0;
            let lastPercent10 = null;

            // Set this to true to abandon the scrypt on the next step
            let stop = false;

            // State information
            let state = 0;
            let i0 = 0, i1;
            let Bi;

            // How many blockmix_salsa8 can we do per step?
            const limit = callback ? parseInt(1000 / r): 0xffffffff;

            // Trick from scrypt-async; if there is a setImmediate shim in place, use it
            const nextTick = (typeof(setImmediate) !== 'undefined') ? setImmediate : setTimeout;

            // This is really all I changed; making scryptsy a state machine so we occasionally
            // stop and give other evnts on the evnt loop a chance to run. ~RicMoo
            const incrementalSMix = function() {
                if (stop) {
                    return callback(new Error('cancelled'), currentOp / totalOps);
                }

                let steps;

                switch (state) {
                    case 0:
                        // for (var i = 0; i < p; i++)...
                        Bi = i0 * 32 * r;

                        arraycopy(B, Bi, XY, 0, Yi);                       // ROMix - 1

                        state = 1;                                         // Move to ROMix 2
                        i1 = 0;

                        // Fall through

                    case 1:

                        // Run up to 1000 steps of the first inner smix loop
                        steps = N - i1;
                        if (steps > limit) { steps = limit; }
                        for (let i = 0; i < steps; i++) {                  // ROMix - 2
                            arraycopy(XY, 0, V, (i1 + i) * Yi, Yi);         // ROMix - 3
                            blockmix_salsa8(XY, Yi, r, x, _X);             // ROMix - 4
                        }

                        // for (var i = 0; i < N; i++)
                        i1 += steps;
                        currentOp += steps;

                        if (callback) {
                            // Call the callback with the progress (optionally stopping us)
                            const percent10 = parseInt(1000 * currentOp / totalOps);
                            if (percent10 !== lastPercent10) {
                                stop = callback(null, currentOp / totalOps);
                                if (stop) { break; }
                                lastPercent10 = percent10;
                            }
                        }

                        if (i1 < N) { break; }

                        i1 = 0;                                          // Move to ROMix 6
                        state = 2;

                        // Fall through

                    case 2:

                        // Run up to 1000 steps of the second inner smix loop
                        steps = N - i1;
                        if (steps > limit) { steps = limit; }
                        for (let i = 0; i < steps; i++) {                // ROMix - 6
                            const offset = (2 * r - 1) * 16;             // ROMix - 7
                            const j = XY[offset] & (N - 1);
                            blockxor(V, j * Yi, XY, Yi);                 // ROMix - 8 (inner)
                            blockmix_salsa8(XY, Yi, r, x, _X);           // ROMix - 9 (outer)
                        }

                        // for (var i = 0; i < N; i++)...
                        i1 += steps;
                        currentOp += steps;

                        // Call the callback with the progress (optionally stopping us)
                        if (callback) {
                            const percent10 = parseInt(1000 * currentOp / totalOps);
                            if (percent10 !== lastPercent10) {
                                stop = callback(null, currentOp / totalOps);
                                if (stop) { break; }
                                lastPercent10 = percent10;
                            }
                        }

                        if (i1 < N) { break; }

                        arraycopy(XY, 0, B, Bi, Yi);                     // ROMix - 10

                        // for (var i = 0; i < p; i++)...
                        i0++;
                        if (i0 < p) {
                            state = 0;
                            break;
                        }

                        b = [];
                        for (let i = 0; i < B.length; i++) {
                            b.push((B[i] >>  0) & 0xff);
                            b.push((B[i] >>  8) & 0xff);
                            b.push((B[i] >> 16) & 0xff);
                            b.push((B[i] >> 24) & 0xff);
                        }

                        const derivedKey = PBKDF2_HMAC_SHA256_OneIter(password, b, dkLen);

                        // Send the result to the callback
                        if (callback) { callback(null, 1.0, derivedKey); }

                        // Done; don't break (which would reschedule)
                        return derivedKey;
                }

                // Schedule the next steps
                if (callback) { nextTick(incrementalSMix); }
            };

            // Run the smix state machine until completion
            if (!callback) {
                while (true) {
                    const derivedKey = incrementalSMix();
                    if (derivedKey != undefined) { return derivedKey; }
                }
            }

            // Bootstrap the async incremental smix
            incrementalSMix();
        }

        const lib = {
            scrypt: function(password, salt, N, r, p, dkLen, progressCallback) {
                return new Promise(function(resolve, reject) {
                    let lastProgress = 0;
                    if (progressCallback) { progressCallback(0); }
                    _scrypt(password, salt, N, r, p, dkLen, function(error, progress, key) {
                        if (error) {
                            reject(error);
                        } else if (key) {
                            if (progressCallback && lastProgress !== 1) {
                                progressCallback(1);
                            }
                            resolve(new Uint8Array(key));
                        } else if (progressCallback && progress !== lastProgress) {
                            lastProgress = progress;
                            return progressCallback(progress);
                        }
                    });
                });
            },
            syncScrypt: function(password, salt, N, r, p, dkLen) {
                return new Uint8Array(_scrypt(password, salt, N, r, p, dkLen));
            }
        };

        // node.js
        {
           module.exports = lib;

        // RequireJS/AMD
        // http://www.requirejs.org/docs/api.html
        // https://github.com/amdjs/amdjs-api/wiki/AMD
        }

    })();
    });

    var scrypt$1 = scrypt;

    var __awaiter$1 = (window && window.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    const logger$1 = new Logger(version$1);
    // Exported Types
    function hasMnemonic$1(value) {
        return (value != null && value.mnemonic && value.mnemonic.phrase);
    }
    class KeystoreAccount extends Description {
        isKeystoreAccount(value) {
            return !!(value && value._isKeystoreAccount);
        }
    }
    function _decrypt(data, key, ciphertext) {
        const cipher = searchPath(data, "crypto/cipher");
        if (cipher === "aes-128-ctr") {
            const iv = looseArrayify(searchPath(data, "crypto/cipherparams/iv"));
            const counter = new aesJs.Counter(iv);
            const aesCtr = new aesJs.ModeOfOperation.ctr(key, counter);
            return arrayify(aesCtr.decrypt(ciphertext));
        }
        return null;
    }
    function _getAccount(data, key) {
        const ciphertext = looseArrayify(searchPath(data, "crypto/ciphertext"));
        const computedMAC = hexlify(keccak256(concat([key.slice(16, 32), ciphertext]))).substring(2);
        if (computedMAC !== searchPath(data, "crypto/mac").toLowerCase()) {
            throw new Error("invalid password");
        }
        const privateKey = _decrypt(data, key.slice(0, 16), ciphertext);
        if (!privateKey) {
            logger$1.throwError("unsupported cipher", Logger.errors.UNSUPPORTED_OPERATION, {
                operation: "decrypt"
            });
        }
        const mnemonicKey = key.slice(32, 64);
        const address = computeAddress(privateKey);
        if (data.address) {
            let check = data.address.toLowerCase();
            if (check.substring(0, 2) !== "0x") {
                check = "0x" + check;
            }
            if (getAddress(check) !== address) {
                throw new Error("address mismatch");
            }
        }
        const account = {
            _isKeystoreAccount: true,
            address: address,
            privateKey: hexlify(privateKey)
        };
        // Version 0.1 x-ethers metadata must contain an encrypted mnemonic phrase
        if (searchPath(data, "x-ethers/version") === "0.1") {
            const mnemonicCiphertext = looseArrayify(searchPath(data, "x-ethers/mnemonicCiphertext"));
            const mnemonicIv = looseArrayify(searchPath(data, "x-ethers/mnemonicCounter"));
            const mnemonicCounter = new aesJs.Counter(mnemonicIv);
            const mnemonicAesCtr = new aesJs.ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);
            const path = searchPath(data, "x-ethers/path") || defaultPath;
            const locale = searchPath(data, "x-ethers/locale") || "en";
            const entropy = arrayify(mnemonicAesCtr.decrypt(mnemonicCiphertext));
            try {
                const mnemonic = entropyToMnemonic(entropy, locale);
                const node = HDNode.fromMnemonic(mnemonic, null, locale).derivePath(path);
                if (node.privateKey != account.privateKey) {
                    throw new Error("mnemonic mismatch");
                }
                account.mnemonic = node.mnemonic;
            }
            catch (error) {
                // If we don't have the locale wordlist installed to
                // read this mnemonic, just bail and don't set the
                // mnemonic
                if (error.code !== Logger.errors.INVALID_ARGUMENT || error.argument !== "wordlist") {
                    throw error;
                }
            }
        }
        return new KeystoreAccount(account);
    }
    function pbkdf2Sync(passwordBytes, salt, count, dkLen, prfFunc) {
        return arrayify(pbkdf2$1(passwordBytes, salt, count, dkLen, prfFunc));
    }
    function pbkdf2(passwordBytes, salt, count, dkLen, prfFunc) {
        return Promise.resolve(pbkdf2Sync(passwordBytes, salt, count, dkLen, prfFunc));
    }
    function _computeKdfKey(data, password, pbkdf2Func, scryptFunc, progressCallback) {
        const passwordBytes = getPassword(password);
        const kdf = searchPath(data, "crypto/kdf");
        if (kdf && typeof (kdf) === "string") {
            const throwError = function (name, value) {
                return logger$1.throwArgumentError("invalid key-derivation function parameters", name, value);
            };
            if (kdf.toLowerCase() === "scrypt") {
                const salt = looseArrayify(searchPath(data, "crypto/kdfparams/salt"));
                const N = parseInt(searchPath(data, "crypto/kdfparams/n"));
                const r = parseInt(searchPath(data, "crypto/kdfparams/r"));
                const p = parseInt(searchPath(data, "crypto/kdfparams/p"));
                // Check for all required parameters
                if (!N || !r || !p) {
                    throwError("kdf", kdf);
                }
                // Make sure N is a power of 2
                if ((N & (N - 1)) !== 0) {
                    throwError("N", N);
                }
                const dkLen = parseInt(searchPath(data, "crypto/kdfparams/dklen"));
                if (dkLen !== 32) {
                    throwError("dklen", dkLen);
                }
                return scryptFunc(passwordBytes, salt, N, r, p, 64, progressCallback);
            }
            else if (kdf.toLowerCase() === "pbkdf2") {
                const salt = looseArrayify(searchPath(data, "crypto/kdfparams/salt"));
                let prfFunc = null;
                const prf = searchPath(data, "crypto/kdfparams/prf");
                if (prf === "hmac-sha256") {
                    prfFunc = "sha256";
                }
                else if (prf === "hmac-sha512") {
                    prfFunc = "sha512";
                }
                else {
                    throwError("prf", prf);
                }
                const count = parseInt(searchPath(data, "crypto/kdfparams/c"));
                const dkLen = parseInt(searchPath(data, "crypto/kdfparams/dklen"));
                if (dkLen !== 32) {
                    throwError("dklen", dkLen);
                }
                return pbkdf2Func(passwordBytes, salt, count, dkLen, prfFunc);
            }
        }
        return logger$1.throwArgumentError("unsupported key-derivation function", "kdf", kdf);
    }
    function decryptSync(json, password) {
        const data = JSON.parse(json);
        const key = _computeKdfKey(data, password, pbkdf2Sync, scrypt$1.syncScrypt);
        return _getAccount(data, key);
    }
    function decrypt(json, password, progressCallback) {
        return __awaiter$1(this, void 0, void 0, function* () {
            const data = JSON.parse(json);
            const key = yield _computeKdfKey(data, password, pbkdf2, scrypt$1.scrypt, progressCallback);
            return _getAccount(data, key);
        });
    }
    function encrypt(account, password, options, progressCallback) {
        try {
            // Check the address matches the private key
            if (getAddress(account.address) !== computeAddress(account.privateKey)) {
                throw new Error("address/privateKey mismatch");
            }
            // Check the mnemonic (if any) matches the private key
            if (hasMnemonic$1(account)) {
                const mnemonic = account.mnemonic;
                const node = HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path || defaultPath);
                if (node.privateKey != account.privateKey) {
                    throw new Error("mnemonic mismatch");
                }
            }
        }
        catch (e) {
            return Promise.reject(e);
        }
        // The options are optional, so adjust the call as needed
        if (typeof (options) === "function" && !progressCallback) {
            progressCallback = options;
            options = {};
        }
        if (!options) {
            options = {};
        }
        const privateKey = arrayify(account.privateKey);
        const passwordBytes = getPassword(password);
        let entropy = null;
        let path = null;
        let locale = null;
        if (hasMnemonic$1(account)) {
            const srcMnemonic = account.mnemonic;
            entropy = arrayify(mnemonicToEntropy(srcMnemonic.phrase, srcMnemonic.locale || "en"));
            path = srcMnemonic.path || defaultPath;
            locale = srcMnemonic.locale || "en";
        }
        let client = options.client;
        if (!client) {
            client = "ethers.js";
        }
        // Check/generate the salt
        let salt = null;
        if (options.salt) {
            salt = arrayify(options.salt);
        }
        else {
            salt = randomBytes$1(32);
        }
        // Override initialization vector
        let iv = null;
        if (options.iv) {
            iv = arrayify(options.iv);
            if (iv.length !== 16) {
                throw new Error("invalid iv");
            }
        }
        else {
            iv = randomBytes$1(16);
        }
        // Override the uuid
        let uuidRandom = null;
        if (options.uuid) {
            uuidRandom = arrayify(options.uuid);
            if (uuidRandom.length !== 16) {
                throw new Error("invalid uuid");
            }
        }
        else {
            uuidRandom = randomBytes$1(16);
        }
        // Override the scrypt password-based key derivation function parameters
        let N = (1 << 17), r = 8, p = 1;
        if (options.scrypt) {
            if (options.scrypt.N) {
                N = options.scrypt.N;
            }
            if (options.scrypt.r) {
                r = options.scrypt.r;
            }
            if (options.scrypt.p) {
                p = options.scrypt.p;
            }
        }
        // We take 64 bytes:
        //   - 32 bytes   As normal for the Web3 secret storage (derivedKey, macPrefix)
        //   - 32 bytes   AES key to encrypt mnemonic with (required here to be Ethers Wallet)
        return scrypt$1.scrypt(passwordBytes, salt, N, r, p, 64, progressCallback).then((key) => {
            key = arrayify(key);
            // This will be used to encrypt the wallet (as per Web3 secret storage)
            const derivedKey = key.slice(0, 16);
            const macPrefix = key.slice(16, 32);
            // This will be used to encrypt the mnemonic phrase (if any)
            const mnemonicKey = key.slice(32, 64);
            // Encrypt the private key
            const counter = new aesJs.Counter(iv);
            const aesCtr = new aesJs.ModeOfOperation.ctr(derivedKey, counter);
            const ciphertext = arrayify(aesCtr.encrypt(privateKey));
            // Compute the message authentication code, used to check the password
            const mac = keccak256(concat([macPrefix, ciphertext]));
            // See: https://github.com/ethereum/wiki/wiki/Web3-Secret-Storage-Definition
            const data = {
                address: account.address.substring(2).toLowerCase(),
                id: uuidV4(uuidRandom),
                version: 3,
                crypto: {
                    cipher: "aes-128-ctr",
                    cipherparams: {
                        iv: hexlify(iv).substring(2),
                    },
                    ciphertext: hexlify(ciphertext).substring(2),
                    kdf: "scrypt",
                    kdfparams: {
                        salt: hexlify(salt).substring(2),
                        n: N,
                        dklen: 32,
                        p: p,
                        r: r
                    },
                    mac: mac.substring(2)
                }
            };
            // If we have a mnemonic, encrypt it into the JSON wallet
            if (entropy) {
                const mnemonicIv = randomBytes$1(16);
                const mnemonicCounter = new aesJs.Counter(mnemonicIv);
                const mnemonicAesCtr = new aesJs.ModeOfOperation.ctr(mnemonicKey, mnemonicCounter);
                const mnemonicCiphertext = arrayify(mnemonicAesCtr.encrypt(entropy));
                const now = new Date();
                const timestamp = (now.getUTCFullYear() + "-" +
                    zpad(now.getUTCMonth() + 1, 2) + "-" +
                    zpad(now.getUTCDate(), 2) + "T" +
                    zpad(now.getUTCHours(), 2) + "-" +
                    zpad(now.getUTCMinutes(), 2) + "-" +
                    zpad(now.getUTCSeconds(), 2) + ".0Z");
                data["x-ethers"] = {
                    client: client,
                    gethFilename: ("UTC--" + timestamp + "--" + data.address),
                    mnemonicCounter: hexlify(mnemonicIv).substring(2),
                    mnemonicCiphertext: hexlify(mnemonicCiphertext).substring(2),
                    path: path,
                    locale: locale,
                    version: "0.1"
                };
            }
            return JSON.stringify(data);
        });
    }

    function decryptJsonWallet(json, password, progressCallback) {
        if (isCrowdsaleWallet(json)) {
            if (progressCallback) {
                progressCallback(0);
            }
            const account = decrypt$1(json, password);
            if (progressCallback) {
                progressCallback(1);
            }
            return Promise.resolve(account);
        }
        if (isKeystoreWallet(json)) {
            return decrypt(json, password, progressCallback);
        }
        return Promise.reject(new Error("invalid JSON wallet"));
    }
    function decryptJsonWalletSync(json, password) {
        if (isCrowdsaleWallet(json)) {
            return decrypt$1(json, password);
        }
        if (isKeystoreWallet(json)) {
            return decryptSync(json, password);
        }
        throw new Error("invalid JSON wallet");
    }

    const version = "wallet/5.7.0";

    var __awaiter = (window && window.__awaiter) || function (thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    };
    const logger = new Logger(version);
    function isAccount(value) {
        return (value != null && isHexString(value.privateKey, 32) && value.address != null);
    }
    function hasMnemonic(value) {
        const mnemonic = value.mnemonic;
        return (mnemonic && mnemonic.phrase);
    }
    class Wallet extends Signer {
        constructor(privateKey, provider) {
            super();
            if (isAccount(privateKey)) {
                const signingKey = new SigningKey(privateKey.privateKey);
                defineReadOnly(this, "_signingKey", () => signingKey);
                defineReadOnly(this, "address", computeAddress(this.publicKey));
                if (this.address !== getAddress(privateKey.address)) {
                    logger.throwArgumentError("privateKey/address mismatch", "privateKey", "[REDACTED]");
                }
                if (hasMnemonic(privateKey)) {
                    const srcMnemonic = privateKey.mnemonic;
                    defineReadOnly(this, "_mnemonic", () => ({
                        phrase: srcMnemonic.phrase,
                        path: srcMnemonic.path || defaultPath,
                        locale: srcMnemonic.locale || "en"
                    }));
                    const mnemonic = this.mnemonic;
                    const node = HDNode.fromMnemonic(mnemonic.phrase, null, mnemonic.locale).derivePath(mnemonic.path);
                    if (computeAddress(node.privateKey) !== this.address) {
                        logger.throwArgumentError("mnemonic/address mismatch", "privateKey", "[REDACTED]");
                    }
                }
                else {
                    defineReadOnly(this, "_mnemonic", () => null);
                }
            }
            else {
                if (SigningKey.isSigningKey(privateKey)) {
                    /* istanbul ignore if */
                    if (privateKey.curve !== "secp256k1") {
                        logger.throwArgumentError("unsupported curve; must be secp256k1", "privateKey", "[REDACTED]");
                    }
                    defineReadOnly(this, "_signingKey", () => privateKey);
                }
                else {
                    // A lot of common tools do not prefix private keys with a 0x (see: #1166)
                    if (typeof (privateKey) === "string") {
                        if (privateKey.match(/^[0-9a-f]*$/i) && privateKey.length === 64) {
                            privateKey = "0x" + privateKey;
                        }
                    }
                    const signingKey = new SigningKey(privateKey);
                    defineReadOnly(this, "_signingKey", () => signingKey);
                }
                defineReadOnly(this, "_mnemonic", () => null);
                defineReadOnly(this, "address", computeAddress(this.publicKey));
            }
            /* istanbul ignore if */
            if (provider && !Provider$1.isProvider(provider)) {
                logger.throwArgumentError("invalid provider", "provider", provider);
            }
            defineReadOnly(this, "provider", provider || null);
        }
        get mnemonic() { return this._mnemonic(); }
        get privateKey() { return this._signingKey().privateKey; }
        get publicKey() { return this._signingKey().publicKey; }
        getAddress() {
            return Promise.resolve(this.address);
        }
        connect(provider) {
            return new Wallet(this, provider);
        }
        signTransaction(transaction) {
            return resolveProperties(transaction).then((tx) => {
                if (tx.from != null) {
                    if (getAddress(tx.from) !== this.address) {
                        logger.throwArgumentError("transaction from address mismatch", "transaction.from", transaction.from);
                    }
                    delete tx.from;
                }
                const signature = this._signingKey().signDigest(keccak256(serialize(tx)));
                return serialize(tx, signature);
            });
        }
        signMessage(message) {
            return __awaiter(this, void 0, void 0, function* () {
                return joinSignature(this._signingKey().signDigest(hashMessage(message)));
            });
        }
        _signTypedData(domain, types, value) {
            return __awaiter(this, void 0, void 0, function* () {
                // Populate any ENS names
                const populated = yield TypedDataEncoder.resolveNames(domain, types, value, (name) => {
                    if (this.provider == null) {
                        logger.throwError("cannot resolve ENS names without a provider", Logger.errors.UNSUPPORTED_OPERATION, {
                            operation: "resolveName",
                            value: name
                        });
                    }
                    return this.provider.resolveName(name);
                });
                return joinSignature(this._signingKey().signDigest(TypedDataEncoder.hash(populated.domain, types, populated.value)));
            });
        }
        encrypt(password, options, progressCallback) {
            if (typeof (options) === "function" && !progressCallback) {
                progressCallback = options;
                options = {};
            }
            if (progressCallback && typeof (progressCallback) !== "function") {
                throw new Error("invalid callback");
            }
            if (!options) {
                options = {};
            }
            return encrypt(this, password, options, progressCallback);
        }
        /**
         *  Static methods to create Wallet instances.
         */
        static createRandom(options) {
            let entropy = randomBytes$1(16);
            if (!options) {
                options = {};
            }
            if (options.extraEntropy) {
                entropy = arrayify(hexDataSlice(keccak256(concat([entropy, options.extraEntropy])), 0, 16));
            }
            const mnemonic = entropyToMnemonic(entropy, options.locale);
            return Wallet.fromMnemonic(mnemonic, options.path, options.locale);
        }
        static fromEncryptedJson(json, password, progressCallback) {
            return decryptJsonWallet(json, password, progressCallback).then((account) => {
                return new Wallet(account);
            });
        }
        static fromEncryptedJsonSync(json, password) {
            return new Wallet(decryptJsonWalletSync(json, password));
        }
        static fromMnemonic(mnemonic, path, wordlist) {
            if (!path) {
                path = defaultPath;
            }
            return new Wallet(HDNode.fromMnemonic(mnemonic, null, wordlist).derivePath(path));
        }
    }
    function verifyTypedData(domain, types, value, signature) {
        return recoverAddress(TypedDataEncoder.hash(domain, types, value), signature);
    }

    const ERC6492_DETECTION_SUFFIX = '6492649264926492649264926492649264926492649264926492649264926492';
    function isEqual(a, b) {
        return a.toLowerCase() === b.toLowerCase();
    }
    function getHash$1(data) {
        const { domain, types, message } = data;
        return TypedDataEncoder.hash(domain, types, message);
    }
    function verify$1(address_1, sig_1, data_1) {
        return __awaiter$c(this, arguments, void 0, function* (address, sig, data, network = '1', options = {}) {
            const { domain, types, message } = data;
            try {
                const recoverAddress = verifyTypedData(domain, types, message, sig);
                if (isEqual(address, recoverAddress))
                    return true;
            }
            catch (e) { }
            const provider = getProvider$1(network, options);
            const hash = getHash$1(data);
            // Handle EIP-6492
            // https://eips.ethereum.org/EIPS/eip-6492
            //
            // We can actually replace verifyTypedData and verifyDefault with the following code,
            // but https://github.com/AmbireTech/signature-validator/blob/main/contracts/DeploylessUniversalSigValidator.sol
            // also can send an extra network request to the provider. (with verifyTypedData we don't send any extra request)
            //
            if (sig.endsWith(ERC6492_DETECTION_SUFFIX)) {
                try {
                    return ('0x01' ===
                        (yield provider.call({
                            data: concat([
                                '0x60806040523480156200001157600080fd5b50604051620007003803806200070083398101604081905262000034916200056f565b6000620000438484846200004f565b9050806000526001601ff35b600080846001600160a01b0316803b806020016040519081016040528181526000908060200190933c90507f6492649264926492649264926492649264926492649264926492649264926492620000a68462000451565b036200021f57600060608085806020019051810190620000c79190620005ce565b8651929550909350915060000362000192576000836001600160a01b031683604051620000f5919062000643565b6000604051808303816000865af19150503d806000811462000134576040519150601f19603f3d011682016040523d82523d6000602084013e62000139565b606091505b5050905080620001905760405162461bcd60e51b815260206004820152601e60248201527f5369676e617475726556616c696461746f723a206465706c6f796d656e74000060448201526064015b60405180910390fd5b505b604051630b135d3f60e11b808252906001600160a01b038a1690631626ba7e90620001c4908b90869060040162000661565b602060405180830381865afa158015620001e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200020891906200069d565b6001600160e01b031916149450505050506200044a565b805115620002b157604051630b135d3f60e11b808252906001600160a01b03871690631626ba7e9062000259908890889060040162000661565b602060405180830381865afa15801562000277573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200029d91906200069d565b6001600160e01b031916149150506200044a565b8251604114620003195760405162461bcd60e51b815260206004820152603a6024820152600080516020620006e083398151915260448201527f3a20696e76616c6964207369676e6174757265206c656e677468000000000000606482015260840162000187565b620003236200046b565b506020830151604080850151855186939260009185919081106200034b576200034b620006c9565b016020015160f81c9050601b81148015906200036b57508060ff16601c14155b15620003cf5760405162461bcd60e51b815260206004820152603b6024820152600080516020620006e083398151915260448201527f3a20696e76616c6964207369676e617475726520762076616c75650000000000606482015260840162000187565b6040805160008152602081018083528a905260ff83169181019190915260608101849052608081018390526001600160a01b038a169060019060a0016020604051602081039080840390855afa1580156200042e573d6000803e3d6000fd5b505050602060405103516001600160a01b031614955050505050505b9392505050565b60006020825110156200046357600080fd5b508051015190565b60405180606001604052806003906020820280368337509192915050565b6001600160a01b03811681146200049f57600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620004d5578181015183820152602001620004bb565b50506000910152565b600082601f830112620004f057600080fd5b81516001600160401b03808211156200050d576200050d620004a2565b604051601f8301601f19908116603f01168101908282118183101715620005385762000538620004a2565b816040528381528660208588010111156200055257600080fd5b62000565846020830160208901620004b8565b9695505050505050565b6000806000606084860312156200058557600080fd5b8351620005928162000489565b6020850151604086015191945092506001600160401b03811115620005b657600080fd5b620005c486828701620004de565b9150509250925092565b600080600060608486031215620005e457600080fd5b8351620005f18162000489565b60208501519093506001600160401b03808211156200060f57600080fd5b6200061d87838801620004de565b935060408601519150808211156200063457600080fd5b50620005c486828701620004de565b6000825162000657818460208701620004b8565b9190910192915050565b828152604060208201526000825180604084015262000688816060850160208701620004b8565b601f01601f1916919091016060019392505050565b600060208284031215620006b057600080fd5b81516001600160e01b0319811681146200044a57600080fd5b634e487b7160e01b600052603260045260246000fdfe5369676e617475726556616c696461746f72237265636f7665725369676e6572',
                                new AbiCoder().encode(['address', 'bytes32', 'bytes'], [address, arrayify(hash), sig])
                            ])
                        })));
                }
                catch (error) {
                    return false;
                }
            }
            // Handle EIP-1271
            if (yield verifyDefault(address, sig, hash, provider))
                return true;
            return yield verifyOldVersion(address, sig, hash, provider);
        });
    }
    function verifyDefault(address, sig, hash, provider) {
        return __awaiter$c(this, void 0, void 0, function* () {
            let returnValue;
            const magicValue = '0x1626ba7e';
            const abi = 'function isValidSignature(bytes32 _hash, bytes memory _signature) public view returns (bytes4 magicValue)';
            try {
                returnValue = yield call(provider, [abi], [address, 'isValidSignature', [arrayify(hash), sig]]);
            }
            catch (e) {
                if (e.message.startsWith('missing revert data in call exception')) {
                    return false;
                }
                throw e;
            }
            return isEqual(returnValue, magicValue);
        });
    }
    function verifyOldVersion(address, sig, hash, provider) {
        return __awaiter$c(this, void 0, void 0, function* () {
            const magicValue = '0x20c13b0b';
            const abi = 'function isValidSignature(bytes _hash, bytes memory _signature) public view returns (bytes4 magicValue)';
            const returnValue = yield call(provider, [abi], [address, 'isValidSignature', [arrayify(hash), sig]]);
            return isEqual(returnValue, magicValue);
        });
    }

    var evm = /*#__PURE__*/Object.freeze({
        __proto__: null,
        getHash: getHash$1,
        'default': verify$1
    });

    function getHash(data, address) {
        const networkType = isStarknetMessage(data) ? starknet : evm;
        return networkType.getHash(data, address);
    }
    function verify(address_1, sig_1, data_1) {
        return __awaiter$c(this, arguments, void 0, function* (address, sig, data, network = '1', options = {}) {
            if (!isStarknetAddress(address) && !isEvmAddress(address)) {
                throw new Error('Invalid address');
            }
            const networkType = isStarknetMessage(data) ? starknet : evm;
            return yield networkType.default(address, sig, data, network, options);
        });
    }

    var gateways = [
    	"ipfs.snapshot.box",
    	"snapshot.4everland.link",
    	"ipfs.io",
    	"ipfs.fleek.co",
    	"gateway.pinata.cloud",
    	"dweb.link",
    	"ipfs.infura.io"
    ];

    var networks = {
    	"1": {
    	key: "1",
    	name: "Ethereum",
    	chainId: 1,
    	network: "homestead",
    	multicall: "0xeefba1e63905ef1d7acba5a8513c70307c1ce441",
    	ensResolvers: [
    		"0x231b0Ee14048e9dCcD1d247744d114a4EB5E8E63",
    		"0x4976fb03C32e5B8cfe2b6cCB31c09Ba78EBaBa41"
    	],
    	ensNameWrapper: "0xD4416b13d2b3a9aBae7AcD5D6C2BbDBE25686401",
    	ensSubgraph: "https://subgrapher.snapshot.org/subgraph/arbitrum/5XqPmWe6gjyrJtFn9cLy237i4cWw2j9HcUJEXsP5qGtH",
    	rpc: [
    		"https://rpc.ankr.com/eth",
    		{
    			url: "https://api-geth-archive.ankr.com",
    			user: "balancer_user",
    			password: "balancerAnkr20201015"
    		},
    		"https://speedy-nodes-nyc.moralis.io/b9aed21e7bb7bdeb35972c9a/eth/mainnet/archive",
    		"https://apis.ankr.com/e62bc219f9c9462b8749defe472d2dc5/6106d4a3ec1d1bcc87ec72158f8fd089/eth/archive/main",
    		"https://eth-archival.gateway.pokt.network/v1/5f76124fb90218002e9ce985",
    		"https://eth-mainnet.alchemyapi.io/v2/4bdDVB5QAaorY2UE-GBUbM2yQB3QJqzv"
    	],
    	light: [
    		"https://cloudflare-eth.com"
    	],
    	ws: [
    		"wss://eth-mainnet.ws.alchemyapi.io/v2/4bdDVB5QAaorY2UE-GBUbM2yQB3QJqzv"
    	],
    	explorer: {
    		url: "https://etherscan.io",
    		apiUrl: "https://api.etherscan.io"
    	},
    	start: 7929876,
    	logo: "ipfs://bafkreid7ndxh6y2ljw2jhbisodiyrhcy2udvnwqgon5wgells3kh4si5z4"
    },
    	"8": {
    	key: "8",
    	name: "Ubiq",
    	chainId: 8,
    	network: "Ubiq",
    	multicall: "0x6668750957e4083725926B71C41bDF1434C73262",
    	rpc: [
    		"https://rpc.octano.dev"
    	],
    	ws: [
    		"wss://ws.octano.dev"
    	],
    	explorer: {
    		url: "https://ubiqscan.io"
    	},
    	start: 1,
    	logo: "ipfs://Qmec3HLoN4QhwZAhw4XTi2aN8Wwmcko5hHN22sHARzb9tw"
    },
    	"10": {
    	key: "10",
    	name: "Optimism",
    	chainId: 10,
    	network: "Optimism mainnet",
    	multicall: "0x35A6Cdb2C9AD4a45112df4a04147EB07dFA01aB7",
    	rpc: [
    		"https://opt-mainnet.g.alchemy.com/v2/JzmIL4Q3jBj7it2duxLFeuCa9Wobmm7D"
    	],
    	explorer: {
    		url: "https://optimistic.etherscan.io",
    		apiUrl: "https://api-optimistic.etherscan.io"
    	},
    	start: 657806,
    	logo: "ipfs://QmfF4kwhGL8QosUXvgq2KWCmavhKBvwD6kbhs7L4p5ZAWb"
    },
    	"19": {
    	key: "19",
    	name: "Songbird Canary-Network",
    	shortName: "Songbird",
    	chainId: 19,
    	network: "songbird",
    	multicall: "0x17032Ea9c3a13Ed337665145364c0d2aD1108c91",
    	rpc: [
    		"https://songbird-api.flare.network/ext/C/rpc"
    	],
    	explorer: {
    		url: "https://songbird-explorer.flare.network"
    	},
    	start: 21807126,
    	logo: "ipfs://QmXyvnrZY8FUxSULfnKKA99sAEkjAHtvhRx5WeHixgaEdu"
    },
    	"24": {
    	key: "24",
    	name: "KardiaChain Mainnet",
    	shortName: "KAI",
    	chainId: 24,
    	network: "mainnet",
    	multicall: "0xd9c92F2287B7802A37eC9BEce96Aa65fb5f31E1b",
    	rpc: [
    		"https://kai-internal.kardiachain.io"
    	],
    	explorer: {
    		url: "https://explorer.kardiachain.io"
    	},
    	start: 8260245,
    	logo: "ipfs://bafkreig73yfyqzbxydv6e3dbj5nks3f57px2iez7tywayey4rilfhhrr34"
    },
    	"25": {
    	key: "25",
    	name: "Cronos",
    	shortName: "Cronos",
    	chainId: 25,
    	network: "mainnet",
    	multicall: "0x6F522a3982e8F9A50A2EDc9E46ed1A3aE2B3FD3a",
    	rpc: [
    		"https://evm-cronos.crypto.org"
    	],
    	explorer: {
    		url: "https://cronos.crypto.org/explorer"
    	},
    	start: 4067,
    	logo: "ipfs://QmfSJbtirJoa3Pt7o5Fdm85wbyw9V1hpzqLr5PQbdnfsAj"
    },
    	"30": {
    	key: "30",
    	name: "RSK",
    	chainId: 30,
    	network: "rsk mainnet",
    	multicall: "0x4eeebb5580769ba6d26bfd07be636300076d1831",
    	rpc: [
    		"https://public-node.rsk.co"
    	],
    	explorer: {
    		url: "https://explorer.rsk.co"
    	},
    	start: 2516442,
    	logo: "ipfs://QmXTwpE1SqoNZmyY4c3fYWy6qUgQELsyWKbgJo2Pg6K6V9"
    },
    	"46": {
    	key: "46",
    	name: "Darwinia Network",
    	shortName: "Darwinia",
    	chainId: 46,
    	network: "mainnet",
    	multicall: "0x67f9ae42EaA9a8aBf065D60ec6Ab3C1A11370607",
    	rpc: [
    		"https://rpc.darwinia.network"
    	],
    	explorer: {
    		url: "https://darwinia.subscan.io"
    	},
    	start: 141853,
    	logo: "ipfs://bafkreicf55maidhx46pyu3mwsshlr43xbewr6tkckkonh4nesbkp7krwkm"
    },
    	"56": {
    	key: "56",
    	name: "BNB Smart Chain",
    	shortName: "BSC",
    	chainId: 56,
    	network: "mainnet",
    	multicall: "0x1ee38d535d541c55c9dae27b12edf090c608e6fb",
    	rpc: [
    		"https://speedy-nodes-nyc.moralis.io/b9aed21e7bb7bdeb35972c9a/bsc/mainnet/archive",
    		"https://rpc.ankr.com/bsc",
    		"https://bsc.getblock.io/mainnet/?api_key=91f8195f-bf46-488f-846a-73d6853790e7",
    		"https://bsc-private-dataseed1.nariox.org",
    		"https://bsc-dataseed1.ninicoin.io",
    		"https://bsc-dataseed1.binance.org"
    	],
    	explorer: {
    		url: "https://bscscan.com"
    	},
    	start: 461230,
    	logo: "ipfs://bafkreibll4la7wqerzs7zwxjne2j7ayynbg2wlenemssoahxxj5rbt6c64"
    },
    	"61": {
    	key: "61",
    	name: "Ethereum Classic",
    	shortName: "Ethereum Classic",
    	chainId: 61,
    	network: "mainnet",
    	multicall: "0x51be3a92C56ae7E207C5b5Fd87F7798Ce82C1AC2",
    	rpc: [
    		"https://www.ethercluster.com/etc"
    	],
    	explorer: {
    		url: "https://blockscout.com/etc/mainnet"
    	},
    	start: 13307544,
    	logo: "ipfs://QmVegc28DvA7LjKUFysab81c9BSuN4wQVDQkRXyAtuEBis"
    },
    	"66": {
    	key: "66",
    	name: "OKExChain",
    	shortName: "OEC Mainnet",
    	chainId: 66,
    	network: "oec mainnet",
    	multicall: "0x6EB187d8197Ac265c945b69f3c3064A6f3831866",
    	rpc: [
    		"https://exchainrpc.okex.org"
    	],
    	ws: [
    		"wss://exchainws.okex.org:8443"
    	],
    	explorer: {
    		url: "https://www.oklink.com/okexchain"
    	},
    	start: 5076543,
    	logo: "ipfs://Qmd7dKnNwHRZ4HRCbCXUbkNV7gP28fGqPdjbHtjRtT9sQF"
    },
    	"75": {
    	key: "75",
    	name: "Decimal",
    	shortName: "mainnet",
    	chainId: 75,
    	network: "mainnet",
    	multicall: "0x949d1A0757803C51F2EfFFEb5472C861A898B8E8",
    	rpc: [
    	],
    	explorer: {
    		url: "https://explorer.decimalchain.com"
    	},
    	start: 16031065,
    	logo: "ipfs://bafkreihkdhbce5rkogl63xegaarlirjrvbfarxbtbf5mqme3s5grvbjyxm"
    },
    	"81": {
    	key: "81",
    	name: "Shibuya Network",
    	shortName: "Shibuya",
    	chainId: 81,
    	network: "testnet",
    	testnet: true,
    	multicall: "0x3E90A35839ff0Aa32992d33d861f24dC95BBf74d",
    	rpc: [
    		"https://rpc.shibuya.astar.network:8545"
    	],
    	explorer: {
    		url: "https://blockscout.com/shibuya"
    	},
    	start: 856303,
    	logo: "ipfs://QmZLQVsUqHBDXutu6ywTvcYXDZG2xBstMfHkfJSzUNpZsc"
    },
    	"82": {
    	key: "82",
    	name: "Meter",
    	shortName: "Meter",
    	chainId: 82,
    	network: "mainnet",
    	multicall: "0x579De77CAEd0614e3b158cb738fcD5131B9719Ae",
    	rpc: [
    		"https://rpc.meter.io"
    	],
    	explorer: {
    		url: "https://scan.meter.io"
    	},
    	start: 4992871,
    	logo: "ipfs://QmSZvT9w9eUDvV1YVaq3BKKEbubtNVqu1Rin44FuN4wz11"
    },
    	"97": {
    	key: "97",
    	name: "BNB Smart Chain Testnet",
    	shortName: "BSC Testnet",
    	chainId: 97,
    	network: "testnet",
    	testnet: true,
    	multicall: "0x8b54247c6BAe96A6ccAFa468ebae96c4D7445e46",
    	rpc: [
    		"https://data-seed-prebsc-1-s1.binance.org:8545",
    		"https://speedy-nodes-nyc.moralis.io/f2963e29bec0de5787da3164/bsc/testnet/archive"
    	],
    	explorer: {
    		url: "https://testnet.bscscan.com"
    	},
    	start: 3599656,
    	logo: "ipfs://bafkreibll4la7wqerzs7zwxjne2j7ayynbg2wlenemssoahxxj5rbt6c64"
    },
    	"100": {
    	key: "100",
    	name: "Gnosis Chain",
    	shortName: "xDAI",
    	chainId: 100,
    	network: "mainnet",
    	multicall: "0xb5b692a88bdfc81ca69dcb1d924f59f0413a602a",
    	rpc: [
    		"https://gno.getblock.io/mainnet/6c1d1e6e-75d9-452f-a863-a694bff93d5c/",
    		"https://xdai-archive.blockscout.com",
    		"https://poa-xdai.gateway.pokt.network/v1/5f76124fb90218002e9ce985",
    		"https://rpc.gnosischain.com"
    	],
    	light: [
    		"https://rpc.gnosischain.com"
    	],
    	ws: [
    		"wss://rpc.xdaichain.com/wss"
    	],
    	explorer: {
    		url: "https://gnosis.blockscout.com"
    	},
    	start: 4108192,
    	logo: "ipfs://QmZeiy8Ax4133wzxUQM9ky8z5XFVf6YLFjJMmTWbWVniZR"
    },
    	"108": {
    	key: "108",
    	name: "Thundercore",
    	chainId: 108,
    	network: "mainnet",
    	multicall: "0x3017086deef56679e267f67f66c4415109b7a97f",
    	rpc: [
    		"https://mainnet-rpc.thundercore.com/archived/SNAPSHOTEuR82a75fLYA"
    	],
    	explorer: {
    		url: "https://viewblock.io/thundercore"
    	},
    	start: 94425385,
    	logo: "ipfs://bafkreifc5z5vtvqx2luzgateyvoocwpd2ifv2hwufxdnyl2a767wa6icli"
    },
    	"109": {
    	key: "109",
    	name: "Shibarium",
    	shortName: "mainnet",
    	chainId: 109,
    	network: "mainnet",
    	multicall: "0xcA11bde05977b3631167028862bE2a173976CA11",
    	rpc: [
    	],
    	explorer: {
    		url: "https://shibariumscan.io"
    	},
    	start: 3485946,
    	logo: "ipfs://bafkreig57igai5phg4icywc5yoockd52jo3hlvbkyi6wiufrmu4p2lmenm"
    },
    	"122": {
    	key: "122",
    	name: "Fuse",
    	shortName: "Fuse",
    	chainId: 122,
    	network: "mainnet",
    	multicall: "0x7a59441fb06666F6d2D766393d876945D06a169c",
    	rpc: [
    		"https://explorer-node.fuse.io/",
    		"https://oefusefull1.liquify.info/"
    	],
    	explorer: {
    		url: "https://explorer.fuse.io"
    	},
    	start: 11923459,
    	logo: "ipfs://QmXjWb64nako7voaVEifgdjAbDbswpTY8bghsiHpv8yWtb"
    },
    	"137": {
    	key: "137",
    	name: "Polygon PoS",
    	shortName: "Polygon",
    	chainId: 137,
    	network: "mainnet",
    	multicall: "0xCBca837161be50EfA5925bB9Cc77406468e76751",
    	rpc: [
    		"https://rpc.ankr.com/polygon",
    		"https://speedy-nodes-nyc.moralis.io/b9aed21e7bb7bdeb35972c9a/polygon/mainnet/archive",
    		"https://speedy-nodes-nyc.moralis.io/f2963e29bec0de5787da3164/polygon/mainnet/archive",
    		"https://rpc-mainnet.maticvigil.com/v1/1cfd7598e5ba6dcf0b4db58e8be484badc6ea08e"
    	],
    	ws: [
    		"wss://ws-mainnet.matic.network"
    	],
    	explorer: {
    		url: "https://polygonscan.com",
    		apiUrl: "https://api.polygonscan.com"
    	},
    	start: 9834491,
    	logo: "ipfs://bafkreihgr7zy7vi5kqddybfaezwuhvssg57qluwmyan4qq7l57nr7w7wey"
    },
    	"144": {
    	key: "144",
    	name: "PHI Network",
    	shortName: "PHI",
    	chainId: 144,
    	network: "mainnet",
    	multicall: "0xc2f41B404a6757863AAeF49ff93039421acCd630",
    	rpc: [
    		"https://connect.phi.network"
    	],
    	explorer: {
    		url: "https://phiscan.com"
    	},
    	start: 360030,
    	logo: "ipfs://bafkreid6pm3mic7izp3a6zlfwhhe7etd276bjfsq2xash6a4s2vmcdf65a"
    },
    	"146": {
    	key: "146",
    	name: "Sonic",
    	shortName: "mainnet",
    	chainId: 146,
    	network: "mainnet",
    	multicall: "0xcA11bde05977b3631167028862bE2a173976CA11",
    	rpc: [
    	],
    	explorer: {
    		url: "https://explorer.soniclabs.com"
    	},
    	start: 60,
    	logo: "ipfs://bafkreic5fffatwy2gzf6y5iymje6ijii43tz4wlxl35da36guurhibjx44"
    },
    	"148": {
    	key: "148",
    	name: "ShimmerEVM",
    	shortName: "ShimmerEVM",
    	chainId: 148,
    	network: "mainnet",
    	multicall: "0xcA11bde05977b3631167028862bE2a173976CA11",
    	rpc: [
    	],
    	explorer: {
    		url: "https://explorer.evm.shimmer.network"
    	},
    	start: 1290,
    	logo: "ipfs://bafkreib4xhbgbhrwkmizp4d4nz3wzbpyhdm6wpz2v2pbkk7jxsgg3hdt74"
    },
    	"157": {
    	key: "157",
    	name: "Shibarium Puppynet Testnet",
    	shortName: "testnet",
    	chainId: 157,
    	network: "testnet",
    	multicall: "0xA4029b74FBA366c926eDFA7Dd10B21C621170a4c",
    	rpc: [
    	],
    	explorer: {
    		url: "https://puppyscan.shib.io"
    	},
    	start: 3035769,
    	logo: "ipfs://bafkreig57igai5phg4icywc5yoockd52jo3hlvbkyi6wiufrmu4p2lmenm",
    	testnet: true
    },
    	"169": {
    	key: "169",
    	name: "Manta Pacific",
    	shortName: "Manta",
    	chainId: 169,
    	network: "mainnet",
    	multicall: "0xcA11bde05977b3631167028862bE2a173976CA11",
    	rpc: [
    	],
    	explorer: {
    		url: "https://www.oklink.com/manta"
    	},
    	start: 332890,
    	logo: "ipfs://bafkreibbrwgwdcfh755dqh4ndta6tja77qbaa36bfv4pstub6prhhore7a"
    },
    	"204": {
    	key: "204",
    	name: "opBNB",
    	shortName: "mainnet",
    	chainId: 204,
    	network: "mainnet",
    	multicall: "0xcA11bde05977b3631167028862bE2a173976CA11",
    	rpc: [
    	],
    	explorer: {
    		url: "http://opbnbscan.com"
    	},
    	start: 512881,
    	logo: "ipfs://bafkreibll4la7wqerzs7zwxjne2j7ayynbg2wlenemssoahxxj5rbt6c64"
    },
    	"246": {
    	key: "246",
    	name: "Energy Web Chain",
    	shortName: "EWC",
    	chainId: 246,
    	network: "mainnet",
    	multicall: "0x0767F26d0D568aB61A98b279C0b28a4164A6f05e",
    	rpc: [
    		"https://voting-rpc.carbonswap.exchange"
    	],
    	explorer: {
    		url: "https://explorer.energyweb.org"
    	},
    	start: 12086501,
    	logo: "ipfs://Qmai7AGHgs8NpeGeXgbMZz7pS2i4kw44qubCJYGrZW2f3a"
    },
    	"250": {
    	key: "250",
    	name: "Fantom Opera",
    	shortName: "fantom",
    	chainId: 250,
    	network: "Mainnet",
    	multicall: "0x7f6A10218264a22B4309F3896745687E712962a0",
    	rpc: [
    		"https://rpc.ankr.com/fantom",
    		"https://rpc.ftm.tools",
    		"https://rpcapi.fantom.network"
    	],
    	explorer: {
    		url: "https://ftmscan.com"
    	},
    	start: 2497732,
    	logo: "ipfs://QmVEgNeQDKnXygeGxfY9FywZpNGQu98ktZtRJ9bToYF6g7"
    },
    	"252": {
    	key: "252",
    	name: "Fraxtal",
    	shortName: "mainnet",
    	chainId: 252,
    	network: "mainnet",
    	multicall: "0xcA11bde05977b3631167028862bE2a173976CA11",
    	rpc: [
    	],
    	explorer: {
    		url: "https://fraxscan.com"
    	},
    	start: 1,
    	logo: "ipfs://bafkreieflj4wq6tx7k5kq47z3xnsrdrn2xgm4bxa3uovrnndcb2vqqwlyu"
    },
    	"269": {
    	key: "269",
    	name: "High Performance Blockchain",
    	shortName: "HPB",
    	chainId: 269,
    	network: "mainnet",
    	multicall: "0x67D0f263aef2F6167FA77353695D75b582Ff4Bca",
    	rpc: [
    		"https://hpbnode.com"
    	],
    	ws: [
    		"wss://ws.hpbnode.com"
    	],
    	explorer: {
    		url: "https://hscan.org"
    	},
    	start: 13960096,
    	logo: "ipfs://QmU7f1MyRz8rLELFfypnWZQjGbDGYgZtC9rjw47jYMYrnu"
    },
    	"300": {
    	key: "300",
    	name: "zkSync Sepolia Testnet",
    	shortName: "testnet",
    	chainId: 300,
    	network: "testnet",
    	multicall: "0xF9cda624FBC7e059355ce98a31693d299FACd963",
    	rpc: [
    	],
    	explorer: {
    		url: "https://sepolia.explorer.zksync.dev"
    	},
    	start: 2292,
    	logo: "ipfs://bafkreih6y7ri7h667cwxe5miisxghfheiidtbw2747y75stoxt3gp3a2yy",
    	testnet: true
    },
    	"314": {
    	key: "314",
    	name: "Filecoin",
    	shortName: "mainnet",
    	chainId: 314,
    	network: "mainnet",
    	multicall: "0xcA11bde05977b3631167028862bE2a173976CA11",
    	rpc: [
    	],
    	explorer: {
    		url: "https://filfox.io"
    	},
    	start: 3328594,
    	logo: "ipfs://bafybeibyvjfmk6aqlfdrczvth55jkmnoadtrch7ht3rdmvqmy2bfxynecm"
    },
    	"321": {
    	key: "321",
    	name: "KCC",
    	shortName: "KCC",
    	chainId: 321,
    	network: "mainnet",
    	multicall: "0xa64D6AFb48225BDA3259246cfb418c0b91de6D7a",
    	rpc: [
    		"https://rpc-mainnet.kcc.network"
    	],
    	ws: [
    		"wss://rpc-ws-mainnet.kcc.network"
    	],
    	explorer: {
    		url: "https://explorer.kcc.io"
    	},
    	start: 1487453,
    	logo: "ipfs://QmRdzYGhFRG8QLzMJahHrw3vETE2YZ9sywQbEkenSjKEvb"
    },
    	"324": {
    	key: "324",
    	name: "zkSync Era",
    	shortName: "zkSync-era",
    	chainId: 324,
    	network: "zkSync Era Mainnet",
    	multicall: "0xF9cda624FBC7e059355ce98a31693d299FACd963",
    	rpc: [
    		"https://mainnet.era.zksync.io"
    	],
    	explorer: {
    		url: "https://explorer.zksync.io"
    	},
    	start: 3908235,
    	logo: "ipfs://bafkreih6y7ri7h667cwxe5miisxghfheiidtbw2747y75stoxt3gp3a2yy"
    },
    	"336": {
    	key: "336",
    	name: "Shiden Network",
    	shortName: "Shiden",
    	chainId: 336,
    	network: "mainnet",
    	multicall: "0x3E90A35839ff0Aa32992d33d861f24dC95BBf74d",
    	rpc: [
    		"https://rpc.shiden.astar.network:8545",
    		"https://shiden.api.onfinality.io/public"
    	],
    	explorer: {
    		url: "https://blockscout.com/shiden"
    	},
    	start: 1170016,
    	logo: "ipfs://QmcqGQE4Sk73zXc3e91TUFFefKBVeaNgbxV141XkSNE4xj"
    },
    	"369": {
    	key: "369",
    	name: "Pulsechain",
    	shortName: "Pulsechain",
    	chainId: 369,
    	network: "mainnet",
    	multicall: "0xdbdd0FD8B16F0092f306392b699D7fbddaA9011B",
    	rpc: [
    		"https://rpc.pulsechain.com"
    	],
    	explorer: {
    		url: "https://scan.pulsechain.com"
    	},
    	start: 17657774,
    	logo: "ipfs://QmWUsiEWdejtHZ9B9981TYXn7Ds8C7fkB1S4h5rP3kCCZR"
    },
    	"416": {
    	key: "416",
    	name: "SX Network",
    	shortName: "SX",
    	chainId: 416,
    	network: "mainnet",
    	multicall: "0x834a005DDCF990Ba1a79f259e840e58F2D14F49a",
    	rpc: [
    		"https://rpc.sx.technology"
    	],
    	ws: [
    		"wss://rpc.sx.technology/ws"
    	],
    	explorer: {
    		url: "https://explorer.sx.technology"
    	},
    	start: 2680605,
    	logo: "ipfs://QmSXLXqyr2H6Ja5XrmznXbWTEvF2gFaL8RXNXgyLmDHjAF"
    },
    	"592": {
    	key: "592",
    	name: "Astar Network",
    	shortName: "Astar",
    	chainId: 592,
    	network: "mainnet",
    	multicall: "0x3E90A35839ff0Aa32992d33d861f24dC95BBf74d",
    	rpc: [
    		"https://astar.api.onfinality.io/public",
    		"https://rpc.astar.network:8545"
    	],
    	explorer: {
    		url: "https://blockscout.com/astar"
    	},
    	start: 366482,
    	logo: "ipfs://QmZLQVsUqHBDXutu6ywTvcYXDZG2xBstMfHkfJSzUNpZsc"
    },
    	"813": {
    	key: "813",
    	name: "Qitmeer",
    	shortName: "MEER",
    	chainId: 813,
    	network: "mainnet",
    	multicall: "0x55034b2cF530ae3A8fC1e2e4523F58496796610F",
    	rpc: [
    		"https://evm-dataseed1.meerscan.io",
    		"https://evm-dataseed.meerscan.com",
    		"https://evm-dataseed2.meerscan.io",
    		"https://evm-dataseed3.meerscan.io"
    	],
    	explorer: {
    		url: "https://evm.meerscan.io"
    	},
    	start: 43317,
    	logo: "ipfs://QmXvum7SNVaAqAc2jNzR1NpNZN1GGvNaKWydg8a1GEDQ7y"
    },
    	"841": {
    	key: "841",
    	name: "Taraxa",
    	shortName: "841",
    	chainId: 841,
    	network: "mainnet",
    	multicall: "0xFCe7a3121B42664AaD145712e1c2Bf2e38f60AA1",
    	rpc: [
    		"https://rpc.mainnet.taraxa.io"
    	],
    	ws: [
    		"wss://ws.mainnet.taraxa.io"
    	],
    	explorer: {
    		url: "https://mainnet.explorer.taraxa.io"
    	},
    	start: 1515906,
    	logo: "ipfs://Qmcc6ZCAGESMzZzoj5LsTVcCo2E35x3Ydk71uPJyov6Mwx"
    },
    	"888": {
    	key: "888",
    	name: "Wanchain",
    	chainId: 888,
    	network: "mainnet",
    	multicall: "0xba5934ab3056fca1fa458d30fbb3810c3eb5145f",
    	rpc: [
    		"https://gwan-ssl.wandevs.org:56891"
    	],
    	ws: [
    		"wss://api.wanchain.org:8443/ws/v3/ddd16770c68f30350a21114802d5418eafe039b722de52b488e7eee1ee2cd73f"
    	],
    	explorer: {
    		url: "https://www.wanscan.org"
    	},
    	start: 11302663,
    	logo: "ipfs://QmewFFN44rkxESFsHG8edaLt1znr62hjvZhGynfXqruzX3"
    },
    	"1001": {
    	key: "1001",
    	name: "Kaia Kairos Testnet",
    	shortName: "kaia-kairos",
    	chainId: 1001,
    	network: "testnet",
    	testnet: true,
    	multicall: "0x40643B8Aeaaca0b87Ea1A1E596e64a0e14B1d244",
    	rpc: [
    		"https://archive-en-kairos.node.kaia.io"
    	],
    	ws: [
    		"wss://archive-en-kairos.node.kaia.io/ws"
    	],
    	explorer: {
    		url: "https://kairos.kaiascan.com"
    	},
    	start: 87232478,
    	logo: "ipfs://bafkreifm6l67f4blcv7qwuszalwoxzptt5ad2f3t472lytr3d2hmi626ju"
    },
    	"1072": {
    	key: "1072",
    	name: "Shimmer EVM Testnet",
    	shortName: "ShimmerEVM",
    	chainId: 1072,
    	network: "testnet",
    	testnet: true,
    	multicall: "0x751d21047C116413895c259f3f305e38C10B7cF6",
    	rpc: [
    		"https://archive.evm.testnet.shimmer.network/v1/chains/rms1pr75wa5xuepg2hew44vnr28wz5h6n6x99zptk2g68sp2wuu2karywgrztx3/evm"
    	],
    	explorer: {
    		url: "https://explorer.evm.testnet.shimmer.network"
    	},
    	start: 10614,
    	logo: "ipfs://bafkreihtwfwrue7klzedwx4rqlk6agklz4lbbk7owsyw6xzn6c2m4t5tgy"
    },
    	"1088": {
    	key: "1088",
    	name: "Metis",
    	shortName: "metis",
    	chainId: 1088,
    	network: "mainnet",
    	multicall: "0xc39aBB6c4451089dE48Cffb013c39d3110530e5C",
    	rpc: [
    		"https://andromeda.metis.io/?owner=1088"
    	],
    	explorer: {
    		url: "https://andromeda-explorer.metis.io"
    	},
    	start: 451,
    	logo: "ipfs://bafkreiaqr4atnjpdnk3c4vu4377ai7bzqpgaefefbl5j5imfsvr4puimtu"
    },
    	"1101": {
    	key: "1101",
    	name: "Polygon zkEVM",
    	shortName: "mainnet",
    	chainId: 1101,
    	network: "mainnet",
    	multicall: "0xcA11bde05977b3631167028862bE2a173976CA11",
    	rpc: [
    	],
    	explorer: {
    		url: "https://zkevm.polygonscan.com"
    	},
    	start: 57746,
    	logo: "ipfs://bafkreibfiyvhqnme2vbxxfcku7qkxgjpkg6ywdkplxh4oxlkqsbznyorfm"
    },
    	"1116": {
    	key: "1116",
    	name: "Core Chain",
    	shortName: "Core",
    	chainId: 1116,
    	network: "mainnet",
    	multicall: "0x024f0041b76B598c2A0a75004F8447FaF67BD004",
    	rpc: [
    		"https://rpcar.coredao.org/"
    	],
    	explorer: {
    		url: "https://scan.coredao.org"
    	},
    	start: 853908,
    	logo: "ipfs://bafkreigjv5yb7uhlrryzib7j2f73nnwqan2tmfnwjdu26vkk365fyesoiu"
    },
    	"1284": {
    	key: "1284",
    	name: "Moonbeam",
    	shortName: "GLMR",
    	chainId: 1284,
    	network: "mainnet",
    	multicall: "0x83e3b61886770de2F64AAcaD2724ED4f08F7f36B",
    	rpc: [
    		"https://rpc.api.moonbeam.network"
    	],
    	explorer: {
    		url: "https://moonscan.io"
    	},
    	start: 171135,
    	logo: "ipfs://QmWKTEK2pj5sBBbHnMHQbWgw6euVdBrk2Ligpi2chrWASk"
    },
    	"1285": {
    	key: "1285",
    	name: "Moonriver (Kusama)",
    	shortName: "Moonriver",
    	chainId: 1285,
    	network: "mainnet",
    	multicall: "0x537004440ffFE1D4AE9F009031Fc2b0385FCA9F1",
    	rpc: [
    		"https://rpc.api.moonriver.moonbeam.network"
    	],
    	explorer: {
    		url: "https://blockscout.moonriver.moonbeam.network"
    	},
    	start: 413539,
    	logo: "ipfs://QmXtgPesL87Ejhq2Y7yxsaPYpf4RcnoTYPJWPcv6iiYhoi"
    },
    	"1287": {
    	key: "1287",
    	name: "Moonbase Alpha TestNet",
    	shortName: "Moonbase",
    	chainId: 1287,
    	network: "testnet",
    	testnet: true,
    	multicall: "0xf09FD6B6FF3f41614b9d6be2166A0D07045A3A97",
    	rpc: [
    		"https://rpc.testnet.moonbeam.network"
    	],
    	explorer: {
    		url: "https://moonbase-blockscout.testnet.moonbeam.network"
    	},
    	start: 859041,
    	logo: "ipfs://QmeGbNTU2Jqwg8qLTMGW8n8HSi2VdgCncAaeGzLx6gYnD7"
    },
    	"1328": {
    	key: "1328",
    	name: "Sei atlantic testnet",
    	shortName: "testnet",
    	chainId: 1328,
    	network: "testnet",
    	multicall: "0xc454132B017b55b427f45078E335549A7124f5f7",
    	rpc: [
    	],
    	explorer: {
    		url: "https://seitrace.com"
    	},
    	start: 96978658,
    	logo: "ipfs://bafkreiammyt7uztbztqbcqv4bydnczsh2fqmnjf6jxj4xnskzzl6sjrigq",
    	testnet: true
    },
    	"1329": {
    	key: "1329",
    	name: "Sei",
    	shortName: "mainnet",
    	chainId: 1329,
    	network: "mainnet",
    	multicall: "0xe033Bed7cae4114Af84Be1e9F1CA7DEa07Dfe1Cf",
    	rpc: [
    	],
    	explorer: {
    		url: "https://seitrace.com"
    	},
    	start: 79164574,
    	logo: "ipfs://bafkreiammyt7uztbztqbcqv4bydnczsh2fqmnjf6jxj4xnskzzl6sjrigq"
    },
    	"1480": {
    	key: "1480",
    	name: "Vana",
    	shortName: "mainnet",
    	chainId: 1480,
    	network: "mainnet",
    	multicall: "0xD8d2dFca27E8797fd779F8547166A2d3B29d360E",
    	rpc: [
    	],
    	explorer: {
    		url: "https://islander.vanascan.io"
    	},
    	start: 716763,
    	logo: "ipfs://bafkreibotel3dmc5og5rf3tpt7l74awkene7x6q3oxtwhptt4y4rpa7vsa"
    },
    	"1559": {
    	key: "1559",
    	name: "Tenet",
    	shortName: "tenet",
    	chainId: 1559,
    	network: "mainnet",
    	multicall: "0xcCB3F00bE353950E4C08501ac8Af48765EAAa738",
    	rpc: [
    	],
    	explorer: {
    		url: "https://tenetscan.io"
    	},
    	start: 944415,
    	logo: "ipfs://Qmc1gqjWTzNo4pyFSGtQuCu7kRSZZBUVybtTjHn2nNEEPA"
    },
    	"1663": {
    	key: "1663",
    	name: "Horizen Gobi Testnet",
    	shortName: "Gobi",
    	chainId: 1663,
    	network: "testnet",
    	testnet: true,
    	multicall: "0xC743e4910Bdd4e5aBacCA38F74cdA270281C5eef",
    	rpc: [
    		"https://gobi-testnet.horizenlabs.io/ethv1"
    	],
    	explorer: {
    		url: "https://gobi-explorer.horizen.io"
    	},
    	start: 1,
    	logo: "ipfs://QmUYQdsnkUoiDiQ3WaWrtH7fsc5yQDC7kZJCHmC2qWPTPt"
    },
    	"2000": {
    	key: "2000",
    	name: "Doge Chain",
    	shortName: "dogechain",
    	chainId: 2000,
    	network: "mainnet",
    	multicall: "0x6f9D3f3932B417bd4957585D236Cbc32b32C0BDc",
    	rpc: [
    		"https://rpc.dogechain.dog"
    	],
    	explorer: {
    		url: "https://explorer.dogechain.dog"
    	},
    	start: 877115,
    	logo: "ipfs://bafkreigovfh3pinsdih777issfgaflwu2yjzroljs2642gbvwikcd3nm4i"
    },
    	"2109": {
    	key: "2109",
    	name: "Exosama Network",
    	shortName: "EXN",
    	chainId: 2109,
    	network: "mainnet",
    	multicall: "0x2feFC828e2fEfdE0C9f7740919c6A9139F886067",
    	rpc: [
    		"https://rpc.exosama.com"
    	],
    	explorer: {
    		url: "https://explorer.exosama.com"
    	},
    	start: 94085,
    	logo: "ipfs://QmaQxfwpXYTomUd24PMx5tKjosupXcm99z1jL1XLq9LWBS"
    },
    	"2152": {
    	key: "2152",
    	name: "Findora",
    	shortName: "Findora",
    	chainId: 2152,
    	network: "mainnet",
    	multicall: "0xCF7D1e21CBe9bdEF235aef06C5d8051B3d4DF0f5",
    	rpc: [
    		"https://archive.prod.findora.org:8545/"
    	],
    	explorer: {
    		url: "https://evm.findorascan.io"
    	},
    	start: 4219343,
    	logo: "ipfs://QmXkneyRB6HbHTHRLCZpZqSsawiyJY7b2kZ2V8ydvKYAgv"
    },
    	"2192": {
    	key: "2192",
    	name: "SnaxChain",
    	shortName: "mainnet",
    	chainId: 2192,
    	network: "mainnet",
    	multicall: "0xcA11bde05977b3631167028862bE2a173976CA11",
    	rpc: [
    	],
    	explorer: {
    		url: "https://explorer.snaxchain.io"
    	},
    	start: 1554893,
    	logo: "ipfs://bafkreibzz757piho2llzkbiszpvalf5k5hpmxcwhvrmgp7vpz2vp4vj7ly"
    },
    	"2221": {
    	key: "2221",
    	name: "Kava Testnet",
    	shortName: "testnet",
    	chainId: 2221,
    	network: "testnet",
    	multicall: "0xc7193EFE367DF0C9349a1149F4E95A2A35604262",
    	rpc: [
    	],
    	explorer: {
    		url: "https://testnet.kavascan.com"
    	},
    	start: 6193104,
    	logo: "ipfs://bafkreibpfubharx32fjqkqbfdhygwdjb2khxdg6meaasrcxsgvowos26f4",
    	testnet: true
    },
    	"2222": {
    	key: "2222",
    	name: "Kava",
    	shortName: "mainnet",
    	chainId: 2222,
    	network: "mainnet",
    	multicall: "0xcA11bde05977b3631167028862bE2a173976CA11",
    	rpc: [
    	],
    	explorer: {
    		url: "https://kavascan.com"
    	},
    	start: 3661165,
    	logo: "ipfs://bafkreibpfubharx32fjqkqbfdhygwdjb2khxdg6meaasrcxsgvowos26f4"
    },
    	"2400": {
    	key: "2400",
    	name: "TCG Verse",
    	shortName: "TCGV",
    	chainId: 2400,
    	network: "mainnet",
    	multicall: "0xceC65DEE0b5012F1b7321b2647681F997c7204FC",
    	rpc: [
    		"https://rpc.tcgverse.xyz"
    	],
    	explorer: {
    		url: "https://explorer.tcgverse.xyz"
    	},
    	start: 57500,
    	logo: "ipfs://bafkreidg4wpewve5mdxrofneqblydkrjl3oevtgpdf3fk3z3vjqam6ocoe"
    },
    	"2522": {
    	key: "2522",
    	name: "Fraxtal Testnet",
    	shortName: "testnet",
    	chainId: 2522,
    	network: "testnet",
    	multicall: "0xcA11bde05977b3631167028862bE2a173976CA11",
    	rpc: [
    	],
    	explorer: {
    		url: "https://holesky.fraxscan.com"
    	},
    	start: 1,
    	logo: "ipfs://bafkreieflj4wq6tx7k5kq47z3xnsrdrn2xgm4bxa3uovrnndcb2vqqwlyu",
    	testnet: true
    },
    	"3338": {
    	key: "3338",
    	name: "peaq",
    	shortName: "mainnet",
    	chainId: 3338,
    	network: "mainnet",
    	multicall: "0xc454132B017b55b427f45078E335549A7124f5f7",
    	rpc: [
    	],
    	explorer: {
    		url: "https://peaq.subscan.io"
    	},
    	start: 3525964,
    	logo: "ipfs://bafkreidqkleori7pmilesz4t52iebebaqf3oflzmoz646qfuaznanb3sgm"
    },
    	"4200": {
    	key: "4200",
    	name: "Merlin",
    	shortName: "merlin",
    	chainId: 4200,
    	network: "mainnet",
    	multicall: "0x830E7E548F4D80947a40A7Cf3a2a53166a0C3980",
    	rpc: [
    	],
    	explorer: {
    		url: "https://scan.merlinchain.io"
    	},
    	start: 589494,
    	logo: "ipfs://bafkreicew2qv3m756m7xs2nrjezinghps7rlessrqjqetvox74w4hov2xe"
    },
    	"4337": {
    	key: "4337",
    	name: "Beam",
    	shortName: "Beam",
    	chainId: 4337,
    	network: "mainnet",
    	multicall: "0x4956F15eFdc3dC16645e90Cc356eAFA65fFC65Ec",
    	rpc: [
    	],
    	explorer: {
    		url: "https://subnets.avax.network/beam"
    	},
    	start: 1,
    	logo: "ipfs://QmaKRLxXPdeTsLx7MFLS3CJbhpSbResgoeL4fCgHB1mTsF"
    },
    	"4689": {
    	key: "4689",
    	name: "IoTeX",
    	shortName: "IoTeX",
    	chainId: 4689,
    	network: "mainnet",
    	multicall: "0x9c8B105c94282CDB0F3ecF27e3cfA96A35c07be6",
    	rpc: [
    		"https://babel-api.mainnet.iotex.io"
    	],
    	explorer: {
    		url: "https://iotexscan.io"
    	},
    	start: 11533283,
    	logo: "ipfs://QmNkr1UPcBYbvLp7d7Pk4eF3YCsHpaNkfusKZNtykL2EQC"
    },
    	"5000": {
    	key: "5000",
    	name: "Mantle",
    	chainId: 5000,
    	network: "mainnet",
    	multicall: "0xcA11bde05977b3631167028862bE2a173976CA11",
    	rpc: [
    		"https://rpc.mantle.xyz"
    	],
    	explorer: {
    		url: "https://explorer.mantle.xyz"
    	},
    	start: 304717,
    	logo: "ipfs://bafkreidkucwfn4mzo2gtydrt2wogk3je5xpugom67vhi4h4comaxxjzoz4"
    },
    	"5555": {
    	key: "5555",
    	name: "Chain Verse",
    	shortName: "ChainVerse",
    	chainId: 5555,
    	network: "ChainVerse",
    	multicall: "0xcA11bde05977b3631167028862bE2a173976CA11",
    	rpc: [
    		"https://rpc.chainverse.info"
    	],
    	explorer: {
    		url: "https://explorer.chainverse.info"
    	},
    	start: 6334180,
    	logo: "ipfs://QmQyJt28h4wN3QHPXUQJQYQqGiFUD77han3zibZPzHbitk"
    },
    	"5611": {
    	key: "5611",
    	name: "opBNB Testnet",
    	shortName: "testnet",
    	chainId: 5611,
    	network: "testnet",
    	multicall: "0xcA11bde05977b3631167028862bE2a173976CA11",
    	rpc: [
    	],
    	explorer: {
    		url: "https://opbnb-testnet.bscscan.com"
    	},
    	start: 3705108,
    	logo: "ipfs://bafkreibll4la7wqerzs7zwxjne2j7ayynbg2wlenemssoahxxj5rbt6c64",
    	testnet: true
    },
    	"6102": {
    	key: "6102",
    	name: "Cascadia Testnet",
    	shortName: "Cascadia",
    	chainId: 6102,
    	network: "testnet",
    	multicall: "0x728989819bAD588F193563008E0a03E8cD6a3e4a",
    	rpc: [
    		"https://testnet.cascadia.foundation"
    	],
    	explorer: {
    		url: "https://explorer.cascadia.foundation"
    	},
    	testnet: true,
    	start: 370457,
    	logo: "ipfs://QmWkhZYhReYyaa5pQXj32hEGxoRcBqarFMcfQScELmjYQj"
    },
    	"7332": {
    	key: "7332",
    	name: "Horizen EON",
    	shortName: "EON",
    	chainId: 7332,
    	network: "mainnet",
    	multicall: "0xC743e4910Bdd4e5aBacCA38F74cdA270281C5eef",
    	rpc: [
    	],
    	explorer: {
    		url: "https://eon-explorer.horizenlabs.io"
    	},
    	start: 85108,
    	logo: "ipfs://QmUYQdsnkUoiDiQ3WaWrtH7fsc5yQDC7kZJCHmC2qWPTPt"
    },
    	"7341": {
    	key: "7341",
    	name: "Shyft",
    	shortName: "Shyft",
    	chainId: 7341,
    	network: "mainnet",
    	multicall: "0xceb10e9133D771cA93c8002Be527A465E85381a2",
    	rpc: [
    		"https://rpc.shyft.network"
    	],
    	explorer: {
    		url: "https://bx.shyft.network"
    	},
    	start: 3673983,
    	logo: "ipfs://bafkreifwxnnfk6koabzmxgcxcwlrwt6b5gijdain2gyqee77q4ajfb7fu4"
    },
    	"7560": {
    	key: "7560",
    	name: "Cyber",
    	shortName: "mainnet",
    	chainId: 7560,
    	network: "mainnet",
    	multicall: "0xcA11bde05977b3631167028862bE2a173976CA11",
    	rpc: [
    	],
    	explorer: {
    		url: "https://cyberscan.co"
    	},
    	start: 1731707,
    	logo: "ipfs://bafkreifm2bbehoqpz4454o7gixnxfi6cgvqlxigqr3f6ipj7l2omtgfgnm"
    },
    	"8217": {
    	key: "8217",
    	name: "Kaia Mainnet",
    	shortName: "kaia-mainnet",
    	chainId: 8217,
    	network: "mainnet",
    	multicall: "0x5f5f0d1b9ff8b3dcace308e39b13b203354906e9",
    	rpc: [
    		"https://archive-en.node.kaia.io"
    	],
    	ws: [
    		"wss://archive-en.node.kaia.io/ws"
    	],
    	explorer: {
    		url: "https://kaiascan.com"
    	},
    	start: 91582357,
    	logo: "ipfs://bafkreifm6l67f4blcv7qwuszalwoxzptt5ad2f3t472lytr3d2hmi626ju"
    },
    	"8453": {
    	key: "8453",
    	name: "Base",
    	shortName: "mainnet",
    	chainId: 8453,
    	network: "mainnet",
    	multicall: "0xca11bde05977b3631167028862be2a173976ca11",
    	rpc: [
    	],
    	explorer: {
    		url: "https://basescan.org"
    	},
    	start: 5022,
    	logo: "ipfs://QmaxRoHpxZd8PqccAynherrMznMufG6sdmHZLihkECXmZv"
    },
    	"9001": {
    	key: "9001",
    	name: "Evmos Network",
    	shortName: "Evmos",
    	chainId: 9001,
    	network: "mainnet",
    	multicall: "0x37763d16f8dBf6F185368E0f256350cAb7E24b26",
    	rpc: [
    		"https://eth.bd.evmos.org:8545"
    	],
    	ws: [
    		"wss://eth.bd.evmos.org:8546"
    	],
    	explorer: {
    		url: "https://escan.live"
    	},
    	start: 13959539,
    	logo: "ipfs://bafkreif4obrdoiretpozdd56seziywc6clha7wwkbldng3ovry2bpzly34"
    },
    	"9990": {
    	key: "9990",
    	name: "Agung testnet",
    	shortName: "testnet",
    	chainId: 9990,
    	network: "testnet",
    	multicall: "0xc454132B017b55b427f45078E335549A7124f5f7",
    	rpc: [
    	],
    	explorer: {
    		url: "https://agung-testnet.subscan.io"
    	},
    	start: 2031789,
    	logo: "ipfs://bafkreidqkleori7pmilesz4t52iebebaqf3oflzmoz646qfuaznanb3sgm",
    	testnet: true
    },
    	"10000": {
    	key: "10000",
    	name: "smartBCH",
    	shortName: "BCH",
    	chainId: 10000,
    	network: "mainnet",
    	multicall: "0x1b38EBAd553f218e2962Cb1C0539Abb5d6A37774",
    	rpc: [
    		"https://smartbch.greyh.at/"
    	],
    	explorer: {
    		url: "https://smartbch-explorer.web.app"
    	},
    	start: 268248,
    	logo: "ipfs://QmWG1p7om4hZ4Yi4uQvDpxg4si7qVYhtppGbcDGrhVFvMd"
    },
    	"10243": {
    	key: "10243",
    	name: "Arthera Testnet",
    	shortName: "Arthera_",
    	chainId: 10243,
    	network: "testnet",
    	testnet: true,
    	multicall: "0x27c7FC597aD2E81C4c1cA1769972f79DaF042Da7",
    	rpc: [
    		"https://rpc-test.arthera.net"
    	],
    	explorer: {
    		url: "https://explorer-test.arthera.net"
    	},
    	start: 10523,
    	logo: "ipfs://QmYQp3e52KjkT4bYdAvB6ACEEpXs2D8DozsDitaADRY2Ak"
    },
    	"13337": {
    	key: "13337",
    	name: "Beam Testnet",
    	shortName: "testnet",
    	chainId: 13337,
    	network: "testnet",
    	multicall: "0x9BF49b704EE2A095b95c1f2D4EB9010510c41C9E",
    	rpc: [
    	],
    	explorer: {
    		url: "https://subnets-test.avax.network/beam"
    	},
    	start: 3,
    	logo: "ipfs://QmaKRLxXPdeTsLx7MFLS3CJbhpSbResgoeL4fCgHB1mTsF",
    	testnet: true
    },
    	"13371": {
    	key: "13371",
    	name: "Immutable zkEVM",
    	shortName: "mainnet",
    	chainId: 13371,
    	network: "mainnet",
    	multicall: "0xcA11bde05977b3631167028862bE2a173976CA11",
    	rpc: [
    	],
    	explorer: {
    		url: "https://explorer.immutable.com"
    	},
    	start: 3680945,
    	logo: "ipfs://bafkreiepnhfv3hgexddjpyaeemxo3byhtxxit6t4zsponyczee6ddjqxwi"
    },
    	"13473": {
    	key: "13473",
    	name: "Immutable zkEVM Testnet",
    	shortName: "testnet",
    	chainId: 13473,
    	network: "testnet",
    	multicall: "0xcA11bde05977b3631167028862bE2a173976CA11",
    	rpc: [
    	],
    	explorer: {
    		url: "https://explorer.testnet.immutable.com"
    	},
    	start: 5307209,
    	logo: "ipfs://bafkreiepnhfv3hgexddjpyaeemxo3byhtxxit6t4zsponyczee6ddjqxwi",
    	testnet: true
    },
    	"14800": {
    	key: "14800",
    	name: "Vana Moksha Testnet",
    	shortName: "testnet",
    	chainId: 14800,
    	network: "testnet",
    	multicall: "0xD8d2dFca27E8797fd779F8547166A2d3B29d360E",
    	rpc: [
    	],
    	explorer: {
    		url: "https://moksha.vanascan.io"
    	},
    	start: 732283,
    	logo: "ipfs://bafkreibotel3dmc5og5rf3tpt7l74awkene7x6q3oxtwhptt4y4rpa7vsa",
    	testnet: true
    },
    	"16718": {
    	key: "16718",
    	name: "AirDAO",
    	chainId: 16718,
    	network: "mainnet",
    	multicall: "0x25e81aC81A8B03389D78CB45faB78353aB528574",
    	rpc: [
    		"https://network-archive.ambrosus.io"
    	],
    	ws: [
    		"wss://network-archive.ambrosus.io/ws"
    	],
    	explorer: {
    		url: "https://airdao.io/explorer"
    	},
    	start: 22922566,
    	logo: "ipfs://QmSxXjvWng3Diz4YwXDV2VqSPgMyzLYBNfkjJcr7rzkxom"
    },
    	"29548": {
    	key: "29548",
    	name: "MCH Verse",
    	shortName: "mainnet",
    	chainId: 29548,
    	network: "mainnet",
    	multicall: "0x1d39652386488CE1fE4254E105F5A42a04d43dB2",
    	rpc: [
    	],
    	explorer: {
    		url: "https://explorer.oasys.mycryptoheroes.net"
    	},
    	start: 27458402,
    	logo: "ipfs://QmZZnwR1y6cU1sare2TQmwqkNDLXQxD4GdPrmHLmUoPtbU"
    },
    	"33111": {
    	key: "33111",
    	name: "Curtis",
    	shortName: "apechain",
    	chainId: 33111,
    	network: "testnet",
    	multicall: "0xc454132B017b55b427f45078E335549A7124f5f7",
    	rpc: [
    	],
    	explorer: {
    		url: "https://explorer.curtis.apechain.com"
    	},
    	start: 6661339,
    	logo: "ipfs://bafkreicljxttjq2xkgfwwpii5xegirgq2ctrnsjnzelxudjj33qzq65apu",
    	testnet: true
    },
    	"33139": {
    	key: "33139",
    	name: "ApeChain",
    	shortName: "mainnet",
    	chainId: 33139,
    	network: "mainnet",
    	multicall: "0xcA11bde05977b3631167028862bE2a173976CA11",
    	rpc: [
    	],
    	explorer: {
    		url: "https://apechain.calderaexplorer.xyz"
    	},
    	start: 20889,
    	logo: "ipfs://bafkreielbgcox2jsw3g6pqulqb7pyjgx7czjt6ahnibihaij6lozoy53w4"
    },
    	"42161": {
    	key: "42161",
    	name: "Arbitrum One",
    	chainId: 42161,
    	network: "Arbitrum mainnet",
    	multicall: "0x7A7443F8c577d537f1d8cD4a629d40a3148Dd7ee",
    	rpc: [
    		"https://rpc.ankr.com/arbitrum",
    		"https://speedy-nodes-nyc.moralis.io/9e03baabdc27be2a35bdec4a/arbitrum/mainnet",
    		"https://arb-mainnet.g.alchemy.com/v2/JDvtNGwnHhTltIwfnxQocKwKkCTKA1DL"
    	],
    	explorer: {
    		url: "https://arbiscan.io"
    	},
    	start: 256508,
    	logo: "ipfs://QmWZ5SMRfvcK8tycsDqojQaSiKedgtVkS7CkZdxPgeCVsZ"
    },
    	"42170": {
    	key: "42170",
    	name: "Arbitrum Nova",
    	chainId: 42170,
    	network: "Arbitrum Nova",
    	multicall: "0x4E74EBd9CABff51cE9a43EFe059bA8c5A28E4A14",
    	rpc: [
    		"https://nova.arbitrum.io/rpc",
    		"https://arbitrum-nova.public.blastapi.io"
    	],
    	explorer: {
    		url: "https://nova.arbiscan.io"
    	},
    	start: 6006607,
    	logo: "ipfs://bafkreie5xsqt3mrrwu7v32qpmmctibhzhgxf4emfzzddsdhdlfsa7fmplu"
    },
    	"42220": {
    	key: "42220",
    	name: "Celo",
    	shortName: "Celo",
    	chainId: 42220,
    	network: "mainnet",
    	multicall: "0xb8d0d2C1391eeB350d2Cd39EfABBaaEC297368D9",
    	rpc: [
    		"https://celo.snapshot.org",
    		"https://forno.celo.org",
    		"https://celo-mainnet--rpc.datahub.figment.io/apikey/e892a66dc36e4d2d98a5d6406d609796/"
    	],
    	explorer: {
    		url: "https://explorer.celo.org"
    	},
    	start: 6599803,
    	logo: "ipfs://QmS2tVJ7rdJRe1NHXAi2L86yCbUwVVrmB2mHQeNdJxvQti"
    },
    	"43113": {
    	key: "43113",
    	name: "Avalanche FUJI Testnet",
    	chainId: 43113,
    	network: "testnet",
    	testnet: true,
    	multicall: "0x984476ea55e32e785A9D8FF14329f99D74E3d2A2",
    	rpc: [
    		"https://api.avax-test.network/ext/bc/C/rpc"
    	],
    	explorer: {
    		url: "https://testnet.snowtrace.io"
    	},
    	start: 10528153,
    	logo: "ipfs://QmeS75uS7XLR8o8uUzhLRVYPX9vMFf4DXgKxQeCzyy7vM2"
    },
    	"43114": {
    	key: "43114",
    	name: "Avalanche",
    	chainId: 43114,
    	network: "mainnet",
    	multicall: "0x7E9985aE4C8248fdB07607648406a48C76e9e7eD",
    	rpc: [
    		"https://nd-784-543-849.p2pify.com/aa7b29fc5fed65b34f0ee6b8de33f8c0/ext/bc/C/rpc",
    		"https://rpc.ankr.com/avalanche",
    		"https://api.avax.network/ext/bc/C/rpc"
    	],
    	explorer: {
    		url: "https://snowtrace.io"
    	},
    	start: 536483,
    	logo: "ipfs://QmeS75uS7XLR8o8uUzhLRVYPX9vMFf4DXgKxQeCzyy7vM2"
    },
    	"47805": {
    	key: "47805",
    	name: "REI Mainnet",
    	chainId: 47805,
    	network: "mainnet",
    	multicall: "0x9eE9904815B80C39C1a27294E69a8626EAa7952d",
    	rpc: [
    		"https://rpc.rei.network"
    	],
    	explorer: {
    		url: "https://scan.rei.network"
    	},
    	start: 1715902,
    	logo: "ipfs://QmTogMDLmDgJjDjUKDHDuc2KVTVDbXf8bXJLFiVe8PRxgo"
    },
    	"53935": {
    	key: "53935",
    	name: "DFK Chain",
    	chainId: 53935,
    	network: "mainnet",
    	multicall: "0x5b24224dC16508DAD755756639E420817DD4c99E",
    	rpc: [
    		"https://subnets.avax.network/defi-kingdoms/dfk-chain/rpc"
    	],
    	explorer: {
    		url: "https://subnets.avax.network/defi-kingdoms"
    	},
    	start: 62,
    	logo: "ipfs://QmZNkpVgPbuVbDcsi6arwH1om3456FGnwfDqYQJWUfHDEx"
    },
    	"57054": {
    	key: "57054",
    	name: "Sonic Blaze Testnet",
    	shortName: "testnet",
    	chainId: 57054,
    	network: "testnet",
    	multicall: "0xcA11bde05977b3631167028862bE2a173976CA11",
    	rpc: [
    	],
    	explorer: {
    		url: "https://testnet.sonicscan.org"
    	},
    	start: 60,
    	logo: "ipfs://bafkreic5fffatwy2gzf6y5iymje6ijii43tz4wlxl35da36guurhibjx44",
    	testnet: true
    },
    	"59141": {
    	key: "59141",
    	name: "Linea Sepolia",
    	shortName: "testnet",
    	chainId: 59141,
    	network: "testnet",
    	multicall: "0xcA11bde05977b3631167028862bE2a173976CA11",
    	rpc: [
    	],
    	explorer: {
    		url: "https://sepolia.lineascan.build"
    	},
    	start: 227427,
    	logo: "ipfs://bafkreihtyzolub3sejuwc32hpdpjnt7ksowaguni2yuho3kyihhcqrtqce",
    	testnet: true
    },
    	"59144": {
    	key: "59144",
    	name: "Linea",
    	shortName: "linea",
    	chainId: 59144,
    	network: "mainnet",
    	multicall: "0xcA11bde05977b3631167028862bE2a173976CA11",
    	rpc: [
    	],
    	explorer: {
    		url: "https://lineascan.build"
    	},
    	start: 42,
    	logo: "ipfs://bafkreihtyzolub3sejuwc32hpdpjnt7ksowaguni2yuho3kyihhcqrtqce"
    },
    	"80001": {
    	key: "80001",
    	name: "Polygon Mumbai",
    	chainId: 80001,
    	network: "testnet",
    	testnet: true,
    	multicall: "0xcA11bde05977b3631167028862bE2a173976CA11",
    	rpc: [
    		"https://speedy-nodes-nyc.moralis.io/9e03baabdc27be2a35bdec4a/polygon/mumbai/archive",
    		"https://rpc-mumbai.matic.today"
    	],
    	ws: [
    		"wss://ws-mumbai.matic.today"
    	],
    	explorer: {
    		url: "https://mumbai.polygonscan.com",
    		apiUrl: "https://api-mumbai.polygonscan.com"
    	},
    	start: 12011090,
    	logo: "ipfs://bafkreihgr7zy7vi5kqddybfaezwuhvssg57qluwmyan4qq7l57nr7w7wey"
    },
    	"80002": {
    	key: "80002",
    	name: "Polygon Amoy Testnet",
    	shortName: "testnet",
    	chainId: 80002,
    	network: "testnet",
    	multicall: "0xcA11bde05977b3631167028862bE2a173976CA11",
    	rpc: [
    	],
    	explorer: {
    		url: "https://amoy.polygonscan.com"
    	},
    	start: 3127388,
    	logo: "ipfs://bafkreibfiyvhqnme2vbxxfcku7qkxgjpkg6ywdkplxh4oxlkqsbznyorfm",
    	testnet: true
    },
    	"81457": {
    	key: "81457",
    	name: "Blast",
    	shortName: "mainnet",
    	chainId: 81457,
    	network: "mainnet",
    	multicall: "0xcA11bde05977b3631167028862bE2a173976CA11",
    	rpc: [
    	],
    	explorer: {
    		url: "https://blastscan.io"
    	},
    	start: 88189,
    	logo: "ipfs://bafkreicqhrimt2zyp2kvhmbpvffxlmxovkg5vw6zkissyzibcfy45kbvrm"
    },
    	"84532": {
    	key: "84532",
    	name: "Base Sepolia",
    	shortName: "testnet",
    	chainId: 84532,
    	network: "testnet",
    	multicall: "0xcA11bde05977b3631167028862bE2a173976CA11",
    	rpc: [
    	],
    	explorer: {
    		url: "https://base-sepolia.blockscout.com"
    	},
    	start: 1059647,
    	logo: "ipfs://QmaxRoHpxZd8PqccAynherrMznMufG6sdmHZLihkECXmZv",
    	testnet: true
    },
    	"686868": {
    	key: "686868",
    	name: "Merlin Testnet",
    	shortName: "merlin",
    	chainId: 686868,
    	network: "testnet",
    	multicall: "0x758BC6321b7c68F4986d62a4D46E83A2DCb58c80",
    	rpc: [
    	],
    	explorer: {
    		url: "https://testnet-scan.merlinchain.io"
    	},
    	start: 3562021,
    	logo: "ipfs://bafkreicew2qv3m756m7xs2nrjezinghps7rlessrqjqetvox74w4hov2xe",
    	testnet: true
    },
    	"713715": {
    	key: "713715",
    	name: "Sei EVM Devnet",
    	shortName: "devnet",
    	chainId: 713715,
    	network: "testnet",
    	multicall: "0xEe8d287B844959ADe40d718Dc23077ba920e2f07",
    	rpc: [
    	],
    	explorer: {
    		url: "https://seitrace.com"
    	},
    	start: 1463669,
    	logo: "ipfs://bafkreiammyt7uztbztqbcqv4bydnczsh2fqmnjf6jxj4xnskzzl6sjrigq",
    	testnet: true
    },
    	"810180": {
    	key: "810180",
    	name: "zkLink Nova",
    	shortName: "zlink",
    	chainId: 810180,
    	network: "mainnet",
    	multicall: "0x825267E0fA5CAe92F98540828a54198dcB3Eaeb5",
    	rpc: [
    	],
    	explorer: {
    		url: "https://explorer.zklink.io"
    	},
    	start: 146055,
    	logo: "ipfs://bafkreic6c3iems5235qapyhyrygha7akqrsfact2nok3y2uhljpzxrdu74"
    },
    	"810181": {
    	key: "810181",
    	name: "zkLink Nova Sepolia",
    	shortName: "testnet",
    	chainId: 810181,
    	network: "testnet",
    	multicall: "0x97148F8fDdd9A1620f72EC1Bb2932916623d9da5",
    	rpc: [
    	],
    	explorer: {
    		url: "https://sepolia.explorer.zklink.io"
    	},
    	start: 43723,
    	logo: "ipfs://bafkreic6c3iems5235qapyhyrygha7akqrsfact2nok3y2uhljpzxrdu74",
    	testnet: true
    },
    	"11155111": {
    	key: "11155111",
    	name: "Sepolia testnet",
    	shortName: "Sepolia",
    	chainId: 11155111,
    	network: "sepolia",
    	testnet: true,
    	multicall: "0xcA11bde05977b3631167028862bE2a173976CA11",
    	rpc: [
    		"https://sepolia.infura.io/v3/d26b4fd748814fe994b05899fd89e667"
    	],
    	ensResolvers: [
    		"0x8FADE66B79cC9f707aB26799354482EB93a5B7dD"
    	],
    	ensNameWrapper: "0x0635513f179D50A207757E05759CbD106d7dFcE8",
    	ensSubgraph: "https://subgrapher.snapshot.org/subgraph/arbitrum/DmMXLtMZnGbQXASJ7p1jfzLUbBYnYUD9zNBTxpkjHYXV",
    	explorer: {
    		url: "https://sepolia.etherscan.io",
    		apiUrl: "https://api-sepolia.etherscan.io"
    	},
    	start: 751532,
    	logo: "ipfs://bafkreid7ndxh6y2ljw2jhbisodiyrhcy2udvnwqgon5wgells3kh4si5z4"
    },
    	"11155420": {
    	key: "11155420",
    	name: "OP Sepolia",
    	shortName: "testnet",
    	chainId: 11155420,
    	network: "testnet",
    	multicall: "0xcA11bde05977b3631167028862bE2a173976CA11",
    	rpc: [
    	],
    	explorer: {
    		url: "https://sepolia-optimism.etherscan.io"
    	},
    	start: 1620204,
    	logo: "ipfs://QmfF4kwhGL8QosUXvgq2KWCmavhKBvwD6kbhs7L4p5ZAWb",
    	testnet: true
    },
    	"111557560": {
    	key: "111557560",
    	name: "Cyber Testnet",
    	shortName: "testnet",
    	chainId: 111557560,
    	network: "testnet",
    	multicall: "0xffc391F0018269d4758AEA1a144772E8FB99545E",
    	rpc: [
    	],
    	explorer: {
    		url: "https://testnet.cyberscan.co"
    	},
    	start: 304545,
    	logo: "ipfs://bafkreifm2bbehoqpz4454o7gixnxfi6cgvqlxigqr3f6ipj7l2omtgfgnm",
    	testnet: true
    },
    	"168587773": {
    	key: "168587773",
    	name: "Blast Sepolia",
    	shortName: "testnet",
    	chainId: 168587773,
    	network: "testnet",
    	multicall: "0xcA11bde05977b3631167028862bE2a173976CA11",
    	rpc: [
    	],
    	explorer: {
    		url: "https://sepolia.blastexplorer.io"
    	},
    	start: 756690,
    	logo: "ipfs://bafkreibfmkjg22cozxppzcoxswj45clvh2rqhxzax57cmmgudbtkf4dkce",
    	testnet: true
    },
    	"245022926": {
    	key: "245022926",
    	name: "Neon Devnet",
    	shortName: "devnet",
    	chainId: 245022926,
    	network: "testnet",
    	multicall: "0xcA11bde05977b3631167028862bE2a173976CA11",
    	rpc: [
    	],
    	explorer: {
    		url: "https://devnet.neonscan.org"
    	},
    	start: 205206112,
    	logo: "ipfs://QmecRPQGa4bU7tybg1sUQY48Md9rWnmhrT6WW5ueqvhg6P",
    	testnet: true
    },
    	"1313161554": {
    	key: "1313161554",
    	name: "Aurora",
    	shortName: "Aurora",
    	chainId: 1313161554,
    	network: "mainnet",
    	multicall: "0x32b50c286DEFd2932a0247b8bb940b78c063F16c",
    	rpc: [
    		"https://mainnet.aurora.dev"
    	],
    	explorer: {
    		url: "https://explorer.mainnet.aurora.dev"
    	},
    	start: 57190533,
    	logo: "ipfs://QmeRhsR1UPRTQCizdhmgr2XxphXebVKU5di97uCV2UMFpa"
    },
    	"1666600000": {
    	key: "1666600000",
    	name: "Harmony",
    	shortName: "HarmonyMainnet",
    	chainId: 1666600000,
    	network: "mainnet",
    	multicall: "0x9c31392D2e0229dC4Aa250F043d46B9E82074BF8",
    	rpc: [
    		"https://a.api.s0.t.hmny.io"
    	],
    	ws: [
    		"wss://ws.s0.t.hmny.io"
    	],
    	explorer: {
    		url: "https://explorer.harmony.one"
    	},
    	start: 10911984,
    	logo: "ipfs://QmNnGPr1CNvj12SSGzKARtUHv9FyEfE5nES73U4vBWQSJL"
    },
    	"1666700000": {
    	key: "1666700000",
    	name: "Harmony Testnet",
    	shortName: "HarmonyTestnet",
    	chainId: 1666700000,
    	network: "testnet",
    	testnet: true,
    	multicall: "0x9923589503Fd205feE3d367DDFF2378f0F7dD2d4",
    	rpc: [
    		"https://api.s0.b.hmny.io"
    	],
    	ws: [
    		"wss://ws.s0.b.hmny.io"
    	],
    	explorer: {
    		url: "https://explorer.pops.one"
    	},
    	start: 7521509,
    	logo: "ipfs://QmNnGPr1CNvj12SSGzKARtUHv9FyEfE5nES73U4vBWQSJL"
    }
    };

    class SingleChoiceVoting {
        constructor(proposal, votes, strategies, selected) {
            this.proposal = proposal;
            this.votes = votes;
            this.strategies = strategies;
            this.selected = selected;
        }
        static isValidChoice(voteChoice, proposalChoices) {
            return (typeof voteChoice === 'number' &&
                (proposalChoices === null || proposalChoices === void 0 ? void 0 : proposalChoices[voteChoice - 1]) !== undefined);
        }
        getValidVotes() {
            return this.votes.filter((vote) => SingleChoiceVoting.isValidChoice(vote.choice, this.proposal.choices));
        }
        getScores() {
            return this.proposal.choices.map((choice, i) => {
                const votes = this.getValidVotes().filter((vote) => vote.choice === i + 1);
                const balanceSum = votes.reduce((a, b) => a + b.balance, 0);
                return balanceSum;
            });
        }
        getScoresByStrategy() {
            return this.proposal.choices.map((choice, i) => {
                const scores = this.strategies.map((strategy, sI) => {
                    const votes = this.getValidVotes().filter((vote) => vote.choice === i + 1);
                    const scoreSum = votes.reduce((a, b) => a + b.scores[sI], 0);
                    return scoreSum;
                });
                return scores;
            });
        }
        getScoresTotal() {
            return this.votes.reduce((a, b) => a + b.balance, 0);
        }
        getChoiceString() {
            return this.proposal.choices[this.selected - 1];
        }
    }

    class ApprovalVoting {
        constructor(proposal, votes, strategies, selected) {
            this.proposal = proposal;
            this.votes = votes;
            this.strategies = strategies;
            this.selected = selected;
        }
        static isValidChoice(voteChoice, proposalChoices) {
            return (Array.isArray(voteChoice) &&
                // If voteChoice index is not in proposalChoices, return false
                voteChoice.every((choice) => (proposalChoices === null || proposalChoices === void 0 ? void 0 : proposalChoices[choice - 1]) !== undefined) &&
                // If any voteChoice is duplicated, return false
                voteChoice.length === new Set(voteChoice).size);
        }
        getValidVotes() {
            return this.votes.filter((vote) => ApprovalVoting.isValidChoice(vote.choice, this.proposal.choices));
        }
        getScores() {
            return this.proposal.choices.map((choice, i) => this.getValidVotes()
                .filter((vote) => vote.choice.includes(i + 1))
                .reduce((a, b) => a + b.balance, 0));
        }
        getScoresByStrategy() {
            return this.proposal.choices.map((choice, i) => this.strategies.map((strategy, sI) => this.getValidVotes()
                .filter((vote) => vote.choice.includes(i + 1))
                .reduce((a, b) => a + b.scores[sI], 0)));
        }
        getScoresTotal() {
            return this.votes.reduce((a, b) => a + b.balance, 0);
        }
        getChoiceString() {
            if (!this.selected)
                return '';
            return this.proposal.choices
                .filter((choice, i) => this.selected.includes(i + 1))
                .join(', ');
        }
    }

    function calcPercentageOfSum(part, wholeArray) {
        const whole = wholeArray.reduce((a, b) => a + b, 0);
        const percent = part / whole;
        return isNaN(percent) ? 0 : percent;
    }
    function calcSqrt(percentageWeight, votingPower) {
        return Math.sqrt(percentageWeight * votingPower);
    }
    function calcSquare(num) {
        return num * num;
    }
    function calcReducedQuadraticScores(percentages, scoresTotal) {
        // Reduce each quadratic score so that the sum of quadratic scores matches
        // the total scores.
        // This is done to unsure that features like quorum still work as expected.
        return percentages.map((p) => scoresTotal * p);
    }
    class QuadraticVoting {
        constructor(proposal, votes, strategies, selected) {
            this.proposal = proposal;
            this.votes = votes;
            this.strategies = strategies;
            this.selected = selected;
        }
        static isValidChoice(voteChoice, proposalChoices) {
            return (typeof voteChoice === 'object' &&
                !Array.isArray(voteChoice) &&
                voteChoice !== null &&
                // If voteChoice object keys are not in choices, return false
                Object.keys(voteChoice).every((key) => (proposalChoices === null || proposalChoices === void 0 ? void 0 : proposalChoices[Number(key) - 1]) !== undefined) &&
                // If voteChoice object is empty, return false
                Object.keys(voteChoice).length > 0 &&
                // If voteChoice object values have a negative number, return false
                Object.values(voteChoice).every((value) => typeof value === 'number' && value >= 0) &&
                // If voteChoice doesn't have any positive value, return false
                Object.values(voteChoice).some((value) => typeof value === 'number' && value > 0));
        }
        getValidVotes() {
            return this.votes.filter((vote) => QuadraticVoting.isValidChoice(vote.choice, this.proposal.choices));
        }
        getScores() {
            const validVotes = this.getValidVotes();
            const scoresTotal = this.getValidVotes().reduce((a, b) => a + b.balance, 0);
            const quadraticScores = this.proposal.choices.map((_, i) => {
                const votingPowerSqrt = validVotes
                    .map((vote) => {
                    const choiceWeightPercent = calcPercentageOfSum(vote.choice[i + 1], Object.values(vote.choice));
                    return calcSqrt(choiceWeightPercent, vote.balance);
                })
                    .reduce((a, b) => a + b, 0);
                return calcSquare(votingPowerSqrt);
            });
            const percentagesOfScores = quadraticScores.map((_, i) => calcPercentageOfSum(quadraticScores[i], quadraticScores));
            return calcReducedQuadraticScores(percentagesOfScores, scoresTotal);
        }
        getScoresByStrategy() {
            const validVotes = this.getValidVotes();
            const scoresTotal = this.getValidVotes().reduce((a, b) => a + b.balance, 0);
            const quadraticScoresByStrategy = this.proposal.choices
                .map((_, i) => this.strategies.map((_, sI) => validVotes
                .map((vote) => {
                const choiceWeightPercentByStrategy = calcPercentageOfSum(vote.choice[i + 1], Object.values(vote.choice));
                return calcSqrt(choiceWeightPercentByStrategy, vote.scores[sI]);
            })
                .reduce((a, b) => a + b, 0)))
                .map((arr) => arr.map((num) => [calcSquare(num)]));
            const reducedQuadraticScores = quadraticScoresByStrategy.map((_, i) => {
                const percentagesOfScores = this.strategies.map((_, sI) => calcPercentageOfSum(quadraticScoresByStrategy[i][sI][0], quadraticScoresByStrategy.flat(2)));
                return calcReducedQuadraticScores(percentagesOfScores, scoresTotal);
            });
            return reducedQuadraticScores;
        }
        getScoresTotal() {
            return this.votes.reduce((a, b) => a + b.balance, 0);
        }
        getChoiceString() {
            return this.proposal.choices
                .map((choice, i) => {
                if (this.selected[i + 1]) {
                    const percent = calcPercentageOfSum(this.selected[i + 1], Object.values(this.selected));
                    return `${Math.round(percent * 1000) / 10}% for ${choice}`;
                }
            })
                .filter((el) => el != null)
                .join(', ');
        }
    }

    function irv(ballots, rounds) {
        const candidates = [
            ...new Set(ballots.map((vote) => vote[0]).flat())
        ];
        const votes = Object.entries(ballots.reduce((votes, [v], i, src) => {
            const balance = src[i][1];
            votes[v[0]][0] += balance;
            const score = src[i][2];
            if (score.length > 1) {
                votes[v[0]][1] = score.map((s, sI) => s + votes[v[0]][1][sI] || s);
            }
            else
                votes[v[0]][1] = [
                    votes[v[0]][1].concat(score).reduce((a, b) => a + b, 0)
                ];
            return votes;
        }, Object.assign({}, ...candidates.map((c) => ({ [c]: [0, []] })))));
        const votesWithoutScore = votes.map((vote) => [vote[0], vote[1][0]]);
        /* eslint-disable @typescript-eslint/no-unused-vars */
        const [topCand, topCount] = votesWithoutScore.reduce(([n, m], [v, c]) => (c > m ? [v, c] : [n, m]), ['?', -Infinity]);
        const [bottomCand, bottomCount] = votesWithoutScore.reduce(([n, m], [v, c]) => (c < m ? [v, c] : [n, m]), ['?', Infinity]);
        /* eslint-enable @typescript-eslint/no-unused-vars */
        const sortedByHighest = votes.sort((a, b) => b[1][0] - a[1][0]);
        const totalPowerOfVotes = ballots
            .map((bal) => bal[1])
            .reduce((a, b) => a + b, 0);
        rounds.push({
            round: rounds.length + 1,
            sortedByHighest
        });
        return topCount > totalPowerOfVotes / 2 ||
            sortedByHighest.length < 3
            ? rounds
            : irv(ballots
                .map((ballot) => [
                ballot[0].filter((c) => c != bottomCand),
                ballot[1],
                ballot[2]
            ])
                .filter((ballot) => ballot[0].length > 0), rounds);
    }
    function getFinalRound(votes) {
        const rounds = irv(votes.map((vote) => [vote.choice, vote.balance, vote.scores]), []);
        const finalRound = rounds[rounds.length - 1];
        return finalRound.sortedByHighest;
    }
    function getScoresMethod(votes, proposal) {
        const finalRound = getFinalRound(votes);
        return proposal.choices.map((choice, i) => finalRound
            .filter((res) => Number(res[0]) === i + 1)
            .reduce((a, b) => a + b[1][0], 0));
    }
    class RankedChoiceVoting {
        constructor(proposal, votes, strategies, selected) {
            this.proposal = proposal;
            this.votes = votes;
            this.strategies = strategies;
            this.selected = selected;
        }
        static isValidChoice(voteChoice, proposalChoices) {
            return (Array.isArray(voteChoice) &&
                // If voteChoice index is not in choices, return false
                voteChoice.every((voteChoice) => (proposalChoices === null || proposalChoices === void 0 ? void 0 : proposalChoices[voteChoice - 1]) !== undefined) &&
                // If any voteChoice is duplicated, return false
                voteChoice.length === new Set(voteChoice).size &&
                // If voteChoice is empty, return false
                voteChoice.length > 0 &&
                // If not all proposalChoices are selected, return false
                // TODO: We should add support for pacial bailout in the future
                voteChoice.length === proposalChoices.length);
        }
        getValidVotes() {
            return this.votes.filter((vote) => RankedChoiceVoting.isValidChoice(vote.choice, this.proposal.choices));
        }
        getScores() {
            return getScoresMethod(this.getValidVotes(), this.proposal);
        }
        getScoresByStrategy() {
            const finalRound = getFinalRound(this.getValidVotes());
            return this.proposal.choices.map((choice, i) => this.strategies.map((strategy, sI) => {
                return finalRound
                    .filter((res) => Number(res[0]) === i + 1)
                    .reduce((a, b) => a + b[1][1][sI], 0);
            }));
        }
        getScoresTotal() {
            return this.votes.reduce((a, b) => a + b.balance, 0);
        }
        getChoiceString() {
            return this.selected
                .map((choice) => {
                if (this.proposal.choices[choice - 1])
                    return this.proposal.choices[choice - 1];
            })
                .map((el, i) => `(${getNumberWithOrdinal(i + 1)}) ${el}`)
                .join(', ');
        }
    }

    function percentageOfTotal(i, values, total) {
        const reducedTotal = total.reduce((a, b) => a + b, 0);
        const percent = (values[i] / reducedTotal) * 100;
        return isNaN(percent) ? 0 : percent;
    }
    function weightedPower(i, choice, balance) {
        return ((percentageOfTotal(i + 1, choice, Object.values(choice)) / 100) * balance);
    }
    class WeightedVoting {
        constructor(proposal, votes, strategies, selected) {
            this.proposal = proposal;
            this.votes = votes;
            this.strategies = strategies;
            this.selected = selected;
        }
        static isValidChoice(voteChoice, proposalChoices) {
            return (typeof voteChoice === 'object' &&
                !Array.isArray(voteChoice) &&
                voteChoice !== null &&
                // If voteChoice object keys are not in choices, return false
                Object.keys(voteChoice).every((key) => (proposalChoices === null || proposalChoices === void 0 ? void 0 : proposalChoices[Number(key) - 1]) !== undefined) &&
                // If voteChoice object is empty, return false
                Object.keys(voteChoice).length > 0 &&
                // If voteChoice object values have a negative number, return false
                Object.values(voteChoice).every((value) => typeof value === 'number' && value >= 0) &&
                // If voteChoice doesn't have any positive value, return false
                Object.values(voteChoice).some((value) => typeof value === 'number' && value > 0));
        }
        getValidVotes() {
            return this.votes.filter((vote) => WeightedVoting.isValidChoice(vote.choice, this.proposal.choices));
        }
        getScores() {
            const results = this.proposal.choices.map((choice, i) => this.getValidVotes()
                .map((vote) => weightedPower(i, vote.choice, vote.balance))
                .reduce((a, b) => a + b, 0));
            const validScoresTotal = this.getValidVotes().reduce((a, b) => a + b.balance, 0);
            return results
                .map((res, i) => percentageOfTotal(i, results, results))
                .map((p) => (validScoresTotal / 100) * p);
        }
        getScoresByStrategy() {
            const results = this.proposal.choices
                .map((choice, i) => this.strategies.map((strategy, sI) => this.getValidVotes()
                .map((vote) => weightedPower(i, vote.choice, vote.scores[sI]))
                .reduce((a, b) => a + b, 0)))
                .map((arr) => arr.map((pwr) => [pwr]));
            const validScoresTotal = this.getValidVotes().reduce((a, b) => a + b.balance, 0);
            return results.map((res, i) => this.strategies
                .map((strategy, sI) => percentageOfTotal(0, results[i][sI], results.flat(2)))
                .map((p) => [(validScoresTotal / 100) * p])
                .flat());
        }
        getScoresTotal() {
            return this.votes.reduce((a, b) => a + b.balance, 0);
        }
        getChoiceString() {
            return this.proposal.choices
                .map((choice, i) => {
                if (this.selected[i + 1]) {
                    return `${Math.round(percentageOfTotal(i + 1, this.selected, Object.values(this.selected)) * 10) / 10}% for ${choice}`;
                }
            })
                .filter((el) => el != null)
                .join(', ');
        }
    }

    var voting = {
        'single-choice': SingleChoiceVoting,
        approval: ApprovalVoting,
        quadratic: QuadraticVoting,
        'ranked-choice': RankedChoiceVoting,
        weighted: WeightedVoting,
        basic: SingleChoiceVoting
    };

    var delegationSubgraphs = {
    	"1": "https://subgrapher.snapshot.org/delegation/1",
    	"10": "https://subgrapher.snapshot.org/delegation/10",
    	"56": "https://subgrapher.snapshot.org/delegation/56",
    	"100": "https://subgrapher.snapshot.org/delegation/100",
    	"137": "https://subgrapher.snapshot.org/delegation/137",
    	"146": "https://subgrapher.snapshot.org/delegation/146",
    	"250": "https://subgrapher.snapshot.org/delegation/250",
    	"8453": "https://subgrapher.snapshot.org/delegation/8453",
    	"42161": "https://subgrapher.snapshot.org/delegation/42161",
    	"59144": "https://subgrapher.snapshot.org/delegation/59144",
    	"81457": "https://subgrapher.snapshot.org/delegation/81457",
    	"84532": "https://subgrapher.snapshot.org/delegation/84532",
    	"11155111": "https://subgrapher.snapshot.org/delegation/11155111"
    };

    const SNAPSHOT_SUBGRAPH_URL = delegationSubgraphs;
    const PAGE_SIZE = 1000;
    function getDelegatesBySpace(network_1, space_1) {
        return __awaiter$c(this, arguments, void 0, function* (network, space, snapshot = 'latest', options = {}) {
            const subgraphUrl = options.subgraphUrl || SNAPSHOT_SUBGRAPH_URL[network];
            if (!subgraphUrl) {
                return Promise.reject(`Delegation subgraph not available for network ${network}`);
            }
            let pivot = 0;
            const result = new Map();
            const spaceIn = space ? buildSpaceIn(space) : null;
            while (true) {
                const newResults = yield fetchData({
                    url: subgraphUrl,
                    spaces: spaceIn,
                    pivot,
                    snapshot
                });
                if (checkAllDuplicates(newResults)) {
                    throw new Error('Unable to paginate delegation');
                }
                newResults.forEach((delegation) => {
                    concatUniqueDelegation(result, delegation);
                    pivot = delegation.timestamp;
                });
                if (newResults.length < PAGE_SIZE)
                    break;
            }
            return [...result.values()];
        });
    }
    function checkAllDuplicates(delegations) {
        return (delegations.length === PAGE_SIZE &&
            delegations[0].timestamp === delegations[delegations.length - 1].timestamp);
    }
    function delegationKey(delegation) {
        return `${delegation.delegator}-${delegation.delegate}-${delegation.space}`;
    }
    function concatUniqueDelegation(result, delegation) {
        const key = delegationKey(delegation);
        if (!result.has(key)) {
            result.set(key, delegation);
        }
    }
    function buildSpaceIn(space) {
        const spaces = ['', space];
        if (space.includes('.eth'))
            spaces.push(space.replace('.eth', ''));
        return spaces;
    }
    function fetchData(_a) {
        return __awaiter$c(this, arguments, void 0, function* ({ url, spaces, pivot, snapshot }) {
            const params = {
                delegations: {
                    __args: {
                        where: {
                            timestamp_gte: pivot
                        },
                        first: PAGE_SIZE,
                        skip: 0,
                        orderBy: 'timestamp',
                        orderDirection: 'asc'
                    },
                    delegator: true,
                    space: true,
                    delegate: true,
                    timestamp: true
                }
            };
            if (snapshot !== 'latest') {
                params.delegations.__args.block = { number: snapshot };
            }
            if (spaces !== null) {
                params.delegations.__args.where.space_in = spaces;
            }
            return (yield subgraphRequest(url, params)).delegations || [];
        });
    }

    const ENS_REGISTRY = '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e';
    const ENS_ABI = [
        'function text(bytes32 node, string calldata key) external view returns (string memory)',
        'function resolver(bytes32 node) view returns (address)' // ENS registry ABI
    ];
    const EMPTY_ADDRESS = '0x0000000000000000000000000000000000000000';
    const scoreApiHeaders = {
        Accept: 'application/json',
        'Content-Type': 'application/json'
    };
    const DEFAULT_SCORE_API_URL = 'https://score.snapshot.org';
    function formatScoreAPIUrl(url = DEFAULT_SCORE_API_URL, options = {
        path: ''
    }) {
        const scoreURL = new URL(url);
        if (options.path)
            scoreURL.pathname = options.path;
        const apiKey = scoreURL.searchParams.get('apiKey');
        let headers = Object.assign({}, scoreApiHeaders);
        if (apiKey) {
            scoreURL.searchParams.delete('apiKey');
            headers = Object.assign(Object.assign({}, scoreApiHeaders), { 'X-API-KEY': apiKey });
        }
        return {
            url: scoreURL.toString(),
            headers
        };
    }
    function parseScoreAPIResponse(res) {
        return __awaiter$c(this, void 0, void 0, function* () {
            let data = yield res.text();
            try {
                data = JSON.parse(data);
            }
            catch (e) {
                return Promise.reject({
                    code: res.status || 500,
                    message: 'Failed to parse response from score API',
                    data
                });
            }
            if (data.error)
                return Promise.reject(data.error);
            return data;
        });
    }
    function call(provider, abi, call, options) {
        return __awaiter$c(this, void 0, void 0, function* () {
            const contract = new Contract$1(call[0], abi, provider);
            try {
                const params = call[2] || [];
                return yield contract[call[1]](...params, options || {});
            }
            catch (e) {
                return Promise.reject(e);
            }
        });
    }
    function multicall(network, provider, abi, calls, options) {
        return __awaiter$c(this, void 0, void 0, function* () {
            const multicallAbi = [
                'function aggregate(tuple(address target, bytes callData)[] calls) view returns (uint256 blockNumber, bytes[] returnData)'
            ];
            const multicallAddress = (options === null || options === void 0 ? void 0 : options.multicallAddress) || networks[network].multicall;
            const multi = new Contract$1(multicallAddress, multicallAbi, provider);
            const itf = new Interface(abi);
            try {
                const max = (options === null || options === void 0 ? void 0 : options.limit) || 500;
                if (options === null || options === void 0 ? void 0 : options.limit)
                    delete options.limit;
                const pages = Math.ceil(calls.length / max);
                const promises = [];
                Array.from(Array(pages)).forEach((x, i) => {
                    const callsInPage = calls.slice(max * i, max * (i + 1));
                    promises.push(multi.aggregate(callsInPage.map((call) => [
                        call[0].toLowerCase(),
                        itf.encodeFunctionData(call[1], call[2])
                    ]), options || {}));
                });
                let results = yield Promise.all(promises);
                results = results.reduce((prev, [, res]) => prev.concat(res), []);
                return results.map((call, i) => itf.decodeFunctionResult(calls[i][1], call));
            }
            catch (e) {
                return Promise.reject(e);
            }
        });
    }
    function subgraphRequest(url_1, query_1) {
        return __awaiter$c(this, arguments, void 0, function* (url, query, options = {}) {
            const body = { query: lib.jsonToGraphQLQuery({ query }) };
            if (options.variables)
                body.variables = options.variables;
            const res = yield fetch$2(url, {
                method: 'POST',
                headers: Object.assign({ Accept: 'application/json', 'Content-Type': 'application/json' }, options === null || options === void 0 ? void 0 : options.headers),
                body: JSON.stringify(body)
            });
            let responseData = yield res.text();
            try {
                responseData = JSON.parse(responseData);
            }
            catch (e) {
                throw new Error(`Errors found in subgraphRequest: URL: ${url}, Status: ${res.status}, Response: ${responseData.substring(0, 400)}`);
            }
            if (responseData.errors) {
                throw new Error(`Errors found in subgraphRequest: URL: ${url}, Status: ${res.status},  Response: ${JSON.stringify(responseData.errors).substring(0, 400)}`);
            }
            const { data } = responseData;
            return data || {};
        });
    }
    function getUrl(uri, gateway = gateways[0]) {
        const ipfsGateway = `https://${gateway}`;
        if (!uri)
            return null;
        if (!uri.startsWith('ipfs://') &&
            !uri.startsWith('ipns://') &&
            !uri.startsWith('https://') &&
            !uri.startsWith('http://'))
            return `${ipfsGateway}/ipfs/${uri}`;
        const uriScheme = uri.split('://')[0];
        if (uriScheme === 'ipfs')
            return uri.replace('ipfs://', `${ipfsGateway}/ipfs/`);
        if (uriScheme === 'ipns')
            return uri.replace('ipns://', `${ipfsGateway}/ipns/`);
        return uri;
    }
    function getJSON(uri_1) {
        return __awaiter$c(this, arguments, void 0, function* (uri, options = {}) {
            const url = getUrl(uri, options.gateways);
            return fetch$2(url).then((res) => res.json());
        });
    }
    function ipfsGet(gateway_1, ipfsHash_1) {
        return __awaiter$c(this, arguments, void 0, function* (gateway, ipfsHash, protocolType = 'ipfs') {
            const url = `https://${gateway}/${protocolType}/${ipfsHash}`;
            return fetch$2(url).then((res) => res.json());
        });
    }
    function sendTransaction(web3_1, contractAddress_1, abi_1, action_1, params_1) {
        return __awaiter$c(this, arguments, void 0, function* (web3, contractAddress, abi, action, params, overrides = {}) {
            const signer = web3.getSigner();
            const contract = new Contract$1(contractAddress, abi, web3);
            const contractWithSigner = contract.connect(signer);
            // overrides.gasLimit = 12e6;
            return yield contractWithSigner[action](...params, overrides);
        });
    }
    function getScores(space_1, strategies_1, network_1, addresses_1) {
        return __awaiter$c(this, arguments, void 0, function* (space, strategies, network, addresses, snapshot = 'latest', scoreApiUrl = DEFAULT_SCORE_API_URL, options = {}) {
            if (!Array.isArray(addresses)) {
                return inputError('addresses should be an array of addresses');
            }
            if (addresses.length === 0) {
                return inputError('addresses can not be empty');
            }
            const invalidAddress = addresses.find((address) => !isValidAddress(address));
            if (invalidAddress) {
                return inputError(`Invalid address: ${invalidAddress}`);
            }
            if (!isValidNetwork(network)) {
                return inputError(`Invalid network: ${network}`);
            }
            const invalidStrategy = strategies.find((strategy) => strategy.network && !isValidNetwork(strategy.network));
            if (invalidStrategy) {
                return inputError(`Invalid network (${invalidStrategy.network}) in strategy ${invalidStrategy.name}`);
            }
            if (!isValidSnapshot(snapshot, network)) {
                return inputError(`Snapshot (${snapshot}) must be 'latest' or greater than network start block (${networks[network].start})`);
            }
            const urlObject = new URL(scoreApiUrl);
            urlObject.pathname = '/api/scores';
            const { url, headers } = formatScoreAPIUrl(scoreApiUrl, {
                path: '/api/scores'
            });
            try {
                const params = {
                    space,
                    network,
                    snapshot,
                    strategies,
                    addresses
                };
                const res = yield fetch$2(url, {
                    method: 'POST',
                    headers,
                    body: JSON.stringify({ params })
                });
                const response = yield parseScoreAPIResponse(res);
                return options.returnValue === 'all'
                    ? response.result
                    : response.result[options.returnValue || 'scores'];
            }
            catch (e) {
                if (e.errno) {
                    return Promise.reject({ code: e.errno, message: e.toString(), data: '' });
                }
                return Promise.reject(e);
            }
        });
    }
    function getVp(address, network, strategies, snapshot, space, delegation, options) {
        return __awaiter$c(this, void 0, void 0, function* () {
            const { url, headers } = formatScoreAPIUrl(options === null || options === void 0 ? void 0 : options.url);
            if (!isValidAddress(address)) {
                return inputError(`Invalid voter address: ${address}`);
            }
            if (!isValidNetwork(network)) {
                return inputError(`Invalid network: ${network}`);
            }
            const invalidStrategy = strategies.find((strategy) => strategy.network && !isValidNetwork(strategy.network));
            if (invalidStrategy) {
                return inputError(`Invalid network (${invalidStrategy.network}) in strategy ${invalidStrategy.name}`);
            }
            if (!isValidSnapshot(snapshot, network)) {
                return inputError(`Snapshot (${snapshot}) must be 'latest' or greater than network start block (${networks[network].start})`);
            }
            const init = {
                method: 'POST',
                headers,
                body: JSON.stringify({
                    jsonrpc: '2.0',
                    method: 'get_vp',
                    params: {
                        address,
                        network,
                        strategies,
                        snapshot,
                        space,
                        delegation
                    }
                })
            };
            try {
                const res = yield fetch$2(url, init);
                const response = yield parseScoreAPIResponse(res);
                return response.result;
            }
            catch (e) {
                if (e.errno) {
                    return Promise.reject({ code: e.errno, message: e.toString(), data: '' });
                }
                return Promise.reject(e);
            }
        });
    }
    function validate(validation, author, space, network, snapshot, params, options) {
        return __awaiter$c(this, void 0, void 0, function* () {
            if (!isValidAddress(author)) {
                return inputError(`Invalid author: ${author}`);
            }
            if (!isValidNetwork(network)) {
                return inputError(`Invalid network: ${network}`);
            }
            if (!isValidSnapshot(snapshot, network)) {
                return inputError(`Snapshot (${snapshot}) must be 'latest' or greater than network start block (${networks[network].start})`);
            }
            if (!options)
                options = {};
            const { url, headers } = formatScoreAPIUrl(options.url);
            const init = {
                method: 'POST',
                headers,
                body: JSON.stringify({
                    jsonrpc: '2.0',
                    method: 'validate',
                    params: {
                        validation,
                        author,
                        space,
                        network,
                        snapshot,
                        params
                    }
                })
            };
            try {
                const res = yield fetch$2(url, init);
                const response = yield parseScoreAPIResponse(res);
                return response.result;
            }
            catch (e) {
                if (e.errno) {
                    return Promise.reject({ code: e.errno, message: e.toString(), data: '' });
                }
                return Promise.reject(e);
            }
        });
    }
    function getEnsTextRecord(ens_1, record_1) {
        return __awaiter$c(this, arguments, void 0, function* (ens, record, network = '1', options = {}) {
            var _a, _b;
            const { ensResolvers = ((_a = networks[network]) === null || _a === void 0 ? void 0 : _a.ensResolvers) ||
                networks['1'].ensResolvers, broviderUrl } = options, multicallOptions = __rest(options, ["ensResolvers", "broviderUrl"]);
            let ensHash;
            try {
                ensHash = namehash(ensNormalize(ens));
            }
            catch (e) {
                return null;
            }
            const provider = getProvider$1(network, { broviderUrl });
            const calls = [
                [ENS_REGISTRY, 'resolver', [ensHash]], // Query for resolver from registry
                ...ensResolvers.map((address) => [
                    address,
                    'text',
                    [ensHash, record]
                ]) // Query for text record from each resolver
            ];
            const [[resolverAddress], ...textRecords] = yield multicall(network, provider, ENS_ABI, calls, multicallOptions);
            const resolverIndex = ensResolvers.indexOf(resolverAddress);
            return resolverIndex !== -1 ? (_b = textRecords[resolverIndex]) === null || _b === void 0 ? void 0 : _b[0] : null;
        });
    }
    function getSpaceUri(id_1) {
        return __awaiter$c(this, arguments, void 0, function* (id, network = '1', options = {}) {
            try {
                return yield getEnsTextRecord(id, 'snapshot', network, options);
            }
            catch (e) {
                console.log(e);
                return null;
            }
        });
    }
    function getEnsOwner(ens_1) {
        return __awaiter$c(this, arguments, void 0, function* (ens, network = '1', options = {}) {
            const provider = getProvider$1(network, options);
            const ensRegistry = new Contract$1(ENS_REGISTRY, ['function owner(bytes32) view returns (address)'], provider);
            let ensHash;
            try {
                ensHash = namehash(ensNormalize(ens));
            }
            catch (e) {
                return null;
            }
            const ensNameWrapper = options.ensNameWrapper || networks[network].ensNameWrapper;
            let owner = yield ensRegistry.owner(ensHash);
            // If owner is the ENSNameWrapper contract, resolve the owner of the name
            if (owner === ensNameWrapper) {
                const ensNameWrapperContract = new Contract$1(ensNameWrapper, ['function ownerOf(uint256) view returns (address)'], provider);
                owner = yield ensNameWrapperContract.ownerOf(ensHash);
            }
            return owner;
        });
    }
    function getSpaceController(id_1) {
        return __awaiter$c(this, arguments, void 0, function* (id, network = '1', options = {}) {
            const spaceUri = yield getSpaceUri(id, network, options);
            if (spaceUri) {
                let isUriAddress = isAddress(spaceUri);
                if (isUriAddress)
                    return spaceUri;
                const uriParts = spaceUri.split('/');
                const position = uriParts.includes('testnet') ? 5 : 4;
                const address = uriParts[position];
                isUriAddress = isAddress(address);
                if (isUriAddress)
                    return address;
            }
            return yield getEnsOwner(id, network, options);
        });
    }
    function clone(item) {
        return JSON.parse(JSON.stringify(item));
    }
    function sleep(time) {
        return __awaiter$c(this, void 0, void 0, function* () {
            return new Promise((resolve) => {
                setTimeout(resolve, time);
            });
        });
    }
    function getNumberWithOrdinal(n) {
        const s = ['th', 'st', 'nd', 'rd'], v = n % 100;
        return n + (s[(v - 20) % 10] || s[v] || s[0]);
    }
    function isValidNetwork(network) {
        return !!networks[network];
    }
    function isValidAddress(address) {
        return isAddress(address) && address !== EMPTY_ADDRESS;
    }
    function isValidSnapshot(snapshot, network) {
        return (snapshot === 'latest' ||
            (typeof snapshot === 'number' && snapshot >= networks[network].start));
    }
    function isStarknetAddress(address) {
        if (!address)
            return false;
        try {
            validateAndParseAddress(address);
            return true;
        }
        catch (e) {
            return false;
        }
    }
    function isEvmAddress(address) {
        return isAddress(address);
    }
    function getFormattedAddress(address, format) {
        if (format === 'evm' && isEvmAddress(address))
            return getAddress(address);
        if (format === 'starknet' && isStarknetAddress(address))
            return validateAndParseAddress(address);
        throw new Error(`Invalid address: ${address}`);
    }
    function inputError(message) {
        return Promise.reject(new Error(message));
    }
    var utils = {
        call,
        multicall,
        subgraphRequest,
        ipfsGet,
        getUrl,
        getJSON,
        sendTransaction,
        getScores,
        getVp,
        getEnsTextRecord,
        getSpaceUri,
        getEnsOwner,
        getSpaceController,
        getDelegatesBySpace,
        clone,
        sleep,
        getNumberWithOrdinal,
        voting,
        getProvider: getProvider$1,
        signMessage,
        getBlockNumber,
        Multicaller,
        getSnapshots,
        getHash,
        verify,
        validate,
        isStarknetAddress,
        isEvmAddress,
        getFormattedAddress,
        SNAPSHOT_SUBGRAPH_URL
    };

    var index = {
        Client: Client,
        Client712: Client,
        schemas,
        utils
    };

    return index;

}));
